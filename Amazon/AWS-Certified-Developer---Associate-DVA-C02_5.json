{"pageProps":{"questions":[{"id":"Ap8OBohS7adlVBJG9geg","choices":{"A":"Set up a cron job on an Amazon EC2 instance. Run a script every hour to query the table for changes and process the documents.","C":"Update the application to send a PutEvents request to Amazon EventBridge. Create an EventBridge rule to invoke an AWS Lambda function to process the documents.","D":"Update the application to synchronously process the documents directly after the DynamoDB write.","B":"Enable a DynamoDB stream on the table. Invoke an AWS Lambda function to process the documents."},"question_text":"A developer maintains a critical business application that uses Amazon DynamoDB as the primary data store. The DynamoDB table contains millions of documents and receives 30-60 requests each minute. The developer needs to perform processing in near-real time on the documents when they are added or updated in the DynamoDB table.\n\nHow can the developer implement this feature with the LEAST amount of change to the existing application code?","answer_ET":"B","timestamp":"2023-04-22 23:13:00","question_id":21,"discussion":[{"timestamp":"1698009180.0","poster":"MrTee","upvote_count":"10","content":"Selected Answer: B\nOption B is the best solution because it proposes enabling a DynamoDB stream on the table, which allows the developer to capture document-level changes in near-real time without modifying the application code. Then, the stream can be configured to invoke an AWS Lambda function to process the documents in near-real time. This solution requires minimal changes to the existing application code, and the Lambda function can be developed and deployed separately, enabling the developer to easily maintain and update it as needed.","comment_id":"877648"},{"poster":"loctong","timestamp":"1700216460.0","upvote_count":"5","comment_id":"899857","content":"Selected Answer: B\nTo implement near-real-time processing on documents added or updated in a DynamoDB table with the least amount of change to the existing application code, the developer should:\n\nB. Enable a DynamoDB stream on the table and invoke an AWS Lambda function to process the documents.\n\nEnabling a DynamoDB stream on the table allows capturing and processing of the changes made to the table in near-real-time. The stream provides an ordered sequence of item-level modifications (inserts, updates, and deletes) that can be consumed by other AWS services, such as AWS Lambda."},{"timestamp":"1735372260.0","content":"Selected Answer: B\nA DynamoDB stream is a feature that automatically tracks changes (inserts, updates, deletes) to items in a table.\nWhenever a document is added or updated, the change is recorded in the stream.\n\nA) Eliminated - Querying the DynamoDB table every hour introduces a delay, so it's not near-real-time.\n\nC) Eliminated - To use EventBridge, you would need to modify the application code to explicitly send events (PutEvents) every time a change is made in DynamoDB.\n\nD) Eliminated - require significant changes to the existing application code.","upvote_count":"1","poster":"sumanshu","comment_id":"1332837"},{"poster":"65703c1","timestamp":"1732325040.0","upvote_count":"1","comment_id":"1216064","content":"Selected Answer: B\nB is the correct answer."},{"comment_id":"1124017","poster":"SerialiDr","content":"Selected Answer: B\nGPT\nTo implement near-real-time processing of documents when they are added or updated in an Amazon DynamoDB table with the least amount of change to the existing application code, let's evaluate the options:\n\nA. Set up a cron job on an Amazon EC2 instance. Run a script every hour to query the table for changes and process the documents: This approach introduces additional complexity and is not near-real time. Running a script periodically to check for updates is inefficient and does not meet the requirement for immediate processing upon document addition or update.\n\nB. Enable a DynamoDB stream on the table. Invoke an AWS Lambda function to process the documents: This is the most efficient and least intrusive option. DynamoDB Streams capture changes to items in the DynamoDB table as they occur in near-real time and can trigger an AWS Lambda function automatically. This setup requires minimal changes to the existing application code, as the processing logic is moved to the Lambda function, which is triggered by the stream events.","upvote_count":"1","timestamp":"1721111280.0"}],"answer":"B","answers_community":["B (100%)"],"answer_description":"","answer_images":[],"unix_timestamp":1682197980,"question_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/107051-exam-aws-certified-developer-associate-dva-c02-topic-1/","topic":"1","isMC":true,"exam_id":24},{"id":"hiIt4GCzQn1V4Dd39rSa","choices":{"D":"Use the EC2 user data to create a database user. Provide the user name and password in environment variables to the application.","B":"Enable IAM authentication for the database. Create a database user for use with IAM authentication. Enable password rotation.","C":"Create a database user. Store the user name and password in an AWS Secrets Manager secret that has daily rotation enabled.","A":"Create a database user. Store the user name and password in an AWS Systems Manager Parameter Store secure string parameter. Enable rotation of the AWS Key Management Service (AWS KMS) key that is used to encrypt the parameter."},"question_text":"A developer is writing an application for a company. The application will be deployed on Amazon EC2 and will use an Amazon RDS for Microsoft SQL Server database. The company's security team requires that database credentials are rotated at least weekly.\n\nHow should the developer configure the database credentials for this application?","answer_ET":"C","timestamp":"2023-04-22 23:16:00","question_id":22,"discussion":[{"timestamp":"1682198160.0","poster":"MrTee","content":"Selected Answer: C\noption C: Create a database user. Store the user name and password in an AWS Secrets Manager secret that has daily rotation enabled. This will allow the developer to securely store the database credentials and automatically rotate them at least weekly to meet the company’s security requirements.","comment_id":"877651","upvote_count":"14"},{"poster":"sumanshu","upvote_count":"1","content":"Selected Answer: C\nIt can automatically rotate the credentials for supported databases\n\nA) Eliminated - it does not natively support automatic credential rotation for databases.","comment_id":"1332873","timestamp":"1735375140.0"},{"comment_id":"1261870","content":"Correct Answer should be A: This approach centralizes credential management and provides secure storage. Rotation can be scheduled weekly as required by the security team1.","upvote_count":"1","timestamp":"1722988920.0","poster":"Saurabh04"},{"poster":"65703c1","upvote_count":"1","timestamp":"1716420420.0","comment_id":"1216068","content":"Selected Answer: C\nC is the correct answer."},{"comment_id":"1124032","upvote_count":"2","timestamp":"1705395180.0","poster":"SerialiDr","content":"Selected Answer: C\nC. Create a database user. Store the user name and password in an AWS Secrets Manager secret that has daily rotation enabled: This is the correct solution. AWS Secrets Manager is specifically designed to handle secrets like database credentials, including their rotation. You can configure Secrets Manager to automatically rotate the credentials as frequently as needed (e.g., daily or weekly), which aligns with the security team's requirements."},{"comment_id":"971110","timestamp":"1691066580.0","content":"Selected Answer: C\nrotation key & cross account key is feature of Secret Manager\nhttps://tutorialsdojo.com/aws-secrets-manager-vs-systems-manager-parameter-store/","upvote_count":"2","poster":"jipark"},{"content":"Selected Answer: C\nhttps://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html\n\nhttps://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_turn-on-for-other.html\n\nhttps://docs.aws.amazon.com/secretsmanager/latest/userguide/rotate-secrets_schedule.html","poster":"Baba_Eni","comment_id":"925361","timestamp":"1686931560.0","upvote_count":"3"},{"poster":"loctong","content":"Selected Answer: C\nthe keyword is \"rotation\"","timestamp":"1684318740.0","upvote_count":"4","comment_id":"899981"}],"answers_community":["C (100%)"],"answer":"C","answer_description":"","answer_images":[],"unix_timestamp":1682198160,"question_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/107052-exam-aws-certified-developer-associate-dva-c02-topic-1/","topic":"1","exam_id":24,"isMC":true},{"id":"VHrm3VifVb8EYiVCsyT1","discussion":[{"timestamp":"1682198640.0","poster":"MrTee","comments":[{"content":"How is D viable when the question doesn't mention Elasticache? You're making an assumption that adding a service/configuration is what's being asked","upvote_count":"1","poster":"akmv2","comment_id":"1184426","timestamp":"1711577640.0"}],"upvote_count":"22","comment_id":"877652","content":"Selected Answer: DE\nOption D because by storing the client status in the cache, the backend service can quickly access the client status data without the need to query the database or perform other time-consuming operations.\nOption E. Implement $connect and $disconnect routes in the backend service: $connect and $disconnect are the reserved routes in WebSocket APIs, which are automatically called by API Gateway whenever a client connects or disconnects from the WebSocket. By implementing these routes in the backend service, the developer can track and manage the client status, including identifying and removing the client when needed."},{"content":"Selected Answer: CE\nC => https://docs.aws.amazon.com/ko_kr/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html\n\nE => https://docs.aws.amazon.com/ko_kr/apigateway/latest/developerguide/apigateway-websocket-api-route-keys-connect-disconnect.html","poster":"catcatpunch","upvote_count":"10","comment_id":"910120","timestamp":"1685439840.0"},{"comments":[{"poster":"mooncake1","content":"Can't believe DE is 50%.. this q is not even hard","timestamp":"1737772860.0","upvote_count":"1","comment_id":"1346304"}],"poster":"mooncake1","timestamp":"1737772500.0","content":"Selected Answer: CE\nDE does not make the developer disconnect","upvote_count":"1","comment_id":"1346303"},{"comment_id":"1336885","upvote_count":"1","timestamp":"1736113260.0","poster":"Arad","content":"Selected Answer: CE\nCE is correct."},{"content":"Selected Answer: DE\nA) Eliminated - Switching to HTTP APIs would eliminate the WebSocket capability entirely,\nB) Eliminated - REST APIs are also unsuitable for WebSocket connections, as they are designed for request-response interactions rather than persistent, real-time communication.\n\nBoth C&E and D&E - seems correct\n\nC) - API Gateway provides a callback URL that your backend service can use to invoke the POST /connections/{connectionId} API with the disconnect command.\n\nD) \n\nE) Correct - The $connect route triggers when a client establishes a WebSocket connection. The $disconnect route triggers when a client disconnects from the WebSocket","timestamp":"1735384800.0","comments":[{"content":"C) Callback URL allows you to explicitly disconnect clients.","comments":[{"content":"The two requirements in the question are:\n\nIdentify a client that keeps connecting and disconnecting:\n\nThis requires tracking client connections and disconnections over time.\nTo achieve this, the backend needs a mechanism to log or store connection events for each client, which can then be analyzed to identify repeated connection patterns.\nRemove the client:\n\nOnce the client is identified as problematic (e.g., frequent connects/disconnects), the backend needs to remove the client. This is achieved using the WebSocket callback URL to explicitly disconnect the client.","comment_id":"1332923","timestamp":"1735385100.0","poster":"sumanshu","upvote_count":"1","comments":[{"timestamp":"1735385160.0","comment_id":"1332924","poster":"sumanshu","upvote_count":"1","content":"D is critical for tracking client activity.\nE is required to capture connection and disconnection events.\nC provides the functionality to disconnect a client once identified.\nThus, the correct combination is C, D, and E.","comments":[{"content":"C. Use the callback URL to disconnect the client from the backend service\n\nThis is essential for removing the client. Without it, the backend has no way to forcibly disconnect a problematic client.\n✅ Must-have.\nD. Add code to track the client status in Amazon ElastiCache in the backend service\n\nTracking client connection/disconnection behavior is critical to identifying problematic clients. ElastiCache is a highly suitable tool for storing connection data efficiently.\n✅ Must-have.\nE. Implement $connect and $disconnect routes in the backend service\n\nWhile these routes are necessary for detecting client connections and disconnections, this could be seen as implicit in the implementation of D (since tracking client status assumes these routes are already used).\n⚠️ Optional, depending on how the question is interpreted.","upvote_count":"1","timestamp":"1735385220.0","poster":"sumanshu","comment_id":"1332925"}]}]}],"upvote_count":"1","poster":"sumanshu","timestamp":"1735384980.0","comment_id":"1332922"}],"comment_id":"1332920","upvote_count":"1","poster":"sumanshu"},{"timestamp":"1722989280.0","comment_id":"1261872","upvote_count":"1","content":"Option DE: Implement $connect and $disconnect Routes:\nAdd $connect and $disconnect routes to your WebSocket API.\nThese routes handle client connections and disconnections.\nWhen a client connects ($connect), a Lambda function can add the connection ID to a data store (e.g., DynamoDB).\nWhen a client disconnects ($disconnect), another Lambda function can remove the connection ID from the data store.\nTrack Client Status:\nUse Amazon ElastiCache (e.g., Redis) to track client status.\nStore relevant information (e.g., client IDs, connection timestamps) in ElastiCache.\nThis allows you to identify clients that connect and disconnect","poster":"Saurabh04","comments":[{"content":"What about \"the ability to remove the client\"? for that it needs to use the callback function","poster":"9d8dd9c","upvote_count":"1","timestamp":"1729937460.0","comment_id":"1303224"}]},{"poster":"tomchandler077","timestamp":"1721239080.0","comment_id":"1249868","upvote_count":"1","content":"Option D ---> CORRECT Because, tracking the client's connection status using ElastiCache could help in identifying clients with erratic connection patterns and managing stateful information in a distributed environment, which is useful for WebSocket applications.\n\nAlso Option E CORRECT. These routes handle connection and disconnection events."},{"timestamp":"1718596080.0","comment_id":"1231696","comments":[{"content":"Do you remember the answers?","upvote_count":"1","comment_id":"1272185","poster":"frangesk","timestamp":"1724597880.0"}],"upvote_count":"2","content":"This appear at 17 Jun exam","poster":"tsangckl"},{"upvote_count":"1","content":"Selected Answer: DE\nDE is the correct answer.","timestamp":"1716420600.0","poster":"65703c1","comment_id":"1216072"},{"content":"Selected Answer: DE\nE. Implement $connect and $disconnect routes in the backend service.\n\nBy implementing $connect and $disconnect routes, the backend service can capture when clients connect and disconnect from the WebSocket connection. This allows the application to track client status effectively.\nD. Add code to track the client status in Amazon ElastiCache in the backend service.","comment_id":"1175960","upvote_count":"1","timestamp":"1710694740.0","poster":"41eb566"},{"poster":"maurice2005","timestamp":"1710456120.0","content":"Selected Answer: CE\nYour backend service can use the following WebSocket connection HTTP requests to send a callback message to a connected client, get connection information, or disconnect the client\n\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html","upvote_count":"1","comment_id":"1173793"},{"comment_id":"1162291","upvote_count":"2","content":"Selected Answer: DE\nWhen a client connects to your WebSocket API, the $connect route is invoked, and when they disconnect, the $disconnect route is invoked. You can use these routes to track the state of each client. By maintaining a record of each client's connections and disconnections, possibly in a database or an in-memory data store like Amazon ElastiCache, you can identify clients that frequently connect and disconnect.\n\nHence, the combination of changes that should be made to the application to meet these requirements includes:\n\nImplement $connect and $disconnect routes in the backend service (Option E).\nAdd code to track the client status in Amazon ElastiCache in the backend service (Option D).","timestamp":"1709190960.0","poster":"SerialiDr"},{"upvote_count":"1","timestamp":"1708853640.0","comment_id":"1158516","poster":"KarBiswa","content":"Selected Answer: CE\nC option - Supports https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html\nE option supports - https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-route-keys-connect-disconnect.html"},{"timestamp":"1706687580.0","comment_id":"1136510","poster":"Ashwinvdm22","upvote_count":"2","content":"Selected Answer: CD\nC: https://docs.aws.amazon.com/ko_kr/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html\n\nD: You need a way to track which user is continuously reconnecting. That is why option D is so important because without it you will just be disconnecting every user that tries to connect cause then how will you know which user is the \"problem\" user. Note that you don't need the $disconnect endpoint to disconnect a client if you use option C. So CD is the only combination to solve the problem."},{"poster":"Abdullah22","comment_id":"1128055","timestamp":"1705862040.0","upvote_count":"1","content":"going with DE"},{"timestamp":"1705395900.0","content":"Selected Answer: CD\nC. Use the callback URL to disconnect the client from the backend service: The callback URL can be used to send messages to connected clients or to disconnect them from the WebSocket connection. This approach allows the backend service to programmatically disconnect a client, which is useful for managing clients that frequently connect and disconnect.\n\nD. Add code to track the client status in Amazon ElastiCache in the backend service: Implementing client status tracking in the backend service, possibly using a fast, in-memory data store like Amazon ElastiCache, allows the application to monitor and record the behavior of each client. This can be used to identify clients with frequent connect/disconnect patterns.","comment_id":"1124037","poster":"SerialiDr","upvote_count":"1"},{"timestamp":"1703490960.0","content":"Selected Answer: DE\nD. Add code to track the client status in Amazon ElastiCache in the backend service. \nE. Implement $connect and $disconnect routes in the backend service.","comment_id":"1105096","poster":"a_win","upvote_count":"1"},{"upvote_count":"1","comment_id":"1087792","timestamp":"1701710100.0","poster":"LR2023","content":"Selected Answer: CE\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html"},{"poster":"Balliache520505","comment_id":"1006057","content":"Selected Answer: CE\nI go with C and E.\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-route-keys-connect-disconnect.html\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html","upvote_count":"2","timestamp":"1694556840.0"},{"upvote_count":"3","comment_id":"988567","content":"Selected Answer: DE\nD. Tracking Client Status: To identify and manage clients that connect and disconnect from the WebSocket connection, you need a way to persist this information. Amazon ElastiCache is a managed in-memory caching service that can be used to store this kind of data. By adding code to your backend service to track client status in ElastiCache, you can keep a record of client connections and disconnections.\n\nE.\nconnectanddisconnect Routes: In API Gateway WebSocket APIs, the\nconnectanddisconnect routes are special routes that are automatically triggered when a client connects and disconnects from the WebSocket connection. By implementing these routes in your backend service, you can capture the client information and update the client status in the ElastiCache, thus achieving the requirement of identifying clients and managing their connections.","timestamp":"1692814200.0","poster":"love777"},{"poster":"Phongsanth","upvote_count":"4","content":"Selected Answer: CE\nOption C and E is my preferable choice. \nwhy do we have to use option D in case we apply $connect and $disconnect already in option E ?\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-route-keys-connect-disconnect.html","timestamp":"1688005200.0","comment_id":"937385"},{"timestamp":"1684708560.0","comment_id":"903562","content":"Selected Answer: CE\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html","poster":"delak","upvote_count":"4"},{"poster":"loctong","upvote_count":"4","comment_id":"899876","timestamp":"1684312680.0","content":"Selected Answer: CE\nImplementing a callback URL allows the backend service to initiate disconnection from the WebSocket connection."}],"question_images":[],"answer_images":[],"timestamp":"2023-04-22 23:24:00","question_id":23,"answers_community":["DE (49%)","CE (46%)","5%"],"choices":{"E":"Implement $connect and $disconnect routes in the backend service.","D":"Add code to track the client status in Amazon ElastiCache in the backend service.","B":"Switch to REST APIs in the backend service.","A":"Switch to HTTP APIs in the backend service.","C":"Use the callback URL to disconnect the client from the backend service."},"topic":"1","unix_timestamp":1682198640,"isMC":true,"answer_description":"","question_text":"A real-time messaging application uses Amazon API Gateway WebSocket APIs with backend HTTP service. A developer needs to build a feature in the application to identify a client that keeps connecting to and disconnecting from the WebSocket connection. The developer also needs the ability to remove the client.\n\nWhich combination of changes should the developer make to the application to meet these requirements? (Choose two.)","url":"https://www.examtopics.com/discussions/amazon/view/107053-exam-aws-certified-developer-associate-dva-c02-topic-1/","answer":"DE","answer_ET":"DE","exam_id":24},{"id":"SvYkjPnCHRP5d0tiRfX2","choices":{"A":"Use Amazon Cognito user pools to manage user accounts. Create an Amazon Cognito user pool authorizer in API Gateway to control access to the API. Use the Lambda function to store the photos and details in the DynamoDB table. Retrieve previously uploaded photos directly from the DynamoDB table.","D":"Create a users table in DynamoDB. Use the table to manage user accounts. Create a Lambda authorizer that validates user credentials against the users table. Integrate the Lambda authorizer with API Gateway to control access to the API. Use the Lambda function to store the photos in Amazon S3. Store the object's S3 key as par of the photo details in the DynamoDB table. Retrieve previously uploaded photos by querying DynamoDB for the S3 key.","B":"Use Amazon Cognito user pools to manage user accounts. Create an Amazon Cognito user pool authorizer in API Gateway to control access to the API. Use the Lambda function to store the photos in Amazon S3. Store the object's S3 key as part of the photo details in the DynamoDB table. Retrieve previously uploaded photos by querying DynamoDB for the S3 key.","C":"Create an IAM user for each user of the application during the sign-up process. Use IAM authentication to access the API Gateway API. Use the Lambda function to store the photos in Amazon S3. Store the object's S3 key as part of the photo details in the DynamoDB table. Retrieve previously uploaded photos by querying DynamoDB for the S3 key."},"answer_ET":"B","answer_description":"","question_images":[],"isMC":true,"question_id":24,"discussion":[{"content":"Selected Answer: B\nB\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-integrate-with-cognito.html\nhttps://aws.amazon.com/blogs/big-data/building-and-maintaining-an-amazon-s3-metadata-index-without-servers/","comment_id":"845551","poster":"Untamables","upvote_count":"12","timestamp":"1679376900.0"},{"poster":"jayvarma","content":"As it is not a good practice to create a new IAM user for each user that signs up for the application, Option C is ruled out. Amazon Cognito user pools primary purpose is to authenticate and authorize web and mobile applications.\n\nAs the solution requires the application to store images that are between 300KB and 5MB in size, The idea of storing the images in the DynamoDB is ruled out because the object size in a dynamoDb table cannot exceed 400kb. The ideal solution for this problem would be to store the photos in S3 and store the object's key in the DynamoDB table.\n\nSo, Option B is the right answer","comment_id":"976284","upvote_count":"6","timestamp":"1691559600.0"},{"content":"Selected Answer: B\nA) Eliminated - DynamoDB is not optimized for large binary objects\nC) Eliminated - Creating IAM users for each application user is not scalable\nD) Eliminated - Using a custom table and Lambda authorizer for user authentication increases operational complexity.","poster":"sumanshu","comment_id":"1329571","timestamp":"1734714420.0","upvote_count":"1"},{"timestamp":"1733966160.0","comment_id":"1325328","upvote_count":"1","poster":"trieudo","content":"Selected Answer: B\nkeyword: LEAST operational overhead, size from 300 KB to 5 MB.\n\n==> discard A: item limit upto 400kB only\n==> discard C: each user per IAM user --> really bad practice\n==> discard D: violate \"LEAST operational overhead\", you must build a lot (wriete lambda function), result in manage it alot \n\nB is best choice to use services: s3, dynamoDB, Amazon Cognito with maximum automatic build-in feature and least effort for operation"},{"poster":"Saudis","upvote_count":"1","timestamp":"1730068980.0","comment_id":"1303749","content":"The difference between B and C the key word create usr > cognito"},{"timestamp":"1716298380.0","content":"Selected Answer: B\nB is the correct answer.","comment_id":"1214977","upvote_count":"1","poster":"65703c1"},{"comment_id":"1191721","upvote_count":"1","poster":"badsati","content":"Selected Answer: B\nNo question, Answer is B","timestamp":"1712597400.0"},{"comment_id":"1165605","poster":"TheFivePips","content":"Selected Answer: B\nDefinitly do not add all users manually, so that rules out C and D. \nYou wouldnt use DynamoDB to store the photos because DynamoDB limits the size of each item that you store in a table to 400 KB. So that rules out A","timestamp":"1709560380.0","upvote_count":"2"},{"content":"Selected Answer: B\nIt's easier if you leverage all pros of Amazon Cognito you don't need creating a IAM user by employeer","comment_id":"1072027","timestamp":"1700092860.0","poster":"leonardoliveros","upvote_count":"1"},{"poster":"ihta_2031","comment_id":"857980","timestamp":"1680357240.0","content":"Selected Answer: B\nCognito,\nItem size in dynamodb is less than this scenario","upvote_count":"4"},{"content":"Selected Answer: B\nB is the most valid solution.\nA nearest, but invalid, because you cannot store object in Dynamo.","poster":"pratchatcap","comment_id":"851736","upvote_count":"3","timestamp":"1679894460.0"}],"topic":"1","question_text":"A developer is creating an application that will give users the ability to store photos from their cellphones in the cloud. The application needs to support tens of thousands of users. The application uses an Amazon API Gateway REST API that is integrated with AWS Lambda functions to process the photos. The application stores details about the photos in Amazon DynamoDB.\nUsers need to create an account to access the application. In the application, users must be able to upload photos and retrieve previously uploaded photos. The photos will range in size from 300 KB to 5 MB.\nWhich solution will meet these requirements with the LEAST operational overhead?","url":"https://www.examtopics.com/discussions/amazon/view/103439-exam-aws-certified-developer-associate-dva-c02-topic-1/","exam_id":24,"answers_community":["B (100%)"],"timestamp":"2023-03-21 06:35:00","answer_images":[],"unix_timestamp":1679376900,"answer":"B"},{"id":"HLXTO2MvHDAfVBzyB4C0","exam_id":24,"choices":{"B":"Amazon S3","C":"AWS CodeCommit","D":"AWS Cloud9","A":"AWS CodeBuild"},"question_text":"A developer has written code for an application and wants to share it with other developers on the team to receive feedback. The shared application code needs to be stored long-term with multiple versions and batch change tracking.\n\nWhich AWS service should the developer use?","answer_ET":"C","topic":"1","answer_description":"","answers_community":["C (100%)"],"url":"https://www.examtopics.com/discussions/amazon/view/107054-exam-aws-certified-developer-associate-dva-c02-topic-1/","question_images":[],"isMC":true,"discussion":[{"upvote_count":"7","timestamp":"1698009960.0","poster":"MrTee","comment_id":"877654","content":"Selected Answer: C\noption C, AWS CodeCommit."},{"poster":"sumanshu","upvote_count":"1","content":"Selected Answer: C\nAWS CodeCommit is specifically built for managing source code.","comment_id":"1332927","timestamp":"1735385940.0"},{"content":"Selected Answer: C\nC is the correct answer.","upvote_count":"1","poster":"65703c1","timestamp":"1732325460.0","comment_id":"1216074"},{"upvote_count":"1","poster":"LR2023","timestamp":"1717514160.0","content":"Selected Answer: C\nCode commit is a code source repository","comment_id":"1087794"},{"poster":"loctong","upvote_count":"3","timestamp":"1700217540.0","content":"Selected Answer: C\nmust be C","comment_id":"899877"},{"content":"it's C","timestamp":"1700016780.0","upvote_count":"2","comment_id":"897965","poster":"delak"}],"question_id":25,"answer_images":[],"timestamp":"2023-04-22 23:26:00","unix_timestamp":1682198760,"answer":"C"}],"exam":{"isMCOnly":true,"numberOfQuestions":551,"name":"AWS Certified Developer - Associate DVA-C02","lastUpdated":"11 Apr 2025","isBeta":false,"isImplemented":true,"provider":"Amazon","id":24},"currentPage":5},"__N_SSP":true}