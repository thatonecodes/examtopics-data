{"pageProps":{"questions":[{"id":"gINWuKWyXJgC7EeJ70lc","choices":{"F":"Create an additional public subnet in a different Availability Zone in the website VPC.","A":"Place the Tomcat server in an Auto Scaling group with multiple EC2 instances behind an Application Load Balancer.","D":"Provision two NAT gateways in the database VPC.","E":"Move the Tomcat server to the database VPC.","B":"Provision an additional VPC peering connection.","C":"Migrate the MySQL database to Amazon Aurora with one Aurora Replica."},"answer_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/132989-exam-aws-certified-solutions-architect-professional-sap-c02/","answer":"ACF","answer_ET":"ACF","exam_id":33,"question_images":[],"topic":"1","unix_timestamp":1707185940,"question_text":"A company runs an application in the cloud that consists of a database and a website. Users can post data to the website, have the data processed, and have the data sent back to them in an email. Data is stored in a MySQL database running on an Amazon EC2 instance. The database is running in a VPC with two private subnets. The website is running on Apache Tomcat in a single EC2 instance in a different VPC with one public subnet. There is a single VPC peering connection between the database and website VPC.\n\nThe website has suffered several outages during the last month due to high traffic.\n\nWhich actions should a solutions architect take to increase the reliability of the application? (Choose three.)","isMC":true,"timestamp":"2024-02-06 03:19:00","answers_community":["ACF (100%)"],"discussion":[{"upvote_count":"7","timestamp":"1707279660.0","poster":"kejam","comment_id":"1142941","content":"Selected Answer: ACF\nAnswer: ACF\nThese increase reliability of the app.\nF. Create an additional public subnet in a different Availability Zone in the website VPC.\nA. Place the Tomcat server in an Auto Scaling group with multiple EC2 instances behind an Application Load Balancer.\nC. Migrate the MySQL database to Amazon Aurora with one Aurora Replica.\n\nThese do not.\nB. Provision an additional VPC peering connection.\nD. Provision two NAT gateways in the database VPC.\nE. Move the Tomcat server to the database VPC. (good idea for security, but we're after reliability)"},{"comment_id":"1310258","timestamp":"1731351480.0","content":"ACF \nThese three options improve the reliability and scalability of the application by:\nReducing the likelihood of single points of failure\nImproving data availability and durability\nProviding an additional layer of redundancy","poster":"AzureDP900","upvote_count":"1"},{"content":"Selected Answer: ACF\nOption A, C, F","poster":"career360guru","timestamp":"1710020640.0","upvote_count":"1","comment_id":"1169863"},{"content":"Selected Answer: ACF\nYou cant move Ec2 directly to another VPC need to migrate between VPCs","comment_id":"1152639","upvote_count":"2","timestamp":"1708183020.0","poster":"sat2008"},{"timestamp":"1707400500.0","content":"Selected Answer: ACF\nagree ACF","comment_id":"1144518","upvote_count":"2","poster":"arberod"},{"upvote_count":"2","poster":"HunkyBunky","timestamp":"1707369120.0","content":"Selected Answer: ACF\nB - not correct, because will not give us any benefit\nD - not correct, because will not give us any benefit\nE - looks not correct, because if we move website into database VPC - this VPC don't contains any public subnet, so it will be inaccessible","comment_id":"1144097"},{"upvote_count":"4","timestamp":"1707185940.0","poster":"alexis123456","content":"correct answer is ACF","comment_id":"1141707"}],"answer_description":"","question_id":376},{"id":"0avIb9DFmpbUTQrTGh3R","question_id":377,"answer_images":[],"answer_description":"","timestamp":"2024-02-05 17:15:00","isMC":true,"question_text":"A retail company is operating its ecommerce application on AWS. The application runs on Amazon EC2 instances behind an Application Load Balancer (ALB). The company uses an Amazon RDS DB instance as the database backend. Amazon CloudFront is configured with one origin that points to the ALB. Static content is cached. Amazon Route 53 is used to host all public zones.\n\nAfter an update of the application, the ALB occasionally returns a 502 status code (Bad Gateway) error. The root cause is malformed HTTP headers that are returned to the ALB. The webpage returns successfully when a solutions architect reloads the webpage immediately after the error occurs.\n\nWhile the company is working on the problem, the solutions architect needs to provide a custom error page instead of the standard ALB error page to visitors.\n\nWhich combination of steps will meet this requirement with the LEAST amount of operational overhead? (Choose two.)","url":"https://www.examtopics.com/discussions/amazon/view/132872-exam-aws-certified-solutions-architect-professional-sap-c02/","answer_ET":"AE","unix_timestamp":1707149700,"discussion":[{"content":"Selected Answer: AE\nsame question as page1 question 10","comment_id":"1180326","poster":"pangchn","timestamp":"1711141320.0","upvote_count":"5"},{"comment_id":"1310255","upvote_count":"1","timestamp":"1731351180.0","poster":"AzureDP900","content":"Option A allows for a simple and quick solution by hosting a custom error page on Amazon S3. No changes are required to Route 53, CloudFront, or the ALB.\nOption E uses CloudFront to display a custom error page without modifying any other resources.\nBoth options A and E meet the requirement with minimal operational overhead, so choosing both of them is correct!"},{"content":"Selected Answer: AE\nA and E","timestamp":"1710021000.0","comment_id":"1169867","poster":"career360guru","upvote_count":"1"},{"comment_id":"1144523","poster":"arberod","content":"Selected Answer: AE\nit is AE","timestamp":"1707400680.0","upvote_count":"2"},{"upvote_count":"3","content":"Selected Answer: AE\nAnswer: AE\nAll other answers won't help for transient failures\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/GeneratingCustomErrorResponses.html#custom-error-pages-procedure","comment_id":"1142944","timestamp":"1707280020.0","poster":"kejam"},{"comment_id":"1142878","poster":"master9","content":"Selected Answer: AE\nanswer is A and E","upvote_count":"1","timestamp":"1707270300.0"},{"upvote_count":"3","timestamp":"1707186360.0","comment_id":"1141709","poster":"alexis123456","content":"correct answer is A and E"},{"upvote_count":"1","comment_id":"1141267","poster":"duriselvan","content":"A,B, ans","timestamp":"1707149700.0"}],"question_images":[],"answers_community":["AE (100%)"],"topic":"1","exam_id":33,"choices":{"B":"Create an Amazon CloudWatch alarm to invoke an AWS Lambda function if the ALB health check response Target.FailedHealthChecks is greater than 0. Configure the Lambda function to modify the forwarding rule at the ALB to point to a publicly accessible web server.","C":"Modify the existing Amazon Route 53 records by adding health checks. Configure a fallback target if the health check fails. Modify DNS records to point to a publicly accessible webpage.","D":"Create an Amazon CloudWatch alarm to invoke an AWS Lambda function if the ALB health check response Elb.InternalError is greater than 0. Configure the Lambda function to modify the forwarding rule at the ALB to point to a public accessible web server.","A":"Create an Amazon S3 bucket. Configure the S3 bucket to host a static webpage. Upload the custom error pages to Amazon S3.","E":"Add a custom error response by configuring a CloudFront custom error page. Modify DNS records to point to a publicly accessible web page."},"answer":"AE"},{"id":"WELnOLjq2HxmuGFgTcRB","url":"https://www.examtopics.com/discussions/amazon/view/132990-exam-aws-certified-solutions-architect-professional-sap-c02/","answers_community":["AB (71%)","B (29%)"],"discussion":[{"poster":"juanife","timestamp":"1739364000.0","comment_id":"1355600","upvote_count":"1","content":"Selected Answer: AB\nI do not know why AWS writes its questions so badly. The question asks for a conjuntion answer and then they give us TOTALLY different answers that do not work together. For me, it's B without any doubts since AWS DMS allows us to migrate while reducing the interrumption on the source to be migrated and A could be an option as well but it obviously allows us to move certain amount of data until a certain point of time."},{"comment_id":"1349067","upvote_count":"2","poster":"GabrielShiao","content":"Selected Answer: AB\nThe only correct answer is B, Selecting A is to meet the question. A is not right because it will lose a certain period of data.","timestamp":"1738242780.0"},{"comment_id":"1229164","poster":"trungtd","content":"Selected Answer: B\nA is unnecessary","upvote_count":"2","timestamp":"1718197620.0"},{"timestamp":"1711020720.0","content":"Selected Answer: AB\nThe question says to choose two alternatives - but it doesn't say that they must work in conjunction. I.e., separate answers that stand on their own.\n\nB is best, but A works too. Thus A+B.","poster":"Dgix","upvote_count":"2","comment_id":"1179158"},{"timestamp":"1710021180.0","poster":"career360guru","comment_id":"1169870","upvote_count":"1","content":"Selected Answer: AB\nA and B both are valid options."},{"upvote_count":"3","timestamp":"1709493600.0","poster":"bjexamprep","content":"Selected Answer: B\nThis question should have a single answer. A and C are both using a kind of back/restore strategy, and they cannot capture the changes happens during the restore stage. D is using Application Migration Service, which is not suitable for DB migration. Only B can do this job.","comment_id":"1165026"},{"poster":"07c2d2a","upvote_count":"1","comment_id":"1144083","timestamp":"1707368460.0","content":"This really should be a single answer, or it should say which solutions would meet this requirement. But yes A and B are both possible."},{"upvote_count":"3","content":"Selected Answer: AB\nI guess that the right answer - A \\ B\nA - Snapshots can be easily shared cross AWS accounts\nB - With AWS DMS - you can sync databases\nC - Out because - as I understood - you can't just SHARE AWS Backup with another AWS Account, you need to setup cross account AWS backup to store backups in both accounts\nD - Out because AWS Application migration service - can't migrate RDS databases","comment_id":"1143172","poster":"HunkyBunky","timestamp":"1707299760.0"},{"content":"Selected Answer: AB\nAnswer AB: A is unnecessary, we really only need B. It works either way.\nhttps://aws.amazon.com/blogs/database/cross-account-amazon-aurora-postgresql-and-amazon-rds-for-postgresql-migration-with-reduced-downtime-using-aws-dms/","upvote_count":"2","poster":"kejam","timestamp":"1707280440.0","comment_id":"1142945"},{"upvote_count":"1","poster":"master9","timestamp":"1707270420.0","content":"Selected Answer: AB\nhave to us DMS or snapshot for DB migration","comment_id":"1142880"},{"timestamp":"1707186540.0","comment_id":"1141710","poster":"alexis123456","content":"correct answer is A and B","upvote_count":"3"}],"choices":{"D":"Create an Aurora DB cluster in the new AWS account. Use AWS Application Migration Service to migrate data between the two Aurora DB clusters.","B":"Create an Aurora DB cluster in the new AWS account. Use AWS Database Migration Service (AWS DMS) to migrate data between the two Aurora DB clusters.","A":"Take a snapshot of the existing Aurora database. Share the snapshot with the new AWS account. Create an Aurora DB cluster in the new account from the snapshot.","C":"Use AWS Backup to share an Aurora database backup from the existing AWS account to the new AWS account. Create an Aurora DB cluster in the new AWS account from the snapshot."},"question_text":"A company wants to migrate an Amazon Aurora MySQL DB cluster from an existing AWS account to a new AWS account in the same AWS Region. Both accounts are members of the same organization in AWS Organizations.\n\nThe company must minimize database service interruption before the company performs DNS cutover to the new database.\n\nWhich migration strategy will meet this requirement? (Choose two.)","answer_description":"","timestamp":"2024-02-06 03:29:00","exam_id":33,"answer":"AB","isMC":true,"answer_ET":"AB","topic":"1","answer_images":[],"question_id":378,"question_images":[],"unix_timestamp":1707186540},{"id":"oi0spM278FgjuDdAY1jw","question_text":"A company has 10 accounts that are part of an organization in AWS Organizations. AWS Config is configured in each account. All accounts belong to either the Prod OU or the NonProd OU.\n\nThe company has set up an Amazon EventBridge rule in each AWS account to notify an Amazon Simple Notification Service (Amazon SNS) topic when an Amazon EC2 security group inbound rule is created with 0.0.0.0/0 as the source. The company’s security team is subscribed to the SNS topic.\n\nFor all accounts in the NonProd OU, the security team needs to remove the ability to create a security group inbound rule that includes 0.0.0.0/0 as the source.\n\nWhich solution will meet this requirement with the LEAST operational overhead?","exam_id":33,"choices":{"D":"Configure an SCP to deny the ec2:AuthorizeSecurityGroupIngress action when the value of the aws:SourceIp condition key is 0.0.0.0/0. Apply the SCP to the NonProd OU.","B":"Add the vpc-sg-open-only-to-authorized-ports AWS Config managed rule to the NonProd OU.","C":"Configure an SCP to allow the ec2:AuthorizeSecurityGroupIngress action when the value of the aws:SourceIp condition key is not 0.0.0.0/0. Apply the SCP to the NonProd OU.","A":"Modify the EventBridge rule to invoke an AWS Lambda function to remove the security group inbound rule and to publish to the SNS topic. Deploy the updated rule to the NonProd OU."},"unix_timestamp":1673644800,"answer_description":"","question_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/95092-exam-aws-certified-solutions-architect-professional-sap-c02/","answer_images":[],"answer":"D","answer_ET":"D","timestamp":"2023-01-13 22:20:00","question_id":379,"discussion":[{"poster":"masetromain","timestamp":"1673644800.0","content":"Selected Answer: D\nThe solution that meets this requirement with the LEAST operational overhead is D. Configuring an SCP to deny the ec2:AuthorizeSecurityGroupIngress action when the value of the aws:SourceIp condition key is 0.0.0.0/0, and applying the SCP to the NonProd OU. This solution would prevent the security group inbound rule from being created in the first place and will not require any additional steps or actions to be taken in order to remove the rule. This is less operationally intensive than modifying the EventBridge rule to invoke an AWS Lambda function, adding a Config rule or allowing the ec2:AuthorizeSecurityGroupIngress action with a specific IP.","upvote_count":"52","comments":[{"upvote_count":"6","timestamp":"1673644860.0","comments":[{"content":"the answer can't be C or D because aws:SourceIp condition key don't exist with SCP.\nSo answer is A","comment_id":"903148","comments":[{"poster":"mifune","timestamp":"1713799440.0","content":"You mean something like this? It's from the AWS portal...\n\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": {\n \"Effect\": \"Deny\",\n \"Action\": \"*\",\n \"Resource\": \"*\",\n \"Condition\": {\n \"NotIpAddress\": {\n \"aws:SourceIp\": [\n \"192.0.2.0/24\",\n \"203.0.113.0/24\"\n ]\n }\n }\n }\n}","comment_id":"1200249","upvote_count":"4"},{"poster":"b3llman","upvote_count":"4","comment_id":"976094","content":"have you actually tested it? if you haven't, please do it and then comment.","timestamp":"1691537820.0"}],"upvote_count":"4","poster":"MikelH93","timestamp":"1684669260.0"},{"comment_id":"1074518","poster":"aokaddaoc","upvote_count":"2","timestamp":"1700381460.0","content":"I think the reason why C is wrong is not because C does not meet the requirement but simply because it is too strong: All users can do is to set ingress rule in SG and all other actions are all blocked. Both C and D results the same which users can no longer able to open port to 0.0.0.0/0, but D is more precise without blocking other actions."}],"poster":"masetromain","comment_id":"774866","content":"Option C does not meet the requirement that the security team needs to remove the ability to create a security group inbound rule that includes 0.0.0.0/0 as the source. It only allows the ec2:AuthorizeSecurityGroupIngress action when the value of the aws:SourceIp condition key is not 0.0.0.0/0. It does not prevent the creation of a security group inbound rule that includes 0.0.0.0/0 as the source, it only allows for the ingress action on non-0.0.0.0/0 IPs.\nOption D is the best solution as it denies the ec2:AuthorizeSecurityGroupIngress action when the value of the aws:SourceIp condition key is 0.0.0.0/0. This will prevent the creation of any security group inbound rule that includes 0.0.0.0/0 as the source."}],"comment_id":"774865"},{"upvote_count":"34","comments":[{"timestamp":"1738063140.0","poster":"tgv","content":"Tested myself, but this blocks any attempt to create an ingress rule - not only ones that have 0.0.0.0/0 as a source. \n\naws:SourceIp checks for the IP address of the requester\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourceip\n\nWith these options, I think the only option that still stands is [A[. \nI don't like it because it adds management overhead and it's not preventive - it's reactive. But it seems like the only one which actually performs the task it was asked to perform.","upvote_count":"1","comment_id":"1347855"},{"upvote_count":"6","timestamp":"1691537760.0","comment_id":"976092","poster":"b3llman","content":"Tested and confirmed!"},{"comments":[{"timestamp":"1693525740.0","upvote_count":"1","comments":[{"poster":"vn_thanhtung","timestamp":"1693525920.0","upvote_count":"1","content":"Sorry typo.\nyou think C can \"remove the ability to create\" crazy ? SCP allow all by default","comment_id":"995549"}],"poster":"vn_thanhtung","comment_id":"995548","content":"For all accounts in the NonProd OU, the security team needs to remove the ability to create a security group inbound rule that includes 0.0.0.0/0 as the source.\nyou think C can \"remove the ability to create\" carry ? SCP allow all by default?"}],"comment_id":"987838","upvote_count":"1","content":"I guess proving D works doesn't show C is incorrect. I feel that both C and D could be correct because as CuteRunRun mentioned, the SCP deny is default.\n\nJust have one more question, what is the ec2:AuthorizeSecurityGroupIngress if the SourceIp is not 0.0.0.0/0?","timestamp":"1692750660.0","poster":"dqwsmwwvtgxwkvgcvc"},{"comments":[{"comment_id":"1214968","timestamp":"1716297600.0","content":"I think that is incorrect. the SCP action is ec2:AuthorizeSecurityGroupIngress and specifically applies to ingress","upvote_count":"1","poster":"Malcnorth59"}],"comment_id":"1021950","poster":"longns","content":"This will deny all action create a inbound rule not only Inbound rule which have source ip \"0.0.0.0/0\"","upvote_count":"4","timestamp":"1696124340.0"}],"content":"Selected Answer: D\nI literally just created the SCP and it works. I saw some comments that \"ec2:AuthorizeSecurityGroupIngress action doesn't have any conditions\" - that is not correct. This is my scp : \n {\n \"Sid\": \"Statement1\",\n \"Effect\": \"Deny\",\n \"Action\": [\n \"ec2:AuthorizeSecurityGroupIngress\"\n ],\n \"Resource\": [\n \"*\"\n ],\n \"Condition\": {\n \"IpAddress\": {\n \"aws:SourceIp\": [\n \"0.0.0.0/0\"\n ]\n }\n }\n }","comment_id":"928402","timestamp":"1687260900.0","poster":"Maria2023"},{"upvote_count":"1","poster":"tgv","content":"Selected Answer: A\naws:SourceIp checks for the ip address of the requester - not the CIDR destination in the rule","timestamp":"1738063260.0","comment_id":"1347856"},{"content":"Selected Answer: D\nThe only correct answer is D.\nThe questions states \"to remove the ability to create a security group inbound rule that includes 0.0.0.0/0 as the source\"\n\nA does not remove the ability, it only corrects the action.\nD is correct because it actually restricts the ability.","comment_id":"1347425","upvote_count":"1","timestamp":"1737986340.0","poster":"TorTo"},{"comment_id":"1337896","timestamp":"1736331420.0","content":"Selected Answer: A\nNot D. See here: https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonec2.html. Condition key aws:SourceIp is missing for ec2:AuthorizeSecurityGroupIngress","upvote_count":"1","poster":"altonh"},{"upvote_count":"1","poster":"grumpysloth","content":"Selected Answer: A\nYou cannot use SCP to control SG rules","comment_id":"1327436","timestamp":"1734360780.0"},{"timestamp":"1732705140.0","comment_id":"1318590","upvote_count":"1","poster":"chipimbiri","content":"Selected Answer: D\nhttps://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_evaluation.html\nAn Allow statement in an SCP can't have a Condition element at all."},{"content":"Selected Answer: A\nGiven that the aws:SourceIp condition key refers to the IP address of the principal making the request, and not the IP address specified in the security group rule, D is not appropriate for this scenario.","comments":[{"content":"But because of this B is the correct option.","poster":"attila9778","timestamp":"1733253900.0","upvote_count":"1","comment_id":"1321520"}],"comment_id":"1292131","poster":"sashenka","timestamp":"1727820480.0","upvote_count":"3"},{"timestamp":"1725094020.0","poster":"amministrazione","content":"D. Configure an SCP to deny the ec2:AuthorizeSecurityGroupIngress action when the value of the aws:SourceIp condition key is 0.0.0.0/0. Apply the SCP to the NonProd OU.","comment_id":"1275489","upvote_count":"1"},{"comment_id":"1275342","upvote_count":"1","content":"Selected Answer: D\nService Control Policy (SCP):\n\nRestrictive Policy Enforcement: An SCP (Service Control Policy) is used in AWS Organizations to enforce account-level restrictions across accounts that belong to a particular Organizational Unit (OU). By setting an SCP to deny the ec2:AuthorizeSecurityGroupIngress action when the aws:SourceIp condition is 0.0.0.0/0, you effectively prevent all users within the NonProd OU from creating any security group rule that opens inbound traffic to the entire internet.\nLeast Operational Overhead: SCPs are centrally managed and enforced automatically, requiring no further intervention once applied. This reduces the operational overhead to nearly zero, as it does not require ongoing monitoring, function deployments, or manual rule updates.","poster":"[Removed]","timestamp":"1725071220.0"},{"comment_id":"1264233","poster":"MAZIADI","upvote_count":"3","timestamp":"1723394640.0","content":"Selected Answer: D\nWhy Option D is Better than Option C:\nExplicit Deny vs. Implicit Allow:\n\nOption C allows the action unless the aws:SourceIp is 0.0.0.0/0. This creates an implicit allow policy, which means that if any condition is not met, the action is allowed.\nOption D uses an explicit deny, which is more secure and straightforward. An explicit deny ensures that if the condition is met (aws:SourceIp is 0.0.0.0/0), the action is blocked regardless of other permissions."},{"comment_id":"1244357","content":"Selected Answer: A\nIt's A. Definitely A. Don't get confused.","timestamp":"1720446840.0","poster":"asquared16","upvote_count":"1"},{"poster":"dzidis","upvote_count":"1","timestamp":"1719566640.0","content":"Voting for A","comment_id":"1238647"},{"poster":"teo2157","content":"Selected Answer: A\nIt's A, D is incorrect as it shouldn´t be source IP but destination address","upvote_count":"1","comment_id":"1221413","timestamp":"1717050420.0"},{"timestamp":"1716298020.0","content":"Selected Answer: D\nOption D","upvote_count":"1","poster":"Malcnorth59","comment_id":"1214971"},{"upvote_count":"3","content":"Selected Answer: A\nSourceIP is for requester IP address, not the CIDR referenced in the SG rule.","poster":"sse69","comment_id":"1209613","timestamp":"1715405580.0"},{"content":"A (Incorrect): SG is created for a briefly. This goes against the question requirement of \"remove the ability to create a security group inbound rule...\"\nB (Incorrect): Regardless of rule, SGs can be created and remain non-complaint.\nC (Incorrect): See D \nD (Incorrect): SourceIP condition key of IAM policy is the requestor's IP address. This has nothing to do with SG's inbound rule's sourceIP. This won't allow creating any SG inbound rules when the requestor is making AWS API calls from anywhere (0.0.0.0/0). \n\nJust a crap question and choices.","poster":"Smart","comment_id":"1202860","timestamp":"1714173720.0","upvote_count":"2"},{"timestamp":"1711147320.0","content":"Selected Answer: D\nThe goal is to prevent the creation of Amazon EC2 security group inbound rules that include 0.0.0.0/0 as the source for all accounts in the NonProd Organizational Unit (OU) with the least operational overhead. \nOption D is the most straightforward and effective solution to meet the requirement with the least operational overhead. By configuring a Service Control Policy (SCP) to deny the ec2:AuthorizeSecurityGroupIngress action when the aws:SourceIp condition key is 0.0.0.0/0 and applying this policy to the NonProd OU, the company can ensure that no account within this OU can create security group inbound rules that expose resources to the entire internet. This approach leverages AWS Organizations' capability to apply governance and compliance policies at scale, thereby reducing the need for individual resource monitoring or post-creation remediation.","comment_id":"1180381","poster":"mav3r1ck","upvote_count":"1"},{"timestamp":"1710631200.0","poster":"gofavad926","comment_id":"1175397","content":"Selected Answer: D\nD is going to avoid to create the rule. A is not going to prevent, is going to remediate it...","upvote_count":"1"},{"comment_id":"1164705","upvote_count":"2","content":"A is out because creation of the SG is allowed albeit briefly before being updated\nB is noise\nC is out because SCPs don't allow\nD is the correct answer","poster":"Dgix","timestamp":"1709462160.0"},{"timestamp":"1708150260.0","comment_id":"1152394","upvote_count":"4","content":"Selected Answer: A\nTo everyone who claimed tested D, \nplz try create inbound rules other than 0.0.0.0/0.\nD will deny all AuthorizeSecurityGroupIngress operation from your IP. that's why D is \"worked\"","poster":"Dafukubai"},{"timestamp":"1707506400.0","poster":"8608f25","upvote_count":"2","comment_id":"1145726","content":"Selected Answer: D\nOption D is the most direct and efficient solution. By creating an SCP that explicitly denies the ec2:AuthorizeSecurityGroupIngress action when the source IP is 0.0.0.0/0, it prevents users in all accounts under the NonProd OU from creating such open security group rules. This enforcement happens at the API level, blocking the action before the rule is created, which aligns with the goal of reducing operational overhead and proactively enforcing security best practices.\nIt is not option C because, Option C mentions configuring a Service Control Policy (SCP) to allow the ec2:AuthorizeSecurityGroupIngress action except when the source IP is 0.0.0.0/0. While the intention is correct, SCPs do not support allow-listing in this manner; they are designed to explicitly allow or deny actions across accounts in an AWS Organization."},{"timestamp":"1706783880.0","comment_id":"1137522","upvote_count":"1","content":"Selected Answer: A\nRead the most recent comments to understand why it isn't B, C or D.","poster":"LazyAutonomy"},{"comment_id":"1136988","timestamp":"1706722260.0","poster":"Vaibs099","upvote_count":"1","content":"It has to be A, \n\nIn option C and D, aws:SourceIp\nUse this key to compare the requester's IP address with the IP address that you specify in the policy.\n\nThis is the condition not available for ec2:AuthorizeSecurityGroupIngress. It is condition to be used with Properties of the network. \n\nOption is B is just a config rule for unauthorized port. \n\nOnly A can remove ingress rule out of these options. \n\nBelow confirming this condition is not available for ec2:AuthorizeSecurityGroupIngress\nhttps://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AuthorizeSecurityGroupIngress.html\nBelow confirming use of aws:SourceIp -\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourceip"},{"comment_id":"1134828","timestamp":"1706524200.0","poster":"gustori99","upvote_count":"4","content":"Selected Answer: A\nEverybody who voted D. Just test it yourself and you will see that it does not work. \n\nPleas understand the meaning of aws:sourceIp. From the AWS documentation: \"The aws:SourceIp condition key resolves to the IP address that the request originates from\". \n\nThe aws:sourceIp condition checks the IP address of the requestor and has nothing to do with the security group sourceIp configuration. \n\nThe comment from Maria2023 who claims to have tested it is wrong because her suggested SCP denies all inbound rule creation even if you try to configure a specific IP address in the inbound rule.\n\nAlthough I disagree with the wording from option A \"Deploy the updated rule to the NonProd OU\", A is the only possible answer."},{"comment_id":"1129163","poster":"master9","timestamp":"1705974540.0","upvote_count":"1","content":"Selected Answer: C\n\"C\" is the right answer as in the statement it is written \"NOT\" which will revert the allow condition.\n \"Configure an SCP to allow the ec2:AuthorizeSecurityGroupIngress action when the value of the aws:SourceIp condition key is not 0.0.0.0/0. Apply the SCP to the NonProd OU\"."},{"content":"Selected Answer: A\nNot B - the vpc-sg-open-only-to-authorized-ports AWS Config managed rule checks if security groups allowing unrestricted incoming traffic ('0.0.0.0/0' or '::/0') only allow inbound TCP or UDP connections on authorized ports. The rule is NON_COMPLIANT if such security groups do not have ports specified in the rule parameters. The scenario is about unrestricted ip address and does not about port.\nNot C and D - aws:SourceIp key is used to compare the API client requester's IP address with the IP address that you specify in the policy. The aws:SourceIp condition key can only be used for public IP address ranges.\n\nThus A is the right answer as it does the job (even if it requires some work)","upvote_count":"3","poster":"ninomfr64","comment_id":"1105785","timestamp":"1703575500.0"},{"timestamp":"1702309680.0","poster":"ayadmawla","content":"Selected Answer: D\n\"remove the ability to create\" - is not the same as removing an SG after it has been created.","upvote_count":"4","comment_id":"1093632"},{"content":"Selected Answer: D\nAnswer D.\nRegarding A, isn't it a reactive approach?v","timestamp":"1701712200.0","poster":"shaaam80","upvote_count":"1","comment_id":"1087815"},{"upvote_count":"1","timestamp":"1700908980.0","comment_id":"1079931","poster":"edder","content":"Selected Answer: A\nThe correct answer is A.\nI actually tried it and verified it.\nB: Unsuitable because it controls TCP or UDP connections.\nC,D: Even after applying the created SCP, the default SCP FullAWSAccess is still applied, so rules can be created. Even if you delete FullAWSAccess, you will not be able to access the security group with an implicit Deny.\n\nA: This is the answer by process of elimination."},{"comment_id":"1079062","timestamp":"1700806320.0","upvote_count":"1","content":"Selected Answer: A\nI believe they are asking for a reactive approach here. They are allowing it to happen and at the same time handling it along with notification. Either C or D won't allow it to happen in the first place.","poster":"jainparag1"},{"timestamp":"1700310660.0","upvote_count":"2","poster":"NOZOMI","content":"Choosing d in this problem is evidence of underestimating IAM on a regular basis. It is not befitting of a specialist. The condition key in d indicates the source IP of the API, and is not related to the control of security groups.","comment_id":"1073982"},{"comment_id":"1070517","content":"I think its A because both C and D reference condition aws:SourceIp which refers to the IP address of client making an API call to an AWS service not the contents of the API call\n\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html\n\naws:SourceIp\n\nWorks with IP address operators.\n\nUse this key to compare the requester's IP address with the IP address that you specify in the policy. The aws:SourceIp condition key can only be used for public IP address ranges.\n\nAvailability – This key is included in the request context, except when the requester uses a VPC endpoint to make the request.\n\nValue type – Single-valued\n\nThe aws:SourceIp condition key can be used in a policy to allow principals to make requests only from within a specified IP range. However, this policy denies access if an AWS service makes calls on the principal's behalf","timestamp":"1699973820.0","poster":"kalitwol","upvote_count":"2"},{"content":"Selected Answer: D\nalready created SCPs aren't mentioned, hence we assume we have default SCP, hence C won't work and we should choose D.","comment_id":"1069067","upvote_count":"1","timestamp":"1699856220.0","poster":"severlight"},{"poster":"whenthan","content":"Selected Answer: D\nusing SCPs to deny a service or action permissions","upvote_count":"1","timestamp":"1697650860.0","comment_id":"1047112"},{"poster":"Passexam4sure_com","content":"Selected Answer: D\nConfigure an SCP to deny the ec2:AuthorizeSecurityGroupIngress action when the value of the aws: Source helps condition key is 0.0.0.0/0. Apply the SCP to the NonProd OU.","timestamp":"1697275140.0","upvote_count":"1","comment_id":"1043295"},{"upvote_count":"1","timestamp":"1697226900.0","content":"Selected Answer: D\nD is correct \n\nA states to \"apply the rules to the NONProd OU\" - how? what rules? is this an SCP or Config? doesnt state clearly.","poster":"Certified101","comment_id":"1042934"},{"comment_id":"1028002","poster":"rlf","comments":[{"content":"We need to understand the meaning of \"aws:SourceIp\".\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html\nhttps://aws.amazon.com/ko/blogs/security/how-to-automatically-revert-and-receive-notifications-about-changes-to-your-amazon-vpc-security-groups/","upvote_count":"1","timestamp":"1696772280.0","poster":"rlf","comment_id":"1028014"}],"content":"A.https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AuthorizeSecurityGroupIngress.html","timestamp":"1696771620.0","upvote_count":"1"},{"comment_id":"1024620","poster":"M4D3V1L","upvote_count":"2","timestamp":"1696411800.0","content":"Selected Answer: A\nIt's A since it uses already a eventBridge rule, also the solution is present in the AWS Documentation."},{"poster":"longns","content":"Selected Answer: A\nIt never D\nThis is a tricky question.\nBecause it requires the reader to pay attention to the detail aws:SourceIp. You will almost certainly get it wrong if you do not understand the exact meaning of this keyword.\nEven when some people have tested it in practice and found it works, it's because setting aws:SourceIp = 0.0.0.0/0 will Deny all IPs creating an Inbound Rule. (Tested)\nIf method D is used, the correct keyword should be another","comment_id":"1021947","timestamp":"1696124160.0","upvote_count":"3"},{"timestamp":"1692894960.0","content":"Selected Answer: D\nA is not reliable. D is supported.","comment_id":"989338","upvote_count":"1","poster":"Piccaso"},{"content":"Selected Answer: A\nOption D is NOT correct.\nThere is no documented Condition named SourceIp for ec2:AuthorizeSecurityGroupIngress\nRefer https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonec2.html","comments":[{"content":"SourceIp is global key in AWS context \nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html\nBut it not meaning D correct cuz it is used for validation ip of operator","comment_id":"1021913","poster":"longns","timestamp":"1696120740.0","upvote_count":"1"}],"upvote_count":"2","comment_id":"986966","timestamp":"1692660660.0","poster":"venvig"},{"comment_id":"978978","upvote_count":"2","content":"The correct answer is A. For C/D, the condition aws:SourceIp is to check the requester's IP instead of the ingress rules's IP.","timestamp":"1691787060.0","poster":"allen_devops"},{"poster":"xplusfb","timestamp":"1691609700.0","content":"Selected Answer: D\nQuestion always says the keynote. Keynote is LEAST operational overhead. And we already using AWS Organizations so its 100 percent works D","upvote_count":"1","comment_id":"976977"},{"upvote_count":"3","comment_id":"976170","content":"Selected Answer: A\nAnswer is A NOT D - The \"aws:SourceIp\" condition key picks the IP Addr of the requester not the IP address being passed into the Security Group. \n\nI would suggest, log into AWS account and try it out for yourself by changing the source of the ingress rule.","poster":"punkbuster","timestamp":"1691547060.0"},{"poster":"CuteRunRun","content":"Selected Answer: C\nI think the default policy in scp is deny, you need to create a explicit allow policy","upvote_count":"2","timestamp":"1691109780.0","comment_id":"971570"},{"poster":"CuteRunRun","upvote_count":"1","timestamp":"1691109660.0","comment_id":"971568","content":"I think the default policy of SCP is deny, you need to create a explicit allow rule.\nSo I select C"},{"upvote_count":"2","comment_id":"964380","timestamp":"1690435920.0","content":"Selected Answer: D\nSCP only allows condition key in deny statements:\nhttps://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_syntax.html#scp-syntax-condition","poster":"MRL110"},{"comments":[{"content":"D - actually was able to create that SCP and attach to member acct, but it didn't stop me from createing an SG with 0000/0 sourceIp ...","comment_id":"947446","timestamp":"1688922360.0","poster":"NikkyDicky","upvote_count":"1"}],"poster":"NikkyDicky","timestamp":"1688145720.0","comment_id":"939284","upvote_count":"2","content":"Selected Answer: A\nD would be nice if was suported by SCP"},{"comment_id":"938269","upvote_count":"5","poster":"SmileyCloud","content":"Selected Answer: D\nIt's D. I just tested it. This is the error that I am getting when I tried to create a sec group with 0.0.0.0/0 as source. \"You may be missing IAM policies that allow AuthorizeSecurityGroupIngress. You are not authorized to perform this operation. Encoded authorization failure message: <some giberish>\nAnd this is the policy:\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Sid\": \"Statement1\",\n \"Effect\": \"Deny\",\n \"Action\": [\n \"ec2:AuthorizeSecurityGroupIngress\"\n ],\n \"Resource\": [\n \"*\"\n ],\n \"Condition\": {\n \"IpAddress\": {\n \"aws:SourceIp\": \"0.0.0.0/0\"\n }\n }\n }\n ]\n}","timestamp":"1688050080.0"},{"comment_id":"926406","poster":"phongpg","comments":[{"upvote_count":"1","content":"Sorry answer is A, not C/D","timestamp":"1687059540.0","comment_id":"926409","poster":"phongpg"}],"upvote_count":"2","timestamp":"1687059480.0","content":"Selected Answer: A\nCorrect answer is C. Its can't be option D, if you look at the IAM documentation here, you can see that the ec2:AuthorizeSecurityGroupIngress action doesn't have any conditions that would allow you to specify the ip addresses in the inbound/outbound rules.\nhttps://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonec2.html"},{"poster":"SkyZeroZx","comment_id":"920327","timestamp":"1686441300.0","content":"Selected Answer: A\n: A\nThis is a really hard question cuz it really baits you with the SCP which would make a lot of sense here. Unfortunately that condition is not the correct one","upvote_count":"1"},{"content":"Answer : A\n Bases on AWS demo on following use case\n\nhttps://aws.amazon.com/blogs/security/how-to-automatically-revert-and-receive-notifications-about-changes-to-your-amazon-vpc-security-groups/","upvote_count":"1","timestamp":"1685706480.0","poster":"Roontha","comment_id":"912784"},{"comment_id":"912459","comments":[{"content":"{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Sid\": \"DenyIngressFromAnyIp\",\n \"Effect\": \"Deny\",\n \"Action\": \"ec2:AuthorizeSecurityGroupIngress\",\n \"Resource\": \"*\",\n \"Condition\": {\n \"StringEquals\": {\n \"aws:SourceIp\": \"0.0.0.0/0\"\n }\n }\n }\n ]\n}","poster":"Rajivjain","upvote_count":"1","timestamp":"1685671140.0","comment_id":"912462"}],"content":"Selected Answer: D\nSCP support aws: SourceIp condition key > Check point \"e\" carefully under \"Creating an SCP\" \nhttps://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_create.html","upvote_count":"1","poster":"Rajivjain","timestamp":"1685671020.0"},{"poster":"Darkhorse_79","content":"Selected Answer: D\nRequirement is \"Remove the ability to create a security group \"","comment_id":"912376","timestamp":"1685652360.0","upvote_count":"4"},{"poster":"mKrishna","timestamp":"1685064360.0","upvote_count":"1","content":"Ans is B\nrefer https://docs.aws.amazon.com/whitepapers/latest/building-a-data-perimeter-on-aws/appendix-3-service-control-policy-examples.html","comment_id":"906967"},{"timestamp":"1684748760.0","upvote_count":"1","comment_id":"903904","poster":"ShinLi","content":"Selected Answer: D\nAgree with D, as It is asking to stop/remove the all 0 permissions. modify Lambda function will not work. As it only removed SNS notification"},{"poster":"manawey","upvote_count":"3","content":"Selected Answer: A\nA is correct, in support for RunkieMax's experience below (comment below). I always take advantage when question already gave EvenBridge and SNS\nB: does not restrict NonProd developers\nD (and C): AWS disagrees.\nhttps://repost.aws/questions/QUozrofOc6SEastgpFp6IJMQ/blocking-sg-rule\n\nhttps://security.stackexchange.com/questions/261108/scp-to-create-security-groups-in-member-aws-account","comment_id":"902347","timestamp":"1684557240.0"},{"content":"Selected Answer: D\nThe correct answer is D.\nThe key point is \" remove the ability to create a security group inbound rule \" not the ability to remove a existing security group.\nFor A, it's clear to refer to the ability to remove a already existing security group. SO it's wrong.\nFor D. I have noticed the comments referred to this address https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AuthorizeSecurityGroupIngress.html.\nFor thinking D is wrong based on the address above,Guys do you really read this carefully ?\nHow can a people to allow an 0.0.0.0 inbound for an EC2 instance ? firstly he should add an inbound rule that adding 0.0.0.0/0 to this security group. D is preventing the people from doing this because security group is default declining anything unless you specify rule.","upvote_count":"1","timestamp":"1684171980.0","comments":[{"comment_id":"923371","poster":"Jesuisleon","upvote_count":"2","content":"I changed my answer to A after reading the links supplied from manawey.","timestamp":"1686758880.0"}],"comment_id":"898564","poster":"Jesuisleon"},{"comment_id":"898527","poster":"RunkieMax","upvote_count":"2","content":"Selected Answer: A\nWe used that technic a long time ago and we deployed the solution with cloudformation stackset in all our account in our OU. It works fine four us","timestamp":"1684169700.0"},{"comment_id":"893772","poster":"gameoflove","content":"Selected Answer: C\nI suggest as per my experience with AWS, Better to allow restrict condition then put deny condition","timestamp":"1683709680.0","upvote_count":"2","comments":[{"timestamp":"1683766500.0","poster":"E1234","upvote_count":"1","comment_id":"894488","content":"In a SCP, allow condition almost do nothing."}]},{"poster":"mattlai","comment_id":"893609","content":"terrible q&a from aws once again","upvote_count":"1","timestamp":"1683693420.0"},{"poster":"chiaseed","comments":[{"upvote_count":"1","timestamp":"1687711440.0","poster":"dkx","comment_id":"933767","content":"Be sure not to confuse SCP policy statements and resource API methods.\n\nAlso note that \"aws:SourceIp\" is a global condition context key -- used to compare the requester's IP address with the IP address that you specify in the policy. \n\nThus, the answer is D"}],"upvote_count":"1","content":"Selected Answer: A\nI first thought the answer is D but seems like A is correct. As Damijo said, \"ec2:AuthorizeSecurityGroupIngress action doesn't have any conditions that would allow you to specify the ip addresses in the inbound/outbound rules.\"\nhttps://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AuthorizeSecurityGroupIngress.html","comment_id":"893496","timestamp":"1683677400.0"},{"upvote_count":"2","content":"Selected Answer: A\n: A\nThis is a really hard question cuz it really baits you with the SCP which would make a lot of sense here. Unfortunately that condition is not the correct one","timestamp":"1683462300.0","poster":"mrfretz","comment_id":"891367"},{"comment_id":"889680","timestamp":"1683241020.0","upvote_count":"1","content":"Selected Answer: A\nA is correct","poster":"petervu"},{"comment_id":"889676","poster":"petervu","timestamp":"1683240960.0","content":"Looks like A is correct.","upvote_count":"1"},{"poster":"rbm2023","timestamp":"1683080820.0","comment_id":"888091","upvote_count":"3","content":"Selected Answer: D\nThe question is about \"removing the ability to create\" and not take action after the security group was created. This needs to be done in the service policy to DENY the action. Hence option D"},{"poster":"dimeder","timestamp":"1682530440.0","content":"Selected Answer: A\nJust to increase the percentage of A.","upvote_count":"2","comment_id":"881891"},{"upvote_count":"3","poster":"DWsk","comment_id":"881845","timestamp":"1682527680.0","content":"Selected Answer: A\nThis is a really hard question cuz it really baits you with the SCP which would make a lot of sense here. Unfortunately that condition is not the correct one"},{"comment_id":"878384","poster":"Cccb35","upvote_count":"2","content":"Selected Answer: A\nJust to increase the percentage of A.","timestamp":"1682255340.0"},{"poster":"rxhan","upvote_count":"2","comment_id":"875151","timestamp":"1681946460.0","content":"Selected Answer: D\nOption D is the most suitable solution to meet the requirement with the least operational overhead.\n\nAn SCP (Service Control Policy) can be used to set organization-wide policies for AWS accounts in the organization, including the NonProd OU. We need to deny the ec2:AuthorizeSecurityGroupIngress action when the value of the aws:SourceIp condition key is 0.0.0.0/0 to prevent creating security group inbound rules with this source."},{"poster":"Sarutobi","timestamp":"1681840560.0","content":"Selected Answer: A\nJust to increase the percentage of A.","upvote_count":"2","comment_id":"873951"},{"comment_id":"873057","content":"Selected Answer: A\n\"aws:SourceIp\" has nothing to do with Inbound rules in Security Groups. This is actually the source IP of the agent calling the EC2 API to modify a SG rule, which has nothing to do with the 'Source' field in a SG Inbound rule.\n\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourceip","timestamp":"1681761960.0","poster":"Anonymous9999","upvote_count":"5"},{"comment_id":"871856","content":"Selected Answer: A\n\"aws:SourceIp\" has nothing to do with Inbound rules in Security Groups. This is actually the source IP of the agent calling the EC2 API to modify a SG rule, which has nothing to do with the 'Source' field in a SG Inbound rule.","poster":"frfavoreto","upvote_count":"4","timestamp":"1681656420.0"},{"timestamp":"1680347640.0","content":"D:\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Sid\": \"DenyAllOpenPorts\",\n \"Effect\": \"Deny\",\n \"Action\": [\n \"ec2:AuthorizeSecurityGroupIngress\"\n ],\n \"Resource\": \"*\",\n \"Condition\": {\n \"IpAddress\": {\n \"aws:SourceIp\": \"0.0.0.0/0\"\n }\n }\n }\n ]\n}","poster":"birbyne","comment_id":"857833","upvote_count":"4"},{"poster":"mfsec","timestamp":"1679664960.0","content":"Selected Answer: A\nAs Damijo said from the docs.","comment_id":"849321","upvote_count":"1"},{"comment_id":"847484","timestamp":"1679516400.0","comments":[{"comments":[{"upvote_count":"2","comment_id":"847498","timestamp":"1679517060.0","content":"C is not true for the same (and say allow...)\nB is not true because it's partial, the rule will be flag as NON COMPLIANT but will not be delete without using System Manager automation document\nA is true and does not add a lot of operational overhead because there is already an eventbridge rule for that","poster":"Arnaud92"}],"timestamp":"1679516520.0","comment_id":"847487","poster":"Arnaud92","content":"So it cannot be D for sure","upvote_count":"2"}],"upvote_count":"3","poster":"Arnaud92","content":"The \"aws:SourceIp\" is used for restrict access to AWS from user which have specific IP specified in aws:SourceIp.\nThis is not a condition for source ip in a SG"},{"comment_id":"845310","upvote_count":"4","poster":"Damijo","timestamp":"1679351940.0","content":"Selected Answer: A\nIf you look at the IAM documentation here, you can see that the ec2:AuthorizeSecurityGroupIngress action doesn't have any conditions that would allow you to specify the ip addresses in the inbound/outbound rules.https://docs.aws.amazon.com/service-authorization/latest/reference/list_amazonec2.html"},{"timestamp":"1679332860.0","poster":"ramyaram","upvote_count":"2","comment_id":"845103","content":"Selected Answer: D\nD would be the best option to meet operational overhead requirement"},{"timestamp":"1678951980.0","comment_id":"840638","upvote_count":"2","content":"Selected Answer: D\nD is correct","poster":"taer"},{"timestamp":"1678922880.0","poster":"dev112233xx","comment_id":"840408","upvote_count":"2","comments":[{"comment_id":"840417","poster":"dev112233xx","content":"Changing my answer to A\nWell.. after investigating I found out that it’s not possible to prevent security changes with SCP","timestamp":"1678924260.0","upvote_count":"1"}],"content":"Selected Answer: D\nD is the LEAST operational overhead solution"},{"upvote_count":"4","content":"Selected Answer: A\nC and D are out; for security groups you cannot do a deny, only allow so D is out and C is out because you cant do a \"is not\" since that is still a deny - https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules.html\n\nB. out because that AWS Config managed rule is detective only, not proactive, go ahead and review the list for different evaluation modes: https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-evaluation-mode.html\n\nThis is a legit \"trick\" question, you have to modify the rule to invoke an AWS Lambda to always remove it. All the other stuff in this statement is to through you off - you must use EventBridge to create a rule.","poster":"zejou1","comment_id":"838514","timestamp":"1678762320.0"},{"timestamp":"1678302120.0","poster":"vherman","comments":[{"content":"later I found that SourceIP is the IP address of a requester. So D isn't correct !!!","poster":"vherman","comment_id":"837090","timestamp":"1678629900.0","upvote_count":"2"}],"content":"Selected Answer: D\nD meets the requirements","upvote_count":"2","comment_id":"833291"},{"comment_id":"832813","content":"Selected Answer: D\ncreating a lambda and removing it seems weird and definatly lot of operation overhead. will go with D","poster":"kiran15789","upvote_count":"2","timestamp":"1678270980.0"},{"content":"Selected Answer: A\nhttps://aws.amazon.com/blogs/security/how-to-automatically-revert-and-receive-notifications-about-changes-to-your-amazon-vpc-security-groups/","timestamp":"1677613320.0","poster":"rtgfdv3","comment_id":"825215","upvote_count":"4"},{"timestamp":"1677612840.0","poster":"lkyixoayffasdrlaqd","upvote_count":"1","content":"I don't understand people that says D, can you tell me what is the differences between C and D?","comment_id":"825208"},{"comments":[{"comments":[{"timestamp":"1677509880.0","upvote_count":"2","comment_id":"823843","comments":[{"upvote_count":"3","timestamp":"1677537660.0","comment_id":"824209","poster":"anita_student","content":"Even if it acts upon it and deletes the rule it didn’t stop developers to create the rule in the first place, hence doesn’t meet the criteria"}],"content":"But does it act upon it or just marked as non-compliance?","poster":"Sarutobi"}],"poster":"lkyixoayffasdrlaqd","upvote_count":"1","comment_id":"822943","timestamp":"1677443940.0","content":"Here is the link:\nhttps://docs.aws.amazon.com/config/latest/developerguide/vpc-sg-open-only-to-authorized-ports.html"}],"timestamp":"1677443700.0","poster":"lkyixoayffasdrlaqd","upvote_count":"2","comment_id":"822938","content":"Selected Answer: B\nAnswer should be B;\nThe solution that will meet the requirement with the LEAST operational overhead is option B: Add the vpc-sg-open-only-to-authorized-ports AWS Config managed rule to the NonProd OU.\n\nThis option is the least operational overhead because it utilizes an existing AWS Config managed rule, which means that there is no need to create or deploy any new resources or code. The vpc-sg-open-only-to-authorized-ports rule will automatically evaluate all security groups in the NonProd OU and report any that allow inbound traffic from 0.0.0.0/0. This rule will also allow security groups to be created or updated with any other source IP address.\n\nOption A requires the creation and deployment of a Lambda function, which will require additional operational overhead. Option C requires the configuration of an SCP, which can be complex and may cause unintended consequences if not configured properly. Option D is similar to Option C but uses a deny policy instead of an allow policy, which can be more difficult to manage and troubleshoot."},{"timestamp":"1677304020.0","comment_id":"821220","content":"D is correct. Refer SCP usage strategies- https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_strategies.html\nIn AWS Organizations, FullAWSAccess SCP is by default added and applied to all OUs/member accounts.So, an allow is already there, so we just need to add a deny and apply to NonProd OU\nFor C to be answer, we need to do additional step of adding deny rule for all OUs and member accounts which is tedious and against least operational overhead. that is the whole reason FullAWSAccess is added by default on AWS Organizations.","poster":"God_Is_Love","upvote_count":"2"},{"upvote_count":"1","comment_id":"820535","poster":"Nidjo","content":"Answer is A, the conditions aws:SourceIP don't exist for this API call.","timestamp":"1677246840.0"},{"upvote_count":"3","timestamp":"1677232800.0","poster":"kiran15789","comment_id":"820319","content":"Selected Answer: D\noption D as it has least operational overhead"},{"timestamp":"1677003060.0","poster":"c73bf38","upvote_count":"3","comment_id":"816972","content":"Selected Answer: D\nD. Configure an SCP to deny the ec2:AuthorizeSecurityGroupIngress action when the value of the aws:SourceIp condition key is 0.0.0.0/0. Apply the SCP to the NonProd OU.\n\nThis solution leverages AWS Organizations' Service Control Policies (SCPs) to deny the ec2:AuthorizeSecurityGroupIngress action when the source IP is 0.0.0.0/0. This means that any attempt to create a security group inbound rule with that source IP will be blocked at the organizational level, without the need for any additional resources or configurations in individual accounts. This approach has the least operational overhead as it requires only the configuration of an SCP in the NonProd OU, which can be easily managed and updated."},{"comment_id":"812399","poster":"spd","comments":[{"poster":"Pete697989","comment_id":"827056","content":"It says \"remove the ability to create rule\" and no \"remove the rule after its created\"","upvote_count":"1","timestamp":"1677771900.0"}],"timestamp":"1676669340.0","upvote_count":"1","content":"Selected Answer: A\nA - \"remove the ability to create a security group inbound rule that includes 0.0.0.0/0 as the source\" - Here requirement is to remove the rule and Option D is not allowing to create with SOurceIp..so it should be A"},{"poster":"c73bf38","content":"Selected Answer: A\nA. Modify the EventBridge rule to invoke an AWS Lambda function to remove the security group inbound rule and to publish to the SNS topic. Deploy the updated rule to the NonProd OU would be the best option for removing the ability to create a security group inbound rule that includes 0.0.0.0/0 as the source with the least operational overhead. This solution allows the security team to remove the inbound rule that includes 0.0.0.0/0 as the source when the event occurs, reducing the need for manual intervention.","timestamp":"1676520180.0","upvote_count":"1","comment_id":"810237","comments":[{"upvote_count":"1","content":"NVMD; needs to remove the ability. So D is the correct answer. \n\nThe solution that will meet this requirement with the LEAST operational overhead to remove the ability to create is Option D, Configure an SCP to deny the ec2:AuthorizeSecurityGroupIngress action when the value of the aws:SourceIp condition key is 0.0.0.0/0. Apply the SCP to the NonProd OU. This solution will prevent the creation of security group inbound rules that include 0.0.0.0/0 as the source, without any need to modify the EventBridge rule or the AWS Config settings.","comment_id":"810239","poster":"c73bf38","timestamp":"1676520360.0"}]},{"timestamp":"1676408520.0","poster":"[Removed]","content":"Selected Answer: D\nsurely this is 100% D, the questions is allow to prevent the creation of the rule. Not how to remediate the existence of such rules. AWS organisaitons is already setup so the overhead is minimal to apply an SCP to the non-prod OU.\n\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Effect\": \"Deny\",\n \"Action\": [\n \"ec2:AuthorizeSecurityGroupIngress\"\n ],\n \"Resource\": \"*\",\n \"Condition\": {\n \"StringEquals\": {\n \"ec2:sourceIp\": \"0.0.0.0/0\"\n }\n }\n }\n ]\n}","comment_id":"808846","upvote_count":"3"},{"poster":"moota","timestamp":"1676067780.0","upvote_count":"3","comment_id":"804823","content":"Selected Answer: A\nAccording to ChatGPT, \n\nIn AWS, the aws:SourceIp condition key represents the source IP address of a request. The value of aws:SourceIp is determined by AWS and is based on the IP address of the client that made the request. For example, if a user makes a request to an AWS service, the IP address of the user's computer or device would be used as the value of aws:SourceIp in the request."},{"timestamp":"1675602600.0","comment_id":"798843","upvote_count":"4","poster":"snani10","content":"Selected Answer: A\nI don't think aws:SourceIp is the input of the security group, it is the IP of the user who is updating the security group. \nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_aws_deny-ip.html"},{"comment_id":"794731","comments":[{"comment_id":"798591","upvote_count":"1","content":"A requires too much work, SCP is like a guardrail, it removes the ability for admins to assign certain permissions to users or services. \n\nRegarding your point, it is referring to the API caller's Public IP - but look at the IP is 0.0.0.0/0 it is open to the entire internet, anybody can reach NonProd resource.","timestamp":"1675568220.0","poster":"oatif"}],"upvote_count":"1","content":"Selected Answer: A\nA is correct.\nThe values of AWS resource CANNOT be controlled by policies.","timestamp":"1675209300.0","poster":"jooncco"},{"content":"Selected Answer: A\nVoting for A as per daybey's comment","upvote_count":"2","comment_id":"791780","timestamp":"1675006620.0","poster":"Musk"},{"upvote_count":"4","timestamp":"1674647100.0","content":"Selected Answer: A\nI would go for A.\nNot B: vpc-sg-open-only-to-authorized-ports does not exist.\nNot C & D: SCP's can explicitly deny ec2:AuthorizeSecurityGroupIngress rule however aws:SourceIp key is not refering to the value of the ingress rule, but it is referring to the API caller's own Public IP. See this please: https://stackoverflow.com/a/61243672","poster":"daybey","comment_id":"787566","comments":[]}],"isMC":true,"topic":"1","answers_community":["D (59%)","A (39%)","2%"]},{"id":"lyOTIfBJr8Au5gNmTaKk","choices":{"E":"Create a VPC peering connection between the company's management VPC and each customer's VPC.","D":"Create a VPN appliance in each customer's VPC. Connect the company's management VPC to each customer's VPC by using AWS Site-to-Site VPN.","B":"Create VPC peering connections between all the company's VPCs.","C":"Create a Network Load Balancer (NLB) that points to the compute resource for license validation. Create an AWS PrivateLink endpoint service that is available to each customer's VPAssociate the endpoint service with the NLB.","A":"Create a transit gateway. Attach all the company's VPCs and relevant subnets to the transit gateway."},"exam_id":33,"question_text":"A software as a service (SaaS) company provides a media software solution to customers. The solution is hosted on 50 VPCs across various AWS Regions and AWS accounts. One of the VPCs is designated as a management VPC. The compute resources in the VPCs work independently.\n\nThe company has developed a new feature that requires all 50 VPCs to be able to communicate with each other. The new feature also requires one-way access from each customer's VPC to the company's management VPC. The management VPC hosts a compute resource that validates licenses for the media software solution.\n\nThe number of VPCs that the company will use to host the solution will continue to increase as the solution grows.\n\nWhich combination of steps will provide the required VPC connectivity with the LEAST operational overhead? (Choose two.)","isMC":true,"unix_timestamp":1707187320,"discussion":[{"content":"Selected Answer: BC\nPrivate link for the customers and vpc peering for company VPCs. Transit gateway is only a regional construct.","comment_id":"1320975","upvote_count":"2","poster":"Spike2020","timestamp":"1733148360.0"},{"comment_id":"1320179","upvote_count":"1","timestamp":"1732967520.0","content":"Selected Answer: AC\nAWS PrivateLink now supports cross-region connectivity\n\nhttps://aws.amazon.com/about-aws/whats-new/2024/11/aws-privatelink-across-region-connectivity/","poster":"nimbus_00"},{"timestamp":"1731646320.0","upvote_count":"1","comment_id":"1312405","poster":"0b43291","content":"Selected Answer: AC\nA. Create a transit gateway. Attach all the company's VPCs to it, establishing a mesh network where VPCs can communicate. This provides a scalable way to manage VPC connectivity, reducing operational overhead compared to VPC peering.\n\nC. Create a Network Load Balancer (NLB) for the license validation compute resource. Create an AWS PrivateLink endpoint service associated with the NLB, available to each customer's VPC. This provides one-way access from customer VPCs to the management VPC for license validation, without internet gateways, NAT gateways, or VPNs. It simplifies network configuration and reduces operational overhead."},{"content":"Selected Answer: AC\nAWS Transit Gateway supports peering between transit gateways in different regions. This means that you can connect a Transit Gateway in one region to another Transit Gateway in a different region. This feature is known as Transit Gateway Peering (not VPC peering).\nAWS Transit Gateway also allows you to associate VPCs from different AWS accounts to the same transit gateway using AWS Resource Access Manager (RAM)","comment_id":"1296248","poster":"JoeTromundo","upvote_count":"2","timestamp":"1728678660.0"},{"timestamp":"1723415220.0","upvote_count":"2","poster":"helloworldabc","content":"AAAAAAAAAAACCCCCCCCC","comment_id":"1264319"},{"content":"AC; AWS Transit Gateway allows you to connect resources across different AWS regions. Here’s how you can achieve this:\n\nCreate Transit Gateways:\nBegin by creating Transit Gateways in the respective regions where you want to establish peering.\nEnsure that the necessary VPCs are attached to each Transit Gateway.\nEnable Peering:\nNavigate to the AWS Management Console and select the Transit Gateway service.\nInitiate the peering connection between the two Transit Gateways in different regions.\nUpdate Route Tables:\nConfigure the route tables associated with each Transit Gateway to allow traffic between the regions.\nSecurity Groups and Network ACLs:\nAdjust security groups and network ACLs to permit the necessary traffic flow.\nConnectivity Testing:\nVerify connectivity by testing communication between resources in different regions.","upvote_count":"4","poster":"ca5e9ba","timestamp":"1716305880.0","comment_id":"1215064"},{"poster":"teo2157","timestamp":"1716273900.0","content":"Selected Answer: BC\nAs titi_r explained","upvote_count":"1","comment_id":"1214758"},{"upvote_count":"2","comment_id":"1200505","content":"Selected Answer: BC\nB – Correct, even that it will be a routing madness. The default VPC peering quota is 50, but increasable after request to 125. So, the company will be able to peer its 50 VPCs, but it must request a quota increase for a higher number - that’s not mentioned in the answer. And also what’s happening when/if they require more than 125 VPCs at one point?\nhttps://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-connection-quotas.html\n-\nC – Correct. The PrivateLink endpoint service will provide a one-way access from each customer's VPC to the company's management VPC.\n https://docs.aws.amazon.com/whitepapers/latest/aws-privatelink/use-case-examples.html","timestamp":"1713853200.0","poster":"titi_r","comments":[{"upvote_count":"2","timestamp":"1725013140.0","poster":"_Jassybanga_","comment_id":"1275019","content":"\"The number of VPCs that the company will use to host the solution will continue to increase as the solution grows\" - it can go beyond 125 as well"},{"upvote_count":"2","comment_id":"1264320","content":"Creating a transit gateway peering allows VPCs in different regions to connect.","poster":"helloworldabc","timestamp":"1723415400.0"},{"comment_id":"1200506","upvote_count":"3","comments":[{"timestamp":"1724804400.0","upvote_count":"3","comment_id":"1273723","content":"Transit Gateway allow both inter-region and intra-region VPC peering as per this AWS document - https://docs.aws.amazon.com/vpc/latest/tgw/tgw-peering.html#:~:text=AWS%20Region%20considerations-,Transit%20gateway%20peering%20attachments%20in%20Amazon%20VPC%20Transit%20Gateways,and%20specify%20a%20transit%20gateway.","poster":"backbencher2022"},{"timestamp":"1713853260.0","poster":"titi_r","content":"D – Incorrect. Unknown if even possible, but more COMPLEX than answer “B” anyway. The default Site-to-Site VPN connections per VGW quota is only 10 (it's increasable, but the actual limit is not stated in the AWS documentation), however the company will need more than 50 and this sounds unrealistic. The default Site-to-Site VPN connections per Region quota is 50 – it will also require a request for quota increase.\nhttps://docs.aws.amazon.com/vpn/latest/s2svpn/vpn-limits.html\n-\nE – Incorrect. In this case customer VPCs will not be able to communicate with each other, but only with the management VPC.","upvote_count":"1","comment_id":"1200508"}],"poster":"titi_r","timestamp":"1713853260.0","content":"А – Incorrect. It’s not possible to attach a VPC from one Region to a TGW in another Region. You can only attach a VPC to a TGW in the same Region; additionally you can peer that TGW with another one, located in a different Region.\nhttps://content.cloudthat.com/resources/wp-content/uploads/2022/11/Picture220.png"}]},{"upvote_count":"4","content":"It SHOULD be transit gateway but it isn't. The VPCs are hosted in several accounts and regions. You can't attach all VPCs in one transit gateway. You need several peered transit gws per region which is not the case here. Correct: B,C","poster":"trap","timestamp":"1713715320.0","comments":[{"comment_id":"1199744","timestamp":"1713715680.0","content":"Actually you need a transit gw per VPC region and they must be peered...... \nVery tricky question... Correct: B,C","poster":"trap","upvote_count":"3"}],"comment_id":"1199741"},{"comment_id":"1190013","content":"Selected Answer: AE\nNLB and PrivateLink offer benefits, they are overkill for this scenario. NLB is for distributing traffic across multiple instances, which isn't necessary here. PrivateLink creates a private connection for a service within a VPC, but it's a more complex solution than a simple peering connection for the management VPC.","poster":"Russs99","upvote_count":"1","timestamp":"1712338260.0"},{"poster":"career360guru","timestamp":"1710021600.0","upvote_count":"2","comment_id":"1169874","content":"Selected Answer: AC\nA and C"},{"comment_id":"1144536","timestamp":"1707401640.0","content":"Selected Answer: AC\nanswer AC","poster":"arberod","upvote_count":"3"},{"timestamp":"1707281100.0","poster":"kejam","comment_id":"1142949","content":"Selected Answer: AC\nAnswer AC:\nTransit Gateway and Private Link for the WIN!","upvote_count":"3"},{"upvote_count":"4","content":"Correct Answer A and C","comment_id":"1141716","timestamp":"1707187320.0","poster":"alexis123456"}],"question_images":[],"timestamp":"2024-02-06 03:42:00","question_id":380,"url":"https://www.examtopics.com/discussions/amazon/view/132992-exam-aws-certified-solutions-architect-professional-sap-c02/","answer_ET":"AC","answer_description":"","answer":"AC","answer_images":[],"answers_community":["AC (67%)","BC (28%)","6%"],"topic":"1"}],"exam":{"numberOfQuestions":529,"lastUpdated":"11 Apr 2025","provider":"Amazon","id":33,"name":"AWS Certified Solutions Architect - Professional SAP-C02","isMCOnly":true,"isImplemented":true,"isBeta":false},"currentPage":76},"__N_SSP":true}