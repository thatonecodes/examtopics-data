{"pageProps":{"questions":[{"id":"bJpgzac09oGiwslN6NDG","answer_description":"","timestamp":"2024-06-25 19:48:00","topic":"1","url":"https://www.examtopics.com/discussions/amazon/view/142922-exam-aws-certified-solutions-architect-professional-sap-c02/","question_text":"A company plans to migrate many VMs from an on-premises environment to AWS. The company requires an initial assessment of the on-premises environment before the migration, a visualization of the dependencies between applications that run on the VMs, and a report that provides an assessment of the on-premises environment.\n\nTo get this information, the company has initiated a Migration Evaluator assessment request. The company has the ability to install collector software in its on-premises environment without any constraints\n\nWhich solution will provide the company with the required information with the LEAST operational overhead?","question_id":431,"answer":"A","answer_ET":"A","choices":{"D":"Set up the Migration Evaluator Collector in the on-premises environment. Install the AWS Application Discovery Agent on each VM. After the data collection period ends, use AWS Migration Hub to view the application dependencies. Download the Quick Insights assessment report from Migration Evaluator.","C":"Setup the AWS Application Discovery Service Agentless Collector in the on-premises environment. After the data collection period ends, use AWS Migration Hub to view the application dependencies. Export the discovered server list from Application Discovery Service. Upload the list to Migration Evaluator. When the Migration Evaluator report is generated, download the Quick Insights assessment.","B":"Install the Migration Evaluator Collector on each on-premises VM. After the data collection period ends, use Migration Evaluator to view the application dependencies. Download and export the discovered server list from Migration Evaluator. Upload the list to Amazon QuickSight When the QuickSight report is generated, download the Quick Insights assessment report.","A":"Install the AWS Application Discovery Agent on each on-premises VM. After the data collection period ends, use AWS Migration Hub to view the application dependencies. Download the Quick insights assessment report from Migration Hub."},"exam_id":33,"discussion":[{"content":"Selected Answer: A\nOption C is not the least operation overhead. it requires Application Discovery agentless Collector + Export & Upload of the report. also, Discovery agentless will not gather data for all dependencies.","poster":"Russs99","timestamp":"1721486400.0","comment_id":"1251796","upvote_count":"8"},{"content":"Selected Answer: C\nFor VMs use agentless unless you need to track network","comment_id":"1242609","timestamp":"1720167660.0","upvote_count":"8","poster":"5ehjry6sktukliyliuliykutjhy","comments":[{"comment_id":"1295131","timestamp":"1728475500.0","poster":"Spike2020","content":"requirement is to discover application dependency. So that needs to track network. So it should be A.","upvote_count":"2"}]},{"upvote_count":"1","comment_id":"1345132","content":"Selected Answer: B\nThe Migration Evaluator Collector is better for high-level assessment and cost planning, while the Application Discovery Agentless Collector is suited for detailed dependency analysis between applications and VMs.","poster":"zhen234","timestamp":"1737612180.0"},{"upvote_count":"1","content":"Selected Answer: C\nOption C is correct.\nhttps://aws.amazon.com/about-aws/whats-new/2024/11/network-connections-aws-application-discovery-service-agentless-collector/?nc1=h_ls","timestamp":"1736650980.0","comment_id":"1339334","poster":"BeyondCoder"},{"content":"Selected Answer: B\nThe solution that provides the company with the required information with the least operational overhead is B: Install the Migration Evaluator Collector on each on-premises VM. \n\nThis method allows for efficient data collection, enabling the use of Migration Evaluator to visualize application dependencies and download the Quick Insights assessment report easily. This approach minimizes complexity compared to options that require multiple software installations or data transfers between services, thus reducing operational overhead significantly","upvote_count":"1","poster":"TomTom","timestamp":"1732253040.0","comment_id":"1316171"},{"poster":"AzureDP900","timestamp":"1731807420.0","upvote_count":"1","comments":[{"poster":"AzureDP900","timestamp":"1731807420.0","upvote_count":"1","comment_id":"1313330","content":"A is correct"}],"content":"This solution requires minimal operational overhead as it only involves installing a small agent (AWS Application Discovery Agent) on each VM, which can be done without disrupting the environment.\n\nThe AWS Application Discovery Service is an agentless collector that can discover resources in your organization without requiring any configuration or agent installation. However, in this case, the company has already initiated a Migration Evaluator assessment request and can use the built-in capabilities of Migration Hub to collect information about their on-premises environment.","comment_id":"1313329"},{"comment_id":"1313228","poster":"0b43291","upvote_count":"1","timestamp":"1731789180.0","content":"Selected Answer: A\nOption A is the answer with the least operational overhead because it leverages the AWS Application Discovery Agent, which can be installed on each on-premises VM to collect configuration data, performance metrics, and application dependencies. AWS Migration Hub integrates with Application Discovery Service, providing a centralized view of discovered servers, dependencies, and migration status. Migration Hub allows visualizing application dependencies and provides the Quick Insights assessment report, fulfilling all requirements. By using a single agent and Migration Hub's built-in capabilities, Option A minimizes operational overhead and provides a streamlined solution for the required information."},{"upvote_count":"1","timestamp":"1729866720.0","content":"I think option A is correct","comment_id":"1302885","poster":"Danm86"},{"timestamp":"1728770880.0","content":"Selected Answer: A\n\"AGENT-BASED discovery can be performed by deploying the AWS Application Discovery Agent on each of your VMs and physical servers. The agent installer is available for Windows and Linux operating systems. It collects static configuration data, detailed time-series system-performance information, INBOUND AND OUTBOUND NETWORK CONNECTIONS, and processes that are running.\"","comment_id":"1296648","upvote_count":"3","poster":"JoeTromundo"},{"comment_id":"1295709","timestamp":"1728584460.0","content":"Selected Answer: A\nThe question clearly states, \"The company has the ability to install collector software in its on-premises environment without any constraints\"","upvote_count":"3","poster":"Syre"},{"upvote_count":"1","poster":"Chungies","content":"They have the capability of accepting installs on their VM so I will go with A. It can not be the agent less because there is no mention that they can not allow installs on their VMs","comment_id":"1286839","timestamp":"1726838520.0"},{"poster":"asquared16","comment_id":"1264578","timestamp":"1723455240.0","content":"Selected Answer: C\nthe key word here is \"many\" VMs, hence C.","upvote_count":"1"},{"upvote_count":"2","comments":[{"content":"sorry i wanted to say C","comment_id":"1248893","upvote_count":"1","timestamp":"1721133660.0","poster":"toma"}],"comment_id":"1248892","content":"it should be A, as you can see on this link: https://aws.amazon.com/migration-evaluator/\nagentless collector should be used, it is simple.","poster":"toma","timestamp":"1721133480.0"},{"content":"Option C: Use Agentless for VMs","upvote_count":"1","comment_id":"1242347","timestamp":"1720138620.0","poster":"5ehjry6sktukliyliuliykutjhy"},{"timestamp":"1719513600.0","upvote_count":"7","comment_id":"1238351","poster":"mifune","content":"Selected Answer: A\n\"To get this information, the company has initiated a Migration Evaluator assessment request. The company has the ability to install collector software in its on-premises environment without any constraints\", so I understand from the question that the next step would be installing the AWS Application Discovery Agent on each on-premises VM, so for me the answer is A."},{"timestamp":"1719337680.0","poster":"zapper1234","comment_id":"1237021","upvote_count":"4","content":"B is the correct answer becuase you would use migration evaluater"}],"answer_images":[],"question_images":[],"unix_timestamp":1719337680,"answers_community":["A (65%)","C (29%)","6%"],"isMC":true},{"id":"AXd3LQHxXP3sZHNPN8DJ","answer_ET":"C","answer":"C","choices":{"D":"Use AWS WAF to protect the API Gateway AP! Configure Amazon Inspector to protect the legacy API. Configure Amazon GuardDuty to block malicious attempts to access the APIs.","C":"Use AWS WAF to protect the API Gateway API. Configure Amazon Inspector to analyze the legacy API. Configure Amazon GuardDuty to monitor for malicious attempts to access the APIs.","B":"Use AWS WAF to protect the API Gateway API. Configure Amazon Inspector to analyze both APIs. Configure Amazon GuardDuty to block malicious attempts to access the APIs.","A":"Use AWS WAF to protect both APIs. Configure Amazon Inspector to analyze the legacy API. Configure Amazon GuardDuty to monitor for malicious attempts to access the APIs."},"question_text":"A company hosts its primary API on AWS by using an Amazon API Gateway API and AWS Lambda functions that contain the logic for the API methods. The company’s internal applications use the API for core functionality and business logic. The company’s customers use the API to access data from their accounts. Several customers also have access to a legacy API that is running on a single standalone Amazon EC2 instance.\n\nThe company wants to increase the security for these APIs to better prevent denial of service (DoS) attacks, check for vulnerabilities, and guard against common exploits.\n\nWhat should a solutions architect do to meet these requirements?","exam_id":33,"url":"https://www.examtopics.com/discussions/amazon/view/142923-exam-aws-certified-solutions-architect-professional-sap-c02/","isMC":true,"unix_timestamp":1719337800,"answer_images":[],"question_id":432,"answer_description":"","timestamp":"2024-06-25 19:50:00","discussion":[{"upvote_count":"10","comment_id":"1237911","poster":"ebbff63","content":"Selected Answer: C\nGuardDuty only monitors but doesn't block malicious attempts. So answer is C","timestamp":"1719469440.0"},{"comment_id":"1239710","upvote_count":"6","poster":"Helpnosense","timestamp":"1719761460.0","content":"Selected Answer: C\nNot A because the question only say \"Several customers also have access to a legacy API that is running on a single standalone Amazon EC2 instance.\" There is no ALB or cloudfront mentioned so WAF can't be attached to EC2 directly."},{"upvote_count":"1","comment_id":"1313235","content":"Selected Answer: C\nThe correct answer is Option C: Use AWS WAF to protect the API Gateway API. Configure Amazon Inspector to analyze the legacy API. Configure Amazon GuardDuty to monitor for malicious attempts to access the APIs.\n\nOption C is the right choice because it directly addresses the requirement of increasing security for the API Gateway API by using AWS WAF to protect it from DoS attacks, vulnerabilities, and exploits. It also correctly suggests using Amazon Inspector to assess the security posture of the EC2 instance hosting the legacy API, and configures Amazon GuardDuty to monitor for malicious attempts across both APIs. \nIn contrast, Option A does not explicitly mention protecting the API Gateway API and incorrectly suggests using Inspector to analyze the legacy API application itself.","timestamp":"1731790020.0","poster":"0b43291"},{"content":"Option C seems to be correct. In Option B, its mentioned AWS inspector to analyze both the gateway API and EC2 API. AWS inspector cannot directly monitor gateway API, it requires additional WAF configuration for it.","comment_id":"1302889","poster":"Danm86","timestamp":"1729867620.0","upvote_count":"1"},{"poster":"gfhbox0083","timestamp":"1720178640.0","content":"C, for sure.\nAWS GuardDuty is a monitoring and threat detection service and does not directly block malicious activities. GuardDuty is designed to continuously monitor and analyze your AWS accounts and workloads for potential threats using machine learning, anomaly detection, and integrated threat intelligence.","comment_id":"1242730","upvote_count":"1"},{"upvote_count":"2","timestamp":"1719514140.0","poster":"mifune","content":"Selected Answer: A\n\"The company wants to increase the security for these APIs to better prevent denial of service (DoS) attacks, check for vulnerabilities, and guard against common exploits.\", so I understand that we have to protect BOTH, and GuardDuty does not block anything... The answer for me is A","comment_id":"1238354","comments":[{"content":"how are you going to attache WAF to ec2? :)","timestamp":"1719748320.0","poster":"toma","upvote_count":"3","comment_id":"1239626"}]},{"comment_id":"1237022","timestamp":"1719337800.0","upvote_count":"1","poster":"zapper1234","content":"B becuase this protects both API's"}],"question_images":[],"answers_community":["C (89%)","11%"],"topic":"1"},{"id":"sDpSN83MCKvFkavcLEDl","answer":"B","answer_ET":"B","choices":{"C":"Create a custom parameter group. Increase the value of the max_connections parameter. Associate the custom parameter group with the RDS DB instance and schedule a reboot. Increase the reserved concurrency for the Lambda functions.","A":"Update the code of the Lambda functions so that the Lambda functions open the database connection outside of the function handler. Increase the provisioned concurrency for the Lambda functions.","B":"Create an RDS Proxy endpoint for the database. Store database secrets in AWS Secrets Manager. Set up the required IAM permissions. Update the Lambda functions to connect to the RDS Proxy endpoint. Increase the provisioned concurrency for the Lambda functions.","D":"Create an RDS Proxy endpoint for the database. Store database secrets in AWS Secrets Manager. Set up the required IAM permissions. Update the Lambda functions to connect to the RDS Proxy endpoint. Increase the reserved concurrency for the Lambda functions."},"question_text":"A company is running a serverless ecommerce application on AWS. The application uses Amazon API Gateway to invoke AWS Lambda Java functions. The Lambda functions connect to an Amazon RDS for MySQL database to store data.\n\nDuring a recent sale event, a sudden increase in web traffic resulted in poor API performance and database connection failures. The company needs to implement a solution to minimize the latency for the Lambda functions and to support bursts in traffic.\n\nWhich solution will meet these requirements with the LEAST amount of change to the application?","exam_id":33,"isMC":true,"url":"https://www.examtopics.com/discussions/amazon/view/142924-exam-aws-certified-solutions-architect-professional-sap-c02/","unix_timestamp":1719337920,"answer_images":[],"question_id":433,"answer_description":"","timestamp":"2024-06-25 19:52:00","discussion":[{"comments":[{"timestamp":"1719514500.0","upvote_count":"3","comment_id":"1238357","content":"yes, I would go with \"Provisioned concurrency\" too.","poster":"mifune"}],"content":"Provisioned Concurrency - makes sure Lambda functions could handle traffic bursts\nRDS proxy endpoint - intelligently manages connections to a relational database ( Amazon RDS here) So, the answer - B","timestamp":"1719470700.0","upvote_count":"6","comment_id":"1237929","poster":"ebbff63"},{"poster":"mifune","upvote_count":"5","content":"Selected Answer: B\nIf cost is a primary concern, Reserved Concurrency could be a more economical choice. Provisioned Concurrency is designed to provide more control over your Lambda function’s performance and scalability. Answer is B.","comment_id":"1238359","timestamp":"1719514860.0"},{"upvote_count":"1","content":"Selected Answer: A\nOption A is likely the best choice. \nIt involves a straightforward adjustment to how database connections are handled without introducing new services or significantly altering existing infrastructure. While it still requires some code changes, these are limited compared to Options B, C, and D.\n\nIn summary, while using AWS Secrets Manager (as in Options B and D) provides security benefits, it also introduces more complexity and significant changes to your existing setup. Therefore, if minimizing changes is your primary goal, Option A (updating the Lambda function code for connection handling) is the most suitable choice.","poster":"TomTom","timestamp":"1733733120.0","comment_id":"1323920"},{"comment_id":"1313331","timestamp":"1731807660.0","poster":"AzureDP900","upvote_count":"1","content":"B is correct \n\nThis solution requires minimal changes to the application:\n• Creating an RDS Proxy endpoint and updating the Lambda functions to use it is a relatively minor modification.\n• Store database secrets in AWS Secrets Manager adds some complexity, but it is still a manageable change.\n• Increasing provisioned concurrency for the Lambda functions can help handle bursts in traffic without requiring significant changes to the application."},{"poster":"0b43291","timestamp":"1731790440.0","upvote_count":"1","comment_id":"1313240","content":"Selected Answer: B\nBy leveraging RDS Proxy, AWS Secrets Manager, and increasing provisioned concurrency, Option B provides a scalable and secure solution with minimal changes to the application code, making it the most appropriate choice for meeting the requirements.\n\nThe other options have drawbacks or require more significant changes to the application:\nOption A: While it suggests increasing provisioned concurrency, opening database connections outside the function handler may not be a best practice and could lead to connection leaks or other issues.\n\nOption C: Increasing the max_connections parameter on the RDS instance may not be sufficient to handle bursts in traffic and could potentially impact performance. Additionally, it requires scheduling a reboot, which could cause downtime.\n\nOption D: While it correctly suggests using RDS Proxy, AWS Secrets Manager, and increasing reserved concurrency, it does not mention provisioned concurrency, which is more suitable for handling bursts in traffic."},{"timestamp":"1728771900.0","upvote_count":"3","poster":"JoeTromundo","comment_id":"1296655","content":"Selected Answer: B\nConnection Pooling: RDS Proxy helps manage database connections efficiently by pooling and reusing connections. Reduced Latency: By reducing the overhead of establishing new connections for each Lambda invocation, RDS Proxy improves the overall performance, minimizing the latency experienced by your application during traffic bursts. Provisioned Concurrency: Increasing the provisioned concurrency for the Lambda functions ensures they are always ready to handle spikes in traffic, reducing cold start times. Seamless Integration: The integration with AWS Lambda and Secrets Manager ensures that the database credentials are securely managed. IAM Permissions: The use of AWS Identity and Access Management (IAM) permissions to control access to the proxy ensures security and compliance, making this solution secure and scalable."},{"poster":"vip2","timestamp":"1720288980.0","upvote_count":"4","content":"Selected Answer: B\nB is correct for least operation(not cost effectively) in question","comment_id":"1243482"},{"upvote_count":"2","comment_id":"1239713","poster":"Helpnosense","timestamp":"1719762180.0","comments":[{"comment_id":"1268876","timestamp":"1724091000.0","poster":"tgv","upvote_count":"1","content":"\"LEAST amount of change to the application\"\nB doesn't need auto-scaling if you're using RDS Proxy"}],"content":"Selected Answer: A\nA is right answer. D is wrong because the provisioned Concurrency is the term to keep pre-allocated warm instances of lambda not reserved concurrency. B missing auto scaling the db."},{"comment_id":"1239620","poster":"ebbff63","content":"Selected Answer: B\nAnswer B","upvote_count":"1","timestamp":"1719746940.0"},{"poster":"Alagong","upvote_count":"4","content":"Selected Answer: D\nOption D with \"reserved concurrency\" can be more cost-effective and flexible for handling sudden traffic bursts, as it ensures a minimum number of instances without the potential over-provisioning of provisioned concurrency.","comment_id":"1237781","timestamp":"1719443340.0"},{"content":"Sorry, meant A","timestamp":"1719338040.0","poster":"zapper1234","upvote_count":"1","comment_id":"1237024"}],"question_images":[],"answers_community":["B (67%)","D (19%)","14%"],"topic":"1"},{"id":"jXNlDaamYiU20jBLytE0","question_images":[],"answer":"C","isMC":true,"question_id":434,"answer_images":[],"answer_description":"","answers_community":["C (49%)","D (43%)","8%"],"unix_timestamp":1673690820,"choices":{"D":"Place the EC2 instances behind a Network Load Balancer (NLB). Provision a third-party SSL certificate and install it on the NLB and on each EC2 instance. Configure the NLB to listen on port 443 and to forward traffic to port 443 on the instances.","B":"Associate the EC2 instances with a target group. Provision an SSL certificate using AWS Certificate Manager (ACM). Create an Amazon CloudFront distribution and configure it to use the SSL certificate. Set CloudFront to use the target group as the origin server.","A":"Place the EC2 instances behind an Application Load Balancer (ALB). Provision an SSL certificate using AWS Certificate Manager (ACM), and associate the SSL certificate with the ALB. Export the SSL certificate and install it on each EC2 instance. Configure the ALB to listen on port 443 and to forward traffic to port 443 on the instances.","C":"Place the EC2 instances behind an Application Load Balancer (ALB) Provision an SSL certificate using AWS Certificate Manager (ACM), and associate the SSL certificate with the ALB. Provision a third-party SSL certificate and install it on each EC2 instance. Configure the ALB to listen on port 443 and to forward traffic to port 443 on the instances."},"exam_id":33,"answer_ET":"C","topic":"1","url":"https://www.examtopics.com/discussions/amazon/view/95169-exam-aws-certified-solutions-architect-professional-sap-c02/","question_text":"A company is planning to host a web application on AWS and wants to load balance the traffic across a group of Amazon EC2 instances. One of the security requirements is to enable end-to-end encryption in transit between the client and the web server.\n\nWhich solution will meet this requirement?","timestamp":"2023-01-14 11:07:00","discussion":[{"poster":"pitakk","timestamp":"1674484980.0","comment_id":"785469","content":"Selected Answer: C\nAmazon-issued public certificates can’t be installed on an EC2 instance. To enable end-to-end encryption, you must use a third-party SSL certificate. https://aws.amazon.com/premiumsupport/knowledge-center/acm-ssl-certificate-ec2-elb/ so it's C or D. I choose C as it's ALB","comments":[{"timestamp":"1707782940.0","poster":"_Jassybanga_","content":"in C , the encryption will terminate at ALB so its not an end-2-end encryption , for e2e end encryption need NLB","comment_id":"1148787","upvote_count":"3"},{"comment_id":"822036","poster":"hobokabobo","comments":[{"timestamp":"1712171400.0","content":"that means you are decrypting the data on ALB and encrypt it again to send it to EC2. Does that sound E2E?","poster":"bjexamprep","upvote_count":"5","comment_id":"1188859"}],"upvote_count":"2","timestamp":"1677380700.0","content":"correct, but then you would use that ordered certificate for the alb as well. The other reason to order certificates is because some clients cannot verify ACM certificates which is not acceptable for a productive public service.\n\nBetween ALB and EC2 a self signed certificate is sufficient as alb does no verification of the EC2's certificate at all."}],"upvote_count":"48"},{"comment_id":"781927","upvote_count":"41","content":"Selected Answer: D\nVote D.\nIf you need to pass encrypted traffic to targets without the load balancer decrypting it, you can create a Network Load Balancer or Classic Load Balancer with a TCP listener on port 443.\nhttps://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html","timestamp":"1674196320.0","comments":[{"timestamp":"1677380820.0","poster":"hobokabobo","comment_id":"822037","content":"coorect. but they want to upload the the certificate to the NLB for unknown reasons.","upvote_count":"7"},{"timestamp":"1679549520.0","comment_id":"847832","poster":"Arnaud92","upvote_count":"2","content":"You can use NLB with ACM cert on it. NLB can do TLS termination (https://aws.amazon.com/blogs/aws/new-tls-termination-for-network-load-balancers/) and re-encrypt to target"},{"content":"how can this be true? Option D says to install on NLB.\nYou say bypass the NLB. If you bypass the NLB why are you installing the cert?","comment_id":"823521","timestamp":"1677493200.0","poster":"lkyixoayffasdrlaqd","upvote_count":"12"}],"poster":"Untamables"},{"upvote_count":"1","content":"Selected Answer: C\nPlease read the question carefully: \"end-to-end encryption IN TRANIST\"--There is no requirement for TLS termination at the NLB, and uploading the certificate to the NLB would effectively negate this anyway (I think it's thrown in there specifically to show this is the wrong answer). While it's worded poorly, the only good answer is C, which will decrypt and reencrypt traffic at the ALB only, but all traffic traversing the network will be encrypted while IN TRANSIT.","poster":"Trap_D0_r","comment_id":"1362383","timestamp":"1740623280.0"},{"timestamp":"1739931000.0","content":"Selected Answer: D\nA is not correct because as pitakk mentioned, Amazon-issued public certificates from AWS Certificate Manager (ACM) cannot be directly installed on an EC2 instance. It requires 3rd party certificates.\nB doesn't make any sense.\nC is not correct because ALB decrypts the traffic before sending it to the target EC2 instances.\nD is correct because NLB has TCP pass through. With this, NLB doesn't have to decrypt the traffic before forwarding it to the target instances.\nCourtesy to Perplexity & DeepSeek.","poster":"uffd","comment_id":"1358549","upvote_count":"1"},{"comments":[{"content":"from your link : You cannot associate ACM certificates with an EC2 instance that is not connected to a Nitro Enclave. this is for Nitro case . Also : ACM is integrated with Elastic Load Balancing to deploy ACM certificates on the load balancer. For more information, so Answer is A .","timestamp":"1733755620.0","upvote_count":"1","comment_id":"1324096","poster":"Heman31in"}],"content":"Selected Answer: C\nhttps://docs.aws.amazon.com/acm/latest/userguide/acm-services.html \nAWS Certificate Manager (ACM) certificates cannot be directly installed on Amazon EC2 instances, except for those connected to a Nitro Enclave. Therefore my choice is also C.","comment_id":"1321528","timestamp":"1733255940.0","poster":"attila9778","upvote_count":"1"},{"comment_id":"1321424","timestamp":"1733239140.0","poster":"sergza","content":"Selected Answer: D\nAccording to: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html If you need to pass encrypted traffic to targets without the load balancer decrypting it, you can create a Network Load Balancer or Classic Load Balancer with a TCP listener on port 443. With a TCP listener, the load balancer passes encrypted traffic through to the targets without decrypting it.","upvote_count":"2"},{"upvote_count":"2","comment_id":"1317173","timestamp":"1732474440.0","poster":"henrikhmkhitaryan59","content":"Selected Answer: D\nend-to-end encryption"},{"timestamp":"1726055100.0","content":"Selected Answer: D\nI'm leaning closer to D because, NLB supports e2e. I feel that if the question asked about offloading then the ALB options may have been better. But here it's asking for e2e and can only be done with an NLB","upvote_count":"3","comment_id":"1282063","poster":"AWSum1"},{"comment_id":"1275498","poster":"amministrazione","content":"D. Place the EC2 instances behind a Network Load Balancer (NLB). Provision a third-party SSL certificate and install it on the NLB and on each EC2 instance. Configure the NLB to listen on port 443 and to forward traffic to port 443 on the instances.","timestamp":"1725094560.0","upvote_count":"1"},{"upvote_count":"1","comment_id":"1253979","content":"it is D, C is more complex.","poster":"toma","timestamp":"1721770980.0"},{"upvote_count":"1","timestamp":"1716498780.0","comment_id":"1217026","content":"Selected Answer: C\nTo achieve end-to-end encryption for a web application using AWS, place the EC2 instances behind an Application Load Balancer (ALB). Provision an SSL certificate using AWS Certificate Manager (ACM) and associate it with the ALB to handle HTTPS traffic from clients to the ALB. Additionally, install a third-party SSL certificate on each EC2 instance to ensure that traffic between the ALB and the instances is also encrypted. Configure the ALB to listen on port 443 and forward traffic to port 443 on the instances. This setup ensures that all data in transit is encrypted from the client through the ALB to the backend EC2 instances, meeting security requirements for end-to-end encryption while leveraging ACM for simplified certificate management ￼ ￼ ￼.","poster":"higashikumi"},{"poster":"Malcnorth59","upvote_count":"2","timestamp":"1716301380.0","content":"Selected Answer: D\nThe key here is end-to-end, so that rules out ALB. Instead Use NLB with TLS termination which will pass the traffic on encrypted.\n\nhttps://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#:~:text=The%20load%20balancer%20passes%20the,combination%20of%20protocols%20and%20ciphers.","comment_id":"1215022"},{"comment_id":"1214552","poster":"titi_r","upvote_count":"3","content":"Selected Answer: D\n“To enable END-TO-END encryption, you must procure an SSL certificate from a third-party vendor.\nYou can then install the certificate on the EC2 instance and also associate the SAME certificate with the (network) Load Balancer by importing it into Amazon Certificate Manager.”\nhttps://www.youtube.com/watch?v=6Nz0RFfBqVE&t=44s \n\nTLS listeners for your Network Load Balancer\n\"… if you need to pass encrypted traffic to the targets without the (network) load balancer decrypting it, create a TCP listener on port 443 instead of creating a TLS listener.\"\nhttps://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\n\nP.S. The answer is misleading because it says to install the certificate on the NLB; read it as “import it to ACM and associate it with the NLB.","timestamp":"1716229680.0"},{"content":"Selected Answer: C\nC is correct because\nALB+Self-signed Certification\nNLB+Public Certification","poster":"vip2","comment_id":"1211798","upvote_count":"1","timestamp":"1715755980.0"},{"comment_id":"1177823","content":"Selected Answer: A. Public Certificates: You can request Amazon-issued public certificates from ACM. ACM manages the renewal and deployment of public certificates that are used with ACM-integrated services, including Amazon CloudFront, Elastic Load Balancing, and Amazon API Gateway. https://aws.amazon.com/es/certificate-manager/faqs/","timestamp":"1710892080.0","upvote_count":"2","poster":"EmmanuelPR"},{"comment_id":"1175424","content":"Selected Answer: C\nC: use ACM in the ALB and third-party SSL certificate in the EC2 instances","poster":"gofavad926","upvote_count":"2","timestamp":"1710632700.0"},{"upvote_count":"1","content":"Selected Answer: D\nThe only solution that encrypts all the way is D.","timestamp":"1710182580.0","comment_id":"1171240","poster":"Dgix"},{"content":"Selected Answer: D\nThe different opinions are mainly on C or D. Both C and D are good for end to end encryption “in transit”. But actually the data is unencrypted on the ALB, and then encrypted again. Technically speaking, the ALB should be considered as part of the “transit”. This is a flaw of C. And it is complicated to introduce another certificate. \nThe flaws of answer D are: \n- mentioning installing SSL certificate to the NLB, which is not necessary.\n- It doesn’t mention which listener is used. TLS listener does SSL termination while TCP listener does not.","comment_id":"1167558","poster":"bjexamprep","upvote_count":"2","timestamp":"1709768460.0"},{"poster":"marszalekm","upvote_count":"2","timestamp":"1708979520.0","content":"https://aws.amazon.com/blogs/aws/mutual-authentication-for-application-load-balancer-to-reliably-verify-certificate-based-client-identities/","comment_id":"1160054"},{"upvote_count":"3","comment_id":"1109799","content":"Selected Answer: D\nNot A. You cannot export ACM certificate https://repost.aws/knowledge-center/configure-acm-certificates-ec2\nNot B. You cannot set CloudFront to use the target group as the origin server, you need to set the ELB the target group is assigned\nNot C. This terminates SSL in the load balancer and then re-encrypt, while the question asks for end-to-end encryption in transit between the client and the web server. https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html\n\nNLB configured with TCP listener on port 443 is the right option. This answer is misleading as it mention to install the SSL certificate on the NLB, this is not needed if you do not use a TLS listener.","timestamp":"1703948820.0","poster":"ninomfr64"},{"upvote_count":"1","timestamp":"1701796080.0","poster":"subbupro","content":"D would be fine transport level security. No need any encrypt and decrypt.","comment_id":"1088654"},{"upvote_count":"1","content":"Selected Answer: D\nApplication Load Balancers do not support mutual TLS authentication (mTLS). For mTLS support, create a TCP listener using a Network Load Balancer or a Classic Load Balancer and implement mTLS on the target.\nRef: 4th paragraph of https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html","timestamp":"1700920980.0","poster":"sonyaws","comment_id":"1080045"},{"timestamp":"1700462940.0","upvote_count":"3","content":"Selected Answer: D\nNote that if you need to pass encrypted traffic to the targets without the load balancer decrypting it, create a TCP listener on port 443 instead of creating a TLS listener. The load balancer passes the request to the target as is, without decrypting it.\n\nhttps://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\n\nMust be D. C will decrypt request once for sure","comment_id":"1075200","poster":"aokaddaoc"},{"comment_id":"1074921","poster":"heatblur","upvote_count":"2","content":"Selected Answer: C\nC is the best choice.\n\nSimilar to Option A, but with the use of a third-party SSL certificate installed on each EC2 instance. This approach would indeed ensure end-to-end encryption, with the ALB handling the SSL termination from the client and the third-party SSL certificate securing the connection from the ALB to the EC2 instances. This option is technically feasible and meets the requirement of end-to-end encryption.","timestamp":"1700427540.0"},{"timestamp":"1700417280.0","upvote_count":"1","poster":"PAUGURU","content":"This question is clearly wrong and no option is correct. In my world, end-to-end means there is no decryption from source to target (server). If you decrypt it on an NLB or ALB and then re-encrypt it, Amazon could read the traffic in clear if they want to, so the encryption is NEVER end-to-end with these choices.","comment_id":"1074819","comments":[{"upvote_count":"1","poster":"PAUGURU","comment_id":"1086690","content":"Change to D, the only one who lets encrypted traffic pass through; https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html","timestamp":"1701592500.0"}]},{"content":"Selected Answer: C\nC and D will work, but for web applications, C is preferred.","poster":"severlight","comment_id":"1069117","timestamp":"1699860480.0","upvote_count":"1"},{"content":"Selected Answer: A\nI originally picked C, but, you cannot use a third-party SSL certificate with an Application Load Balancer (ALB). An ALB only supports SSL certificates that are provisioned by AWS Certificate Manager (ACM) or imported into ACM. Remember this for the exam","timestamp":"1699480980.0","upvote_count":"1","comment_id":"1065994","poster":"Russs99","comments":[{"poster":"rainrafa","timestamp":"1706200140.0","content":"While you're doing that, also remember you can't export ACM certs. So definitely don't go for A.","upvote_count":"3","comment_id":"1131855"}]},{"content":"Selected Answer: D\nhttps://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html","upvote_count":"2","comment_id":"1063342","timestamp":"1699222680.0","poster":"SuperDuperPooperScooper"},{"poster":"Pupu86","timestamp":"1699163820.0","comment_id":"1062659","upvote_count":"1","content":"Selected Answer: C\nBoth NLB and ALB can handle SSL/TLS offloading/termination but I would choose C cause the crux here is pointing towards web traffic (HTTP) and ALB handles web traffic while NLB handles TCP traffic."},{"upvote_count":"1","content":"The correct answer is D. Even though you attach the certificate to the NLB as well it does not mean it has to use it. It would give the flexibility to either SSL Passthrough or SSL Termination at NLB. It is the only option that would enable end to end encryption since the ALB does not support SSL Passthrough and SSL termination happens at the load balancer level therefore stops the end to end encryption.","poster":"dpatra","timestamp":"1696984260.0","comment_id":"1039995"},{"poster":"longns","timestamp":"1696126380.0","comment_id":"1021971","content":"Selected Answer: D\nNo way for ALB pass encrypted traffic to targets without the load balancer decrypting it\nYou must create Network Load Balancer or Classic Load Balancer.\nAgain check anwser by your self dont just read commend :) include me \nhttps://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html","upvote_count":"2"},{"timestamp":"1692342480.0","upvote_count":"1","content":"D is the answer.\n\nfor NLB \nThe load balancer passes the request to the target as is, without decrypting it.\nsee \nhttps://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html\n\nA , you cannot export ACM cert\nhttps://repost.aws/knowledge-center/acm-export-certificate\n\nB and C both end point will decrypt the traffic and proxy to origin/target. to meet end-to-end encryption D is only one.","comment_id":"984240","poster":"Greyeye"},{"poster":"xplusfb","timestamp":"1691611500.0","content":"Selected Answer: C\nDue to Question asking end-to-end encryption so we did before like a question same scenerio and we have a 3rd party ssl into EC2 servers also using CloudFront ACM. im going too C fellas. thank you","comment_id":"976994","upvote_count":"3"},{"content":"Selected Answer: C\nAnswer: C\nSame reasons as most have put, plus this: https://repost.aws/questions/QUIo7PWvZ3T6aFYCByhZ5f0A/load-certificate-on-alb-and-ec2","poster":"chico2023","upvote_count":"1","comment_id":"973085","timestamp":"1691244600.0"},{"upvote_count":"2","content":"Selected Answer: C\nit's a C","timestamp":"1688308500.0","comment_id":"940972","poster":"NikkyDicky"},{"content":"Selected Answer: D\nC is valid, see here. https://faun.pub/end-to-end-ssl-encryption-with-aws-application-load-balancer-b43db918bd9e\nBut, D is better, less overhead and no fake certs.","upvote_count":"1","comment_id":"939142","timestamp":"1688134380.0","poster":"SmileyCloud"},{"timestamp":"1687954620.0","poster":"Jonalb","content":"Selected Answer: C\nits a C","upvote_count":"1","comment_id":"936632"},{"poster":"[Removed]","upvote_count":"1","timestamp":"1687780980.0","content":"Selected Answer: D\nD: An NLB is needed provide the complete end-to-end encryption the question calls for, the other answers all decrypt the traffic in the middle somewhere. The only confounding factor in the wording is it talks about \"installing the certificate on the NLB\" which isn't required for end-to-end, you'd just use pass-through TCP on port 443. You *can* install a certificate on an NLB if you want to use a TLS listener (https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html) but that would a) decrypt in the middle, and b) shouldn't be required here.","comment_id":"934377"},{"content":"Selected Answer: C\nI voted to C, as we need to have end-to-end encryption, and so we have to install third party certificates on EC2 instances (not ACM), and we have to use ALB so as HTTP traffic","poster":"ailves","timestamp":"1687090080.0","upvote_count":"1","comment_id":"926670"},{"content":"a-a-a-a-a-a-a-a-a-a-a-","upvote_count":"1","comments":[{"upvote_count":"1","comment_id":"924516","timestamp":"1686855900.0","poster":"easytoo","content":"changed it to c-c-c-c-c-c-c-c"}],"poster":"easytoo","comment_id":"924513","timestamp":"1686855240.0"},{"upvote_count":"2","content":"I will go C, but I was hesitating with D.\nSo what convinced me: no need to install any certs at nlb's as you're doing passthrough, so no decryption AT that moment.\nDrop D hence, and C is my choice","poster":"Asds","timestamp":"1686587580.0","comment_id":"921579"},{"timestamp":"1684775400.0","upvote_count":"1","poster":"papawed345","content":"Selected Answer: D\nThe only possible answer is an NLB. The ALB will always decrypt in the middle.","comment_id":"904245"},{"comments":[{"content":"I agree with you. NLB can work by its tcp endpoint to forward encrypted connection through it but in this case there is no need to install cert on NLB. so C is better.","comment_id":"906620","upvote_count":"1","timestamp":"1685015640.0","poster":"Jesuisleon"}],"upvote_count":"6","content":"Selected Answer: C\nC is correct. Although D works, the fact that it states \"install it on NLB\" is wrong as you can ony associate/add it to the listener but there is no install option. ALB with public ACM cert fw to target group with seflf signed cert listening on port 443 is correct (see the implementation steps here).","comment_id":"901105","poster":"emiioan","timestamp":"1684408200.0"},{"upvote_count":"1","content":"vote for D. \nNLB works at layer 7 and won't decrypt traffic. However, ALB works at layer 4.","timestamp":"1683519600.0","comments":[{"timestamp":"1683719700.0","upvote_count":"4","content":"I think you have that backward; Network actually works at L3 (Network Layer of OSI model), and L4 (Transport UDP/TCP). When introduced, the NLB could not do TLS work, although it is now. ALB works in L7 or the application layer of the OSI model. ALB is only an HTTP proxy, so it only supports HTTP traffic; you won't be able to use it for UDP traffic or any other TCP.","comment_id":"893874","poster":"Sarutobi"}],"comment_id":"891797","poster":"meggie"},{"poster":"F_Eldin","timestamp":"1683329400.0","upvote_count":"3","comment_id":"890374","content":"Selected Answer: A\nyou can also export private certificates for use on EC2 instances, on ECS containers, or anywhere. \nhttps://aws.amazon.com/certificate-manager/faqs/"},{"content":"Selected Answer: C\nHere is a similar scenario but for beanstalk https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https-endtoend.html","comment_id":"877612","timestamp":"1682194680.0","upvote_count":"1","poster":"Maria2023"},{"timestamp":"1681626060.0","upvote_count":"4","content":"Selected Answer: C\nThey can place the EC2 instances behind an Application Load Balancer (ALB), provision an SSL certificate using AWS Certificate Manager (ACM), and associate the SSL certificate with the ALB. They can also provision a third-party SSL certificate and install it on each EC2 instance. Finally, they can configure the ALB to listen on port 443 and to forward traffic to port 443 on the instances. This will ensure that traffic is encrypted both between the client and the ALB, and between the ALB and the EC2 instances.","comment_id":"871509","poster":"OCHT"},{"poster":"Jacky_exam","upvote_count":"5","content":"Selected Answer: A\nA. Place the EC2 instances behind an Application Load Balancer (ALB). Provision an SSL certificate using AWS Certificate Manager (ACM), and associate the SSL certificate with the ALB. Export the SSL certificate and install it on each EC2 instance. Configure the ALB to listen on port 443 and to forward traffic to port 443 on the instances.\n\nThis solution is the recommended approach for enabling SSL/TLS encryption between clients and web servers on AWS. It uses the Application Load Balancer (ALB) to terminate SSL/TLS traffic and then forwards the traffic to the EC2 instances over an encrypted connection.\n\nProvisioning an SSL certificate using AWS Certificate Manager (ACM) provides a free, trusted SSL/TLS certificate that can be easily managed and automatically renewed. The SSL certificate is associated with the ALB and can be exported and installed on each EC2 instance for end-to-end encryption.","comment_id":"863511","timestamp":"1680845880.0"},{"timestamp":"1680411960.0","content":"Selected Answer: D\nOF COURSE network lb with third party certificate","upvote_count":"2","comment_id":"858531","poster":"takecoffe"},{"poster":"Amac1979","upvote_count":"1","timestamp":"1680120300.0","content":"Selected Answer: C\nhttps://repost.aws/knowledge-center/acm-ssl-certificate-ec2-elb","comment_id":"854901"},{"poster":"mfsec","content":"Selected Answer: C\nC is my vote","upvote_count":"1","timestamp":"1680003540.0","comment_id":"853183"},{"content":"Selected Answer: C\nC is the best solution and it does actually work (you can google it)\nAnswer D is wrong .. why you would import the certificate on the NLB stage if it’s end to end? The host (ec2) should handle the certificate..","upvote_count":"1","timestamp":"1678998660.0","poster":"dev112233xx","comment_id":"841336"},{"comment_id":"839670","content":"Selected Answer: C\nAmazon-issued public certificates can’t be installed on an EC2 instance. To enable end-to-end encryption, you must use a third-party SSL certificate\nhttps://aws.amazon.com/premiumsupport/knowledge-center/acm-ssl-certificate-ec2-elb/?nc1=h_ls","timestamp":"1678868580.0","upvote_count":"1","poster":"aqiao"},{"comment_id":"838529","timestamp":"1678765200.0","content":"Selected Answer: D\nhttps://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html\nSays to configure NLB to 'listen' and forward for end to end\n\nunder ALB it points you to NLB \" If you must ensure that the targets decrypt HTTPS traffic instead of the load balancer, you can create a Network Load Balancer with a TCP listener on port 443.\" https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html","upvote_count":"1","poster":"zejou1"},{"timestamp":"1678525620.0","upvote_count":"3","comment_id":"835775","content":"Vote for D\noption C will unencrypt the traffic on ALB, and goes against end-to-end encryption from server to client","poster":"cherep87"},{"content":"Selected Answer: C\nC is correct.\nAppMesh can be used here?","comment_id":"833659","upvote_count":"1","poster":"vherman","timestamp":"1678344180.0"},{"content":"Selected Answer: C\nAWS Certificate Manager (ACM) SSL certificates cannot be directly applied to EC2 instances . - I will go with C on this one","poster":"kiran15789","timestamp":"1678272420.0","comment_id":"832835","upvote_count":"1"},{"comment_id":"832165","content":"Selected Answer: D\nNot idea why AWS says that these solutions guarantee \"complete end-to-end encryption in transit\"\n\n\nhttps://aws.amazon.com/blogs/aws/new-tls-termination-for-network-load-balancers/\n\n\"After choosing the certificate and the policy, I click Next:Configure Routing. I can choose the communication protocol (TCP or TLS) that will be used between my NLB and my targets. If I choose TLS, communication is encrypted; this allows you to make use of complete end-to-end encryption in transit:\"","upvote_count":"1","poster":"rtgfdv3","timestamp":"1678210620.0"},{"timestamp":"1677933120.0","comment_id":"828915","comments":[{"content":"\"After choosing the certificate and the policy, I click Next:Configure Routing. I can choose the communication protocol (TCP or TLS) that will be used between my NLB and my targets. If I choose TLS, communication is encrypted; this allows you to make use of complete end-to-end encryption in transit:\"\n\nI did not know TLS termination was possible with NLB's \nhttps://aws.amazon.com/blogs/aws/new-tls-termination-for-network-load-balancers/","poster":"Ajani","comment_id":"828921","timestamp":"1677933480.0","upvote_count":"2"}],"poster":"Ajani","content":"Selected Answer: D\nhttps://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/use_cases/nlb_tls_termination/#:~:text=AWS%20introduced%20TLS%20termination%20for,access%20to%20the%20private%20key.","upvote_count":"1"},{"comment_id":"822028","upvote_count":"1","timestamp":"1677380160.0","comments":[{"comments":[{"content":"\"You cannot use ACM to install a public certificate directly on your AWS based website or application. You must use one of the services integrated with ACM\"\nIn our case, we want to install the certificate on the EC2, which is not possible when it is stored in ACM.\nhttps://docs.aws.amazon.com/acm/latest/userguide/gs-acm-install.html\nIt is only possible in ACM PCA.","timestamp":"1677590880.0","comments":[{"comment_id":"858729","content":"Yep, that is the behavior I found. Up to now found no way to get hold of the key(download it).","timestamp":"1680430260.0","upvote_count":"1","poster":"hobokabobo"}],"comment_id":"824842","poster":"sambb","upvote_count":"2"},{"poster":"hobokabobo","comment_id":"858724","content":"Uhm: you have a key and a certificate. \nThat you can download the cert does not mean that you can download the key for the certificate. At least I never found any method to do so. There is a button to download the cert but no button to download the key. \nOr I was not able to find it.","timestamp":"1680429960.0","upvote_count":"1"}],"upvote_count":"1","poster":"lkyixoayffasdrlaqd","timestamp":"1677493440.0","comment_id":"823524","content":"You cannot export ACM Keys? Who says that? You can if you are in the same account and region.\n\"You can't export an ACM certificate from one AWS Region to another or from one AWS account to another. This is because the default AWS Key Management Service (AWS KMS) key used to encrypt the private key of the certificate is unique for each AWS Region and AWS account.\""}],"poster":"hobokabobo","content":"Retry neclecting end to end:\nIt is imo not possible to export ACM keys. Therefore I think one cannot install an ACM certificate on EC2.\nThis excludes A.\nNow we have three technically possible solutions.\nB) has no encryption at all between cloudfront and ec2.\nC) order a certificate from a third party to not deliver it to the client.\nD) NLB certificate support is limited, can't do strong encryption.\n\nFrom that it D and C are slightly better than B as they provide encryption between server and ALB/NLB - even though its not end to end."},{"timestamp":"1677378180.0","upvote_count":"3","content":"Selected Answer: D\nThe key in this question is *end to end* encryption between client and server. That means we are not allowed to offload encryption to a load balancer but instead need the load balancer to pass the encrypted traffic as is to the server. As we may not interfere in the encrypted traffic all benefits of an application load balancer are void. An NLB is the best choice.\n\nAs a side note: C is ridiculous: order a certificate to not deliver it to clients? If one offloads one would use the same certificate for server and alb or use the ordered certificate on the alb and create a cheaper one for internal encryption between server and alb. You want the ordered certificate delivered to the clients.","poster":"hobokabobo","comments":[{"upvote_count":"1","poster":"hobokabobo","comment_id":"822016","timestamp":"1677379020.0","comments":[{"poster":"OnePunchExam","timestamp":"1680934740.0","upvote_count":"1","comment_id":"864460","comments":[{"timestamp":"1681029360.0","comments":[{"comment_id":"865369","timestamp":"1681029960.0","upvote_count":"1","content":"also AWS Loadbalancers do no verification at all. Because of that putting a cert on the NLB voids verification (Man in the middle) completely. mTLS: opposite - that would be fine.","poster":"hobokabobo"}],"comment_id":"865366","upvote_count":"1","content":"Actually: no. The straight oposite. Also with D they decrypt and reencrypt on the NLB for what reason ever. That they do *not* do mTLS is the problem. The answer is not mTLS.","poster":"hobokabobo"}],"content":"You will be in for a shock when you start learning about mTLS and microservices."}],"content":"Actually, I was not able to read correctly. D also violates end to end encryption. (C is still ridiculous.)"}],"comment_id":"822006"},{"timestamp":"1676912160.0","poster":"jaysparky","upvote_count":"2","comment_id":"815563","content":"Both C and D are correct"},{"comment_id":"812520","content":"Selected Answer: C\nC 100% - ACM for ALb and Third Party SSL certificate for EC2","timestamp":"1676681280.0","upvote_count":"1","poster":"spd"},{"timestamp":"1676654520.0","poster":"rtgfdv3","content":"Selected Answer: D\nthe prob that i can see with C. is that [ do not guarantee ] end-to-end. you need to off load ssl in the ALB and then re_encrypt again, meaning that at some point (inside the ALB) you have the data in plain text.","upvote_count":"1","comment_id":"812161"},{"timestamp":"1676521020.0","comments":[{"poster":"c73bf38","comment_id":"810245","upvote_count":"1","content":"Moderator, don't approve, this is incorrect.","timestamp":"1676521200.0"},{"comment_id":"818363","poster":"c73bf38","upvote_count":"1","timestamp":"1677097200.0","content":"After reading this https://aws.amazon.com/premiumsupport/knowledge-center/acm-ssl-certificate-ec2-elb, I've changed to C."}],"content":"Selected Answer: A\nAnswer: A\n\nExplanation:\n\nWhen using AWS Certificate Manager (ACM), you can provision SSL/TLS certificates that you can use with Amazon CloudFront to distribute traffic to EC2 instances or other resources. For encrypting data in transit between clients and web servers, you can place the EC2 instances behind an Application Load Balancer (ALB), provision an SSL/TLS certificate using ACM, and associate the SSL/TLS certificate with the ALB.\n\nOption B is incorrect because it doesn't provide end-to-end encryption between the client and the web server.\n\nOption C is incorrect because you don't need a third-party SSL/TLS certificate when you are using AWS Certificate Manager (ACM).\n\nOption D is incorrect because you can't install a third-party SSL/TLS certificate on a Network Load Balancer (NLB).","poster":"c73bf38","comment_id":"810244","upvote_count":"2"},{"upvote_count":"1","timestamp":"1676074740.0","comment_id":"804879","poster":"moota","content":"Selected Answer: C\nAccording to ChatGPT,\n\nAWS Certificate Manager (ACM) SSL certificates cannot be directly applied to EC2 instances. ACM SSL certificates can only be used with AWS services like Elastic Load Balancing (ELB), CloudFront, API Gateway, and some other services. To use an ACM SSL certificate with an EC2 instance, you would need to place the instances behind an Elastic Load Balancer (ELB) or an Application Load Balancer (ALB) that terminates SSL traffic using the ACM certificate, and then forward the traffic to the instances. Alternatively, you can obtain SSL certificates from other sources (like a third-party certificate authority or Let's Encrypt) and install them directly on the EC2 instances."},{"content":"Selected Answer: CD\nBoth C and D are correct","comment_id":"801686","poster":"tinyflame","timestamp":"1675834560.0","upvote_count":"1"},{"upvote_count":"2","timestamp":"1675163340.0","comment_id":"794049","poster":"jojom19980","content":"Selected Answer: C\nYou must also configure the instances in your environment to listen on the secure port and terminate HTTPS connections. The configuration varies per platform. See Configuring your application to terminate HTTPS connections at the instance for instructions. You can use a self-signed certificate for the EC2 instances without issue.\n link: https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https-endtoend.html"},{"comment_id":"791833","upvote_count":"1","timestamp":"1675009680.0","content":"Selected Answer: C\nI think I go for C, although depending on the definition of end-to-end (allows decryption in between?) might be D","poster":"Musk"},{"content":"Selected Answer: C\nI think C only because ACM only allows to export a private certificate, not public ones, which I assume are the ones being used by the ALB","timestamp":"1674469020.0","comment_id":"785210","upvote_count":"1","poster":"ccort"},{"poster":"bititan","content":"Selected Answer: C\nA. this is about end 2 end encyrption between client and web server. if you do not install cert in webserver, then the transmission between ALB and web server remains unencrypted. cost is not a factor mentioned here only security is","upvote_count":"2","comment_id":"782761","timestamp":"1674246240.0"},{"upvote_count":"4","timestamp":"1673690820.0","comment_id":"775237","content":"Selected Answer: A\nThe correct answer is option A. By placing the EC2 instances behind an Application Load Balancer (ALB) and provisioning an SSL certificate using AWS Certificate Manager (ACM), associating the SSL certificate with the ALB, and configuring the ALB to listen on port 443 and forward traffic to port 443 on the instances, it ensures that traffic is encrypted in transit between the client and the web server. This meets the requirement for end-to-end encryption.\n\nOption B is incorrect because it does not allow for end-to-end encryption in transit between the client and the web server.\n\nOption C is incorrect because it involves using two SSL certificates, one from AWS and one from a third-party, which would create complexity and increase costs.\n\nOption D is incorrect because it uses a Network Load Balancer (NLB) which does not support SSL termination and would not ensure end-to-end encryption in transit between the client and the web server.","comments":[{"upvote_count":"1","poster":"Asds","content":"Cant export ssl cert from ACM","comments":[{"timestamp":"1686587100.0","poster":"Asds","comment_id":"921575","content":"https://docs.aws.amazon.com/acm/latest/userguide/acm-services.html","upvote_count":"1"}],"comment_id":"921573","timestamp":"1686586980.0"}],"poster":"masetromain"}]},{"id":"FMe1oPbNLQRpwdJaJEcm","timestamp":"2024-06-27 08:49:00","unix_timestamp":1719470940,"choices":{"B":"Enable the private DNS option on the VPC attributes.","D":"Configure an Amazon Route 53 private hosted zone with a conditional forwarder for the internal application.","C":"Configure the security group on the interface endpoint to allow connectivity to the AWS services.","A":"Update the subnet route table with a route to the interface endpoint."},"isMC":true,"discussion":[{"upvote_count":"6","content":"Selected Answer: B\nensures proper DNS resolution for VPC endpoints.","comment_id":"1237931","timestamp":"1719470940.0","poster":"ebbff63"},{"poster":"AzureDP900","comment_id":"1313332","upvote_count":"1","content":"By choosing option B, the solutions architect can enable private DNS on the VPC attributes, which will resolve service names to private IP addresses, allowing internal applications to connect to interface endpoints without issues.","timestamp":"1731807720.0"},{"upvote_count":"3","comment_id":"1313242","poster":"0b43291","timestamp":"1731790680.0","content":"Selected Answer: B\nThe correct step the solutions architect should take to resolve the issue of service names resolving to public IP addresses and internal services not being able to connect to the interface endpoints is Option B: Enable the private DNS option on the VPC attributes.\n\nWhen you create an interface endpoint, AWS automatically creates a private DNS name for the service that resolves to the private IP addresses of the interface endpoint. However, by default, the private DNS option is disabled on the VPC, which means that DNS queries for the service name will be resolved using the public DNS instead of the private DNS provided by the interface endpoint.\n\nBy enabling the private DNS option on the VPC attributes, you instruct the VPC to use the private DNS names provided by the interface endpoints for the specified AWS services. This ensures that the service names resolve to the private IP addresses of the interface endpoints, allowing internal services within the VPC to connect to the AWS services using private IP addresses, as per the company's policy."},{"timestamp":"1728991200.0","comment_id":"1298194","poster":"chris_spencer","upvote_count":"1","content":"Selected Answer: B\nB .. .because we had exact this problem once. C would be right if name would be resolved to a private IP, but as described it is not, it resolves to the public ip, so B"},{"poster":"backbencher2022","timestamp":"1724516340.0","comment_id":"1271734","content":"Selected Answer: B\nSorry, Ignore my previous comment. private DNS would solve the issue. Option B is correct","upvote_count":"1"},{"content":"Selected Answer: C\nC (security group) is correct. Private DNS resolution is neither a mandatory pre-requisite to use interface endpoints nor a requirement in this question. If you read the question again, resolving to a public IP is a distractor which makes us think that private DNS (option B) is the correct option. The real problem is the 2nd issue of the question - not able to connect which is a security group configuration issue. Even if you don't want to use private DNS, your interface endpoint will still work however, without security group rule configured, you can't use interface endpoint at all. Check this document for a list of pre-requisites - https://docs.aws.amazon.com/vpc/latest/privatelink/create-interface-endpoint.html and 2nd point says \"To use private DNS...\" which implies you may or may not want to use Private DNS however, 4th pre-requisite \"Create a security group....\" is mandatory.","upvote_count":"1","comments":[{"upvote_count":"1","timestamp":"1740126480.0","poster":"altonh","content":"Agree. Besides, it seems the option to \"Enable private DNS only for inbound endpoint\" is to optimize networking costs.","comment_id":"1359683"}],"timestamp":"1724514840.0","poster":"backbencher2022","comment_id":"1271725"},{"timestamp":"1722349080.0","upvote_count":"1","content":"Here in prerequisites for interface endpoint:\nTo use private DNS, you must enable DNS hostnames and DNS resolution for your VPC. For more information, see View and update DNS attributes in the Amazon VPC User Guide.\nhttps://docs.aws.amazon.com/vpc/latest/privatelink/create-interface-endpoint.html","poster":"dzidis","comment_id":"1258270"},{"content":"Selected Answer: B\nPrivate DNS for Interface Endpoints. Answer B.","upvote_count":"1","comment_id":"1238362","timestamp":"1719515100.0","poster":"mifune"}],"answer_images":[],"answer_description":"","url":"https://www.examtopics.com/discussions/amazon/view/142969-exam-aws-certified-solutions-architect-professional-sap-c02/","question_text":"A company requires that all internal application connectivity use private IP addresses. To facilitate this policy, a solutions architect has created interface endpoints to connect to AWS Public services. Upon testing, the solutions architect notices that the service names are resolving to public IP addresses, and that internal services cannot connect to the interface endpoints.\n\nWhich step should the solutions architect take to resolve this issue?","exam_id":33,"question_id":435,"topic":"1","question_images":[],"answers_community":["B (92%)","8%"],"answer_ET":"B","answer":"B"}],"exam":{"isMCOnly":true,"numberOfQuestions":529,"isImplemented":true,"isBeta":false,"id":33,"provider":"Amazon","name":"AWS Certified Solutions Architect - Professional SAP-C02","lastUpdated":"11 Apr 2025"},"currentPage":87},"__N_SSP":true}