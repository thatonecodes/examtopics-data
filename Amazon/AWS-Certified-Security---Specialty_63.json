{"pageProps":{"questions":[{"id":"B9ePXBa5yKwMyTDQGetB","answer_description":"","question_text":"A company is testing a new version of its application. The company is using a public Amazon API Gateway API to expose the application. Currently, the company wants to allow only testers from its network to access the new application.\n\nWhich solutions can the company use to meet these requirements? (Choose two.)","choices":{"D":"Use a condition in the API Gateway resource policy to allow access only from the company’s IP address range.","B":"Create and configure a network ACL that allows traffic from the company’s IP address range. Apply the network ACL to the API Gateway API subnet.","A":"Create and configure a security group that allows access from the company’s IP address range. Apply the security group to the API Gateway API.","C":"Create an AWS WAF web ACL. Configure an IP match rule that allows traffic from the company’s IP address range. Apply the web ACL to the API Gateway API.","E":"Create an interface VPC endpoint for the API Gateway execute-api. Instruct testers to use this endpoint."},"answer_images":[],"exam_id":29,"answer":"CD","question_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/88150-exam-aws-certified-security-specialty-topic-1-question-379/","timestamp":"2022-11-21 02:25:00","discussion":[{"timestamp":"1672750440.0","upvote_count":"5","content":"Could be CD. Unsure of E as the API is public and there’s no discussion of where the tester network is.\n\nC \"can create rules to allow or block requests from specified IP address ranges\"\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html\n\nD \"Resource policies let you create resource-based policies to allow or deny access to your APIs and methods from specified source IP addresses or VPC endpoints.\"\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-to-api.html","poster":"secdaddy","comment_id":"764644"},{"poster":"wmp7039","upvote_count":"1","comment_id":"946821","timestamp":"1688866800.0","content":"Selected Answer: DE\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html"},{"comment_id":"934102","timestamp":"1687760460.0","upvote_count":"3","content":"Selected Answer: CD\nC is the first obvious solution. It's a public endpoint that supports WAF (not a security group or NACL).\n\nLeaves D and E.\nE wouldn't amend the existing public Gateway, just provide the engineers a different (private) method faccessing.\n\nThat leaves D:\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-resource-policies.html","poster":"Green53"},{"poster":"Toptip","comment_id":"914439","timestamp":"1685876400.0","content":"Selected Answer: DE\nD+E only combo that makes sense","upvote_count":"1","comments":[{"comment_id":"914446","content":"for D: \"aws:VpcSourceIp\"","upvote_count":"1","timestamp":"1685876580.0","poster":"Toptip"}]},{"content":"why not b?","upvote_count":"2","timestamp":"1681583280.0","comment_id":"871215","poster":"swolfgang"},{"content":"Selected Answer: CD\nQuestions says Public API which means that testers will use public network to call API. Thus, answer is CD","poster":"Cyp","upvote_count":"1","comment_id":"852382","timestamp":"1679941620.0"},{"poster":"c73bf38","comment_id":"843196","content":"Selected Answer: DE\nD and E \n\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-resource-policies.html\n\n\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-authorization-flow.html#apigateway-authorization-flow-resource-policy-only","upvote_count":"1","timestamp":"1679176920.0"},{"comment_id":"818107","content":"Selected Answer: CD\nE doesn't make sense. While this would enable testers to this the API from an endpoint, it wouldn't restrict users from the internet from also accessing it. The question requests that you implement a solution which LIMITS access to the API GW to testers only.","upvote_count":"4","timestamp":"1677087060.0","poster":"createchange"},{"poster":"arpgaur","timestamp":"1674800940.0","comment_id":"789365","upvote_count":"1","content":"Why not B & D ?"},{"upvote_count":"1","comment_id":"787692","poster":"selim507","timestamp":"1674654240.0","content":"Selected Answer: CD\nSince it is public api gateway, we need to focus on public facing surfaces. Like apigateway and waf.."},{"comment_id":"784373","content":"Selected Answer: CD\nE - incorrect - The company is using a public Amazon API Gateway API to expose the application.","timestamp":"1674396420.0","poster":"sakibmas","upvote_count":"2"},{"timestamp":"1673323500.0","upvote_count":"3","content":"E does not look a correct answer. In question it is not mentioned that the tester will access the application from any VPC. The application endpoint is already public. So does not make any sense to create a Private Endpoint for the API Gateway.","comment_id":"771047","comments":[{"timestamp":"1673323560.0","comment_id":"771048","upvote_count":"1","poster":"Smartphone","content":"C and D seem a correct answer."}],"poster":"Smartphone"},{"timestamp":"1673176980.0","comment_id":"769325","content":"Selected Answer: CD\nPlease read the question carefully.. it says Pubic API's and Testers will use their own network.\nHaving VPC endpoint access only restrict access to VPC. Hence E is wrong. To restrict Public access only for specific network we can add IP Rules in WAF and APi Gateway resource policy So I go with @secdaddy 's answer CD","poster":"sahanpere","upvote_count":"3"},{"upvote_count":"4","content":"Selected Answer: DE\nE: Using Amazon API Gateway, you can create private REST APIs that can only be accessed from your virtual private cloud in Amazon VPC by using an interface VPC endpoint. This is an endpoint network interface that you create in your VPC.\n\nD:Using resource policies, you can allow or deny access to your API from selected VPCs and VPC endpoints, including across AWS accounts","timestamp":"1669963920.0","poster":"tainh","comment_id":"733516"},{"poster":"AdamWest","upvote_count":"3","content":"Selected Answer: DE\nDE - Use resource policies to allow or deny access to your api from selected vpc endpoints.\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-private-apis.html","comment_id":"723117","timestamp":"1668993900.0"}],"answers_community":["CD (58%)","DE (42%)"],"isMC":true,"topic":"1","answer_ET":"CD","question_id":311,"unix_timestamp":1668993900},{"id":"iaWO7ydsSTxZNidbcCtE","answer_ET":"D","question_images":["https://www.examtopics.com/assets/media/exam-media/04239/0002800001.png"],"topic":"1","question_text":"A Security Engineer who was reviewing AWS Key Management Service (AWS KMS) key policies found this statement in each key policy in the company AWS account.\n//IMG//\n\nWhat does the statement allow?","unix_timestamp":1584523620,"answer_description":"","url":"https://www.examtopics.com/discussions/amazon/view/16917-exam-aws-certified-security-specialty-topic-1-question-38/","answers_community":["D (80%)","B (20%)"],"timestamp":"2020-03-18 10:27:00","answer_images":[],"choices":{"C":"All principals from account 111122223333 to use the key but only on Amazon S3.","A":"All principals from all AWS accounts to use the key.","B":"Only the root user from account 111122223333 to use the key.","D":"Only principals from account 111122223333 that have an IAM policy applied that grants access to this key to use the key."},"discussion":[{"upvote_count":"26","poster":"Skywalker2","comment_id":"113071","timestamp":"1634393280.0","content":"Answer is D\nhttps://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html\nIAM policies by themselves are not sufficient to allow access to a CMK. However, you can use them in combination with a CMK's key policy if the key policy enables it. Giving the AWS account full access to the CMK does this; it enables you to use IAM policies to give IAM users and roles in the account access to the CMK. It does not by itself give any IAM users or roles access to the CMK, but it enables you to use IAM policies to do so. For more information, see Managing access to AWS KMS CMKs.\n\nThe following example shows the policy statement that allows access to the AWS account and thereby enables IAM policies.\n\n{\n \"Sid\": \"Enable IAM User Permissions\",\n \"Effect\": \"Allow\",\n \"Principal\": {\"AWS\": \"arn:aws:iam::111122223333:root\"},\n \"Action\": \"kms:*\",\n \"Resource\": \"*\"\n}"},{"comment_id":"205756","timestamp":"1634539980.0","upvote_count":"16","poster":"Denis_H","content":"Duplicated question with Topic 1 question number 38\nAnswer is D\nhttps://youtu.be/X1eZjXQ55ec?t=1375","comments":[{"comment_id":"446083","poster":"SoukelezArtibuz","content":"\"Essentially what this is saying is 'allow the principal root'. So when people first see this they normally assume that this is the root user. It is not the root user.\nWhat this is actually doing is delegating permission to IAM. And in fact this statement here is delegating all KMS actions to IAM.\nSo that means any IAM user or principal within the account (so if you have another IAM user a role that also has a KMS star policy) to this key they are full admin. They will be able to perform any option that they want against this key.\nSo don't confuse that 'root' in this statement for the root user, but we only think of this statement as allowing IEM to further delegate permission.\"","upvote_count":"18","timestamp":"1636101780.0"}]},{"comment_id":"1304873","timestamp":"1730267820.0","poster":"shammous","upvote_count":"1","content":"Selected Answer: D\nPrincipal: This specifies the AWS account (111122223333) allowed to access the KMS key. In this case, the \"root\" principal represents all IAM users and roles within that AWS account."},{"poster":"a1234321606","content":"Selected Answer: B\nAns is B\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-accounts","upvote_count":"1","timestamp":"1730018040.0","comment_id":"1303521"},{"content":"this is about resource policy and identity policy.","comment_id":"946444","upvote_count":"1","timestamp":"1688816940.0","poster":"Bjordan"},{"content":"Selected Answer: D\nB is wrong . If only restrict to root access , code may like that \" {\n \"Version\": \"2023-05-17\",\n \"Statement\": [\n {\n \"Sid\": \"AllowRootAccess\",\n \"Effect\": \"Allow\",\n \"Principal\": {\n \"AWS\": \"arn:aws:iam::111122223333:root\"\n },\n \"Action\": \"kms:*\",\n \"Resource\": \"*\",\n \"Condition\": {\n \"StringEquals\": {\n \"aws:userid\": \"AIDAXXXXXXXXXXXXXXXXX\"\n }\n }\n }\n ]\n}","timestamp":"1685189640.0","upvote_count":"1","poster":"OCHT","comment_id":"907967"},{"content":"Agree with D","timestamp":"1676981280.0","comment_id":"816527","poster":"ep007","upvote_count":"1"},{"poster":"jishrajesh","upvote_count":"1","comment_id":"764443","timestamp":"1672742400.0","content":"D is correct"},{"timestamp":"1661798820.0","comment_id":"653600","content":"Selected Answer: D\nThe following default key policy statement is critical.\n\nIt gives the AWS account that owns the KMS key full access to the KMS key.\n\nUnlike other AWS resource policies, a AWS KMS key policy does not automatically give permission to the account or any of its users. To give permission to account administrators, the key policy must include an explicit statement that provides this permission, like this one.\n\nIt allows the account to use IAM policies to allow access to the KMS key, in addition to the key policy.\n\nWithout this permission, IAM policies that allow access to the key are ineffective, although IAM policies that deny access to the key are still effective.\n\nIt reduces the risk of the key becoming unmanageable by giving access control permission to the account administrators, including the account root user, which cannot be deleted.","poster":"sapien45","upvote_count":"2"},{"poster":"kiev","content":"D is also my take.","comment_id":"442303","timestamp":"1635927180.0","upvote_count":"1"},{"poster":"hk436","content":"D is my answer.!","upvote_count":"1","comment_id":"437297","timestamp":"1634989500.0"},{"content":"D is right","comment_id":"397287","timestamp":"1634829900.0","poster":"ShakthiVinu","upvote_count":"1"},{"poster":"sanjaym","comment_id":"353846","upvote_count":"1","content":"Ans: D 100%","timestamp":"1634564820.0"},{"content":"D, 100% correct.","comment_id":"185878","timestamp":"1634524860.0","poster":"Dic","upvote_count":"1"},{"upvote_count":"1","comment_id":"96254","timestamp":"1634109600.0","poster":"[Removed]","content":"The answer is D. root:* allows IAM in the account to use policies that gives access to the key."},{"poster":"gfhbox0083","comment_id":"92172","content":"D, for sure.\nAWS doc, Example key policy\nAllows the AWS account (root user) 111122223333 full access to the CMK, and thus enables IAM policies in the account to allow access to the CMK.\nhttps://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html","timestamp":"1633766100.0","upvote_count":"1"},{"timestamp":"1633268040.0","comment_id":"89326","upvote_count":"1","poster":"patand","content":"So which one is 100% correct is it B or D?"},{"poster":"RaySmith","upvote_count":"5","comment_id":"66390","content":"D seems correct","timestamp":"1633089360.0"},{"content":"https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html","comment_id":"65805","poster":"awssecuritynewbie","timestamp":"1632694320.0","upvote_count":"1"},{"upvote_count":"3","content":"B is correct.","timestamp":"1632672060.0","poster":"awssecuritynewbie","comment_id":"65802","comments":[{"comment_id":"69093","upvote_count":"7","poster":"Name1937122","content":"Wrong. D is correct","comments":[{"content":"sorry take it back it is D","comment_id":"109645","timestamp":"1634163300.0","upvote_count":"1","poster":"awssecuritynewbie"}],"timestamp":"1633128960.0"}]},{"comments":[{"upvote_count":"5","comment_id":"65803","timestamp":"1632676140.0","poster":"awssecuritynewbie","comments":[{"upvote_count":"30","comments":[{"upvote_count":"2","comments":[{"content":"best answer ever :D","comment_id":"583603","upvote_count":"1","timestamp":"1649573100.0","poster":"f4bi4n"}],"content":"Wow what a reply z0mb133","timestamp":"1635313020.0","comment_id":"438852","poster":"Cloud9"},{"timestamp":"1642452960.0","comment_id":"526105","poster":"szl0144","upvote_count":"2","content":"lol can't stop laughing"},{"comments":[{"poster":"QBB","comment_id":"644579","upvote_count":"1","timestamp":"1660062840.0","content":"lol be nice guys!"}],"content":"funniest response i have ever read here","poster":"sapien45","comment_id":"636856","upvote_count":"2","timestamp":"1658769960.0"}],"comment_id":"427186","poster":"z0mb133","timestamp":"1634948940.0","content":"your name is correct"}],"content":"B is correct."}],"content":"D looks good.","timestamp":"1632384900.0","poster":"PCH01","comment_id":"65571","upvote_count":"10"}],"exam_id":29,"question_id":312,"answer":"D","isMC":true},{"id":"pS7iGalNMaFvNDXz3agl","timestamp":"2022-11-25 00:13:00","question_text":"A large company organizes hundreds of AWS accounts in AWS Organizations in Developer, Test, and Production OUs. Developers who have full administrative privileges in their respective accounts use the accounts in the Developer OU. The company wants to allow only certain Amazon EC2 instance types to be used within the Developer OU.\n\nHow can the company prevent developer accounts from launching unapproved EC2 instance types?","answer_ET":"D","answer":"D","question_id":313,"url":"https://www.examtopics.com/discussions/amazon/view/88602-exam-aws-certified-security-specialty-topic-1-question-380/","unix_timestamp":1669331580,"choices":{"A":"Create a now launch template in each AWS account in the Developer OU to deny the ec2:RunInstances API call for instance types that are not in an approved list Associate these templates with all IAM principals in the account.","B":"Create an IAM policy to deny the ec2:RunInstances API call for instance types that are not in an approved list. Attach the policy to all IAM principals in all the AWS accounts in the Developer OU.","C":"Use a managed SCP that is attached to the organization's root account to deny the ec2:RunInstances API call for instance types that are not in an approved list","D":"Create an SCP to deny the ec2:RunInstances API call for instance types that are not in an approved list. Attach the policy to the Developer OU."},"answers_community":["D (100%)"],"answer_images":[],"question_images":[],"isMC":true,"topic":"1","exam_id":29,"answer_description":"","discussion":[{"upvote_count":"6","comment_id":"726259","poster":"Isaias","timestamp":"1669331580.0","content":"Selected Answer: D\nD for me\nC incorrect cannot modify a managade scp"},{"comment_id":"1162074","upvote_count":"1","timestamp":"1709165460.0","content":"Selected Answer: D\nD is the correct answer.\n\nThe request is to allow \"certain Amazon EC2 instance types \" for developers who have full access on accounts in certain OU. \nBest approach is to limit them through SCP that is applied to that OU, using IAM condition element \"ec2:InstanceType\".\n\nEx.\n---\n\"Effect\": \"Deny\",\n\"Action\": \"ec2:RunInstances\",\n\"Resource\": [\"arn:aws:ec2:*:*:instance/*\"],\n\"Condition\": {\"StringNotEquals\": {\"ec2:InstanceType\": \"t2.micro\"}}\n---","poster":"Raphaello"},{"comment_id":"914462","content":"Selected Answer: D\nD is good but not the best approach to handle such scenario. \nbetter to Deny with StringNotEquals condition if the region is not the desired region (much easier to maintain):\n \"StringNotEquals\": {\n \"ec2:Region\": \"ALLOWED REGION\"\n },","poster":"Toptip","upvote_count":"1","timestamp":"1685877180.0"},{"upvote_count":"3","content":"D is correct. It's all about using SCP at the OU to restric access instead of applying IAM based controls at the account level.","timestamp":"1681257780.0","comment_id":"867753","poster":"nairj"},{"comment_id":"764658","poster":"secdaddy","content":"Organizations and OU = SCP\nCreate the policy :\nhttps://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_examples_ec2.html#example-ec2-1\nattach the policy to an OU\nhttps://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_scps_attach.html","timestamp":"1672751100.0","upvote_count":"2"},{"comment_id":"738974","content":"Selected Answer: D\nrequirement is developer OU , \nC has root OU which is wrong","poster":"Singhh","timestamp":"1670500320.0","upvote_count":"3"}]},{"id":"wjw0Fb6UcxddD16yB3NI","choices":{"D":"Update the policy that is associated with the federated IAM role to allow the kms:DescribeKey action for the KMS key that is used to encrypt the forensic AMI.","B":"Update the policy that is associated with the federated IAM role to allow the ec2:StartInstances action in the security team's AWS account.","C":"Update the policy that is associated with the KMS key that is used to encrypt the forensic AMI. Configure the policy to allow the kms:Encrypt and kms:Decrypt actions for the federated IAM role.","A":"Update the policy that is associated with the federated IAM role to allow the ec2:DescribeImages action for the forensic AML."},"question_id":314,"exam_id":29,"answer_images":[],"answer_ET":"C","isMC":true,"answer_description":"","question_images":[],"topic":"1","timestamp":"2022-12-02 08:12:00","discussion":[{"upvote_count":"11","timestamp":"1669965120.0","comments":[{"timestamp":"1671889380.0","comment_id":"754906","upvote_count":"1","content":"Refer to the link,\nMake sure we have policy to allow both kms:Encrypt and kms:Decrypt.","poster":"due"}],"poster":"tainh","comment_id":"733528","content":"Selected Answer: C\nC is correct\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/troubleshooting-launch.html#troubleshooting-launch-internal"},{"timestamp":"1685877840.0","upvote_count":"1","comment_id":"914481","content":"Selected Answer: C\nYes, it's C","poster":"Toptip"}],"answers_community":["C (100%)"],"question_text":"A security team is using Amazon EC2 Image Builder to build a hardened AMI with forensic capabilities. An AWS Key Management Service (AWS KMS) key will encrypt the forensic AMI. EC2 Image Builder successfully installs the required patches and packages in the security team’s AWS account. The security team uses a federated IAM role in the same AWS account to sign in to the AWS Management Console and attempts to launch the forensic AMI. The EC2 instance launches and immediately terminates.\n\nWhat should the security team do to launch the EC2 instance successfully?","unix_timestamp":1669965120,"url":"https://www.examtopics.com/discussions/amazon/view/89754-exam-aws-certified-security-specialty-topic-1-question-381/","answer":"C"},{"id":"r8bqrZz7wGrF5h8crC0k","answer_ET":"B","question_text":"A company has identified two security concerns. One concern is unencrypted Amazon Elastic Block Store (Amazon EBS) volumes. The other concern is public IP addresses that are assigned to Amazon EC2 instances. A security engineer must build a solution to prevent and remediate these security issues.\n\nWhat should the security engineer do to meet these requirements with the LEAST amount of effort?","answer_images":[],"timestamp":"2022-11-21 02:35:00","answers_community":["B (100%)"],"url":"https://www.examtopics.com/discussions/amazon/view/88151-exam-aws-certified-security-specialty-topic-1-question-382/","question_images":[],"choices":{"D":"Use AWS Systems Manager Compliance to monitor accounts for noncompliant configurations. Use Systems Manager Automation to perform automated remediation actions.","B":"Use AWS Config rules to monitor accounts for noncompliant configurations. Use AWS Systems Manager Automation to perform automated remediation actions.","C":"Use Amazon GuardDuty to monitor accounts for noncompliant configurations. Use AWS Lambda function to perform automated remediation actions.","A":"Use AWS CloudTrail to monitor accounts for noncompliant configurations. Use AWS Lambda functions to evaluate configuration state and perform automated remediation actions."},"topic":"1","isMC":true,"exam_id":29,"answer":"B","question_id":315,"discussion":[{"timestamp":"1668994500.0","poster":"AdamWest","content":"Selected Answer: B\nB - Use AWS Config for compliancy, then using system manager you can automatically or manually remediate.","upvote_count":"5","comment_id":"723119"},{"timestamp":"1685878260.0","poster":"Toptip","content":"Selected Answer: B\nB Config+Automated = best combo","comment_id":"914496","upvote_count":"1"},{"content":"B.\nhttps://aws.amazon.com/blogs/mt/implement-aws-config-rule-remediation-with-systems-manager-change-manager/\nan example where an Amazon Elastic Compute Cloud (Amazon EC2) instance with a public IP address generates a change request, which once approved, will turn off the instance.","upvote_count":"3","comment_id":"798497","poster":"sam15","timestamp":"1675555740.0"},{"upvote_count":"3","timestamp":"1672758420.0","content":"In support of B \nhttps://aws.amazon.com/blogs/mt/remediate-noncompliant-aws-config-rules-with-aws-systems-manager-automation-runbooks/","comment_id":"764785","poster":"secdaddy"},{"content":"Selected Answer: B\nB is correct","upvote_count":"1","timestamp":"1669965300.0","comment_id":"733529","poster":"tainh"},{"poster":"D2","timestamp":"1669626180.0","upvote_count":"1","content":"Answer B for sure","comment_id":"728910"},{"content":"Selected Answer: B\nB for sure","poster":"Isaias","timestamp":"1669331940.0","comment_id":"726266","upvote_count":"1"}],"answer_description":"","unix_timestamp":1668994500}],"exam":{"provider":"Amazon","isImplemented":true,"isMCOnly":false,"name":"AWS Certified Security - Specialty","numberOfQuestions":509,"isBeta":false,"id":29,"lastUpdated":"11 Apr 2025"},"currentPage":63},"__N_SSP":true}