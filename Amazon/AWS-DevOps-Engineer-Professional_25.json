{"pageProps":{"questions":[{"id":"gDlqKKRRP3hIa9FbT5xg","choices":{"C":"Enable AWS Trusted Advisor in the AWS account. Use the AWS Developer Support plan to access the AWS Support API. Configure an Amazon EventBridge scheduled rule to use the Support API’s Trusted Advisor IAM Access Key Rotation check to discover IAM credentials that have not been accessed for more than 90 days. Configure another EventBridge rule to use the Trusted Advisor Check Item Refresh Status event type and to run the AWSConfigRemediation-RevokeUnusedlAMUserCredentials AWS Systems Manager Automation runbook.","A":"Turn on AWS Config in the AWS account. Deploy the lam-user-unused-credentials-check AWS Config managed rule Configure the rule to run periodically Configure AWS. Config automatic remediation to run the AWSConfigRemediation-RevokeUnusedlAMUserCredentials AWS Systems Manager Automation runbook.","B":"Use AWS Identity and Access Management Access Analyzer to create an analyzer in the AWS account. Create an Amazon EventBridge rule to match IAM Access Analyzer events for IAM users that were last accessed more than 90 days ago. Configure the rule to run the AWSConfigRemediation-DetachlAMPolicy AWS Systems Manager Automation runbook to detach any policies that are attached to the IAM user.","D":"Enable AWS Security Hub in the AWS account. Configure a Security Hub rule that determines when an IAM user was last accessed. Configure an Amazon EventBridge rule to match the Security Hub rule and to run the AWSConfigRemediation-RevokeUnusedlAMUserCredentials AWS Systems Manager Automation runbook."},"exam_id":35,"url":"https://www.examtopics.com/discussions/amazon/view/101300-exam-aws-devops-engineer-professional-topic-1-question-207/","timestamp":"2023-03-01 19:38:00","answer_description":"","answer":"A","isMC":true,"answer_ET":"A","unix_timestamp":1677695880,"question_text":"A company grants external users access to its AWS account by creating an IAM user for each external user. A DevOps engineer must implement a solution to revoke access from IAM users that have not accessed the account in 90 days.\n\nWhich solution will meet these requirements?","topic":"1","discussion":[{"timestamp":"1677697380.0","poster":"CloudFloater","comment_id":"826196","content":"Selected Answer: A\nOption A: correct, Revokes unused IAM credentials.\nOption B: does not revoke, Detaches policies for inactive IAM users.\nOption C: does not revoke, Uses Trusted Advisor to discover inactive IAM credentials.\nOption D: does not revoke, Determines last IAM access.","upvote_count":"5"},{"comment_id":"832627","content":"The answer is A.","timestamp":"1678260060.0","upvote_count":"1","poster":"stalos"},{"comment_id":"826707","poster":"Mark1000","timestamp":"1677749940.0","content":"I vote for A","upvote_count":"2"},{"comment_id":"826496","upvote_count":"2","content":"A seems correct\nhttps://docs.aws.amazon.com/config/latest/developerguide/iam-user-unused-credentials-check.html","poster":"saeidp","timestamp":"1677731460.0"},{"upvote_count":"1","poster":"ds50421","timestamp":"1677695880.0","content":"Selected Answer: B\nB is answer","comment_id":"826175"}],"answers_community":["A (83%)","B (17%)"],"answer_images":[],"question_id":121,"question_images":[]},{"id":"R10nSXrpVPIlacyTlxN3","question_images":[],"answer_ET":"B","discussion":[{"comment_id":"832626","poster":"stalos","timestamp":"1678260000.0","upvote_count":"2","content":"All of them are more or less OK - but the answer is B - the easiest solution (A is also OK but if existing policy is used by other users/systems - can bring more work)"},{"content":"Selected Answer: B\nBoth A and B could work, but B is the least effort, it limits the current permissions and does not replace them with a new policy with a narrower scope.","upvote_count":"1","poster":"SHoKMaSTeR","timestamp":"1678051500.0","comment_id":"830342"},{"poster":"Mark1000","comment_id":"826717","content":"B is correct\n\nI had marked A, because it is between A or B; but because I have not taken into account that the history of cloudtrail activities must be limited precisely because the permissions are too many at first; therefore it is necessary to limit, and as CloudFloater has indicated, the correct answer is B.","timestamp":"1677750540.0","upvote_count":"1"},{"poster":"saeidp","comment_id":"826498","content":"Selected Answer: B\nB makes more sense than others","timestamp":"1677731700.0","upvote_count":"1"},{"poster":"CloudFloater","comment_id":"826201","timestamp":"1677697680.0","content":"Selected Answer: B\nOption A: Policy based on CloudTrail history.\nOption B: Policy boundary based on CloudTrail.\nOption C: Policy based on last access.\nOption D: Policy boundary based on last access.","upvote_count":"4"}],"exam_id":35,"isMC":true,"unix_timestamp":1677697680,"answer_images":[],"question_text":"A company has provided an externally hosted third-party vendor product with access to the company's AWS account. The vendor product performs various AWS actions in the AWS account and requires various IAM permissions. The company granted the access by creating an IAM user, associating IAM policies and inserting the IAM user credentials into the vendor product.\n\nA security review reveals that the vendor’s access is overly permissive. The company wants to apply the principle of least privilege and wants to continue giving the vendor permissions to perform only the actions that the vendor has performed in the last 6 months.\n\nWhich solution will meet these requirements with the LEAST effort?","timestamp":"2023-03-01 20:08:00","url":"https://www.examtopics.com/discussions/amazon/view/101303-exam-aws-devops-engineer-professional-topic-1-question-208/","answers_community":["B (100%)"],"answer_description":"","answer":"B","topic":"1","choices":{"C":"Use AWS Identity and Access Management Access Analyzer to discover the last accessed information for the IAM user and to create a new IAM policy that allows only the services and actions that the last accessed review identified. Replace the IAM user policy with the newly generated policy.","A":"Use AWS Identity and Access Management Access Analyzer to generate a new IAM policy based on the IAM user’s AWS CloudTrail history. Replace the IAM user policy with the newly generated policy.","D":"Use AWS Identity and Access Management Access Analyzer to discover the last accessed information for the IAM user and to create a new IAM policy that allows only the services and actions that the last accessed review identified. Attach the newly generated policy as a permissions boundary to the IAM user.","B":"Use AWS Identity and Access Management Access Analyzer to generate a new IAM policy based on the IAM user’s AWS CloudTrail history. Attach the newly generated policy as a permissions boundary to the IAM user."},"question_id":122},{"id":"gIYBsfF1J1l3iX9IaG68","unix_timestamp":1616013120,"answer":"D","url":"https://www.examtopics.com/discussions/amazon/view/47585-exam-aws-devops-engineer-professional-topic-1-question-21/","isMC":true,"exam_id":35,"answers_community":["D (68%)","A (32%)"],"question_text":"A DevOps engineer wants to find a solution to migrate an application from on premises to AWS. The application is running on Linux and needs to run on specific versions of Apache Tomcat, HAProxy, and Varnish Cache to function properly. The application's operating system-level parameters require tuning. The solution must include a way to automate the deployment of new application versions. The infrastructure should be scalable and faulty servers should be replaced automatically.\nWhich solution should the DevOps engineer use?","choices":{"A":"Upload the application as a Docker image that contains all the necessary software to Amazon ECR. Create an Amazon ECS cluster using an AWS Fargate launch type and an Auto Scaling group. Create an AWS CodePipeline pipeline that uses Amazon ECR as a source and Amazon ECS as a deployment provider.","B":"Upload the application code to an AWS CodeCommit repository with a saved configuration file to configure and install the software. Create an AWS Elastic Beanstalk web server tier and a load balanced-type environment that uses the Tomcat solution stack. Create an AWS CodePipeline pipeline that uses CodeCommit as a source and Elastic Beanstalk as a deployment provider.","C":"Upload the application code to an AWS CodeCommit repository with a set of .ebextensions files to configure and install the software. Create an AWS Elastic Beanstalk worker tier environment that uses the Tomcat solution stack. Create an AWS CodePipeline pipeline that uses CodeCommit as a source and Elastic Beanstalk as a deployment provider.","D":"Upload the application code to an AWS CodeCommit repository with an appspec.yml file to configure and install the necessary software. Create an AWS CodeDeploy deployment group associated with an Amazon EC2 Auto Scaling group. Create an AWS CodePipeline pipeline that uses CodeCommit as a source and CodeDeploy as a deployment provider."},"question_id":123,"topic":"1","discussion":[{"content":"D - there is nothing like Fargate AutoScaling group - this is serverless approach","upvote_count":"15","timestamp":"1635241440.0","comments":[{"poster":"JohnnieWalker","timestamp":"1635465480.0","content":"It should be A. I think none of the other options really address the tunning issues properly. There is a \"Service Auto Scaling\" on Fargate, but not an \"Auto Scaling Group\", the wording on this question must be wrong. -> https://aws.amazon.com/premiumsupport/knowledge-center/ecs-fargate-service-auto-scaling/","comment_id":"350887","upvote_count":"5"}],"poster":"twanc","comment_id":"338620"},{"upvote_count":"12","timestamp":"1633874520.0","comments":[{"content":"I upvoted but then checked the other comments. MBJames: \"Fargate does not allow for OS-level access which means OS parameter tuning would not be an option.\" So option A is ruled out. With option D, EC2 instances are accessible and can be tuned.","upvote_count":"3","timestamp":"1636286040.0","comment_id":"449883","poster":"shammous"},{"timestamp":"1635729000.0","content":"How do you address this case with Fargate? \"The applicationג€™s operating system-level parameters require tuning\"","upvote_count":"2","poster":"notabot2","comment_id":"364179","comments":[{"content":"you can address it with a task definition","comments":[{"timestamp":"1723016400.0","comment_id":"1261991","upvote_count":"1","poster":"mikaelaseraph8","content":"Not always, it depends on the os parameters we'll need to define. Since Fargate's infra is managed by aws, there's very limited freedom when configuring the OS (u can t for example schedule a cronjob in a fargate) so might as well not choose A.\nThen by elimination, D looked like the best option. It had me at Autoscaling group, and the qst wants a scalable fault tolerant solution"}],"upvote_count":"1","poster":"beznika","timestamp":"1712505000.0","comment_id":"1191042"}]},{"comment_id":"374758","poster":"[Removed]","content":"Having Apache Tomcat + Varnish + HAProxy on a single Docker image is a container-level suicide. Hence D is the best option here.","comments":[{"poster":"Mobasher","content":"I don't believe it makes sense to put a web server and a cache and a load balancer all on the same instance or image. We're talking separate instances/containers for each function. The Apache would have it's own container, Varnish fronts the server for caching and HAProxy fronts them all for load balancing. Have separate containers and task definitions for each function and scale accordingly. You wouldn't want to scale the load balancer nodes the same way you do the web servers.","timestamp":"1679421480.0","upvote_count":"3","comment_id":"846212"}],"upvote_count":"13","timestamp":"1636061340.0"}],"poster":"WhyIronMan","content":"I'll go with A) \n\nCreating a Docker image of these very customized applications is always a good idea\n\nCreating a docker image with all necessary apps, data e customizations attend the requirements\n\nB, C and D doesn't mention the required customizations of app versions or OS changes. None of them mention an AMI creation","comment_id":"326625"},{"upvote_count":"1","poster":"xdkonorek2","comment_id":"1134019","timestamp":"1706439840.0","content":"Selected Answer: A\ncan't be D because if you install system dependencies using appspec.yml they won't be present when new instance is added to ASG target group\nB is maybe technically possible to reinstall major dependencies using .ebextensions but it's terrible\nA is great option, but there is a typo i guess with auto scaling group"},{"comment_id":"1106531","upvote_count":"1","content":"Selected Answer: A\nOnly ECS , follow all the conditional laid in the question","timestamp":"1703647740.0","poster":"z_inderjot"},{"comment_id":"1057272","poster":"DZ_Ben","content":"I will go with D since Fargate wont give you much more flexibility to configure those OS level params","upvote_count":"1","timestamp":"1698630540.0"},{"timestamp":"1697545320.0","content":"Selected Answer: A\nIt is A, for those questioning how to do parameter tuning for OS, you can do it via the task definition for ECS Fargate, also about Autoscaling you create an Autoscaling group and associate it with your managed Fargate service.","upvote_count":"2","comment_id":"1045982","poster":"TryH4rd"},{"upvote_count":"1","comment_id":"941920","timestamp":"1688393760.0","comments":[{"poster":"bugincloud","timestamp":"1695691380.0","upvote_count":"1","comment_id":"1017317","content":"what about the OS-level tuning ?"}],"content":"Selected Answer: A\nA is the correct answer. As the apps require specific versions fof Tomcat, HAProxy and Varnish Cache, a devops engineer can create docker images based on specific version of their respective images from dockerhub or any other repo then configure environment variables / CMDs that need to be run at the startup of every container. Fargate can be used to launch those containers in a serverless way and any failing container for the above servers can be replaced automatically.","poster":"m4r0ck"},{"poster":"hp298","comment_id":"844346","upvote_count":"2","content":"Selected Answer: D\nD looks like correct","timestamp":"1679269680.0"},{"content":"Selected Answer: D\nA is incorrect since OS level parameters can not be done in ECS Fargate, If it was EC2 ECS then we could change the parameters","poster":"okm1997_2","timestamp":"1678044660.0","upvote_count":"2","comment_id":"830248"},{"poster":"hoomaan","content":"I will go with A, when we have different application ECS is the best solution","timestamp":"1677367140.0","comment_id":"821892","upvote_count":"2"},{"poster":"DevOpsJagadGuru","comment_id":"814848","content":"B. Upload the application code to an AWS CodeCommit repository with a saved configuration file to configure and install the software. Create an AWS Elastic Beanstalk web server tier and a load-balanced type environment that uses the Tomcat solution stack. Create an AWS CodePipeline pipeline that uses CodeCommit as a source and Elastic Beanstalk as a deployment provider.\n\nThis solution provides the necessary level of control to configure the application's operating system-level parameters, as well as the ability to use specific versions of Apache Tomcat, HAProxy, and Varnish Cache. The solution also includes automated deployment of new versions through the use of AWS CodePipeline and scalability through the use of AWS Elastic Beanstalk and its ability to automatically replace faulty instances.","timestamp":"1676871000.0","upvote_count":"2"},{"comment_id":"810631","content":"Selected Answer: D\nI'll go with D","timestamp":"1676550360.0","upvote_count":"1","poster":"f3d3x15c0"},{"timestamp":"1675512180.0","comments":[{"content":"I changed my answer from D to A after I read through https://docs.aws.amazon.com/AmazonECS/latest/userguide/what-is-fargate.html","upvote_count":"1","comment_id":"797919","poster":"Piccaso","timestamp":"1675512600.0"}],"comment_id":"797911","poster":"Piccaso","upvote_count":"1","content":"Selected Answer: D\nA is excluded, AWS Fargate launch does not meet requirement, because the application will be migrated from on premises to AWS\nB and C highlight only Tomcat solution stack. I do not understand why."},{"poster":"Bulti","upvote_count":"2","content":"Correct answer is D. Key is automated scaling and ability to replace faulty instances with a new one. Only a combination of CodeDeploy and Autoscaling group for EC2 as the target will satisfy this requirement.","comment_id":"777198","timestamp":"1673828220.0"},{"content":"D for sure","comment_id":"753685","poster":"saeidp","timestamp":"1671747000.0","upvote_count":"1"},{"upvote_count":"4","content":"Selected Answer: D\nA - Not good to contain all software in one container. \nB - Not supporting all servers. \nC - Same as above. \nD - Can configure multiple servers including OS level tuning, ASG, Code Deploy. Fulfilling all key requirements.","comment_id":"714258","timestamp":"1667965440.0","poster":"developer_404"},{"poster":"MikeyJ","upvote_count":"7","timestamp":"1662882960.0","comment_id":"665931","content":"Selected Answer: D\nThe application's operating system-level parameters require tuning.\n>EC2\nThe solution must include a way to automate the deployment of new application versions. \n>CodePipeline\nThe infrastructure should be scalable and faulty servers should be replaced automatically.\n>ASG"},{"comments":[{"comment_id":"662705","poster":"ohcn","upvote_count":"4","content":"IMHO, the problem on A is: \"Upload the application as a Docker image that contains all the necessary software to Amazon ECR\". You're basically embedding everything in one image. As [Removed] mentioned, this is not a container-level best practice. Usually containers are recommended to perform specific tasks. I would choose D instead.","timestamp":"1662568560.0"}],"upvote_count":"2","comment_id":"662083","content":"Selected Answer: A\nA - Per the requirement \"The infrastructure should be scalable and faulty servers should be replaced automatically.\" Fargate is best choice for this.","timestamp":"1662531420.0","poster":"MichaelExam"},{"timestamp":"1662001440.0","comment_id":"655718","poster":"colinquek","upvote_count":"2","content":"A - becos:\n1. seems like app is alr build, and there is no mention of source code in the ques.\n2. so much configuration and dependencies for the app, best choice here is containerise it."},{"comment_id":"636934","timestamp":"1658779620.0","poster":"toma","upvote_count":"2","content":"D is the right answer, OS modification is the key."},{"upvote_count":"3","comment_id":"631196","content":"Selected Answer: A\nVote A due to this is an application, not a coding source","poster":"nqthien041292","timestamp":"1657776480.0"},{"timestamp":"1651978080.0","poster":"cooldeity","comment_id":"598416","content":"D: thought C would work. It is not good for customize os","upvote_count":"2"},{"poster":"MF2C","content":"Selected Answer: D\nOS level setting with EC2","comment_id":"550683","upvote_count":"4","timestamp":"1645248420.0"},{"comment_id":"532747","poster":"bobsmith2000","upvote_count":"11","timestamp":"1643189340.0","content":"It's D.\n\nA: docker + Fargate doesn't allow OS modification. Moreover installing too many daemons in one container is a violation of microservice approach (see recomender white papers).\nB: .ebextentions isn't mentioned. Moreover There's only two types of proxy in BeanStalk: Apache and Nginx. We need HAProxy. Conclusion: we need custom solution with full control over OS (AMI)\nC: BeanStalk worker tier environment although other part seems reasonable.\n\nD: CodeCommit addresses automatic distribution of new app version. CodeDeploy + ASG gives full control over OS and installed software. Everything could be configured using CodeDeploy hooks for ASG. And ASG provides scalability. Perfect fit."},{"upvote_count":"1","timestamp":"1643188560.0","poster":"bobsmith2000","comment_id":"532737","content":"It's B.\n\nA is incorrect because"},{"content":"I go with A,\n We can now access Fargate using exec via SSM.\nhttps://aws.amazon.com/blogs/containers/new-using-amazon-ecs-exec-access-your-containers-fargate-ec2/","poster":"Jaxjd","upvote_count":"2","comment_id":"501082","timestamp":"1639459260.0"},{"content":"why not C ??","comments":[{"timestamp":"1658797440.0","upvote_count":"1","poster":"sanjose","comment_id":"637030","content":"In general, tomcat should be tied with web server environment."}],"comment_id":"442880","timestamp":"1636231440.0","upvote_count":"4","poster":"donny_sanjay"},{"comment_id":"338617","upvote_count":"6","timestamp":"1634318820.0","poster":"twanc","content":"D - OS requires tuningn menas that it requires OS rather than Docker. Docker in this case would be much harder to implement that typical EC2."},{"content":"A for Docker Image for this bespoke app package (AMI also an option but not listed).","upvote_count":"4","poster":"devopp","timestamp":"1634083620.0","comment_id":"330247"},{"comment_id":"313581","content":"I will go with D","timestamp":"1633028460.0","comments":[{"comments":[{"timestamp":"1636066980.0","comment_id":"401864","poster":"MBJames","upvote_count":"6","content":"A can't be correct because of fargate.\nFargate does not allow for OS-level access which means OS parameter tuning would not be an option. So D is the best we are left with."}],"content":"and so, you are wrong. You missed:\n- needs to run on specific versions of Apache Tomcat, HAProxy, and Varnish \n- operating system-level parameters require tuning\nNone of the Options mention an AMI with specific versions.\n\nA is correct. Creating a docker image with all necessary apps, data e customizations attend the requirements","timestamp":"1633673760.0","comment_id":"326620","upvote_count":"6","poster":"WhyIronMan"}],"upvote_count":"6","poster":"Jordanro"}],"timestamp":"2021-03-17 21:32:00","answer_images":[],"question_images":[],"answer_ET":"D","answer_description":""},{"id":"ClHPTdMFTESxvLFEbxXB","url":"https://www.examtopics.com/discussions/amazon/view/47587-exam-aws-devops-engineer-professional-topic-1-question-22/","choices":{"B":"Create a CloudFormation drift detection operation to find and remediate unapproved CloudFormation StackSets.","D":"Create AWS Service Catalog products with approved CloudFormation templates.","A":"Create AWS Trusted Advisor checks to find and remediate unapproved CloudFormation StackSets.","C":"Create CloudFormation StackSets with approved CloudFormation templates."},"unix_timestamp":1616014020,"question_text":"A company wants to use AWS CloudFormation for infrastructure deployment. The company has strict tagging and resource requirements and wants to limit the deployment to two Regions. Developers will need to deploy multiple versions of the same application.\nWhich solution ensures resources are deployed in accordance with company policy?","answer":"D","discussion":[{"upvote_count":"25","poster":"sb333","comments":[{"upvote_count":"3","content":"Agreed, D is the best way to enforce compliance in the scenario.","timestamp":"1635129780.0","poster":"MBJames","comment_id":"401870"},{"timestamp":"1641682740.0","comment_id":"519813","upvote_count":"5","poster":"RightAnswers","content":"AWS Service Catalog uses CloudFormation templates and StackSets under the hood to provide a wrapper. Since there are no cost constraints here, ServiceCatalog is a better approach:\nhttps://aws.amazon.com/blogs/mt/how-to-set-up-a-multi-region-multi-account-catalog-of-company-standard-aws-service-catalog-products/"}],"comment_id":"374631","timestamp":"1634195940.0","content":"The answer is D. https://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_constraints_template-constraints.html"},{"content":"I'll go with C","timestamp":"1633079760.0","poster":"WhyIronMan","comment_id":"326628","upvote_count":"12"},{"poster":"Rahul369","timestamp":"1715661840.0","content":"D because compliance must always be declarative.","comment_id":"1211218","upvote_count":"1"},{"poster":"Lalo","content":"Answer is C : https://saturncloud.io/blog/how-to-create-a-cloudformation-stack-with-resources-in-multiple-regions/","comment_id":"1023206","upvote_count":"1","timestamp":"1696259520.0"},{"poster":"DaddyDee","upvote_count":"1","content":"The Answer is C: https://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_constraints_template-constraints.html","timestamp":"1689448860.0","comment_id":"952632"},{"content":"Selected Answer: C\nYes its C.\nOption D suggests creating AWS Service Catalog products with approved CloudFormation templates, which is a valid option for deploying resources in accordance with company policy. However, the question specifically mentions using AWS CloudFormation for infrastructure deployment, and using AWS Service Catalog may not be the best fit for this scenario.","comment_id":"842451","timestamp":"1679112840.0","upvote_count":"1","poster":"Tika01"},{"timestamp":"1678550520.0","comment_id":"836242","comments":[{"poster":"easytoo","upvote_count":"2","comment_id":"836245","timestamp":"1678550700.0","comments":[{"timestamp":"1678550700.0","upvote_count":"2","poster":"easytoo","comment_id":"836246","content":"It's D because of need for Tags."}],"content":"D baby. Fat fingers."}],"upvote_count":"1","poster":"easytoo","content":"I'm going for C baby."},{"content":"Selected Answer: D\nservice catalog uses stacksets and can enforce tag and restrict resources\nAWS Customer case with tag enforcement\nhttps://aws.amazon.com/ko/blogs/apn/enforce-centralized-tag-compliance-using-aws-service-catalog-amazon-dynamodb-aws-lambda-and-amazon-cloudwatch-events/\nAnd Youtube video showing how to restrict resources per user with portfolio\nhttps://www.youtube.com/watch?v=LzvhTcqqyog","poster":"lanc","comment_id":"813739","timestamp":"1676780220.0","upvote_count":"3"},{"comment_id":"807418","upvote_count":"3","poster":"slappingpriate","content":"D\nhttps://aws.amazon.com/blogs/mt/how-to-set-up-a-multi-region-multi-account-catalog-of-company-standard-aws-service-catalog-products/","timestamp":"1676294040.0"},{"comment_id":"803989","poster":"bihani","upvote_count":"1","timestamp":"1676006340.0","content":"Selected Answer: D\nstack sets doesnt restrict users on tagging and other stuff. Service catalog is the perfect usecase here."},{"comment_id":"797926","poster":"Piccaso","content":"Selected Answer: C\nA and B are excluded because it's not a good idea to detect. \nD looks weird.","timestamp":"1675513320.0","upvote_count":"2"},{"content":"I will go with D","timestamp":"1675179300.0","comment_id":"794347","upvote_count":"1","poster":"Hamza5"},{"comment_id":"777426","timestamp":"1673855640.0","poster":"Boubou480","content":"Selected Answer: D\nD. Create AWS Service Catalog products with approved CloudFormation templates.\n\nAWS Service Catalog allows the company to create, manage, and distribute approved products in the form of CloudFormation templates. It allows the company to control the use of AWS resources by imposing constraints on the templates and products available, such as resource tagging, regions, and IAM permissions.\n\nUsing AWS Service Catalog, the company can define products with specific CloudFormation templates and constraints, and allow developers to deploy the appropriate version of the application, while ensuring that the deployment adheres to company policies and resource requirements. Additionally, AWS Service Catalog can be used to restrict the deployment to specific regions, and by creating products, it allows the company to keep track of the versions of the application that are deployed.","upvote_count":"5"},{"content":"The answer is D. The best way to impose template and StackSet constraints is through Service Catalog. https://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_constraints_template-constraints.htmlns","comment_id":"777208","poster":"Bulti","upvote_count":"1","timestamp":"1673828640.0"},{"content":"Selected Answer: D\nD because there is no such thing as “approved Cloudformation Templates”","timestamp":"1673278320.0","upvote_count":"2","poster":"PepsNick","comment_id":"770577"},{"timestamp":"1672163040.0","upvote_count":"2","poster":"ceros399","content":"Selected Answer: D\nAns = D:\nhttps://docs.aws.amazon.com/servicecatalog/latest/adminguide/constraints-stackset.html","comment_id":"758863"},{"upvote_count":"1","comment_id":"753694","content":"I'll go with D","poster":"saeidp","timestamp":"1671747420.0"},{"timestamp":"1670921640.0","content":"Selected Answer: C\nI am not sure how choice D can do without CF stackset","comment_id":"743778","upvote_count":"1","poster":"Arkarter"},{"poster":"SatenderRathee","timestamp":"1670773920.0","comments":[{"upvote_count":"1","timestamp":"1674068340.0","comment_id":"780337","content":"StackSets do not prevent you from using unsupported tags and/or deploying the stack to regions other than 2 mentioned in the question. Also, multiple versions of the same application is provided by Service Catalog by default.","poster":"fartosh"}],"content":"Selected Answer: C\nAWS CloudFormation StackSets enable you to create, update, or delete stacks across multiple accounts and regions with a single CloudFormation template. By using StackSets, you can ensure that your resources are deployed in accordance with company policy, such as by using approved templates and limiting deployment to specific regions. Additionally, StackSets allow you to deploy multiple versions of the same application, enabling developers to easily update and maintain their infrastructure. AWS Trusted Advisor and drift detection operations do not provide the same level of control and flexibility as StackSets.","comment_id":"741861","upvote_count":"2"},{"comment_id":"725698","content":"Selected Answer: D\nVoted for D.\nhttps://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_constraints_template-constraints.html","poster":"Jtic","upvote_count":"1","timestamp":"1669282380.0"},{"upvote_count":"1","comment_id":"689957","timestamp":"1665298980.0","content":"Selected Answer: D\nI'll go with D","poster":"ducluanxutrieu"},{"content":"Selected Answer: C\nStacksets will create the Service catalog in the required regions; Should be C based on this AWS document:\nhttps://aws.amazon.com/blogs/mt/how-to-set-up-a-multi-region-multi-account-catalog-of-company-standard-aws-service-catalog-products/","upvote_count":"4","comment_id":"667352","timestamp":"1663007640.0","poster":"[Removed]"},{"content":"Selected Answer: D\nIn AWS Service Catalog, you can use stack set constraints to configure product deployment options.\nhttps://docs.aws.amazon.com/servicecatalog/latest/adminguide/constraints-stackset.html","poster":"MikeyJ","upvote_count":"2","comment_id":"665935","timestamp":"1662883320.0"},{"content":"Selected Answer: D\nD - Multiple versions of the same application.","poster":"ohcn","timestamp":"1662143700.0","upvote_count":"2","comment_id":"657723"},{"poster":"colinquek","upvote_count":"1","comments":[{"comment_id":"655720","content":"i mean AWS Service Catalog","poster":"colinquek","upvote_count":"3","timestamp":"1662001560.0"}],"content":"Selected Answer: D\nD - as AWS Config is the service to enforce and ensure continual enforcement of policies on resources.","comment_id":"655719","timestamp":"1662001560.0"},{"content":"Selected Answer: C\nVote C","poster":"nqthien041292","timestamp":"1656230640.0","comment_id":"622405","upvote_count":"1"},{"comment_id":"560493","timestamp":"1646362020.0","poster":"[Removed]","comments":[{"comment_id":"560495","upvote_count":"1","poster":"[Removed]","content":"option D is not easy without sharing the portfolio in another region, so it is not easy to deploy .","comments":[{"content":"https://aws.amazon.com/blogs/mt/how-to-set-up-a-multi-region-multi-account-catalog-of-company-standard-aws-service-catalog-products/\nhttps://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_constraints_template-constraints.html\nnot really.","upvote_count":"1","comments":[{"comment_id":"734152","upvote_count":"1","timestamp":"1670030220.0","poster":"apcloud","content":"actually this link says to use stack sets, idk, and i cant delete my comment"}],"timestamp":"1670030100.0","comment_id":"734149","poster":"apcloud"}],"timestamp":"1646362260.0"},{"comments":[{"poster":"apcloud","upvote_count":"1","content":"actually idk, i cant delete my comment either so idk","timestamp":"1670030160.0","comment_id":"734151"}],"comment_id":"734148","upvote_count":"1","poster":"apcloud","timestamp":"1670030040.0","content":"sounds like youre really referring to answer D. Its just a matter of setting the region constraints in the catalog.\nhttps://aws.amazon.com/blogs/mt/how-to-set-up-a-multi-region-multi-account-catalog-of-company-standard-aws-service-catalog-products/\nhttps://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_constraints_template-constraints.html"}],"content":"Selected Answer: C\ndeploying service catalog in multi-regions takes a lot of steps. it also utilizes cloudformation stackset to create for multi-regions. the best is to use service catalog factory.","upvote_count":"1"},{"upvote_count":"1","timestamp":"1644438600.0","content":"Selected Answer: D\nWith CF, it can still be changed afterwards, while Service Catalog is a proper enforcement.","poster":"blueorca","comment_id":"544084"},{"poster":"SRTSRT","comment_id":"517283","timestamp":"1641372660.0","upvote_count":"1","content":"D : https://docs.aws.amazon.com/servicecatalog/latest/adminguide/constraints-resourceupdate.html"},{"content":"C for sure .Stackset for multiple account/regeion","timestamp":"1636247940.0","upvote_count":"1","poster":"donny_sanjay","comment_id":"440466"},{"poster":"TonyGe","timestamp":"1635484800.0","content":"D for sure.\nCloudformation, set a limitation for it.\nAlways think of Service Catalog.","upvote_count":"2","comment_id":"433448"},{"timestamp":"1633420740.0","content":"I'll go with D.\nStackSets would work to deploy the same Stack on multiple accounts. I dont think it would work well with the requirement that developers will need to deploy multiple versions of the same application. The Service Catalag would work as a Catalog for the developers to easily deploy any time they want.","poster":"JohnnieWalker","comment_id":"350898","upvote_count":"4"},{"comment_id":"313590","content":"I will go with D\nhttps://aws.amazon.com/blogs/mt/how-to-launch-secure-and-governed-aws-resources-with-aws-cloudformation-and-aws-service-catalog/","comments":[{"content":"C is also possible and may be C is better answer.\nFor D should be mentioned CF StackSet and not CF template\nhttps://docs.aws.amazon.com/servicecatalog/latest/adminguide/constraints-stackset.html","upvote_count":"3","poster":"Jordanro","timestamp":"1632997860.0","comment_id":"313599"}],"upvote_count":"7","timestamp":"1632082980.0","poster":"Jordanro"}],"question_id":124,"answers_community":["D (64%)","C (36%)"],"answer_ET":"D","answer_description":"","answer_images":[],"exam_id":35,"topic":"1","isMC":true,"question_images":[],"timestamp":"2021-03-17 21:47:00"},{"id":"kW7WDxNXkTu7C5lO2p68","discussion":[{"comment_id":"30650","content":"A:\nhttps://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-cloudwatch-metrics.html\nhttps://docs.aws.amazon.com/codedeploy/latest/userguide/deployments-stop.html","timestamp":"1633298700.0","upvote_count":"22","poster":"amzngenius","comments":[{"poster":"secreatUser","upvote_count":"2","comment_id":"82194","content":"Perfect answer with explanation.","timestamp":"1634782860.0"},{"poster":"Arnaud92","comment_id":"690832","content":"but you need the deployment ID to stop a deployment, so you mean you have to get it before with list-deployments command?","timestamp":"1665387960.0","upvote_count":"1"}]},{"comment_id":"95336","content":"A - correct\nB - this might work but has additonal overhead of a lambda and will depende on how frequently lambda is run. Although minimal but \n additonal cost of lambda. This won't give QUICKEST detection time.\nC - MinimumHealthyHosts may not be directly correlated with latency. Latency might be more due to network or other issues even if 100% of hosts are healthy.\nD - why do this when a ready made option is available https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-cloudwatch-metrics.html","timestamp":"1634907060.0","poster":"Raj9","upvote_count":"10"},{"timestamp":"1703648460.0","upvote_count":"1","comment_id":"1106537","poster":"z_inderjot","content":"Selected Answer: A\nA is the right answer , since it is readily available , we don't have to spend time creating the metrics from logs"},{"comment_id":"1002476","upvote_count":"1","content":"Selected Answer: A\nVote for A","poster":"frizzolo","timestamp":"1694177220.0"},{"timestamp":"1686810240.0","comment_id":"923776","upvote_count":"1","poster":"bhui","content":"Selected Answer: D\nWe need QUICKEST detection time, not easiest deployment. Option A can only do per minute. Option D can go for second-level detection."},{"upvote_count":"2","comment_id":"894326","content":"Selected Answer: D\nWhich of the following methods allow for the QUICKEST detection time?\nAmazon CloudWatch Metrics: By default, CloudWatch metrics have a minimum resolution of 1 minute. This means that data points for metrics are collected at one-minute intervals. However, you can enable high-resolution custom metrics with a resolution of 1 second.\n\nAmazon CloudWatch Logs: CloudWatch Logs does not have a predefined minimum interval for log data collection. Log events can be sent to CloudWatch Logs in near real-time, allowing for timely analysis and monitoring.","poster":"nicat","timestamp":"1683748560.0"},{"timestamp":"1679113080.0","content":"Selected Answer: A\nThis method allows for the quickest detection time since it relies on CloudWatch metrics provided by Elastic Load Balancing. These metrics are already being collected and aggregated by AWS, so there is no need to set up additional monitoring infrastructure. By creating a CloudWatch alarm on the average latency metric and setting a threshold, the DevOps Engineer can quickly detect when latency increases beyond a defined threshold and stop deployment until the service has recovered.","comment_id":"842452","upvote_count":"1","poster":"Tika01"},{"upvote_count":"1","comment_id":"821898","content":"A- is Correct, it is quick as metrics could be updated every 1 minutes \nC- cannot be the answer https://docs.aws.amazon.com/codedeploy/latest/APIReference/API_MinimumHealthyHosts.html\nwhen we are talking about delay the loadbalancer could consider that endpoint as healthy and deployment will go through!","poster":"hoomaan","timestamp":"1677368100.0"},{"poster":"DevOpsJagadGuru","timestamp":"1676872980.0","content":"A. Use Amazon CloudWatch metrics provided by Elastic Load Balancing to calculate average latency. Alarm and stop deployment when latency increases beyond the defined threshold is the method that allows for the quickest detection time.\n\nWhen using Amazon CloudWatch metrics provided by Elastic Load Balancing, metrics are collected every minute, which is the most frequent metric collection interval available. This means that the latency metric will be updated frequently, allowing for a quick detection time when latency increases beyond the defined threshold.\n\nIn contrast, the other options may have longer detection times as they involve additional steps such as collecting logs or waiting for a certain number of healthy hosts before rolling back a deployment.","comment_id":"814871","upvote_count":"1"},{"comment_id":"801257","timestamp":"1675793940.0","upvote_count":"1","poster":"Sabreen_Salama","content":"the answer is A"},{"poster":"Piccaso","upvote_count":"1","content":"Selected Answer: A\nA is the most straightforward solution.\nB: Lambda and Elastic Load Balancing, is manual solution.\nC and D look weird","comment_id":"797960","timestamp":"1675515720.0"},{"upvote_count":"1","timestamp":"1673837040.0","poster":"Bulti","content":"The correct answer is A. When setting up CodeDeploy as a Deployment Provider you can specify the alarm based on a CloudWatch Metric (custom or built-in) and stop the deployment if an alarm threshold is exceeded.","comment_id":"777265"},{"poster":"Chinta","timestamp":"1667477280.0","content":"A IS THE CORRECT ONE","upvote_count":"2","comment_id":"710470"},{"timestamp":"1665468660.0","content":"Selected Answer: A\nI'll go with A","upvote_count":"2","poster":"ducluanxutrieu","comment_id":"691806"},{"content":"Selected Answer: A\nA is the way to go here","timestamp":"1662001620.0","poster":"colinquek","upvote_count":"2","comment_id":"655721"},{"content":"Selected Answer: A\nA, existing metric would be faster than going over the fuss of creating a new one","poster":"blueorca","upvote_count":"2","timestamp":"1644699960.0","comment_id":"546096"},{"comment_id":"412613","poster":"xxxdolorxxx","content":"I also vote for A.","upvote_count":"2","timestamp":"1636068360.0"},{"poster":"siejas","content":"A is the quickest, parsing CW Logs is defo slower than reacting to latency metrics from LB","comment_id":"404509","timestamp":"1636041840.0","upvote_count":"1"},{"content":"I'll go with A\n\"allow for the QUICKEST detection time\"\n<b>A</b>","poster":"WhyIronMan","comment_id":"321857","upvote_count":"3","timestamp":"1635655020.0"},{"poster":"gmandala","upvote_count":"2","timestamp":"1635575040.0","content":"A - no brainer","comment_id":"251913"},{"poster":"dnevado","comment_id":"234865","timestamp":"1635403620.0","content":"A for sure","upvote_count":"2"},{"upvote_count":"2","timestamp":"1635352140.0","content":"A: Why:\n1- service's latency increases (related to metrics). Create alarm from metrics;\n2- Not C - minimumhealthyhost (related to health status of the instances, not to service latency);\n3- Not B because cant create alarm from the logs.\n4- Possible D, because could create an alarm from the filter (query) but goes against QUICKEST detection time as the question is pointing.\n\nSo definitely A.","poster":"svjl","comment_id":"232198"},{"poster":"jackdryan","timestamp":"1635085140.0","content":"I'll go with A","comment_id":"222414","upvote_count":"2"},{"content":"I'll go with A","comment_id":"206130","upvote_count":"2","poster":"ChauPhan","timestamp":"1635032340.0"},{"content":"A is correct\n\nhttps://docs.amazonaws.cn/en_us/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html\n\nIt gives info on HealthyHostCount","comment_id":"65234","timestamp":"1634716440.0","upvote_count":"1","poster":"un"},{"comment_id":"62162","content":"A is correct","timestamp":"1634300880.0","upvote_count":"1","poster":"yassu"},{"timestamp":"1634173320.0","poster":"coolcerts","upvote_count":"3","content":"A is correct -- we can stop the deployment with CW alarm and SNS\nhttps://aws.amazon.com/about-aws/whats-new/2016/09/aws-codedeploy-introduces-deployment-monitoring-with-amazon-cloudwatch-alarms-and-automatic-deployment-rollback/","comment_id":"56806"},{"poster":"toshko85","comments":[{"timestamp":"1640580840.0","poster":"GreatFunana","upvote_count":"1","comment_id":"510026","content":"This is silly. Do you DevOps? Its A."}],"upvote_count":"1","content":"There is no such thing you can stop deployment from CW alarm. It must be C.","timestamp":"1634101440.0","comment_id":"56454"},{"timestamp":"1633971600.0","content":"It is A","poster":"xaocho","upvote_count":"1","comment_id":"55251"},{"content":"A is good enough for me","poster":"ppshein","comment_id":"49391","upvote_count":"1","timestamp":"1633650600.0"},{"content":"i will go with A","poster":"jiedee","comment_id":"28376","upvote_count":"3","timestamp":"1633129080.0"},{"comment_id":"21407","timestamp":"1632728460.0","content":"C\nhttps://docs.aws.amazon.com/codedeploy/latest/userguide/instances-health.html\n\n\"You can create custom deployment configurations in CodeDeploy to define your own minimum healthy host values. You can define these values as whole numbers or percentages when using the following operations\"","poster":"cmm103","comments":[{"timestamp":"1632831960.0","upvote_count":"1","content":"MinimumHealthyHosts is the information about minimum healthy instance, not Lambda. I won't go with C.","comment_id":"24661","poster":"JHtest"},{"upvote_count":"1","timestamp":"1633890000.0","comment_id":"49392","content":"It's talking about latency, not minimum healthy.","poster":"ppshein"}],"upvote_count":"1"},{"poster":"marwan","comment_id":"21061","upvote_count":"1","timestamp":"1632428820.0","comments":[{"poster":"BeastX","upvote_count":"13","comments":[{"upvote_count":"3","comment_id":"22502","content":"Yep, I would go for A too because of that metric. Answer C is counting healthy hosts, which looks at the hosts and not the latency as stated in the question.","timestamp":"1632794700.0","poster":"Arragon"},{"comment_id":"24663","content":"A is correct. Elastic Load Balancing measures and sends its metrics in 60-second intervals, while CLB log is in 5 mins interval.","poster":"JHtest","upvote_count":"7","timestamp":"1633111140.0"}],"timestamp":"1632785640.0","comment_id":"21521","content":"I think is A, because Latency is the default metric for ELB, we can use it directly."}],"content":"I would go with B here, even A looks a good alternative too"}],"answer":"A","answer_description":"","url":"https://www.examtopics.com/discussions/amazon/view/8034-exam-aws-devops-engineer-professional-topic-1-question-23/","answer_ET":"A","choices":{"D":"Use Metric Filters to parse application logs in Amazon CloudWatch Logs. Create a filter for latency. Alarm and stop deployment when latency increases beyond the defined threshold.","A":"Use Amazon CloudWatch metrics provided by Elastic Load Balancing to calculate average latency. Alarm and stop deployment when latency increases beyond the defined threshold.","C":"Use AWS CodeDeploy's MinimumHealthyHosts setting to define thresholds for rolling back deployments. If these thresholds are breached, roll back the deployment.","B":"Use AWS Lambda and Elastic Load Balancing access logs to detect average latency. Alarm and stop deployment when latency increases beyond the defined threshold."},"isMC":true,"question_images":[],"question_id":125,"exam_id":35,"question_text":"A DevOps Engineer must track the health of a stateless RESTful service sitting behind a Classic Load Balancer. The deployment of new application revisions is through a CI/CD pipeline. If the service's latency increases beyond a defined threshold, deployment should be stopped until the service has recovered.\nWhich of the following methods allow for the QUICKEST detection time?","topic":"1","timestamp":"2019-11-12 21:44:00","answers_community":["A (77%)","D (23%)"],"answer_images":[],"unix_timestamp":1573591440}],"exam":{"name":"AWS DevOps Engineer Professional","numberOfQuestions":208,"lastUpdated":"11 Apr 2025","id":35,"isMCOnly":false,"isBeta":false,"isImplemented":true,"provider":"Amazon"},"currentPage":25},"__N_SSP":true}