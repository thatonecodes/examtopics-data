{"pageProps":{"questions":[{"id":"BSkXRbjFI50OnA0ip7LI","url":"https://www.examtopics.com/discussions/amazon/view/102778-exam-aws-certified-developer-associate-dva-c02-topic-1/","answer_images":[],"answer":"C","answers_community":["C (86%)","10%"],"answer_description":"","timestamp":"2023-03-16 09:21:00","isMC":true,"topic":"1","question_text":"A company is implementing an application on Amazon EC2 instances. The application needs to process incoming transactions. When the application detects a transaction that is not valid, the application must send a chat message to the company's support team. To send the message, the application needs to retrieve the access token to authenticate by using the chat API.\nA developer needs to implement a solution to store the access token. The access token must be encrypted at rest and in transit. The access token must also be accessible from other AWS accounts.\nWhich solution will meet these requirements with the LEAST management overhead?","choices":{"A":"Use an AWS Systems Manager Parameter Store SecureString parameter that uses an AWS Key Management Service (AWS KMS) AWS managed key to store the access token. Add a resource-based policy to the parameter to allow access from other accounts. Update the IAM role of the EC2 instances with permissions to access Parameter Store. Retrieve the token from Parameter Store with the decrypt flag enabled. Use the decrypted access token to send the message to the chat.","B":"Encrypt the access token by using an AWS Key Management Service (AWS KMS) customer managed key. Store the access token in an Amazon DynamoDB table. Update the IAM role of the EC2 instances with permissions to access DynamoDB and AWS KMS. Retrieve the token from DynamoDDecrypt the token by using AWS KMS on the EC2 instances. Use the decrypted access token to send the message to the chat.","D":"Encrypt the access token by using an AWS Key Management Service (AWS KMS) AWS managed key. Store the access token in an Amazon S3 bucket. Add a bucket policy to the S3 bucket to allow access from other accounts. Update the IAM role of the EC2 instances with permissions to access Amazon S3 and AWS KMS. Retrieve the token from the S3 bucket. Decrypt the token by using AWS KMS on the EC2 instances. Use the decrypted access token to send the massage to the chat.","C":"Use AWS Secrets Manager with an AWS Key Management Service (AWS KMS) customer managed key to store the access token. Add a resource-based policy to the secret to allow access from other accounts. Update the IAM role of the EC2 instances with permissions to access Secrets Manager. Retrieve the token from Secrets Manager. Use the decrypted access token to send the message to the chat."},"question_id":1,"unix_timestamp":1678954860,"question_images":[],"answer_ET":"C","exam_id":24,"discussion":[{"poster":"Untamables","comment_id":"845354","content":"Selected Answer: C\nThe correct answer is C.\nhttps://aws.amazon.com/premiumsupport/knowledge-center/secrets-manager-share-between-accounts/\nhttps://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_examples_cross.html\nOption A is wrong. It seems to be a good solution. However, AWS managed keys cannot be used for cross account accessing.","comments":[{"comments":[{"timestamp":"1687019700.0","content":"I am not sure if the documentation you provided specifically say that AWS managed keys can be used for cross account accessing. \n\nHowever, @Untamables explanation is on point. Please see this Stack Overflow thread - https://stackoverflow.com/questions/63420732/sharing-an-aws-managed-kms-key-with-another-account","comment_id":"926129","upvote_count":"1","poster":"AgboolaKun"}],"upvote_count":"2","timestamp":"1679691600.0","content":"Based on this AWS managed keys can be used for cross account accessing. https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html","poster":"CyberBaby803","comment_id":"849613"},{"comment_id":"971594","poster":"jipark","upvote_count":"2","timestamp":"1691112300.0","content":"cross account, rotate is key for 'Security Manager'"}],"timestamp":"1679355600.0","upvote_count":"30"},{"comments":[{"content":"B) Eliminated - Creating and managing the DynamoDB table create overhead","comment_id":"1329459","comments":[{"comment_id":"1329461","poster":"sumanshu","upvote_count":"1","timestamp":"1734700980.0","content":"D) Eliminated - Complexity and overhead for Managing an S3 bucket with access policies for cross-account access"}],"timestamp":"1734700920.0","poster":"sumanshu","upvote_count":"1"}],"timestamp":"1734698460.0","content":"Selected Answer: C\nFor cross-account access, the AWS managed key (Option A) will be difficult to manage because it doesn't allow you to directly manage cross-account access. Therefore, Option C (AWS Secrets Manager with a customer-managed KMS key) is the recommended solution for cross-account access and security.","poster":"sumanshu","upvote_count":"1","comment_id":"1329440"},{"poster":"trieudo","comments":[{"comment_id":"1324986","timestamp":"1733914020.0","upvote_count":"1","content":"D: ==> C: ... sr for inconsistent","poster":"trieudo"}],"comment_id":"1324985","content":"Selected Answer: C\nkeywords: LEAST management overhead\n\n==> Discard B, D: you must do many steps to config with Storage, DB with KMS, IAM Role\n==> Discard A: Pretty correct, but in use, you may write some script. It can work but requires additional configuration and doesn't offer some of the benefits tailored for secrets management like automatic rotation.\n\n\nD: The solution with AWS Secrets Manager (option C) provides the least management overhead because:\n\nSecrets Manager is specifically designed for storing and managing sensitive information like access tokens.\nIt natively integrates with AWS KMS for encryption and decryption.\nIt simplifies access control and auditing.\nBy adding a resource-based policy, cross-account access is easily managed without the need for additional configurations like DynamoDB tables or S3 bucket policies.","timestamp":"1733913960.0","upvote_count":"1"},{"comment_id":"926935","upvote_count":"1","content":"Selected Answer: A\nUse an AWS Systems Manager Parameter Store SecureString parameter that uses an AWS Key Management Service (AWS KMS) AWS managed key to store the access token. This option allows you to securely store the access token in the Parameter Store, which automatically encrypts the data at rest and in transit. By adding a resource-based policy, you can also grant access to the access token from other AWS accounts. The IAM role of the EC2 instances can be updated to allow permissions to access the Parameter Store, and the access token can be retrieved with the decrypt flag enabled for use in sending the chat message. This option requires minimal setup and management compared to the other choices.","poster":"Tee400","timestamp":"1727237640.0"},{"comment_id":"1058635","poster":"cgpt","upvote_count":"2","timestamp":"1727237640.0","content":"Selected Answer: A\nBy default, AWS Systems Manager Parameter Store does not natively support cross-account access for SecureString parameters. However, you can configure cross-account access to SecureString parameters by sharing the KMS key with the target AWS accounts. To do this, you need to create a resource-based KMS key policy that allows access to the key by the external AWS account(s). After configuring the KMS key policy to allow the necessary cross-account access, you can grant IAM roles in the target accounts permission to access the SecureString parameters that are encrypted using that KMS key."},{"content":"AWS Secrets Manager (Option C) is designed for exactly this kind of use case, providing built-in functionality for secure storage and retrieval of secrets with minimal management overhead, especially for managing access tokens and cross-account access.\nAmazon S3 with KMS (Option D), while familiar and powerful, requires more manual work to set up and manage the security aspects, which can lead to increased overhead in comparison to Secrets Manager.\nGiven that the goal is to have the least management overhead, Option C is the best fit because it is purpose-built for managing secrets and automates much of the complexity involved in secure storage and retrieval.","timestamp":"1727237580.0","poster":"tomchandler077","comment_id":"1243772","upvote_count":"1"},{"comment_id":"1248734","upvote_count":"2","poster":"Anandesh","content":"Selected Answer: C\nhttps://docs.aws.amazon.com/secretsmanager/latest/userguide/data-protection.html\nhttps://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_resource-policies.html\nhttps://docs.aws.amazon.com/secretsmanager/latest/userguide/security-encryption.html","timestamp":"1721113800.0"},{"comment_id":"1242107","content":"C is the correct answer as the Secrets Manager supports resource-based policies, allowing you to grant access to other AWS accounts easily.","timestamp":"1720099920.0","upvote_count":"1","poster":"nkroker"},{"poster":"NagaoShingo","comment_id":"1222762","timestamp":"1717257300.0","upvote_count":"1","content":"Selected Answer: C\nC is correct answer."},{"comment_id":"1214934","upvote_count":"1","poster":"65703c1","timestamp":"1716295140.0","content":"Selected Answer: C\nC is the correct answer."},{"timestamp":"1712319540.0","comment_id":"1189913","upvote_count":"1","poster":"shabeebcoder","content":"Selected Answer: C\nThis is the correct answer for lease overhead to manage the secret key"},{"content":"Selected Answer: C\nIt is C","timestamp":"1711370520.0","poster":"ibratoev","upvote_count":"1","comment_id":"1182463"},{"upvote_count":"2","timestamp":"1710303300.0","comment_id":"1172225","content":"- Option A involves using AWS Systems Manager Parameter Store, which can work but requires additional configuration and doesn't offer some of the benefits tailored for secrets management like automatic rotation.\n- Option B involves storing the access token in DynamoDB, which is not specifically designed for secrets management, and managing encryption and decryption manually using AWS KMS.\n- Option D involves using S3, which again is not designed for secrets management, and adds complexity in managing access policies and permissions. Additionally, accessing the token would involve reading from S3, decrypting it, and then using it, which is less straightforward compared to using a service like Secrets Manager.","poster":"certplan"},{"comment_id":"1149720","comments":[{"poster":"TheFivePips","comment_id":"1165589","timestamp":"1709558100.0","upvote_count":"2","content":"From what I can find, You can apply resource-based policies at the Parameter Store level to control access to the entire Parameter Store service. However, you cannot apply resource-based policies directly to individual parameters within the Parameter Store.\nThat is seemingly the only reason I would choose C over A.\nBut were also not looking for whats cheapest, were looking for whats easiest to manage"}],"content":"Selected Answer: A\nI think this would be A as this is cheaper than C. Any reason why A can not be the answer?","timestamp":"1707872460.0","poster":"SD_CS","upvote_count":"2"},{"upvote_count":"2","poster":"tsdsmth","comment_id":"1132924","timestamp":"1706305860.0","content":"The answer would be C if an AWS-managed key was used, as Secrets Manager and KMS are good for situations like this. However, the use of a customer-managed key increases management overhead. So the best answer is D, not C."},{"timestamp":"1705292460.0","comment_id":"1123049","poster":"gilleep_17","content":"You cannot use a resource-based policy with a parameter in the Parameter Store. The stephen answser Option C is correct Practise paper3","upvote_count":"1"},{"comment_id":"1123037","content":"customer managed key , its an extra work. So I am confused with option A and C","upvote_count":"1","timestamp":"1705291380.0","poster":"gilleep_17"},{"upvote_count":"1","timestamp":"1703450880.0","comment_id":"1104833","poster":"marcosbude","content":"ahhhhhh"},{"upvote_count":"1","timestamp":"1699074120.0","comment_id":"1061906","content":"Selected Answer: D\nI think using S3 to store and KMS to decrypt is the solution for this requirement","poster":"dongocanh272"},{"content":"Selected Answer: C\nAnswer C is correct","poster":"Digo30sp","comment_id":"1027585","timestamp":"1696703580.0","upvote_count":"1"},{"timestamp":"1696506420.0","comment_id":"1025592","content":"Selected Answer: C\ni think c is correct","upvote_count":"1","poster":"huyhq"},{"content":"Since the question says LEAST Management Overhead. The answer cannot be B or C because they suggest to use \"AWS Key Management Service (AWS KMS) customer managed key \". Answer should be A.","upvote_count":"1","timestamp":"1696065480.0","poster":"NinjaCloud","comment_id":"1021362"},{"poster":"Nav16011991","comment_id":"1018096","content":"Selected Answer: C\nThe correct answer is C.","timestamp":"1695752520.0","upvote_count":"1"},{"poster":"Shreya_aspire","timestamp":"1694861460.0","upvote_count":"1","comment_id":"1009085","content":"Selected Answer: C\nhttps://aws.amazon.com/blogs/security/how-to-access-secrets-across-aws-accounts-by-attaching-resource-based-policies/"},{"content":"Selected Answer: C\nCross Account + Rotation = Secrets Manager","upvote_count":"1","comment_id":"1002723","poster":"hsinchang","timestamp":"1694209320.0"},{"content":"Selected Answer: C\nSecret Manager allows you to share secret cross account","poster":"Kashan6109","upvote_count":"1","comment_id":"998081","timestamp":"1693792020.0"},{"upvote_count":"3","comment_id":"962512","content":"Selected Answer: C\nCorrect Answer is C. Stephen Marek practice test on udemy has this question.","poster":"Zeus_","timestamp":"1690273740.0"},{"poster":"backfringe","content":"vote for C.","upvote_count":"1","timestamp":"1689822420.0","comment_id":"957076"},{"content":"C. Not A because resource based access policy is not allowed for parameter store in KMS. Only supports Identity Based. Whereas secret manager supports both","timestamp":"1689145260.0","poster":"monkeyjuthu","comment_id":"949544","upvote_count":"4"},{"poster":"eberhe900","upvote_count":"2","timestamp":"1688616600.0","comment_id":"944306","content":"Selected Answer: D\nAccess from Other AWS Accounts:\n\nCreate a cross-account IAM role in the AWS account where the access token is stored.\nDefine the necessary permissions for the IAM role to allow access to the encrypted token.\nShare the encrypted token with the other AWS accounts by granting the IAM role access to those accounts.\nThe receiving accounts can then assume the IAM role to access the encrypted token securely."},{"timestamp":"1687031400.0","comment_id":"926223","poster":"AgboolaKun","content":"Selected Answer: C\nThe argument should be between A and C. However, the AWS owned keys in option A disqualifies it. \n\nThis is because AWS owned keys cannot be used fro cross-accounts accessing. Therefore, correct answer is C. Please read the following Stack Overflow thread - https://stackoverflow.com/questions/63420732/sharing-an-aws-managed-kms-key-with-another-account","upvote_count":"1"},{"upvote_count":"1","poster":"ScherbakovMike","timestamp":"1685454480.0","content":"Definitely, it's not A, because the AWS Systems manager parameter store doesn't support cross account access. \nI guess, C is not correct, because there will be many saved tokens.\nD, yes, why not, S3 access is possible from different accounts.","comment_id":"910289"},{"poster":"ezredame","timestamp":"1685438820.0","content":"Selected Answer: C\nThe question is tricky, I thought it was A but you can't use the AWS KMS default key for the account. The AWS KMS default key is created, managed, and used on your behalf by an AWS service that runs on AWS Key Management Service. The AWS KMS default key is unique to your AWS account and AWS Region. Only the service that created the AWS managed key can use it. So the answer should be C","upvote_count":"1","comment_id":"910105"},{"poster":"Bibay","timestamp":"1683366900.0","content":"Selected Answer: C\nC. The Lambda function does not have IAM permissions to write to DynamoDB is the most likely cause of this issue.\n\nWhen a Lambda function is unable to write to a DynamoDB table, it is usually because it lacks the necessary IAM permissions to perform the action. To resolve this issue, the developer needs to grant the Lambda function's execution role permissions to write to the DynamoDB table. The execution role should have the necessary policies attached to it. The developer can use the AWS Identity and Access Management (IAM) console to add the necessary policies to the execution role.\n\nThe other options may cause issues in different scenarios, but they are not the most likely causes in this specific situation.","upvote_count":"1","comment_id":"890659"},{"poster":"ihebchorfi","upvote_count":"4","content":"Selected Answer: C\nA is wrong, you can't share a parameter-store secureString to an external AWS Account.\nThis is only possible with Secrets Manager : https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html","comment_id":"883785","timestamp":"1682703360.0"},{"upvote_count":"3","comment_id":"874093","content":"Selected Answer: C\nOption A is wrong becuase you cant use AWS managed keys for cross-account access","timestamp":"1681850760.0","poster":"Duponator"},{"timestamp":"1681619820.0","comments":[{"poster":"rlnd2000","upvote_count":"4","content":"with option A how you make possible => ...The access token must also be accessible from other AWS accounts.","timestamp":"1683134160.0","comment_id":"888779"}],"comment_id":"871459","content":"Selected Answer: A\nAnswer here is A people.\nOption C uses AWS Secrets Manager to store the access token, which is similar to Parameter Store but designed specifically for secrets. However, Secrets Manager has a higher cost and is better suited for complex secrets that require rotation or integration with AWS services. Parameter Store is a better fit for a simple access token. Additionally, retrieving the token from Secrets Manager requires more code and maintenance than retrieving the token directly from Parameter Store.\n\nOption D stores the access token in an Amazon S3 bucket, which requires more setup and management overhead than Parameter Store. Although S3 provides robust storage and access control features, it is not the best choice for a simple access token","upvote_count":"2","poster":"Syre"},{"poster":"clarksu","timestamp":"1679098620.0","upvote_count":"3","comment_id":"842373","content":"Selected Answer: C\nShould be C.\n\nOption A is a valid solution that meets the requirements of encrypting the access token at rest and in transit, as well as allowing access from other AWS accounts. However, it requires an additional step of retrieving the token with the decrypt flag enabled, which adds some management overhead when compared to other options.\n\nOption C uses AWS Secrets Manager, which eliminates the need for explicitly enabling the decryption flag. It also has more granular permissions for accessing the secrets, making it slightly more secure. DynamoDB in Option B and S3 in Option D are also options for storing the access token, but they require additional steps for encryption and decryption, adding more management overhead. Overall, Option A is a valid solution, but the other options have less management overhead while still meeting the requirements."},{"comment_id":"840723","timestamp":"1678957200.0","upvote_count":"2","content":"As per this doc it should be A:\n\nhttps://aws.amazon.com/blogs/mt/use-parameter-store-to-securely-access-secrets-and-config-data-in-aws-codedeploy/","poster":"haaris786"},{"timestamp":"1678954860.0","poster":"good_","content":"What's the answer? Isn't it A?","upvote_count":"3","comment_id":"840685"}]},{"id":"vb8BiFHb0BMHlK5Qvpid","url":"https://www.examtopics.com/discussions/amazon/view/103335-exam-aws-certified-developer-associate-dva-c02-topic-1/","choices":{"B":"Update the application to retrieve the variables from AWS Key Management Service (AWS KMS). Store the API URL and credentials as unique keys for each environment.","D":"Update the application to retrieve the variables from each of the deployed environments. Define the authentication information and API URL in the ECS task definition as unique names during the deployment process.","A":"Update the application to retrieve the variables from AWS Systems Manager Parameter Store. Use unique paths in Parameter Store for each variable in each environment. Store the credentials in AWS Secrets Manager in each environment.","C":"Update the application to retrieve the variables from an encrypted file that is stored with the application. Store the API URL and credentials in unique files for each environment."},"answer_ET":"A","exam_id":24,"unix_timestamp":1679293440,"question_images":[],"question_text":"A developer is deploying a new application to Amazon Elastic Container Service (Amazon ECS). The developer needs to securely store and retrieve different types of variables. These variables include authentication information for a remote API, the URL for the API, and credentials. The authentication information and API URL must be available to all current and future deployed versions of the application across development, testing, and production environments.\nHow should the developer retrieve the variables with the FEWEST application changes?","topic":"1","answer_images":[],"discussion":[{"poster":"geekdamsel","upvote_count":"18","timestamp":"1683390360.0","content":"Correct answer is A.","comment_id":"890870"},{"comment_id":"844587","timestamp":"1679293440.0","content":"Selected Answer: A\nThe application has credentials and URL, so it’s convenient to store them in ssm parameter store restive them.","upvote_count":"9","poster":"Warlord_92"},{"comment_id":"1329543","content":"Selected Answer: A\nB) Eliminated - It cannot directly store variables such as the API URL or credentials\nD) Eliminated - Storing sensitive information like credentials directly in ECS task definitions is not secure","comments":[{"timestamp":"1734709140.0","comment_id":"1329544","content":"C) Eliminated - Storing variables in encrypted files adds operational overhead. Managing separate files for each environment can quickly become cumbersome.","poster":"sumanshu","upvote_count":"1"}],"poster":"sumanshu","upvote_count":"1","timestamp":"1734709080.0"},{"comment_id":"1325304","content":"Selected Answer: A\nkeyword: FEWEST application changes\n\n==> A: This minimizes code changes as the retrieval method remains consistent across environments; only the Parameter Store paths need updating. Secrets Manager securely stores sensitive credentials.","timestamp":"1733962740.0","upvote_count":"1","poster":"trieudo"},{"content":"Selected Answer: A\nAWS Systems Manager Parameter Store is a service that allows you to securely store configuration data such as API URLs, credentials, and other variables. By updating the application to retrieve the variables from Parameter Store, you can separate the configuration from the application code, making it easier to manage and update the variables without modifying the application itself. Storing the credentials in AWS Secrets Manager provides an additional layer of security for sensitive information.","poster":"Tee400","timestamp":"1727238240.0","upvote_count":"2","comment_id":"927600"},{"comment_id":"1188851","poster":"badsati","timestamp":"1727238240.0","upvote_count":"2","content":"Answer is A\n\nAWS Systems Manager Parameter Store and AWS Secrets Manager are designed for securely storing and managing sensitive information such as credentials, API URLs, and configuration variables.\nUsing AWS Systems Manager Parameter Store allows the developer to centrally manage configuration variables across different environments (development, testing, production) without requiring application code changes. Each variable can have a unique path in Parameter Store, ensuring separation and organization."},{"content":"Correct Answer is A \n\nOption B, using AWS Key Management Service (AWS KMS), is not ideal for this scenario primarily because AWS KMS is designed for creating and controlling encryption keys, not for storing configuration data or credentials. KMS keys are used to encrypt and decrypt data, rather than directly storing or managing it. For securely managing and retrieving application configuration data and sensitive information like API credentials, Systems Manager Parameter Store and AWS Secrets Manager are more appropriate, offering direct support for these use cases with better integration for applications.","comment_id":"1096678","upvote_count":"5","poster":"ez_24","timestamp":"1727238240.0"},{"comment_id":"1214967","content":"Selected Answer: A\nA is the correct answer.","timestamp":"1716297420.0","poster":"65703c1","upvote_count":"1"},{"content":"Selected Answer: A\nSSM parameter store with proper posh is the answer.","poster":"Prosen2522","comment_id":"1207586","timestamp":"1715032020.0","upvote_count":"1"},{"upvote_count":"2","content":"Selected Answer: A\nYou put the different variables for each environment, is the best solution because it's isolated between environment","timestamp":"1700092440.0","comment_id":"1072021","poster":"leonardoliveros"},{"upvote_count":"2","timestamp":"1698731580.0","comment_id":"1058469","content":"i think corrent is A, but why is B ?","poster":"vmintam"},{"timestamp":"1694856480.0","poster":"alihaider907","upvote_count":"1","comment_id":"1009048","content":"I think the wording of option A has a typo first it mentioned \" Update the application to retrieve the variables from AWS Systems Manager Parameter Store\" then it says \"Store the credentials in AWS Secrets Manager in each environment.\""},{"content":"A is correct","timestamp":"1693389900.0","comment_id":"993933","upvote_count":"1","poster":"meetparag81"},{"comment_id":"976264","content":"Option A is correct. The AWS Systems Manager Paramter Store's primary purpose is to secure sensitive information such as API URLs, credentials and the variables that we store in it.","timestamp":"1691558100.0","upvote_count":"2","poster":"jayvarma"},{"upvote_count":"2","comment_id":"879787","poster":"MrTee","content":"Selected Answer: A\nhis solution allows the developer to securely store and retrieve different types of variables, including authentication information for a remote API, the URL for the API, and credentials.","timestamp":"1682381640.0"},{"timestamp":"1681364820.0","upvote_count":"1","poster":"qsergii","content":"Definitely A","comment_id":"869122"},{"timestamp":"1681184460.0","poster":"fqmark","comment_id":"866892","content":"it should be a, kms is used for encryption: https://aws.amazon.com/kms/","upvote_count":"3"},{"upvote_count":"2","comment_id":"844769","timestamp":"1679308860.0","content":"It should be option A","poster":"prabhay786"}],"answer":"A","answers_community":["A (100%)"],"answer_description":"","timestamp":"2023-03-20 07:24:00","isMC":true,"question_id":2},{"id":"ta4U0NTGTGBLCBIENiK7","answer_ET":"B","topic":"1","choices":{"C":"Add a resource policy to the production Lambda function to allow only the production environment S3 bucket to invoke the function.","A":"Update the Lambda execution role for the production Lambda function to add a policy that allows the execution role to read from only the production environment S3 bucket.","D":"Move the development and production environments into separate AWS accounts. Update the Lambda execution role for each function to add a policy that allows the execution role to read from the S3 bucket that is within the same account.","B":"Move the development and production environments into separate AWS accounts. Add a resource policy to each Lambda function to allow only S3 buckets that are within the same account to invoke the function."},"isMC":true,"timestamp":"2023-05-15 01:06:00","exam_id":24,"answer":"B","question_text":"A company uses AWS Lambda functions and an Amazon S3 trigger to process images into an S3 bucket. A development team set up multiple environments in a single AWS account.\n\nAfter a recent production deployment, the development team observed that the development S3 buckets invoked the production environment Lambda functions. These invocations caused unwanted execution of development S3 files by using production Lambda functions. The development team must prevent these invocations. The team must follow security best practices.\n\nWhich solution will meet these requirements?","question_id":3,"url":"https://www.examtopics.com/discussions/amazon/view/109246-exam-aws-certified-developer-associate-dva-c02-topic-1/","answer_description":"","discussion":[{"timestamp":"1684358400.0","comments":[{"comments":[{"poster":"maurice2005","timestamp":"1710966900.0","upvote_count":"1","content":"There is nowhere mentioned in the question that workload is the problem!","comment_id":"1178683"}],"timestamp":"1688645760.0","poster":"MrPie","comment_id":"944627","content":"It's a best practice: Best Practices:\nSeparate workloads using accounts: Establish common guardrails and isolation between environments (such as production, development, and test) and workloads through a multi-account strategy. Account-level separation is strongly recommended, as it provides a strong isolation boundary for security, billing, and access. https://wa.aws.amazon.com/wat.question.SEC_1.en.html","upvote_count":"15"},{"timestamp":"1724149920.0","comment_id":"1269353","poster":"wh1t4k3r","content":"\"The team must follow security best practices\"\nSecurity best practices state that prod should be separated from non prod environments.","upvote_count":"3"},{"comment_id":"970808","content":"resource policy totally fulfill requirement","poster":"jipark","upvote_count":"3","timestamp":"1691044260.0"}],"comment_id":"900510","content":"Selected Answer: C\nB is a wrong answer because I do not understand the need to move the environments to separate AWS accounts. The resource policy in the production environment can be used to control which S3 bucket invokes the function. \n\nIn my understanding, the answer choice C fulfills the security best practices requirement in the question.","poster":"AgboolaKun","upvote_count":"28"},{"upvote_count":"23","poster":"csG13","comment_id":"916617","content":"Selected Answer: B\nI choose B because it says that the team should follow the best security practices. AWS well-architected framework suggests separation. For reference see the link below: https://wa.aws.amazon.com/wat.question.SEC_1.en.html","timestamp":"1686082560.0"},{"comment_id":"1557201","content":"Selected Answer: C\nAmazon S3 can invoke a Lambda function only if the Lambda function's resource-based policy allows it.\n\nIn this case, development S3 buckets are incorrectly configured to invoke the production Lambda function. This implies that the resource policy on the production Lambda function is too permissive.\n\nTo fix this, you should restrict the Lambda function’s resource policy so that only the production S3 bucket has permission to invoke it.","poster":"wmv__","upvote_count":"1","timestamp":"1743913080.0"},{"timestamp":"1737736560.0","upvote_count":"1","comment_id":"1346187","poster":"mooncake1","content":"Selected Answer: C\nSeparating account can be more secure and easy but maintenance will be more hard. \nIt is developer's role and ability to distinguish and maintain between two environments, not just splitting them because it's easy. \nWhat AWS wants as a DVA Certificate Member is not a person who splits the accounts because its easy , but is able to use IAM properly."},{"content":"Selected Answer: C\nWhen securing AWS Lambda functions, you must ensure that only authorized resources (like an S3 bucket) can trigger or invoke the function. In this scenario, the simplest and most effective solution is to use resource-based policies on the Lambda function to restrict access.","timestamp":"1737493380.0","upvote_count":"1","comment_id":"1344369","poster":"rkotit"},{"content":"Selected Answer: C\nA) Eliminated - This approach focuses on the Lambda function's ability to read from S3, not on which S3 buckets can invoke it.\n\nB) Eliminated - Moving environments to separate AWS accounts might improve isolation but is not necessary to solve the stated problem\n\nC) Correct - The resource policy in Option C restricts Lambda function invocations to only the intended production S3 bucket. This is a direct implementation of AWS's least privilege security model","poster":"sumanshu","comment_id":"1332374","comments":[{"content":"B) can be correct\n\nWhile this does restrict invocation to the production S3 bucket, keeping both environments in the same account is not a best security practice.\nA single-account setup increases the risk of misconfigurations, accidental access, and security breaches.","comment_id":"1353574","upvote_count":"1","poster":"sumanshu","timestamp":"1739039280.0"}],"timestamp":"1735298220.0","upvote_count":"1"},{"comment_id":"1329926","content":"Selected Answer: C\nOption C focuses on securing the production Lambda function by adding a resource policy to restrict invocations. This policy would specify that only the production S3 bucket can trigger the production Lambda function. This prevents accidental invocations from development S3 buckets.","poster":"Dimix3","timestamp":"1734777120.0","upvote_count":"1"},{"timestamp":"1730542620.0","content":"Selected Answer: B\nPls pay attention to keywords when you do aws quizzes.\nThe best security practice: option B\nThe lowest operational cost: option C.\nSo B is definitely the answer.","comment_id":"1306134","upvote_count":"2","poster":"nbxyzd"},{"upvote_count":"1","poster":"AmitRanchi","content":"Selected Answer: C\nBecause-\nB. Move the development and production environments into separate AWS accounts:\n\nWhile moving to separate accounts is a good practice for environment isolation, it's a more complex and potentially costly solution. Also, it isn't strictly necessary to achieve the goal of preventing unauthorized invocations, which can be accomplished via resource policies. It adds overhead without directly addressing the root cause.","timestamp":"1728738360.0","comment_id":"1296513"},{"poster":"Saudis","comment_id":"1283021","timestamp":"1726204860.0","upvote_count":"1","content":"Selected Answer: B\nBest practices is the key Word"},{"comment_id":"1261326","timestamp":"1722907680.0","poster":"Saurabh04","upvote_count":"1","content":"Option D is correct. This approach ensures isolation while maintaining manageability"},{"poster":"queekao","upvote_count":"1","content":"Selected Answer: C\nOption C is the simplest way to achieve this requirement.","comment_id":"1254071","timestamp":"1721790180.0","comments":[{"timestamp":"1730542380.0","comment_id":"1306129","upvote_count":"1","poster":"nbxyzd","content":"Read carefully. The questions asks for 'the best' not the 'the simplest' security practice."}]},{"upvote_count":"1","content":"Selected Answer: B\nEstablish common guardrails and isolation between environments (such as production, development, and test) and workloads through a multi-account strategy. Account-level separation is strongly recommended, as it provides a strong isolation boundary for security, billing, and access","timestamp":"1721703600.0","comment_id":"1253377","poster":"Anandesh"},{"comment_id":"1250148","poster":"Aws_aspr","upvote_count":"1","timestamp":"1721280780.0","content":"Asked 18 July 24 WIthout security best practices word. So C is correct answer for this."},{"upvote_count":"1","timestamp":"1716408780.0","content":"Selected Answer: B\nB is the correct amswer.","poster":"65703c1","comment_id":"1215999"},{"comment_id":"1161590","poster":"SerialiDr","timestamp":"1709121960.0","upvote_count":"1","content":"Selected Answer: C\nThis approach involves configuring a resource-based policy (also known as a Lambda function policy) that explicitly defines which resources (in this case, S3 buckets) can invoke the Lambda function. By specifying only the production S3 bucket in the resource policy of the production Lambda function, you ensure that only events from the designated production S3 bucket can trigger the production Lambda function. This prevents development or other non-production buckets from inadvertently invoking production Lambda functions, thus maintaining environment integrity and security best practices."},{"content":"Selected Answer: D\nI feel it is D as there is no doubt we need to separately create two accounts for DEV & PROD. After that there must lambda execution roles where we can the specific policies. Resource based policies more of a Cross Account access.\nhttps://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html\nhttps://repost.aws/knowledge-center/lambda-execution-role-s3-bucket\nAs the question demands the best practices scenario so option D fulfils that.","timestamp":"1708848240.0","poster":"KarBiswa","upvote_count":"2","comment_id":"1158469"},{"comment_id":"1150669","content":"Selected Answer: B\nI initially thought C, but after going through the below, I dont think there is any scope for doubt. \n\nstablish common guardrails and isolation between environments (such as production, development, and test) and workloads through a multi-account strategy. Account-level separation is strongly recommended, as it provides a strong isolation boundary for security, billing, and access\n\nhttps://docs.aws.amazon.com/en_us/wellarchitected/latest/framework/sec_securely_operate_multi_accounts.html","poster":"SD_CS","timestamp":"1707958920.0","upvote_count":"4"},{"poster":"rrshah83","timestamp":"1704289920.0","content":"Selected Answer: C\nnew accounts not necessary...","upvote_count":"1","comment_id":"1112806"},{"poster":"Certified101","comment_id":"1099183","content":"Selected Answer: B\nB - following best practices","timestamp":"1702841940.0","upvote_count":"2"},{"content":"OMG this questions can be very wordy... be careful and read carefully - Answer is C","timestamp":"1702166640.0","upvote_count":"1","poster":"[Removed]","comments":[{"content":"after reading this link --> https://wa.aws.amazon.com/wat.question.SEC_1.en.html changing answer to B","poster":"[Removed]","upvote_count":"1","comment_id":"1092180","timestamp":"1702166880.0"}],"comment_id":"1092176"},{"poster":"Mimi666","content":"Selected Answer: B\nKeeping the security best-practices.","upvote_count":"1","comment_id":"1086971","timestamp":"1701624660.0"},{"comment_id":"1086397","timestamp":"1701547980.0","content":"Selected Answer: B\nChatGPT: B","poster":"tqiu654","comments":[],"upvote_count":"1"},{"upvote_count":"4","poster":"Rameez1","content":"Selected Answer: B\nMoving the Dev and Prod environments to separate Accounts will make them totally isolated with cross account Lambda invocations. Whereas in Option C though Prod Lambda won't trigger with Dev S3 bucket Event, Dev Lambda may still get mistakenly invoked by Prod S3 Bucket event and perform unwanted actions.","comment_id":"1046341","timestamp":"1697573520.0"},{"timestamp":"1697561700.0","upvote_count":"1","comments":[{"content":"COMO CHINGAS","timestamp":"1698349500.0","upvote_count":"1","poster":"Chicote","comment_id":"1054879"}],"poster":"Nagasoracle","content":"Selected Answer: B\nSorry it is B\nAs it mentions to follow security practice","comment_id":"1046218"},{"poster":"Nagasoracle","timestamp":"1697561640.0","comment_id":"1046217","upvote_count":"1","content":"Selected Answer: A\nAnswer : A\nAs it mentions to follow best security practice"},{"content":"B seems to be the correct one\nhttps://docs.aws.amazon.com/wellarchitected/latest/framework/sec_securely_operate_multi_accounts.html\nEstablish common guardrails and isolation between environments (such as production, development, and test) and workloads through a multi-account strategy. Account-level separation is strongly recommended, as it provides a strong isolation boundary for security, billing, and access.","timestamp":"1695037440.0","upvote_count":"1","poster":"Millie024","comment_id":"1010523"},{"content":"Selected Answer: C\nC meets the contextual security requirements.","timestamp":"1693357380.0","upvote_count":"1","comment_id":"993621","poster":"fossil123"},{"content":"Selected Answer: B\nSee the question, in terms of \"Security best practices\", Answer is B. It could be C for 2nd option if separate AWS account is not possible.","timestamp":"1692891120.0","comment_id":"989302","upvote_count":"1","poster":"stilloneway"},{"comments":[{"timestamp":"1700962080.0","comment_id":"1080425","upvote_count":"2","content":"ChatGPT is usually wrong. Do not base your answers on ChatGPT","poster":"[Removed]"}],"timestamp":"1692808020.0","content":"C. Add a resource policy to the production Lambda function to allow only the production environment S3 bucket to invoke the function.\n\nExplanation:\n\nIn this scenario, the goal is to prevent unwanted invocations of production Lambda functions by development S3 buckets. Adding a resource policy directly to the production Lambda function that restricts invocations to only the production S3 bucket ensures that the function is only invoked by the intended bucket.\n\nChatGPT","poster":"love777","upvote_count":"2","comment_id":"988469"},{"content":"Selected Answer: B\nchatgpt said","timestamp":"1684306560.0","comment_id":"899791","poster":"loctong","upvote_count":"1"},{"content":"Selected Answer: B\nAnswer is B","upvote_count":"1","poster":"junrun3","timestamp":"1684105560.0","comment_id":"897918"}],"answers_community":["B (52%)","C (45%)","2%"],"answer_images":[],"unix_timestamp":1684105560,"question_images":[]},{"id":"9MJMJGAmRVyNDRrFjvdK","choices":{"B":"Amazon Cognito identity pools","D":"AWS Directory Service","A":"IAM role","C":"Amazon Cognito user pools"},"url":"https://www.examtopics.com/discussions/amazon/view/106980-exam-aws-certified-developer-associate-dva-c02-topic-1/","isMC":true,"question_images":[],"discussion":[{"content":"Selected Answer: C\nhttps://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html","timestamp":"1685974620.0","poster":"HuiHsin","comment_id":"915484","upvote_count":"10"},{"timestamp":"1695685620.0","content":"Amazon Cognito user pools provide user identity management and authentication for your application. They allow you to create and maintain a user directory, and you can enable social identity providers like Facebook, Google, or Amazon to allow users to register and log in using their social media accounts. This service is specifically designed for user management and authentication scenarios like the one described.\n\nOption B, \"Amazon Cognito identity pools,\" is more focused on providing temporary AWS credentials for users to access AWS services securely after they have been authenticated through a user pool.","poster":"Bhatfield","upvote_count":"9","comment_id":"1017257","comments":[{"comment_id":"1092263","content":"The big difference being users authenticates to applications (web and mobile) vs identity authenticates to AWS resources.","upvote_count":"3","poster":"[Removed]","timestamp":"1702177500.0"}]},{"comment_id":"1557235","content":"Selected Answer: C\nAmazon Cognito identity pools – Used for authorization and temporary AWS credentials, not for user sign-up. They often work with user pools after authentication.","timestamp":"1743913200.0","upvote_count":"1","poster":"wmv__"},{"comment_id":"1332376","timestamp":"1735298520.0","upvote_count":"1","content":"Selected Answer: B\nA) Eliminated - Eliminated because it does not support user account registration or social sign-in directly.\n\nB) Correct - Manages user registration and authentication.\n\nC) Eliminated - Provides temporary AWS credentials to authenticated users so they can access AWS resources like S3, DynamoDB, etc.","comments":[{"poster":"sumanshu","timestamp":"1735298520.0","content":"Sorry - C\n\n\nA) Eliminated - Eliminated because it does not support user account registration or social sign-in directly.\n\nC) Correct - Manages user registration and authentication.\n\nB) Eliminated - Provides temporary AWS credentials to authenticated users so they can access AWS resources like S3, DynamoDB, etc.","upvote_count":"1","comment_id":"1332377"}],"poster":"sumanshu"},{"timestamp":"1730597160.0","comment_id":"1306391","poster":"nbxyzd","content":"Selected Answer: C\nB is wrong. While identity pools also support federated identities, they are primarily used for granting AWS credentials to authenticated users. They are less focused on user management within the application itself.","upvote_count":"1"},{"upvote_count":"1","content":"The best answer is B Amazon Cognito Identity Pool","comments":[{"comment_id":"1306021","poster":"ogogundare","timestamp":"1730502600.0","content":"I think C is the right answer on further check\nAmazon Cognito user pool can use social idps","upvote_count":"1"}],"poster":"ogogundare","comment_id":"1306020","timestamp":"1730502120.0"},{"comment_id":"1280141","timestamp":"1725746820.0","poster":"gdm83","upvote_count":"1","content":"Does emamtopic have exact replicas of actual exam questions"},{"timestamp":"1716409200.0","content":"Selected Answer: C\nC is the correct answer.","comment_id":"1216004","upvote_count":"1","poster":"65703c1"},{"comment_id":"1216003","upvote_count":"1","poster":"65703c1","content":"Selected Answer: B\nB is the correct answer.","timestamp":"1716409080.0"},{"content":"Selected Answer: B\nOption B: Amazon Cognito identity pools\n\nAmazon Cognito identity pools (also known as federated identities) enable you to create unique identities for your users and authenticate them with identity providers. With identity pools, your users can obtain temporary AWS credentials to access AWS services. This service supports authentication through social identity providers such as Amazon, Facebook, Google, and also supports unauthenticated identities.","timestamp":"1709122320.0","poster":"SerialiDr","comment_id":"1161599","upvote_count":"2"},{"upvote_count":"1","content":"c \nAmazon Cognito user pools provide user identity management and authentication for your application.","comment_id":"1154324","timestamp":"1708381740.0","poster":"rrharris"},{"content":"Selected Answer: B\nB. Amazon Cognito identity pools: Amazon Cognito identity pools (also known as Federated Identities) enable you to create unique identities for your users and authenticate them with identity providers, including social media platforms like Facebook, Google, Amazon, and Apple. With identity pools, you can grant your users access to other AWS services. They are designed to handle scenarios where users can sign in through a third-party identity provider or use guest access.","upvote_count":"1","poster":"SerialiDr","comment_id":"1123399","timestamp":"1705324980.0"},{"comment_id":"1003459","upvote_count":"2","timestamp":"1694287800.0","content":"Selected Answer: C\nFor creating an application where new users can create accounts and register using their social media accounts, Amazon Cognito is the most suitable service. Specifically, you'd want to use Amazon Cognito User Pools.\n\nAmazon Cognito User Pools support sign-ins using social identity providers like Facebook, Google, and Amazon, as well as enterprise identity providers via SAML 2.0. With a user pool, you can create a fully managed user directory to enable user sign-up and sign-in, as well as handle password recovery, user verification, and other user management tasks.","poster":"Dushank"},{"poster":"Dushank","comment_id":"1002713","content":"The answer is (B).\n\nAmazon Cognito identity pools is a managed service that provides user sign-in and identity management for your web and mobile applications. It supports social sign-in with a variety of providers, including Amazon, Facebook, Google, and Twitter.","upvote_count":"1","timestamp":"1694205960.0"},{"poster":"hanJR","upvote_count":"4","comment_id":"883179","timestamp":"1682648940.0","content":"Selected Answer: C\nYou can't register using Identity Pool. It lets you authenticate with provided identification pools."},{"upvote_count":"5","timestamp":"1682265180.0","comment_id":"878569","poster":"Cloud_Cloud","content":"Selected Answer: C\nhttps://medium.com/wolox/integrating-social-media-to-your-app-with-aws-cognito-8943329aa89b"},{"upvote_count":"4","content":"Selected Answer: B\nKey word is registration using their social media accounts","comment_id":"877282","poster":"MrTee","comments":[{"timestamp":"1683637860.0","content":"B is incorrect. https://www.youtube.com/watch?v=9pvygKIuCpI","upvote_count":"1","comment_id":"893110","poster":"awsdummie"},{"comment_id":"898270","upvote_count":"1","timestamp":"1684153740.0","content":"Using Cognito identity pools you can get the token and access AWS using social media accounts, BUT you can't create an account, in this case we need Cognito user pools.","poster":"rlnd2000"}],"timestamp":"1682168760.0"}],"unix_timestamp":1682168760,"answer_ET":"C","answers_community":["C (73%)","B (27%)"],"timestamp":"2023-04-22 15:06:00","answer_images":[],"exam_id":24,"answer_description":"","answer":"C","topic":"1","question_text":"A developer is creating an application. New users of the application must be able to create an account and register by using their own social media accounts.\n\nWhich AWS service or resource should the developer use to meet these requirements?","question_id":4},{"id":"xrz2kB0iIKoJzekowJZd","answer_images":[],"discussion":[{"upvote_count":"14","poster":"csG13","content":"Selected Answer: A\nThe answer is A. Here is a reference directly from AWS docs:\n\n\"If you need some of the capabilities of Lambda@Edge that are not available with CloudFront Functions, such as network access or a longer execution time, you can still use Lambda@Edge before and after content is cached by CloudFront.\"\n\nSince the requirement is to access the STS service, network access is required. Therefore, it can't be Cloudfront functions. Also, as a side note it's worth to mention that Cloudfront functions can only execute for up to 1ms. Apparently this isn't enough to fetch user creds (tokens) from STS. \n\nThe table in the following link summarises the differences between Cloudfront functions and Lambda@edge\n\nhttps://aws.amazon.com/blogs/aws/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale/","comment_id":"918175","timestamp":"1702041360.0"},{"timestamp":"1697981400.0","comment_id":"877303","upvote_count":"5","poster":"MrTee","comments":[{"comments":[{"timestamp":"1702792800.0","content":"After rereading the last part of the question. It doesnt mention that it must remain written in Javascript, but does seem using AWS STS is a requirement so I think I would stick with A being the answer","comment_id":"925745","poster":"eboehm","upvote_count":"1"}],"content":"Now one problem is lambda function can not perform AWS STS command","upvote_count":"1","comment_id":"878577","timestamp":"1698076620.0","poster":"Cloud_Cloud"}],"content":"Selected Answer: B\nThe difference between A and B is the SDK for Javascript in use here; Lambda@Edge functions can be written in a variety of programming languages, including Node.js, Python, and Java, while CloudFront functions are written in JavaScript."},{"upvote_count":"1","poster":"sumanshu","timestamp":"1735304160.0","comment_id":"1332408","content":"Selected Answer: A\nB) Eliminated - CloudFront functions are lightweight JavaScript functions designed for simple HTTP request and response manipulations (e.g., header rewrites, URL rewrites). They cannot access AWS services like STS or assume roles\n\nC/D) Eliminated - Moving the credentials from the JSON file to the Lambda@Edge function does not eliminate the core issue of hardcoding credentials"},{"upvote_count":"1","poster":"65703c1","content":"Selected Answer: A\nA is the correct answer.","timestamp":"1732314300.0","comment_id":"1216008"},{"poster":"rrharris","timestamp":"1724099580.0","comment_id":"1154327","upvote_count":"3","content":"Selected Answer: A\nWhy A is Correct:\nLambda@Edge for Secure Credential Management: Lambda@Edge allows you to run Lambda functions in response to CloudFront events. By using Lambda@Edge, the developer can securely manage credentials by keeping them out of the client-side code.\n\nInvoking on Viewer Request: Invoking the Lambda@Edge function on viewer requests ensures that the credential generation happens in real-time, securely, and as needed, without exposing any sensitive information.\n\nExecution Role with STS Access: Assigning the Lambda function an execution role with permissions to access AWS STS (Security Token Service) enables the function to securely request temporary, limited-privilege credentials on behalf of the client.\n\nMoving SDK Calls to Lambda@Edge: Transferring all AWS SDK calls from the frontend to the Lambda@Edge function prevents exposing any credentials in the frontend code, enhancing security."},{"timestamp":"1721043180.0","upvote_count":"4","content":"Selected Answer: A\nA. Lambda@Edge allows you to run Lambda functions in response to CloudFront events. By using a Lambda@Edge function, you can securely handle the process of obtaining credentials from AWS STS without exposing them in the client-side application code. The function's execution role can be granted the necessary permissions to interact with AWS STS, and SDK calls can be made from within this server-side environment. This approach centralizes credential management and AWS interactions in a more secure, server-side context.","comment_id":"1123404","poster":"SerialiDr"},{"upvote_count":"2","content":"I think i will also go with A as cloudfront functions can only read authorization headers from the viewer request if it sees the authorization header request. And Clouf front functions has no access to internet.","timestamp":"1717424460.0","comment_id":"1086929","poster":"LR2023"},{"timestamp":"1709833440.0","content":"Selected Answer: A\nI will go for A, check the link below, Cloudfront functions are just within Cloudfront, hence, they DONT HAVE NETWORK ACCESS. Network access is required to make a call to AWS STS.\n\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/edge-functions.html","comment_id":"1001702","upvote_count":"1","poster":"Baba_Eni"},{"comment_id":"978625","upvote_count":"1","poster":"MG1407","timestamp":"1707663420.0","content":"The answer is B. I was in agreement with csG13 until a further research into the JavaScript SDK and STS. Found the following: https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-cloudfront/classes/stsclient.html.\nSince the question states Js SDK and STS the answer is B."},{"comment_id":"909642","timestamp":"1701290580.0","poster":"FunkyFresco","upvote_count":"1","content":"Selected Answer: A\nOption A."},{"upvote_count":"2","poster":"zodraz","timestamp":"1699475280.0","comment_id":"892432","content":"Selected Answer: A\nhttps://www.examtopics.com/discussions/amazon/view/89838-exam-aws-certified-developer-associate-topic-1-question-361/"},{"content":"Selected Answer: A\nCloud front function doesn't have network access, it has to be lambda @ edge\n\n I l","timestamp":"1698519000.0","poster":"vic614","comment_id":"883830","upvote_count":"2"}],"question_id":5,"isMC":true,"exam_id":24,"answer_ET":"A","question_images":[],"timestamp":"2023-04-22 15:30:00","topic":"1","question_text":"A social media application uses the AWS SDK for JavaScript on the frontend to get user credentials from AWS Security Token Service (AWS STS). The application stores its assets in an Amazon S3 bucket. The application serves its content by using an Amazon CloudFront distribution with the origin set to the S3 bucket.\n\nThe credentials for the role that the application assumes to make the SDK calls are stored in plaintext in a JSON file within the application code. The developer needs to implement a solution that will allow the application to get user credentials without having any credentials hardcoded in the application code.\n\nWhich solution will meet these requirements?","choices":{"A":"Add a Lambda@Edge function to the distribution. Invoke the function on viewer request. Add permissions to the function's execution role to allow the function to access AWS STS. Move all SDK calls from the frontend into the function.","B":"Add a CloudFront function to the distribution. Invoke the function on viewer request. Add permissions to the function's execution role to allow the function to access AWS STS. Move all SDK calls from the frontend into the function.","C":"Add a Lambda@Edge function to the distribution. Invoke the function on viewer request. Move the credentials from the JSON file into the function. Move all SDK calls from the frontend into the function.","D":"Add a CloudFront function to the distribution. Invoke the function on viewer request. Move the credentials from the JSON file into the function. Move all SDK calls from the frontend into the function."},"url":"https://www.examtopics.com/discussions/amazon/view/106981-exam-aws-certified-developer-associate-dva-c02-topic-1/","answers_community":["A (85%)","B (15%)"],"answer":"A","answer_description":"","unix_timestamp":1682170200}],"exam":{"isMCOnly":true,"lastUpdated":"11 Apr 2025","numberOfQuestions":551,"isImplemented":true,"id":24,"isBeta":false,"name":"AWS Certified Developer - Associate DVA-C02","provider":"Amazon"},"currentPage":1},"__N_SSP":true}