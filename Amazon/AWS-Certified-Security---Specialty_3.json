{"pageProps":{"questions":[{"id":"eg2t9JXhDbmoZomArKbf","answer_description":"","question_id":11,"discussion":[{"comment_id":"63617","timestamp":"1632598080.0","poster":"joeboy","content":"Answer: C\nhttps://aws.amazon.com/blogs/security/how-to-protect-the-integrity-of-your-encrypted-data-by-using-aws-key-management-service-and-encryptioncontext/","upvote_count":"22"},{"comment_id":"89299","timestamp":"1634329500.0","upvote_count":"12","poster":"gfhbox0083","content":"Answer is C, \nOne of the most important and critical concepts in AWS Key Management Service (KMS) for advanced and secure data usage is EncryptionContext. Using EncryptionContext properly can help significantly improve the security of your applications. EncryptionContext is a key-value map (both strings) that is provided to KMS with each encryption and decryption request. EncryptionContext provides three benefits: Additional authenticated data (AAD), Audit trail, Authorization context ..."},{"content":"Selected Answer: C\nAAD > EncryptionContext.\nCorrect answer is C","timestamp":"1707781560.0","poster":"Raphaello","upvote_count":"1","comment_id":"1148768"},{"poster":"addy_prepare","timestamp":"1693575900.0","upvote_count":"1","content":"Selected Answer: C\nC - is correct https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context","comment_id":"996111"},{"upvote_count":"1","comment_id":"934562","timestamp":"1687790400.0","content":"Answer: C\n\nhttps://docs.aws.amazon.com/crypto/latest/userguide/cryptography-concepts.html#term-aad\n\nadditional authenticated data (AAD)\n\n Nonsecret data that is provided to encryption and decryption operations to add an additional integrity and authenticity check on the encrypted data. Typically, the decrypt operation fails if the AAD provided to the encrypt operation does not match the AAD provided to the decrypt operation.\n\n AWS Key Management Service (AWS KMS) and the AWS Encryption SDK both support AAD by using an encryption context.","poster":"soyyodario"},{"upvote_count":"1","content":"EncryptionContext is KMS’s implementation of AAD. I highly recommend that you use it to ensure that unencrypted data related to the ciphertext is protected against tampering. C","poster":"ITGURU51","comment_id":"908884","timestamp":"1685310840.0"},{"poster":"Nikhil0222","content":"C. Use kms:EncryptionContext as a condition when defining IAM policies for the CMK.\n\nkms:EncryptionContext can be used to ensure that the data being encrypted is tagged with a specific context, such as a resource or user ID. This tag can then be used as a condition in the IAM policy for the CMK, allowing the Security Engineer to control which IAM users and roles are able to use the CMK to encrypt or decrypt data based on the context of the data being processed.","comment_id":"868846","upvote_count":"1","timestamp":"1681337880.0"},{"poster":"ITGURU51","comment_id":"865659","upvote_count":"1","content":"At its core, using authenticated encryption prevents tampering with ciphertext itself. Authenticated encryption is built into KMS, so if you can successfully decrypt a message using KMS, an authorized user must have created that message. You can almost think of this as providing a “signature” over the ciphertext.","timestamp":"1681056600.0"},{"comment_id":"640558","timestamp":"1659349680.0","poster":"Sarksa","upvote_count":"3","content":"Selected Answer: C\nkms:EncryptionContext helps against tampering of the cypher text."},{"timestamp":"1649967180.0","poster":"TigerInTheCloud","content":"Selected Answer: C\nadditional authenticated data (AAD) => kms:EncryptionContext","comment_id":"585988","upvote_count":"3"},{"upvote_count":"1","poster":"Radhaghosh","content":"Answer C --> Encryption Context","comment_id":"533472","timestamp":"1643253780.0"},{"upvote_count":"2","poster":"Larsson","comment_id":"323698","content":"C it is. This question is commonly available from other sources as well.","timestamp":"1636113960.0"},{"upvote_count":"4","timestamp":"1635227640.0","poster":"awssecuritynewbie","comment_id":"106153","content":"The answer is C the answer to the question says D but then points to a document that talks about AAD and is encryption context. Hope this helps guys\n\nencryption context\nA type of additional authenticated data (AAD) (p. 2). It typically consists of nonsecret, arbitrary,\nname–value pairs. In most cases, you can provide an encryption context when you encrypt data. The\nsame encryption context must be provided to decrypt the data. The encryption context is usually\noptional but recommended.\nThe term encryption context has different meanings in various AWS services and tools. This can be\nconfusing, so be sure to understand how your tool or service interprets this term."},{"upvote_count":"1","poster":"wzlinux","content":"C is correct","timestamp":"1635019800.0","comment_id":"105586"},{"upvote_count":"1","content":"Ans is C","poster":"testing4321","timestamp":"1634652480.0","comment_id":"105128"},{"upvote_count":"1","comment_id":"65889","content":"C for me","timestamp":"1633456620.0","poster":"RaySmith"},{"content":"Answer is C","comment_id":"64850","poster":"luis12345","timestamp":"1633266060.0","upvote_count":"1"},{"timestamp":"1632805620.0","comment_id":"63639","upvote_count":"1","content":"I think it is C","poster":"AliAliwa"}],"choices":{"B":"Use IAM policies to restrict access to Encrypt and Decrypt API actions.","C":"Use kms:EncryptionContext as a condition when defining IAM policies for the CMK.","A":"Pass the key alias to AWS KMS when calling Encrypt and Decrypt API actions.","D":"Use key policies to restrict access to the appropriate IAM groups."},"answer":"C","url":"https://www.examtopics.com/discussions/amazon/view/16509-exam-aws-certified-security-specialty-topic-1-question-108/","unix_timestamp":1584131040,"answers_community":["C (100%)"],"answer_images":[],"question_images":[],"isMC":true,"timestamp":"2020-03-13 21:24:00","question_text":"A Security Engineer is looking for a way to control access to data that is being encrypted under a CMK. The Engineer is also looking to use additional authenticated data (AAD) to prevent tampering with ciphertext.\nWhich action would provide the required functionality?","exam_id":29,"answer_ET":"C","topic":"1"},{"id":"lQaE5D6LJi3KhUfS4dAY","answer_ET":"BCE","question_text":"An application makes calls to AWS services using the AWS SDK. The application runs on Amazon EC2 instances with an associated IAM role. When the application attempts to access an object within an Amazon S3 bucket; the Administrator receives the following error message: HTTP 403: Access Denied.\nWhich combination of steps should the Administrator take to troubleshoot this issue? (Choose three.)","question_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/47836-exam-aws-certified-security-specialty-topic-1-question-109/","unix_timestamp":1616282040,"answer_images":[],"answer":"BCE","answers_community":["BCE (100%)"],"exam_id":29,"answer_description":"","discussion":[{"upvote_count":"21","comment_id":"331177","poster":"chengxu32","timestamp":"1633946640.0","content":"BCE is correct. Per following S3 403 error troubleshooting guide\nhttps://aws.amazon.com/premiumsupport/knowledge-center/s3-troubleshoot-403/"},{"poster":"dcasabona","timestamp":"1659469080.0","content":"Selected Answer: BCE\nMy first choice was A, C and E, but after reading @Larsson question and @halfway response I chance my mind to B, C and E.","upvote_count":"6","comment_id":"641431"},{"timestamp":"1718404140.0","poster":"Deyemzy","comment_id":"1230702","upvote_count":"1","content":"ACE\n\n\nB - This step is only necessary if the S3 bucket is using server-side encryption with a KMS key (SSE-KMS). If the objects are not encrypted using KMS, this step is irrelevant to the 403 error."},{"poster":"Raphaello","upvote_count":"1","comment_id":"1148769","timestamp":"1707781620.0","content":"Selected Answer: BCE\nBCE are the correct answers."},{"comment_id":"905541","poster":"Tofu13","content":"Selected Answer: BCE\nA is wrong as a security group denying access to s3 would lead to some kind of timeout.","upvote_count":"2","timestamp":"1684909200.0"},{"content":"B,C and E","timestamp":"1635846960.0","comment_id":"388780","upvote_count":"3","poster":"refuz"},{"upvote_count":"4","timestamp":"1634693460.0","comments":[{"upvote_count":"2","poster":"DahMac","content":"Check Key, Bucket, Role (B,C,E) privs","comment_id":"422904","timestamp":"1636039800.0"}],"comment_id":"351801","poster":"Hungdv","content":"B, C and E"},{"comments":[{"content":"If the port is blocked, there will not be a 403 HTTP response.","upvote_count":"7","comment_id":"328286","poster":"halfway","timestamp":"1633500240.0"}],"content":"ACE it could be, because the question does not even mention encryption and the security group acting on the instance could very well block the access to an S3 bucket (especially if that access is via HTTP(S) then the security group would just not have egress port 80/443) Why not?","poster":"Larsson","upvote_count":"2","timestamp":"1632757320.0","comment_id":"323701"},{"content":"Just to add I think the question is maybe missing info. But links for reference: https://aws.amazon.com/premiumsupport/knowledge-center/decrypt-kms-encrypted-objects-s3/ , https://aws.amazon.com/premiumsupport/knowledge-center/ec2-instance-access-s3-bucket/","timestamp":"1632648840.0","comment_id":"322196","upvote_count":"3","poster":"[Removed]"},{"comment_id":"315911","timestamp":"1632341640.0","content":"BCE is correct","poster":"[Removed]","upvote_count":"3"}],"question_id":12,"isMC":true,"timestamp":"2021-03-21 00:14:00","topic":"1","choices":{"C":"Check the S3 bucket policy for statements that deny access to objects.","A":"Confirm that the EC2 instance's security group authorizes S3 access.","F":"Confirm that the instance and the S3 bucket are in the same Region.","E":"Confirm that the IAM role associated with the EC2 instance has the proper privileges.","D":"Confirm that the EC2 instance is using the correct key pair.","B":"Verify that the KMS key policy allows decrypt access for the KMS key for this IAM principle."}},{"id":"pzERqTTtv3cHbxgOrSZS","answer_images":[],"timestamp":"2019-08-25 17:18:00","answer_description":"","isMC":true,"discussion":[{"poster":"INASR","content":"D for sure correct . A & B are wrong because you do not store credentials in AWS-KMS . C is wrong because you do not attach EC2 instance profile to lamda function, you attach only to EC2 instance.","timestamp":"1632839520.0","upvote_count":"50","comments":[{"content":"\\I agree with this answer - was about to type same. D is correct","poster":"Lunga","timestamp":"1635425640.0","comment_id":"207272","upvote_count":"3"},{"timestamp":"1684359540.0","upvote_count":"1","comment_id":"900518","content":"Secrets Manager uses a Lambda function to rotate the secret for a secured service or database.","poster":"ITGURU51"}],"comment_id":"10785"},{"content":"D i think is correct","poster":"BillyC","upvote_count":"16","timestamp":"1632171360.0","comment_id":"8205"},{"upvote_count":"1","comment_id":"1249263","poster":"jlggross","timestamp":"1721165580.0","content":"First, for credentials (secrets / passwords) you should use Secrets Manager. AWS KMS is for encryption keys. Second, you cannot attach an instance profile to a Lambda function. D is the correct answer."},{"comment_id":"1231518","poster":"cumzle_com","content":"Selected Answer: D\nD for sure correct","timestamp":"1718566500.0","upvote_count":"1"},{"poster":"Raphaello","comment_id":"1166866","content":"Selected Answer: D\nD is correct.","upvote_count":"1","timestamp":"1709689920.0"},{"content":"D for me. \nStore the database credentials in AWS Secrets Manager. Create an IAM role with access to Secrets Manager by using the EC2 and Lambda service principals in the role's trust policy. Add the role to an EC2 instance profile. Attach the instance profile to the EC2 instances. Set up Lambda to use the new role for execution.","poster":"Benah","comment_id":"1005395","upvote_count":"1","timestamp":"1694495100.0"},{"timestamp":"1684359300.0","content":"The IAM execution role for the Lambda function is a necessary to be able to rotate the credentials. D","comment_id":"900517","upvote_count":"1","poster":"ITGURU51"},{"comment_id":"764627","content":"D! You do not attach an instance profile to a Lambda function, but allows the function to access the role while executing","upvote_count":"2","poster":"luis12345","timestamp":"1672748940.0"},{"poster":"gg12345","comment_id":"715976","upvote_count":"1","timestamp":"1668164400.0","content":"Selected Answer: D\nD - Seems to be the best answer."},{"content":"Selected Answer: D\nD looks right","timestamp":"1640710200.0","comment_id":"511354","poster":"jj22222","upvote_count":"1"},{"comment_id":"355929","upvote_count":"3","timestamp":"1636220280.0","content":"D. all day.\nC: is wrong \"Attach the instance profile to the EC2 instances and the Lambda function\"","poster":"Mikeclue"},{"timestamp":"1635690900.0","content":"Ans: D 100%","poster":"sanjaym","upvote_count":"3","comment_id":"353759"},{"upvote_count":"3","content":"Ans > D","timestamp":"1635585600.0","comment_id":"221737","poster":"devjava"},{"upvote_count":"3","timestamp":"1635576240.0","comment_id":"207375","content":"Ans(D)\nBecause the Lambda has the execution role","poster":"AfricanCloudGuru"},{"poster":"thePerfect","content":"C is wrong \nD is correct :\" Lambda execution role \" keyword","comment_id":"205699","timestamp":"1635284400.0","upvote_count":"1"},{"content":"C is wrong simply because the secret string in SSM also requires KMS permissions in your IAM roles","timestamp":"1634651280.0","poster":"PeppaPig","comment_id":"165195","upvote_count":"1"},{"poster":"RajeshNayyar","comment_id":"98959","upvote_count":"1","content":"KMS can not be used to store passwords or secrets, correct answer is D'","timestamp":"1634632980.0"},{"comment_id":"97057","timestamp":"1634248860.0","upvote_count":"6","poster":"hozefa","content":"I had this question on my exam today. Correct answer is D"},{"content":"D, for sure.\nC is wrong","comment_id":"92039","timestamp":"1634238360.0","poster":"gfhbox0083","upvote_count":"1"},{"comment_id":"70735","content":"D is correct","upvote_count":"3","poster":"tomtom2020","timestamp":"1633850220.0"},{"timestamp":"1633477500.0","comment_id":"67223","upvote_count":"5","poster":"RaySmith","content":"D is correct"},{"poster":"ryanle","timestamp":"1633321080.0","content":"C: AWS Secrets Manager used to store credential information, role attach to ec2 and lambda to access data in SSM, not attach instance profile to lambda","upvote_count":"1","comment_id":"63124"},{"upvote_count":"5","comment_id":"19344","timestamp":"1633298940.0","content":"An instance profile is a container for an IAM role that you can use to pass role information to an EC2 instance when the instance starts.\n\nD","poster":"bugybq"},{"content":"D should be right","poster":"ugreenhost","timestamp":"1632705360.0","comment_id":"10179","upvote_count":"3"},{"content":"D is the correct.","upvote_count":"4","poster":"cloudguy365","timestamp":"1632702900.0","comment_id":"9892"}],"answers_community":["D (100%)"],"question_images":[],"choices":{"B":"Store the database credentials in AWS KMS. Create an IAM role with access to KMS by using the EC2 and Lambda service principals in the role's trust policy. Add the role to an EC2 instance profile. Attach the instance profile to the EC2 instances and the Lambda function.","A":"Store the database credentials in AWS Key Management Service (AWS KMS). Create an IAM role with access to AWS KMS by using the EC2 and Lambda service principals in the role's trust policy. Add the role to an EC2 instance profile. Attach the instance profile to the EC2 instances. Set up Lambda to use the new role for execution.","D":"Store the database credentials in AWS Secrets Manager. Create an IAM role with access to Secrets Manager by using the EC2 and Lambda service principals in the role's trust policy. Add the role to an EC2 instance profile. Attach the instance profile to the EC2 instances. Set up Lambda to use the new role for execution.","C":"Store the database credentials in AWS Secrets Manager. Create an IAM role with access to Secrets Manager by using the EC2 and Lambda service principals in the role's trust policy. Add the role to an EC2 instance profile. Attach the instance profile to the EC2 instances and the Lambda function."},"question_id":13,"exam_id":29,"question_text":"An organization wants to deploy a three-tier web application whereby the application servers run on Amazon EC2 instances. These EC2 instances need access to credentials that they will use to authenticate their SQL connections to an Amazon RDS DB instance. Also, AWS Lambda functions must issue queries to the RDS database by using the same database credentials.\nThe credentials must be stored so that the EC2 instances and the Lambda functions can access them. No other access is allowed. The access logs must record when the credentials were accessed and by whom.\nWhat should the Security Engineer do to meet these requirements?","answer_ET":"D","topic":"1","unix_timestamp":1566746280,"url":"https://www.examtopics.com/discussions/amazon/view/4037-exam-aws-certified-security-specialty-topic-1-question-11/","answer":"D"},{"id":"dqsTiscTxKlkl4kAOxSI","question_text":"A Security Engineer must implement mutually authenticated TLS connections between containers that communicate inside a VPC.\nWhich solution would be MOST secure and easy to maintain?","answer":"D","topic":"1","answers_community":["D (54%)","C (46%)"],"answer_description":"","unix_timestamp":1584387960,"answer_ET":"D","question_id":14,"answer_images":[],"choices":{"D":"Use AWS Certificate Manager Private Certificate Authority (ACM PCA) to create a subordinate certificate authority, then use AWS Certificate Manager to generate the private certificates and deploy them to all the containers.","C":"Use AWS Certificate Manager Private Certificate Authority (ACM PCA) to create a subordinate certificate authority, then create the private keys in the containers and sign them using the ACM PCA API.","B":"Create a self-signed certificate in one container and use AWS Secrets Manager to distribute the certificate to the other containers to establish trust.","A":"Use AWS Certificate Manager to generate certificates from a public certificate authority and deploy them to all the containers."},"exam_id":29,"question_images":[],"discussion":[{"timestamp":"1632904080.0","comment_id":"78151","upvote_count":"23","poster":"BigZ","content":"Answers is C. (same question as #5 topic 2)\nSetting up ACM Private CA requires a root CA. This can be used to sign a certificate signing request (CSR) for the new subordinate (CA), which is then imported into ACM Private CA. After this is complete, it’s possible for containers within your platform to generate their own key-value pairs at runtime using OpenSSL. They can then use the key-value pairs to make their own CSR and ultimately receive their own certificate.\n\n* Option D mentions to user AWS certificate manager to generate private certificates. this is wrong. Containers request \"issue-certificate\" API call to the ACM PCA and \"get-certificate\" API call from ACM PCA.","comments":[{"poster":"Gustava6272","content":"Agreed C is correct . Just to affirm why D is not right , see the diagram in this link - https://aws.amazon.com/blogs/compute/maintaining-transport-layer-security-all-the-way-to-your-container-part-2-using-aws-certificate-manager-private-certificate-authority/","comment_id":"368989","timestamp":"1635662880.0","upvote_count":"6"}]},{"timestamp":"1632386760.0","content":"I think the right answer is D","poster":"luis12345","comment_id":"64852","upvote_count":"20"},{"content":"Selected Answer: D\nWhile Option C involves creating private keys inside the containers, which adds complexity and risk regarding key management, Option D leverages AWS services to provide a more streamlined, secure, and maintainable solution.","upvote_count":"1","poster":"shammous","timestamp":"1730275380.0","comment_id":"1304896"},{"poster":"Deyemzy","timestamp":"1718404800.0","content":"D\n\nUsing AWS Certificate Manager Private Certificate Authority (ACM PCA) to create a subordinate certificate authority and then generating private certificates with AWS Certificate Manager for deployment to containers (D) provides a secure and automated approach for certificate management, while creating private keys in the containers and signing them using the ACM PCA API (C) offers a more manual process that can be complex and less secure compared to ACM's automated lifecycle management.","comment_id":"1230704","upvote_count":"1"},{"upvote_count":"1","comment_id":"1219220","poster":"Arad","content":"Selected Answer: D\nI believe D is the correct answer, the keyword in the question is \"easy to maintain\", why D is better than C.","timestamp":"1716766620.0"},{"content":"Selected Answer: D\nCorrect answer is D.\nhttps://aws.amazon.com/blogs/compute/maintaining-transport-layer-security-all-the-way-to-your-container-part-2-using-aws-certificate-manager-private-certificate-authority/\n\nYou do not sign \"private key\".\nGenerate private key in the container, then create a CSR for the private CA to issue a certificate to be used by the container after getting it from PCA.","timestamp":"1707783660.0","comment_id":"1148796","comments":[{"timestamp":"1708963560.0","content":"mTLS is the process of mutual authentication by exchanging and validating certificates.","poster":"Raphaello","comment_id":"1159912","upvote_count":"1"}],"upvote_count":"1","poster":"Raphaello"},{"content":"key word - most secure :)","upvote_count":"1","timestamp":"1687759920.0","comment_id":"934090","poster":"Andrii223"},{"comment_id":"908933","upvote_count":"1","content":"The custom signed object is verified for integrity, and the root CA certificate is used to verify the chain of trust to confirm non-repudiation of the identity that produced the digital signature. As result, answer C is the most secure option.","timestamp":"1685318820.0","poster":"ITGURU51"},{"poster":"peddyua","comment_id":"833453","upvote_count":"1","content":"Selected Answer: D\nRequest a TLS certificate from ACM for the VPC using the AWS Management Console or the AWS CLI.\n Store the private key and certificate chain in a Docker container that will act as the server.\n Store the public key in a Docker container that will act as the client.\n Configure the server container to use the private key and certificate chain for TLS encryption.\n Configure the client container to use the public key for TLS encryption.\n Deploy the server and client containers to the VPC.\n Configure the security groups for the VPC to allow traffic over the necessary ports for the server and client containers to communicate.\n Enable mutual TLS authentication between the server and client containers. This can be done by configuring the server container to require client certificates and configuring the client container to provide a client certificate when making requests to the server container.\n Test the communication between the server and client containers to ensure that it is secure.","timestamp":"1678319160.0"},{"upvote_count":"1","comment_id":"763762","content":"Selected Answer: D\nACM can generate private certificate & this is an easier approach.\nhttps://docs.aws.amazon.com/acm/latest/userguide/gs-acm-request-private.html","comments":[{"upvote_count":"1","poster":"epomatti","comment_id":"1003530","content":"Wrong. Answer is C.\n\nYou didn't even the read your own link.\n\nACM works alongside PAC. It's even called ACM PAC.","timestamp":"1694298840.0"}],"timestamp":"1672668120.0","poster":"boooliyooo"},{"poster":"Fyssy","comment_id":"759004","timestamp":"1672171740.0","content":"Selected Answer: D\nThe answer is D. Tried this before. Used AWS Certificate Manager Private Certificate Authority (ACM PCA) to create a subordinate certificate authority. You can either generate the private certificate from CLI using PCA or from console using AWS Certificate Manager","upvote_count":"2"},{"content":"Selected Answer: C\nconviced by :https://aws.amazon.com/blogs/compute/maintaining-transport-layer-security-all-the-way-to-your-container-part-2-using-aws-certificate-manager-private-certificate-authority/","upvote_count":"4","timestamp":"1661967360.0","comment_id":"655328","poster":"sapien45"},{"timestamp":"1655135760.0","poster":"trongod05","comment_id":"615846","upvote_count":"2","content":"The wording on C is odd to me. \"then create the private keys in the containers and sign them using the ACM PCA API.\n\nWhy would sign a private key? You generate a key and the key is used to generate a CSR. The CA issues a signed certificate based on the CSR. In effect you are using AWS Certificate manager to issue (generate) the certificate."},{"upvote_count":"2","poster":"leu_alves_sch","comment_id":"531799","content":"Selected Answer: C\nhttps://aws.amazon.com/blogs/compute/maintaining-transport-layer-security-all-the-way-to-your-container-part-2-using-aws-certificate-manager-private-certificate-authority/","timestamp":"1643078880.0"},{"poster":"1awssec","content":"D (because the question is \"easy to maintain\" >> \" If you use ACM Private CA to create a CA, ACM can manage certificate issuance from that private CA and automate certificate renewals.\" ref: https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaWelcome.html","timestamp":"1636276860.0","comment_id":"470663","upvote_count":"2"},{"comment_id":"437250","poster":"kiev","content":"C and D a bit confusing but I would plum for C","timestamp":"1636022100.0","upvote_count":"1"},{"poster":"Hungdv","comment_id":"347733","upvote_count":"6","timestamp":"1635390900.0","content":"Answer is D.\nOption C works but it is more complicated than D.\nhttps://aws.amazon.com/certificate-manager/faqs/\nYou can export private certificates from ACM and use them with EC2 instances, containers, on-premises servers, and IoT devices. ACM Private CA automatically renews these certificates and sends an Amazon CloudWatch notification when the renewal is completed. You can write client-side code to download renewed certificates and private keys and deploy them with your application.","comments":[{"content":"And that's exactly why they mention \"the MOST secure option\". Generating the private key in the instances and ensuring the key leaves the instances is the most secure way to do this.","poster":"johnsm","upvote_count":"3","comment_id":"351347","timestamp":"1635399240.0"}]},{"timestamp":"1635190680.0","upvote_count":"2","comment_id":"346548","poster":"Fyg","content":"Setting up ACM Private CA requires a root CA. This can be used to sign a certificate signing request (CSR) for the new subordinate (CA), which is then imported into ACM Private CA. After this is complete, it’s possible for containers within your platform to generate their own key-value pairs at runtime using OpenSSL. They can then use the key-value pairs to make their own CSR and ultimately receive their own certificate.\n\nMore specifically, the container would complete the following steps at runtime:\n\nAdd OpenSSL to the Docker image (if it is not already included).\nGenerate a key-value pair (a cryptographically related private and public key).\nUse that private key to make a CSR.\nCall the ACM Private CA API or CLI issue-certificate operation, which issues a certificate based on the CSR.\nCall the ACM Private CA API or CLI get-certificate operation, which returns an issued certificate."},{"timestamp":"1635131940.0","poster":"disposable1989","comment_id":"338494","upvote_count":"2","content":"D because with private ACM you can export the keys as well, so you CSR, call api, download everything, run. No need to bake them within the container."},{"poster":"Larsson","comment_id":"323704","upvote_count":"1","content":"D I think but I don't know about A why that would be worse","timestamp":"1634945220.0"},{"comment_id":"284959","timestamp":"1634793060.0","poster":"NANDY666","upvote_count":"1","content":"C is Correct"},{"content":"D\nNote - the question asks for what is the most secure solution.\nOption C works - with this option the Certificates and keys can be included in the Docker image and made available to the container at runtime. This approach makes the deployment of containers with certificates and keys simple and easy.\nHowever, from a security perspective, this approach has a few drawbacks. Because certificates and private keys are bundled with the Docker images, anyone with access to a Docker image can also retrieve the certificate and private key. The other drawback is the updated certificates are not replaced automatically and the Docker image must be re-created to include any updated certificates. Running containers must either be restarted with the new image, or have the certificates updated. \nLink: https://aws.amazon.com/blogs/compute/maintaining-transport-layer-security-all-the-way-to-your-container-part-2-using-aws-certificate-manager-private-certificate-authority/","comment_id":"280177","upvote_count":"4","poster":"DashL","timestamp":"1634652840.0"},{"content":"Mutual authentication means each container must have its own unique certificate that identifies that specific container only. Therefore each container should generate private/public key pair, request the PCA to sign the CSR with its own private key just like any other CA would do. Each container uses its private key to decrypt. \nC is the correct answer.","upvote_count":"2","timestamp":"1634533320.0","poster":"student2020","comments":[{"poster":"rocka1","comment_id":"265583","timestamp":"1634569380.0","upvote_count":"1","content":"This is exactly the same question as Question 4 Topic 2"}],"comment_id":"209143"},{"timestamp":"1634531700.0","content":"I would lean to D. The requirement is easy to implement/maint. though C works, it will be hard to maint and you need to do the same for each container. \n\nD does mention, once private Cert created, it will be deployed to the container.","upvote_count":"1","comment_id":"190614","poster":"Ganfeng"},{"poster":"Dic","timestamp":"1634124540.0","comment_id":"185444","content":"if the cointainer does not have the private key, how does it decrypt ? They need mutual authentication","comments":[{"comments":[{"timestamp":"1635506580.0","poster":"johnsm","content":"There is no way to implement a mutual authentication scheme if the client doesn't have the private key, and also the server (in this case another container) doesn't have also its private key. Have a look at this https://community.developer.visa.com/t5/Tutorials/What-is-Mutual-Authentication/ba-p/5757","upvote_count":"1","comment_id":"353064"}],"comment_id":"186338","content":"Container should not have private key for security reasons and using API make no sense","poster":"deegadaze1","timestamp":"1634468880.0","upvote_count":"1"}],"upvote_count":"1"},{"timestamp":"1633780020.0","comments":[{"timestamp":"1634000040.0","poster":"kj07","upvote_count":"3","content":"Answer: D\nAlso, the question is duplicated.","comment_id":"178311"}],"comment_id":"178308","poster":"kj07","upvote_count":"1","content":"Why do you want to have a private key In your containers?"},{"comment_id":"133734","content":"Confirm C\n\nSetting up ACM Private CA requires a root CA. This can be used to sign a certificate signing request (CSR) for the new subordinate (CA), which is then imported into ACM Private CA. After this is complete, it’s possible for containers within your platform to generate their own key-value pairs at runtime using OpenSSL. They can then use the key-value pairs to make their own CSR and ultimately receive their own certificate.","poster":"foreverlate88","timestamp":"1633501800.0","upvote_count":"2"},{"poster":"Th3Dud3","comment_id":"110643","timestamp":"1633339200.0","content":"C.\n\nMore specifically, the container would complete the following steps at runtime:\n\nAdd OpenSSL to the Docker image (if it is not already included).\nGenerate a key-value pair (a cryptographically related private and public key).\nUse that private key to make a CSR.\nCall the ACM Private CA API or CLI issue-certificate operation, which issues a certificate based on the CSR.\nCall the ACM Private CA API or CLI get-certificate operation, which returns an issued certificate.","upvote_count":"4"},{"timestamp":"1633303440.0","upvote_count":"1","poster":"tarang","content":"it's C","comment_id":"101865"},{"timestamp":"1633232700.0","comments":[{"content":"it the D","timestamp":"1633290480.0","comment_id":"90250","poster":"macshild","upvote_count":"1"}],"upvote_count":"1","poster":"patand","comment_id":"80179","content":"so C or D ?"},{"content":"I think it's D","timestamp":"1632996960.0","comment_id":"79950","poster":"ADVIT","upvote_count":"2"},{"comment_id":"74185","upvote_count":"3","poster":"CloudyMcClouderson","content":"https://aws.amazon.com/blogs/compute/maintaining-transport-layer-security-all-the-way-to-your-container-part-2-using-aws-certificate-manager-private-certificate-authority/","timestamp":"1632558180.0"},{"poster":"tomtom2020","content":"my answer is C","comment_id":"71338","timestamp":"1632549060.0","upvote_count":"1"},{"comment_id":"65891","content":"C for me","timestamp":"1632478380.0","poster":"RaySmith","upvote_count":"1"},{"poster":"awssecuritynewbie","timestamp":"1632467340.0","upvote_count":"3","comment_id":"65306","content":"I think D as well. You cannot put the private key in the container is not safe."}],"url":"https://www.examtopics.com/discussions/amazon/view/16776-exam-aws-certified-security-specialty-topic-1-question-110/","timestamp":"2020-03-16 20:46:00","isMC":true},{"id":"OA391nIoPJ4K6uSem8aA","answer_images":[],"answer":"B","topic":"1","discussion":[{"timestamp":"1636244100.0","content":"B all the way","comment_id":"437256","poster":"kiev","upvote_count":"11"},{"upvote_count":"6","timestamp":"1636021260.0","content":"B, https://aws.amazon.com/blogs/security/how-to-use-external-id-when-granting-access-to-your-aws-resources/","poster":"cissp4365","comment_id":"421941"},{"comment_id":"1148797","timestamp":"1707783780.0","poster":"Raphaello","content":"Selected Answer: B\nB (ExternalID) is the solution for this scenario.","upvote_count":"1"},{"upvote_count":"1","poster":"scanner2","timestamp":"1687405560.0","content":"Selected Answer: B\nB is the right answer. External ID is like a token that needs to be provided while assuming an IAM role.","comment_id":"930121"},{"upvote_count":"1","poster":"ITGURU51","content":"You can use an IAM role to establish a trusted relationship between your AWS account and the Example Corp account. After this relationship is established, a member of the Example Corp account can call the AWS Security Token Service AssumeRole API to obtain temporary security credentials.","comment_id":"866136","timestamp":"1681116960.0"},{"timestamp":"1672742700.0","poster":"jishrajesh","upvote_count":"2","comment_id":"764452","content":"B is correct"},{"content":"I totally agree with option B. \n\nCould you please suggest on why Role Trust Policy cannot have IP range Condition as per option D? If Customer of Third Party comes from another network, its request will get rejected then. Won't it?","timestamp":"1667998980.0","comment_id":"714582","upvote_count":"2","poster":"tobedeleted"},{"timestamp":"1658327100.0","upvote_count":"4","comment_id":"634100","content":"Selected Answer: B\nThe confused deputy problem","poster":"sapien45"},{"timestamp":"1643337120.0","content":"B is valid --> External ID is required to over come confused deputy problem","comment_id":"534289","poster":"Radhaghosh","upvote_count":"2"},{"upvote_count":"5","content":"B is common practice, therefore it's correct.","timestamp":"1635709440.0","poster":"Larsson","comment_id":"323708"},{"poster":"NANDY666","content":"B is Correct","upvote_count":"3","comment_id":"284961","timestamp":"1635657900.0"},{"poster":"DanMuniz","comment_id":"190502","content":"B is correct, duplicated question indeed.","upvote_count":"3","timestamp":"1635602580.0"},{"content":"B, duplicated question","poster":"foreverlate88","comments":[{"poster":"deegadaze1","content":"Correct!","comment_id":"186342","upvote_count":"2","timestamp":"1635450840.0"}],"upvote_count":"3","comment_id":"133738","timestamp":"1634994480.0"},{"content":"B is right ans. \"Principal\": {\"AWS\": \"Example Corp's AWS Account ID\"},\n \"Condition\": {\"StringEquals\": {\"sts:ExternalId\": \"Unique ID Assigned by Example Corp\"}}","upvote_count":"3","poster":"testing4321","timestamp":"1634892180.0","comment_id":"105140"},{"upvote_count":"3","comments":[{"upvote_count":"1","comment_id":"497166","timestamp":"1638995640.0","content":"Sorry, that is not correct.\nPlease see link to this article.\nI am going with B.\nhttps://research.nccgroup.com/2019/12/18/demystifying-aws-assumerole-and-stsexternalid/","poster":"BigDaddyNeo"},{"content":"It's a typo. Should be ExternalID https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_iam-condition-keys.html","upvote_count":"3","comment_id":"113892","poster":"droogie","timestamp":"1634981340.0"}],"content":"Sorry guys, it is answer C : sts:Externald does not exist, it is not a correct API call.\nHowever, MFA condition is correct : https://aws.amazon.com/fr/blogs/security/how-do-i-protect-cross-account-access-using-mfa-2/","comment_id":"104090","poster":"Awraith","timestamp":"1634012280.0"},{"timestamp":"1633857660.0","upvote_count":"1","comment_id":"90396","content":"B, for sure","poster":"gfhbox0083"},{"comment_id":"69888","timestamp":"1633680420.0","content":"same question in previous list, answer was correct and was B here...","upvote_count":"1","poster":"GSH"},{"content":"B for me","poster":"RaySmith","upvote_count":"2","comment_id":"65892","timestamp":"1633552320.0"},{"poster":"luis12345","comment_id":"64854","upvote_count":"4","content":"Right answer is B","timestamp":"1632556500.0","comments":[{"timestamp":"1632878820.0","poster":"awssecuritynewbie","comment_id":"65311","content":"B is right","upvote_count":"1"}]}],"answer_ET":"B","unix_timestamp":1584388020,"question_text":"The Accounting department at Example Corp. has made a decision to hire a third-party firm, AnyCompany, to monitor Example Corp.'s AWS account to help optimize costs.\nThe Security Engineer for Example Corp. has been tasked with providing AnyCompany with access to the required Example Corp. AWS resources. The Engineer has created an IAM role and granted permission to AnyCompany's AWS account to assume this role.\nWhen customers contact AnyCompany, they provide their role ARN for validation. The Engineer is concerned that one of AnyCompany's other customers might deduce Example Corp.'s role ARN and potentially compromise the company's account.\nWhat steps should the Engineer perform to prevent this outcome?","url":"https://www.examtopics.com/discussions/amazon/view/16777-exam-aws-certified-security-specialty-topic-1-question-111/","timestamp":"2020-03-16 20:47:00","question_id":15,"answer_description":"","question_images":[],"answers_community":["B (100%)"],"exam_id":29,"choices":{"B":"Request an external ID from AnyCompany and add a condition with sts:Externald to the role's trust policy.","C":"Require two-factor authentication by adding a condition to the role's trust policy with aws:MultiFactorAuthPresent.","D":"Request an IP range from AnyCompany and add a condition with aws:SourceIp to the role's trust policy.","A":"Create an IAM user and generate a set of long-term credentials. Provide the credentials to AnyCompany. Monitor access in IAM access advisor and plan to rotate credentials on a recurring basis."},"isMC":true}],"exam":{"lastUpdated":"11 Apr 2025","provider":"Amazon","isBeta":false,"id":29,"name":"AWS Certified Security - Specialty","isMCOnly":false,"numberOfQuestions":509,"isImplemented":true},"currentPage":3},"__N_SSP":true}