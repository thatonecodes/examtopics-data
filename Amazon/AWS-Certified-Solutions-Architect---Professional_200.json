{"pageProps":{"questions":[{"id":"6eoKV8Yn0M6LJjCopeSv","question_text":"A company is processing financial records in the AWS Cloud. Throughout the day, records are uploaded to an Amazon S3 bucket for processing. Every night at midnight, an application processes the records. The application runs on a set of Amazon EC2 instances and is invoked by a cron job on each instance. The application processes all the records in a total of approximately 60 minutes and stores the result in a second S3 bucket.\n\nA solutions architect needs to modernize the application by implementing a solution that processes the records with the least possible operational overhead.\n\nWhich solution will meet these requirements?","timestamp":"2022-12-04 16:23:00","isMC":true,"answer":"B","answer_images":[],"question_images":[],"answers_community":["B (58%)","A (42%)"],"question_id":996,"discussion":[{"poster":"backbencher2022","content":"Selected Answer: B\nB is the correct option","upvote_count":"1","comment_id":"1267888","timestamp":"1723940160.0"},{"timestamp":"1705184940.0","comment_id":"1122084","upvote_count":"3","content":"Selected Answer: A\nA - is the only valid option. This is a very common pattern and there aren't any requirements listed that would rule this pattern out. \nhttps://serverlessland.com/content/service/step-functions/paved-path/distributed-data-processing-with-step-functions/introduction\nB - EKS is not a valid target for EventBridge and Fargate is a compute engine for ECS and EKS. There is no concept of a Fargate Task.\nC - A single lambda has a 15 minute execution time limit\nD - SNS doesn't provide a scheduler, you need to use EventBridge.","poster":"3a632a3","comments":[{"upvote_count":"1","comment_id":"1128884","poster":"marszalekm","timestamp":"1705942560.0","content":"I agree with everything + question says \"least possible operational overhead\", AWS Lambda seems much easier to setup"}]},{"comment_id":"934614","poster":"SkyZeroZx","content":"Selected Answer: B\nA ) Lambdas maxium time of usage is 15 minutes currently \nB ) Container Logic , use EKS with Fargate is serverless and scalable service , CloudWatch Event support Cron Definition sounds good\nC ) Same option A\nD) SNS for cron jobs ? not is possible","timestamp":"1687795200.0","upvote_count":"1"},{"comment_id":"927978","poster":"Sudeepshiv","content":"Selected Answer: B\nAns B, eks fargate with CW events","timestamp":"1687211700.0","upvote_count":"1"},{"poster":"dev112233xx","comment_id":"885276","upvote_count":"2","timestamp":"1682862180.0","comments":[{"content":"Are you dev?","upvote_count":"1","timestamp":"1692485520.0","comment_id":"985459","poster":"vn_thanhtung"},{"timestamp":"1692485460.0","poster":"vn_thanhtung","comment_id":"985458","content":"A solutions architect needs to modernize the application by implementing a solution that processes the records with the least possible operational overhead => you think lambda can run? Again provide wrong answer","upvote_count":"1"}],"content":"Selected Answer: A\nA has less operational overhead than running Kubernetes cluster for batch job\nAlso 60minutes is the process time for ALL the objects, A says Lambda per object, so it must be less than 15m\nhttps://noise.getoto.net/tag/aws-lambda/page/10/"},{"comment_id":"754916","timestamp":"1671890280.0","poster":"Kende","upvote_count":"2","content":"Selected Answer: B\n\"B\" is the one."},{"comment_id":"746734","upvote_count":"2","content":"Selected Answer: B\nFargate + CloudWatch Events","timestamp":"1671159780.0","poster":"due"},{"poster":"ggrodskiy","comment_id":"735179","content":"Correct D","comments":[{"content":"How can you schedule with SNS?","comment_id":"745883","timestamp":"1671096300.0","poster":"Kende","upvote_count":"2","comments":[{"timestamp":"1671466920.0","poster":"ggrodskiy","content":"yep, B. Thanks","comment_id":"750022","upvote_count":"2"}]}],"upvote_count":"2","timestamp":"1670167380.0"}],"answer_description":"","choices":{"D":"Containerize the processing logic. Create an Amazon Elastic Container Service (Amazon ECS) cluster that runs in AWS Fargate mode. Configure Amazon Simple Notification Service (Amazon SNS) to schedule invocation of the Fargate tasks at midnight.","C":"Use a single AWS Lambda function to process all the records. Use S3 Event Notifications to invoke the Lambda function at midnight.","B":"Containerize the processing logic. Create an Amazon Elastic Kubernetes Service (Amazon EKS) cluster that runs in AWS Fargate mode. Configure an Amazon EventBridge (Amazon CloudWatch Events) rule to schedule invocation of the Fargate tasks at midnight.","A":"Use an AWS Lambda function to process a single record. Create an AWS Step Functions state machine to invoke the Lambda function for each record. Create an Amazon EventBridge (Amazon CloudWatch Events) rule to schedule the state machine to run at midnight."},"exam_id":32,"answer_ET":"B","unix_timestamp":1670167380,"url":"https://www.examtopics.com/discussions/amazon/view/89979-exam-aws-certified-solutions-architect-professional-topic-1/","topic":"1"},{"id":"RJKrgWcYVZzXYAjX4se3","question_text":"A company has PHP applications that run in containers and also has a MySQL database. The company wants to move the applications and the database from on premises to AWS. The company has millions of users and will need to manage shared application data between the containers.\n\nThe company needs a solution that will minimize operational overhead and cost. The solution also must be scalable and highly available.\n\nWhich solution will meet these requirements?","answer_ET":"B","exam_id":32,"discussion":[{"upvote_count":"1","content":"Selected Answer: B\nFargate + EFS","timestamp":"1687794600.0","comment_id":"934608","poster":"SkyZeroZx"},{"content":"Selected Answer: B\nI agree it's B..\nC was perfect because it leverages K8s (which is better for such scenario) until i read \"use s3 as the volume\"","poster":"dev112233xx","upvote_count":"1","comments":[],"timestamp":"1682862600.0","comment_id":"885283"},{"content":"Selected Answer: B\nB is the one.","poster":"Kende","comment_id":"760261","upvote_count":"1","timestamp":"1672256520.0"},{"timestamp":"1671160260.0","upvote_count":"3","content":"Selected Answer: B\nFargate + EFS","poster":"due","comment_id":"746742"},{"content":"https://aws.amazon.com/blogs/containers/developers-guide-to-using-amazon-efs-with-amazon-ecs-and-aws-fargate-part-1/","timestamp":"1670404680.0","upvote_count":"2","poster":"ggrodskiy","comment_id":"737658"},{"content":"Correct B","upvote_count":"4","timestamp":"1670168160.0","comment_id":"735201","poster":"ggrodskiy"}],"answer":"B","timestamp":"2022-12-04 16:36:00","question_images":[],"answers_community":["B (100%)"],"url":"https://www.examtopics.com/discussions/amazon/view/89980-exam-aws-certified-solutions-architect-professional-topic-1/","unix_timestamp":1670168160,"isMC":true,"choices":{"D":"Deploy containers on Amazon Elastic Container Service (Amazon ECS). Set up the containers to run the tasks on AWS Fargate. Choose Amazon Elastic Block Store (Amazon EBS) as the volume type. Deploy Amazon Aurora Serverless as the database solution.","A":"Deploy containers on Amazon Elastic Container Service (Amazon ECS). Set up the containers to run the tasks on Amazon EC2 instances. Choose Amazon Elastic File System (Amazon EFS) as the volume type. Deploy an Amazon RDS Multi-AZ DB instance with read replicas as the database solution.","C":"Deploy containers on Amazon Elastic Kubernetes Service (Amazon EKS). Set up the containers to run the tasks on AWS Fargate. Choose Amazon S3 as the volume type. Deploy Amazon Aurora Serverless as the database solution.","B":"Deploy containers on Amazon Elastic Container Service (Amazon ECS). Set up the containers to run the tasks on AWS Fargate. Choose Amazon Elastic File System (Amazon EFS) as the volume type. Deploy Amazon Aurora Serverless as the database solution."},"topic":"1","question_id":997,"answer_description":"","answer_images":[]},{"id":"DrsiKlJS6yfGI1VwMrYw","answer_images":[],"answer_ET":"A","question_images":[],"exam_id":32,"topic":"1","url":"https://www.examtopics.com/discussions/amazon/view/7234-exam-aws-certified-solutions-architect-professional-topic-1/","unix_timestamp":1572081720,"answer_description":"","choices":{"E":"Use Elastic Beanstalk \"Restart App server(s)\" option to update log delivery to the Elastic Map Reduce job.","D":"Use Elastic Beanstalk \"Rebuild Environment\" option to update log delivery to the Elastic Map Reduce job.","A":"Enable Cloud Front to deliver access logs to S3 and use them as input of the Elastic Map Reduce job.","B":"Turn on Cloud Trail and use trail log tiles on S3 as input of the Elastic Map Reduce job","C":"Change your log collection process to use Cloud Watch ELB metrics as input of the Elastic Map Reduce job"},"discussion":[{"poster":"Warrenn","upvote_count":"14","comment_id":"17523","timestamp":"1632350220.0","content":"The answer should be A"},{"upvote_count":"8","poster":"skywalker","comment_id":"18912","timestamp":"1633852380.0","content":"I go for \"A\" as EMR do read data from S3 that were written by CloudFront"},{"upvote_count":"1","content":"A. Enable Cloud Front to deliver access logs to S3 and use them as input of the Elastic Map Reduce job.","comment_id":"1267001","poster":"amministrazione","timestamp":"1723806600.0"},{"upvote_count":"1","content":"Selected Answer: A\nCloudFront hijacked the traffic.","comment_id":"756082","poster":"TigerInTheCloud","timestamp":"1672009140.0"},{"timestamp":"1656410460.0","poster":"TechX","content":"Selected Answer: A\nAnswer: A\nExplanation: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html","upvote_count":"2","comment_id":"623886"},{"upvote_count":"1","poster":"kangtamo","comment_id":"622787","timestamp":"1656272940.0","content":"Selected Answer: A\nI agree with A: CloudFront."},{"poster":"cannottellname","comment_id":"532657","upvote_count":"2","timestamp":"1643178240.0","content":"After you have created and deployed your Elastic Beanstalk application you can sign up for CloudFront and start using CloudFront to distribute your content.\n\nCF needs to be operated separately and hence, A is correct."},{"upvote_count":"1","timestamp":"1636193340.0","poster":"01037","content":"I think it's A.\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html#access-logs-choosing-s3-bucket","comment_id":"370818"},{"poster":"pt8","timestamp":"1635680040.0","content":"Should modify through Beanstalk, D. Otherwise Beanstalk is useless. https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-management-rebuild.html","comments":[{"poster":"neta1o","timestamp":"1635956280.0","content":"I'm fairly certain you cannot add CloudFront through Beanstalk. You'd have to build the CF distro separately and point it your Beanstalk stack. Therefore the CloudFront logging would be setup separately as well. I'd go with A.","comment_id":"367239","upvote_count":"1"}],"comment_id":"355086","upvote_count":"1"},{"poster":"cldy","timestamp":"1635477600.0","comment_id":"329263","upvote_count":"1","content":"A.\nso that EMR job can analyze CF logs."},{"content":"A is correct","poster":"fullaws","timestamp":"1635007080.0","upvote_count":"2","comment_id":"144992"},{"upvote_count":"3","poster":"Paramg1234","timestamp":"1634843580.0","comment_id":"128641","content":"D is more appropriate as Beanstalk managed systems has to be managed by Beanstalk ... although A also do the work."},{"timestamp":"1634736960.0","comment_id":"104957","poster":"JAWS1600","content":"A is the right answer","upvote_count":"2"},{"comment_id":"101998","timestamp":"1634703360.0","content":"Answer is D, Reason is ElasticBean stalk environment is already running and pushing logs to S3, only addition is cloud front. may be a re-build environment is sufficient to fix the issue.","comments":[{"content":"The requests are not even making it to EB, they're being answered by cloudfront. Nothing you do in EB will make any difference","upvote_count":"2","comment_id":"196672","timestamp":"1635023820.0","poster":"cpal012"}],"upvote_count":"4","poster":"sam422"},{"comment_id":"88004","content":"A is correct. Need the those portion of traffic from CloudFront to logs as well.","timestamp":"1634467260.0","poster":"qianhaopower","upvote_count":"3"},{"content":"A\nhttp://jayendrapatil.com/tag/cache/","upvote_count":"4","comment_id":"40729","timestamp":"1634262360.0","poster":"CloudFloater"},{"comment_id":"38121","content":"Answer is A","upvote_count":"3","poster":"amog","timestamp":"1634171520.0"},{"content":"yes, A sounds right","poster":"AWSKeener","upvote_count":"3","comment_id":"36463","timestamp":"1634005620.0"},{"upvote_count":"3","poster":"examacc","comment_id":"23266","content":"A is correct","timestamp":"1633971000.0"}],"question_text":"You deployed your company website using Elastic Beanstalk and you enabled log file rotation to S3. An Elastic Map Reduce job is periodically analyzing the logs on S3 to build a usage dashboard that you share with your CIO.\nYou recently improved overall performance of the website using Cloud Front for dynamic content delivery and your website as the origin.\nAfter this architectural change, the usage dashboard shows that the traffic on your website dropped by an order of magnitude.\nHow do you fix your usage dashboard?","question_id":998,"answers_community":["A (100%)"],"timestamp":"2019-10-26 11:22:00","answer":"A","isMC":true},{"id":"MB8RoAT8wszMUd8ijQZ4","isMC":true,"answer":"B","unix_timestamp":1671160800,"answer_description":"","question_id":999,"answers_community":["B (56%)","D (31%)","13%"],"discussion":[{"upvote_count":"1","comment_id":"1559000","timestamp":"1744129980.0","poster":"GOTJ","content":"Selected Answer: A\n* Upload the container images to AWS Lambda as functions. Correct! Lambda is inherently serverless (no servers, no cluster orchestration, and virtually zero operational overhead). On the other hand, you can deploy container images to Lambda (up to 10 GB in size), which supports the company’s container-based microservices goal. Finally, with Lambda, you only pay per invocation and execution time (no idle compute costs).\n* Configure a concurrency limit for the associated Lambda functions to handle the expected peak load. Correct! Concurrency limits ensure you’re not overrun by traffic but still scale predictably to meet demand. Lambda can scale automatically with the load up to thousands of concurrent invocations.\n* Configure two separate Lambda integrations within Amazon API Gateway: one for production and one for testing. Correct! API Gateway easily supports separate integrations for prod and test environments. You can manage environments via different stages, APIs, or even accounts."},{"comment_id":"1102651","upvote_count":"1","timestamp":"1703171640.0","content":"Selected Answer: A\nBoth EKS and ECS support Fargate, how can you choose between two given no additional information? Elastic Beanstalk for containers is not good use-case.","poster":"kaws8902"},{"upvote_count":"1","content":"Correct B","timestamp":"1689088800.0","poster":"ggrodskiy","comment_id":"949077"},{"poster":"Jesuisleon","content":"Selected Answer: B\nD is WRONG, D doesn't mention how the company fulfill the need that \"The company needs to refactor the application as microservices that run on containers\"","timestamp":"1685537700.0","upvote_count":"3","comment_id":"911290"},{"comments":[{"timestamp":"1692486000.0","poster":"vn_thanhtung","comment_id":"985460","content":"Again ? Elastic Beanstalk for microservices?","upvote_count":"1"}],"poster":"dev112233xx","timestamp":"1682863260.0","upvote_count":"1","comment_id":"885297","content":"Selected Answer: D\nIt's D\nYou can upload docker image to Beanstalk and configure two environments:\nhttps://aws.amazon.com/blogs/aws/aws-elastic-beanstalk-for-docker/"},{"timestamp":"1674641820.0","comment_id":"787488","poster":"pitakk","upvote_count":"4","content":"Selected Answer: B\nElastic Beanstalk doesn't support Fargate. The solution needs to be serverless. It's B"},{"timestamp":"1673275080.0","comment_id":"770527","content":"Selected Answer: B\nB is the way!","poster":"syaldram","upvote_count":"1"},{"content":"Selected Answer: B\nECS\nhttps://www.examtopics.com/discussions/amazon/view/90941-exam-aws-certified-solutions-architect-professional-sap-c02/","timestamp":"1673020200.0","upvote_count":"1","comment_id":"767854","poster":"adit"},{"comment_id":"752916","upvote_count":"2","content":"Should be ECS","timestamp":"1671673320.0","poster":"Xxxueya"},{"comment_id":"746744","timestamp":"1671160800.0","upvote_count":"4","poster":"due","comments":[{"comments":[{"timestamp":"1676281560.0","upvote_count":"3","poster":"Snip","comment_id":"807251","content":"Wrong: https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_docker.html","comments":[{"comment_id":"843097","timestamp":"1679167320.0","poster":"hobokabobo","upvote_count":"1","content":"Beanstalk is no Container Registry. You cannot upload images to Beanstalk. You can run a container from an image in a Registry."}]}],"poster":"sndychvn","upvote_count":"2","content":"AWS Elastic Beanstalk is not for containers","timestamp":"1674384300.0","comment_id":"784193"}],"content":"Selected Answer: D\nminimizes operational + microservices that run on containers = AWS Elastic Beanstalk"}],"question_images":[],"exam_id":32,"url":"https://www.examtopics.com/discussions/amazon/view/91761-exam-aws-certified-solutions-architect-professional-topic-1/","answer_images":[],"choices":{"C":"Upload the container images to Amazon Elastic Container Registry (Amazon ECR). Configure two auto scaled Amazon Elastic Kubernetes Service (Amazon EKS) clusters with the Fargate launch type to handle the expected load. Deploy tasks from the ECR images. Configure two separate Application Load Balancers to direct traffic to the EKS clusters.","B":"Upload the container images to Amazon Elastic Container Registry (Amazon ECR). Configure two auto scaled Amazon Elastic Container Service (Amazon ECS) clusters with the Fargate launch type to handle the expected load. Deploy tasks from the ECR images. Configure two separate Application Load Balancers to direct traffic to the ECS clusters.","D":"Upload the container images to AWS Elastic Beanstalk. In Elastic Beanstalk, create separate environments and deployments for production and testing. Configure two separate Application Load Balancers to direct traffic to the Elastic Beanstalk deployments.","A":"Upload the container images to AWS Lambda as functions. Configure a concurrency limit for the associated Lambda functions to handle the expected peak load. Configure two separate Lambda integrations within Amazon API Gateway: one for production and one for testing."},"timestamp":"2022-12-16 04:20:00","topic":"1","question_text":"A company is running a traditional web application on Amazon EC2 instances. The company needs to refactor the application as microservices that run on containers. Separate versions of the application exist in two distinct environments: production and testing. Load for the application is variable, but the minimum load and the maximum load are known. A solutions architect needs to design the updated application with a serverless architecture that minimizes operational complexity.\n\nWhich solution will meet these requirements MOST cost-effectively?","answer_ET":"B"},{"id":"byRK1tZcoUbYJ0G2kmRu","isMC":true,"answer":"B","unix_timestamp":1670400480,"answer_description":"","question_id":1000,"answers_community":["B (47%)","A (42%)","11%"],"discussion":[{"poster":"backbencher2022","timestamp":"1723934400.0","content":"Selected Answer: D\nHere's why option D is the most appropriate:\nServerless Architecture: By using AWS Lambda, the company can eliminate the need to manage EC2 instances and Auto Scaling groups, significantly reducing operational overhead.\nCost Efficiency: Lambda functions only run when needed, so the company will only pay for actual usage. This is particularly beneficial given that \"for much of the day, the application sends no requests.\"\nScalability: Lambda automatically scales to handle tens of thousands of concurrent requests, addressing the high volume of requests the company experiences at certain times.\nReliability: Using S3 for image uploads and SNS for notifications provides a robust, highly available system. The retry policy in SNS ensures that processing requests are not lost, improving reliability.\nAsynchronous Processing\nSimplified Architecture","comment_id":"1267856","upvote_count":"2"},{"timestamp":"1709546460.0","content":"Those voted to B didn't read the question properly \"LEAST operational overhead\"\nAnswer is A","poster":"Ebi","comment_id":"1165493","upvote_count":"2"},{"comment_id":"1020106","comments":[{"comment_id":"1041005","content":"Lambda has a max runtime limit of 15 mins","poster":"Momin","upvote_count":"1","timestamp":"1697046900.0"}],"content":"Option D\nSince it says least operational overhead and we can achieve it with the use of lambda","poster":"Pr44","timestamp":"1695919440.0","upvote_count":"1"},{"timestamp":"1685560500.0","content":"Selected Answer: B\nI prefer B as in question \"The company is receiving tens of thousands of image-processing requests at the same time each day and is experiencing errors\" tens of thousands requests arrive at same time, what extents( number of ec2) you expect ASG to scale out to address this situation ? How can you guarantee Spot Instances can finish its job without being terminated ?\nThe question is asking \"LEAST operational overhead\" not least development overhead, I think B is better than A.","poster":"Jesuisleon","comments":[{"timestamp":"1685560560.0","content":"\"The processing of the requests is not time critical. For much of the day, the application sends no requests\" this implies we don't need to handle all request immediately, we can cache the requests first and do the processing later.","comment_id":"911523","poster":"Jesuisleon","upvote_count":"1"},{"timestamp":"1692486600.0","upvote_count":"1","comment_id":"985464","content":"Agree B, A has a smell, scale based on memory, question not mention","poster":"vn_thanhtung"}],"comment_id":"911522","upvote_count":"4"},{"upvote_count":"1","comment_id":"885320","content":"Selected Answer: A\nA makes more sense \nhttps://aws.amazon.com/blogs/mt/create-amazon-ec2-auto-scaling-policy-memory-utilization-metric-windows/","timestamp":"1682864520.0","poster":"dev112233xx"},{"timestamp":"1678963740.0","poster":"hobokabobo","comment_id":"840828","content":"Selected Answer: B\nB. We do not need any change to the servers let alone additional spot instances, we only need a queue that keeps track. We can leave everything as it is only defer the incoming processing jobs.","upvote_count":"2"},{"comment_id":"829740","poster":"andras","timestamp":"1678003860.0","content":"Selected Answer: B\nIf there is no spot instance available, there will be no scale out... the requests could fail due to luk of EC2 capaity... Only B could \"store\" the requests.","upvote_count":"1"},{"upvote_count":"2","poster":"Vash2303","content":"Selected Answer: B\nLeast operational overhead","timestamp":"1674939300.0","comment_id":"791083"},{"poster":"doudou","timestamp":"1672795560.0","comment_id":"765150","content":"Selected Answer: A\nA is the correct answer","upvote_count":"2"},{"timestamp":"1672256640.0","content":"Selected Answer: A\nA is the one.","poster":"Kende","upvote_count":"2","comment_id":"760265"},{"content":"Selected Answer: A\nLEAST operational overhead + ASG EC2 + thousands requests at the same time + not time critical = ASG + spot Instances","upvote_count":"3","comment_id":"746759","poster":"due","timestamp":"1671161700.0"},{"content":"Correct A","comment_id":"737561","poster":"ggrodskiy","upvote_count":"2","timestamp":"1670400480.0"}],"question_images":[],"exam_id":32,"url":"https://www.examtopics.com/discussions/amazon/view/90346-exam-aws-certified-solutions-architect-professional-topic-1/","answer_images":[],"topic":"1","timestamp":"2022-12-07 09:08:00","choices":{"D":"Create an AWS Lambda function that includes the image-processing logic. Change the application to upload the images to Amazon S3. Configure Amazon Simple Notification Service (Amazon SNS) notifications for object uploads with a retry policy to invoke the Lambda function. Remove the NLB.","B":"Change the application to upload the images to Amazon S3. Configure Amazon Simple Queue Service (Amazon SQS) notifications for object uploads. Rewrite the image-processing code that runs on the EC2 instances to receive SQS messages with the object reference so that the messages are processed asynchronously. Remove the NLB.","A":"Add a target tracking scaling policy based on a memory utilization metric that has a target value of 90%. Configure the Auto Scaling group to use additional Spot Instances when scaling events occur.","C":"Create an AWS Lambda function that includes the image-processing logic. Deploy the Lambda function in the VPC that hosts the EC2 instances. Update the target group on the NLB to invoke the Lambda function."},"question_text":"A company hosts an image-processing service in the AWS Cloud. The company uses a custom on-premises application to call the service from its on-premises systems over an AWS Direct Connect connection. The application sends image-processing requests to software that is hosted on Amazon EC2 instances. The image data is embedded within the requests. The EC2 instances are in an Auto Scaling group and run behind a Network Load Balancer (NLB). The Auto Scaling group has a minimum capacity of two instances.\n\nThe company is receiving tens of thousands of image-processing requests at the same time each day and is experiencing errors. The processing of the requests is not time critical. For much of the day, the application sends no requests.\n\nThe company wants to improve the application's reliability and minimize the number of failed image-processing requests. The company also wants to reduce cost.\n\nWhich solution will meet these requirements with the LEAST operational overhead?","answer_ET":"B"}],"exam":{"name":"AWS Certified Solutions Architect - Professional","isMCOnly":false,"isImplemented":true,"id":32,"isBeta":false,"provider":"Amazon","numberOfQuestions":1019,"lastUpdated":"11 Apr 2025"},"currentPage":200},"__N_SSP":true}