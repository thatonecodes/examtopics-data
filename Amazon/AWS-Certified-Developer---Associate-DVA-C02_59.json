{"pageProps":{"questions":[{"id":"Pv8GbFcnEEm2o4yJ3BQT","choices":{"D":"Publish the sale event from the application to an AWS Step Functions state machine. Move the logic from the three Lambda functions into the Step Functions state machine.","A":"Publish the sale event from the application to an Amazon Simple Queue Service (Amazon SQS) queue. Configure the three Lambda functions to poll the queue.","C":"Publish the sale event from the application to an Application Load Balancer (ALB). Add the three Lambda functions as ALB targets.","B":"Publish the sale event from the application to an Amazon Simple Notification Service (Amazon SNS) topic. Subscribe the three Lambda functions to be triggered by the SNS topic."},"answer_description":"","discussion":[{"timestamp":"1720348380.0","comment_id":"1243785","upvote_count":"5","content":"B\n\nGiven the requirements to concurrently call three independent third-party systems when there is a sale event, and ensuring that each Lambda function runs regardless of the success or failure of the others, the best solution is to use Amazon Simple Notification Service (SNS).","poster":"tomchandler077"},{"comment_id":"1256145","content":"Selected Answer: B\n1. create sns topic\naws sns create-topic --name SaleEvents\n\n2. create three lambda function to subscribe sns topic\naws sns subscribe --topic-arn arn:aws:sns:region:account-id:SaleEvents --protocol lambda --notification-endpoint arn:aws:lambda:region:account-id:function:Function1\naws sns subscribe --topic-arn arn:aws:sns:region:account-id:SaleEvents --protocol lambda --notification-endpoint arn:aws:lambda:region:account-id:function:Function2\naws sns subscribe --topic-arn arn:aws:sns:region:account-id:SaleEvents --protocol lambda --notification-endpoint arn:aws:lambda:region:account-id:function:Function3","poster":"albert_kuo","upvote_count":"4","timestamp":"1722062880.0"},{"upvote_count":"1","content":"Selected Answer: B\nDefinitely B","comment_id":"1246409","poster":"siheom","timestamp":"1720747140.0"},{"content":"D is the correct answer","poster":"[Removed]","upvote_count":"1","timestamp":"1720190760.0","comment_id":"1242835"}],"answer_images":[],"unix_timestamp":1720190760,"exam_id":24,"question_id":291,"question_text":"A developer is building an ecommerce application. When there is a sale event, the application needs to concurrently call three third-party systems to record the sale. The developer wrote three AWS Lambda functions. There is one Lambda function for each third-party system, which contains complex integration logic.\n\nThese Lambda functions are all independent. The developer needs to design the application so each Lambda function will run regardless of others' success or failure.\n\nWhich solution will meet these requirements?","topic":"1","url":"https://www.examtopics.com/discussions/amazon/view/143366-exam-aws-certified-developer-associate-dva-c02-topic-1/","answer":"B","isMC":true,"timestamp":"2024-07-05 16:46:00","question_images":[],"answer_ET":"B","answers_community":["B (100%)"]},{"id":"2TwBpW70eGYNVjOtSgYu","answer_images":[],"unix_timestamp":1719764940,"question_text":"A developer is writing an application, which stores data in an Amazon DynamoDB table. The developer wants to query the DynamoDB table by using the partition key and a different sort key value. The developer needs the latest data with all recent write operations.\n\nHow should the developer write the DynamoDB query?","answer":"B","discussion":[{"poster":"Anandesh","upvote_count":"7","comment_id":"1245346","timestamp":"1720598400.0","content":"Selected Answer: B\nGSI - diff part key and sort key | LSI - same part key and diff sort key\nStrongly consistent - most recent data"},{"upvote_count":"3","comment_id":"1243782","poster":"tomchandler077","timestamp":"1720348140.0","content":"The correct answer is: B. \n\nLocal Secondary Index (LSI):\nAn LSI allows you to create an index with a different sort key for the same partition key as the base table. This lets you query the table using the same partition key but with a different sort key.\nLSIs are created at the same time as the table and cannot be added to an existing table.\n\nStrongly consistent reads ensure that you always receive the most up-to-date data after all previous write operations are acknowledged.\nThis is important when the developer needs to ensure they are getting the latest data, as stated in the question."},{"upvote_count":"2","comment_id":"1242838","content":"Selected Answer: B\nConsidering developer wants to query by using the same partition key and a different sort key value, so B it's the correct answer","poster":"[Removed]","timestamp":"1720191000.0"},{"content":"Selected Answer: D\nANSWER IS D","comment_id":"1240508","poster":"Alagong","timestamp":"1719890100.0","comments":[{"comment_id":"1293008","timestamp":"1728011280.0","content":"you can only create LSI during table creation","poster":"albert_kuo","upvote_count":"1"},{"poster":"Alagong","comment_id":"1240509","timestamp":"1719890160.0","upvote_count":"2","content":"ANSWER IS B... NOT D"}],"upvote_count":"1"},{"timestamp":"1719764940.0","poster":"cachac","upvote_count":"1","comment_id":"1239744","content":"Selected Answer: D\nStrongly Consistent Reads"}],"choices":{"D":"Add a global secondary index (GSI) during table creation. Query the GSI by using strongly consistent reads.","C":"Add a global secondary index (GSI) during table creation. Query the GSI by using eventually consistent reads.","A":"Add a local secondary index (LSI) during table creation. Query the LSI by using eventually consistent reads.","B":"Add a local secondary index (LSI) during table creation. Query the LSI by using strongly consistent reads."},"exam_id":24,"question_id":292,"answers_community":["B (82%)","D (18%)"],"topic":"1","isMC":true,"answer_ET":"B","timestamp":"2024-06-30 18:29:00","question_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/143107-exam-aws-certified-developer-associate-dva-c02-topic-1/","answer_description":""},{"id":"cRYuWq2XHYdSRjnR5lkb","timestamp":"2024-07-05 16:51:00","question_images":[],"question_id":293,"topic":"1","choices":{"A":"Add a new local secondary index (LSI) to the DynamoDB table that specifies order_date as the partition key and order_id as the sort key. Write the new Lambda function to query the new LSI index.","B":"Write the new Lambda function to scan the DynamoDB table. In the Lambda function, write a method to retrieve and combine results by order_date and order_id.","D":"Enable DynamoDB Streams on the table. Choose the new and old images information to write to the DynamoDB stream. Write the new Lambda function to query the DynamoDB stream","C":"Add a new global secondary index (GSI) to the DynamoDB table that specifies order_date as the partition key and order_id as the sort key. Write the new Lambda function to query the new GSI index."},"answer_images":[],"answer_description":"","answer":"C","answers_community":["C (100%)"],"answer_ET":"C","question_text":"A developer manages an application that writes customer orders to an Amazon DynamoDB table. The orders use customer_id as the partition key, order_id as the sort key, and order_date as an attribute. A new access pattern requires accessing data by order_date and order_id. The developer needs to implement a new AWS Lambda function to support the new access pattern.\n\nHow should the developer support the new access pattern in the MOST operationally efficient way?","unix_timestamp":1720191060,"isMC":true,"url":"https://www.examtopics.com/discussions/amazon/view/143367-exam-aws-certified-developer-associate-dva-c02-topic-1/","discussion":[{"content":"C\nGlobal Secondary Index (GSI) allows you to specify a completely different partition key and potentially a different sort key from those on the main table. This flexibility is crucial when you need to support additional access patterns that aren't directly supported by the existing table's key structure. In this scenario, specifying order_date as the new partition key and order_id as the sort key in a GSI will enable efficient querying based on these attributes.\n\nLambda Function Querying GSI: Once the GSI is set up, the Lambda function can perform efficient query operations directly on this index to fetch records based on order_date and order_id, which is much more efficient than scanning the entire table.","comment_id":"1243263","poster":"tomchandler077","upvote_count":"5","timestamp":"1720253460.0"},{"poster":"dombox","timestamp":"1721281020.0","comment_id":"1250149","upvote_count":"3","content":"Selected Answer: C\nC is correct"},{"timestamp":"1720754340.0","comment_id":"1246445","poster":"rdiaz","upvote_count":"2","content":"Selected Answer: C\nC is the correct answer"},{"content":"C is the correct answer","upvote_count":"1","comment_id":"1242839","timestamp":"1720191060.0","poster":"[Removed]"}],"exam_id":24},{"id":"BPOJszVzFaM3yw9bQBGs","answer_description":"","exam_id":24,"isMC":true,"answer_ET":"C","topic":"1","url":"https://www.examtopics.com/discussions/amazon/view/143747-exam-aws-certified-developer-associate-dva-c02-topic-1/","discussion":[{"poster":"examuserss","upvote_count":"2","comment_id":"1332118","content":"Selected Answer: C\nThe best solution is C. Create a global secondary index (GSI) with subject_name as the partition key and top_score as the sort key.\n\nHere's why: The goal is to efficiently retrieve the student ID of the top scorer for each subject. A GSI allows querying on a key combination different from the table's primary key. By using subject_name as the partition key, you can easily query all scores for a given subject. Then, sorting by top_score in descending order will allow you to quickly identify the top scorer using a single query. An LSI (options A and B) is tied to the table's primary key, making efficient retrieval of this data impossible. Option D would allow retrieval of student IDs given a subject, but not directly sorted by top score to find the top scorer for each subject efficiently. A GSI offers the flexibility to achieve the desired retrieval speeds without requiring multiple queries.","timestamp":"1735247820.0"},{"comment_id":"1246446","timestamp":"1720754400.0","upvote_count":"3","poster":"rdiaz","content":"Selected Answer: C\nGSI - diff part key and sort key | LSI - same part key and diff sort key"}],"timestamp":"2024-07-12 05:20:00","question_id":294,"question_text":"A developer is creating a web application for a school that stores data in Amazon DynamoDB. The ExamScores table has the following attributes: student_id, subject_name, and top_score.\n\nEach item in the ExamScores table is identified with student_id as the partition key and subject_name as the sort key. The web application needs to display the student _id for the top scores for each school subject. The developer needs to increase the speed of the queries to retrieve the student_id for the top scorer for each school subject.\n\nWhich solution will meet these requirements?","question_images":[],"choices":{"B":"Create a local secondary index (LSI) with top_score as the partition key and student_id as the sort key.","D":"Create a global secondary index (GSI) with subject_name as the partition key and student_id as the sort key.","C":"Create a global secondary index (GSI) with subject_name as the partition key and top_score as the sort key.","A":"Create a local secondary index (LSI) with subject_name as the partition key and top_score as the sort key."},"answer":"C","answer_images":[],"unix_timestamp":1720754400,"answers_community":["C (100%)"]},{"id":"pUiryGgJykAKXR6k5eBH","discussion":[{"content":"Selected Answer: C\nBy default, all Amazon S3 objects are private, only the object owner has permission to access them. However, the object owner may share objects with others by creating a presigned URL. A presigned URL uses security credentials to grant time-limited permission to download objects. The URL can be entered in a browser or used by a program to download the object. The credentials used by the presigned URL are those of the AWS user who generated the URL.","upvote_count":"2","comment_id":"1293241","poster":"preachr","timestamp":"1728068460.0"},{"upvote_count":"4","comment_id":"1242841","poster":"[Removed]","timestamp":"1720191180.0","content":"Selected Answer: C\nC is the correct answer"}],"timestamp":"2024-07-05 16:53:00","answer":"C","choices":{"C":"Store the video in Amazon S3. Generate a pre-signed URL for the video object and push the URL to the customer.","A":"Store the video in the /tmp folder within the Lambda execution environment. Push a Lambda function URL to the customer.","B":"Store the video in an Amazon Elastic File System (Amazon EFS) file system attached to the function. Generate a pre-signed URL for the video object and push the URL to the customer.","D":"Store the video in an Amazon CloudFront distribution. Generate a pre-signed URL for the video object and push the URL to the customer."},"answers_community":["C (100%)"],"question_images":[],"answer_description":"","answer_ET":"C","isMC":true,"question_id":295,"url":"https://www.examtopics.com/discussions/amazon/view/143369-exam-aws-certified-developer-associate-dva-c02-topic-1/","question_text":"A developer wrote an application that uses an AWS Lambda function to asynchronously generate short videos based on requests from customers. This video generation can take up to 10 minutes. After the video is generated, a URL to download the video is pushed to the customer's web browser. The customer should be able to access these videos for at least 3 hours after generation.\n\nWhich solution will meet these requirements?","answer_images":[],"exam_id":24,"topic":"1","unix_timestamp":1720191180}],"exam":{"provider":"Amazon","id":24,"name":"AWS Certified Developer - Associate DVA-C02","lastUpdated":"11 Apr 2025","numberOfQuestions":551,"isMCOnly":true,"isImplemented":true,"isBeta":false},"currentPage":59},"__N_SSP":true}