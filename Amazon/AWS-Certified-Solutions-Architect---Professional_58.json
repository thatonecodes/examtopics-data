{"pageProps":{"questions":[{"id":"vGSxBRy86ZTcJTfRdR54","answer_images":[],"question_id":286,"answer":"C","discussion":[{"comment_id":"925343","content":"Selected Answer: C\nC. Any data transfer out of a remote region is billed at the location of your AWS Direct Connect data transfer rate.\n\nThe correct statement is that data transfer out of a remote region is not billed at the location of your AWS Direct Connect data transfer rate. Instead, data transfer costs for traffic going out of an AWS region are based on the outbound data transfer rates specific to that region.","timestamp":"1686930180.0","poster":"SkyZeroZx","upvote_count":"1"},{"content":"C. Any data transfer out of a remote region is billed at the location of your AWS Direct Connect data transfer rate.","comment_id":"495115","timestamp":"1638793200.0","poster":"cldy","upvote_count":"2"},{"timestamp":"1638079260.0","content":"I'd go with C","poster":"backfringe","upvote_count":"1","comment_id":"488862"},{"content":"Option B: 'Multi-region services' confuses me. It suggests that one region can connect to another using Direct Connect - which is incorrect. I think it should be worded like Multi-Region connectivity. ???","upvote_count":"2","timestamp":"1633254960.0","poster":"Smart","comment_id":"69584"},{"upvote_count":"3","content":"FYI, bellow the complete text for D:\n\"To connect to a VPC in a remote region, you can use a virtual private network (VPN) connection over your public virtual interface.\"","comment_id":"43195","comments":[{"comment_id":"233721","upvote_count":"1","content":"use a virtual private network (VPN) connection over your public virtual interface\nWhat does it mean?","comments":[{"upvote_count":"1","poster":"01037","comment_id":"381856","content":"https://aws.amazon.com/premiumsupport/knowledge-center/create-vpn-direct-connect/","timestamp":"1635736800.0"}],"poster":"newme","timestamp":"1634443080.0"}],"poster":"Denis_H","timestamp":"1632384000.0"}],"isMC":true,"timestamp":"2020-01-27 10:18:00","exam_id":32,"choices":{"D":"To connect to a VPC in a remote region, you can use a virtual private network (VPN) connection over your public virtual interface.","C":"Any data transfer out of a remote region is billed at the location of your AWS Direct Connect data transfer rate.","A":"AWS Direct Connect locations in the United States can access public resources in any US region.","B":"You can use a single AWS Direct Connect connection to build multi-region services."},"url":"https://www.examtopics.com/discussions/amazon/view/12827-exam-aws-certified-solutions-architect-professional-topic-1/","answers_community":["C (100%)"],"question_images":[],"unix_timestamp":1580116680,"answer_description":"AWS Direct Connect locations in the United States can access public resources in any US region. You can use a single AWS Direct Connect connection to build multi-region services. To connect to a VPC in a remote region, you can use a virtual private network (VPN) connection over your public virtual interface.\nTo access public resources in a remote region, you must set up a public virtual interface and establish a border gateway protocol (BGP) session. Then your router learns the routes of the other AWS regions in the US. You can then also establish a VPN connection to your VPC in the remote region.\nAny data transfer out of a remote region is billed at the remote region data transfer rate.\nReference:\nhttp://docs.aws.amazon.com/directconnect/latest/UserGuide/remote_regions.html","topic":"1","question_text":"Which statement is NOT true about accessing remote AWS region in the US by your AWS Direct Connect which is located in the US?","answer_ET":"C"},{"id":"MwfsDFbSX8EsHQ3hBft9","discussion":[{"timestamp":"1686930300.0","content":"Selected Answer: C\nThe statement that is NOT correct when working with your AWS Direct Connect connection after it is set up completely is:\n\nC. You cannot view the current connection ID and verify if it matches the connection ID on the Letter of Authorization (LOA).\n\nThe correct statement is that you can view the current connection ID and verify if it matches the connection ID on the Letter of Authorization (LOA). The connection ID is a unique identifier assigned to your AWS Direct Connect connection, and you can access this information to ensure it matches the connection ID specified in the LOA.","poster":"SkyZeroZx","comment_id":"925345","upvote_count":"1"},{"upvote_count":"1","poster":"hilft","timestamp":"1658617680.0","content":"Another question with \"NOT\" or \"FALSE\".\nYou can definitely view what you got.\nC. You cannot view the current connection ID and verify if it matches the connection ID on the Letter of Authorization (LOA).","comment_id":"635795"},{"content":"Ans :C","poster":"thomasjos79","comment_id":"505594","timestamp":"1640022480.0","upvote_count":"2","comments":[{"content":"You can manage your AWS Direct Connect connections and view connection details, accept hosted connections, and delete connections. You can view the current status of your connection. You can also view your connection ID, which looks similar to this example dxcon-xxxx, and verify that it matches the connectionID on the Letter of Authorization (LOA) that you received from Amazon.\n\nReference:\n\nhttp://docs.aws.amazon.com/directconnect/latest/UserGuide/viewdetails.html","upvote_count":"4","comment_id":"505595","poster":"thomasjos79","timestamp":"1640022540.0"}]}],"choices":{"D":"You can accept a host connection by purchasing a hosted connection from the partner (APN).","C":"You cannot view the current connection ID and verify if it matches the connection ID on the Letter of Authorization (LOA).","B":"You can delete a connection as long as there are no virtual interfaces attached to it.","A":"You can manage your AWS Direct Connect connections and view the connection details."},"topic":"1","isMC":true,"answer":"C","question_images":[],"timestamp":"2021-12-20 18:48:00","answer_ET":"C","question_id":287,"unix_timestamp":1640022480,"answer_images":[],"question_text":"Which of the following statements is NOT correct when working with your AWS Direct Connect connection after it is set up completely?","answers_community":["C (100%)"],"answer_description":"You can manage your AWS Direct Connect connections and view connection details, accept hosted connections, and delete connections. You can view the current status of your connection. You can also view your connection ID, which looks similar to this example dxcon-xxxx, and verify that it matches the connection\nID on the Letter of Authorization (LOA) that you received from Amazon.\nReference:\nhttp://docs.aws.amazon.com/directconnect/latest/UserGuide/viewdetails.html","exam_id":32,"url":"https://www.examtopics.com/discussions/amazon/view/68332-exam-aws-certified-solutions-architect-professional-topic-1/"},{"id":"ejmA5ROPgKxb9jnMrZpz","question_id":288,"unix_timestamp":1571990520,"answer_ET":"E","answer_images":[],"isMC":true,"exam_id":32,"question_text":"You are designing a photo-sharing mobile app. The application will store all pictures in a single Amazon S3 bucket.\nUsers will upload pictures from their mobile device directly to Amazon S3 and will be able to view and download their own pictures directly from Amazon S3.\nYou want to configure security to handle potentially millions of users in the most secure manner possible.\nWhat should your server-side application do when a new user registers on the photo-sharing mobile application?","discussion":[{"poster":"rasagulla","comment_id":"17332","content":"Is it 'D' because it mentions about 'AssumeRole' function with STS Service and not 'E' because tho' it also uses STS service it does not explicitly mention the 'AssumeRole' function. Except for that , i feel even DynamoDB can the scenario better.","upvote_count":"18","timestamp":"1632144000.0"},{"timestamp":"1633931220.0","comments":[{"poster":"Chuky64","content":"I agree, best option is DynamoDB for millons of users.","comment_id":"614555","timestamp":"1654866360.0","upvote_count":"3"},{"content":"Yes DynamoDB would be better , but their is no mention of the role in that answer.\nYou can't use STS to assume a \"role\" without actually creating that role so I would go with answer D","timestamp":"1666983060.0","poster":"Cal88","comment_id":"706710","upvote_count":"2"}],"poster":"saddly","comment_id":"202378","upvote_count":"14","content":"I would go with DynamoDB. I don't think \"AssumeRole\" statement is important as for STS this is almost the only function. Also it say use STS to generate the credential.\nMy point is \nRDS vs DynamoDB\nFor this App, it's read heavy. From scaling out perspective DynamoDB is better."},{"content":"D is the correct one","poster":"Chinta","timestamp":"1727313780.0","upvote_count":"1","comment_id":"1289243"},{"timestamp":"1723729560.0","comment_id":"1266479","upvote_count":"1","poster":"amministrazione","content":"E. Record the user's information in Amazon DynamoDB. When the user uses their mobile app, create temporary credentials using AWS Security Token Service with appropriate permissions. Store these credentials in the mobile app's memory and use them to access Amazon S3. Generate new credentials the next time the user runs the mobile app."},{"poster":"Takshashila","comment_id":"1015961","content":"Selected Answer: E\nD. Record the user's information in Amazon RDS...create temporary credentials using the AWS Security Token Service \"AssumeRole\" function...\n\nThis approach is more secure as it uses temporary credentials provided by STS. However, using RDS just to store user information might be overkill for this use case.\nE. Record the user's information in Amazon DynamoDB...create temporary credentials using AWS Security Token Service...\n\nThis approach is similar to option D but uses DynamoDB, which is a more scalable and cost-effective solution for storing user information compared to RDS. It also uses temporary credentials provided by STS, which is the recommended approach for mobile apps.\nGiven the options, the best and most secure approach for handling potentially millions of users in a photo-sharing mobile app is","upvote_count":"3","timestamp":"1695570060.0"},{"content":"The answer is E according to me. Longterm credentials are a strict NO fron a security standpoint. Also, the application needs to scale for a large user base. This makes Dynamo DB a more suitable option","upvote_count":"1","timestamp":"1692739620.0","poster":"koundi_aws","comment_id":"987796"},{"poster":"SkyZeroZx","upvote_count":"1","comment_id":"927584","content":"Selected Answer: D\nkeywords = Amazon DynamoDB && AWS STS \nThen D","timestamp":"1687183680.0"},{"poster":"magnonobre","comment_id":"885220","timestamp":"1682859720.0","upvote_count":"1","content":"Selected Answer: D\nIn this case, option D would be the better option. This is because it uses temporary credentials generated by the AWS Security Token Service's AssumeRole function, which are short-lived and rotated frequently. This reduces the risk of credential theft or misuse, which is important in a large-scale application with potentially millions of users. Additionally, by recording user information in Amazon RDS, it provides a centralized and secure way to manage user information and access control."},{"upvote_count":"3","content":"The correct answer is defiantly E. here is why\nA,B and C are wrong for all the reasons mentioned in other comments\nAs for D and E.\nAIM users are not designed for application users, and you will not create them for each user...\nIt is mostly used for console/cli users and backend applications. this is also supported by AWS documentation:\nFor temp creds\nThe AWS STS API operations create a new session with temporary security credentials that include an access key pair and a session token. The access key pair consists of an access key ID and a secret key. Users (or an application that the user runs) can use these credentials to access your resources. You can create a role session and pass session policies and session tags programmatically using AWS STS API operations\nfor assuming role:\nThe AssumeRole API operation is useful for allowing existing IAM users to access AWS resources that they don't already have access to. For example, the user might need access to resources in another AWS account.\n\nAs you can see, there is a difference in narrative and intent","timestamp":"1678622460.0","poster":"orwolfstein","comment_id":"836973"},{"poster":"clarksu","upvote_count":"4","comment_id":"820224","content":"Selected Answer: E\nD is definitely WRONG and deceptive, \n\nWhy?\n- The Question asked under condition of 'when a new user registers ' , and what your app will do, only the first sentence will answer to this. \nYou WILL NOT create an IAM role on the basis of your end user. \n\nSame reason, You will not create an IAM user on the basis of end user , this rules out A, B ;\nLong term credential is not the most secure way, rules out C.","timestamp":"1677224880.0"},{"poster":"clarksu","content":"Selected Answer: E\nD is definitely WRONG and deceptive, \n\nThe Question asked under condition of 'when a new user registers ' , \n You WILL NOT create an IAM user on the basis of your end user.\n\nIt takes cover under assume role. Well done, AWS.","timestamp":"1677224520.0","comment_id":"820219","upvote_count":"2"},{"content":"Selected Answer: D\nI wuld go with D as that is the only one that makes it clear that the Assume Role would be used","timestamp":"1677130920.0","poster":"sr987654","upvote_count":"1","comment_id":"818825"},{"content":"There is a limit to the number of IAM roles (yes this can be raised via support tickets a couple of times). The question is stating millions of users. You do not want to have millions of IAM roles, although this would be the most secure way to make sure a user will not access different files in this single S3 bucket.","timestamp":"1676157180.0","poster":"henridoeller","comment_id":"805746","upvote_count":"1"},{"content":"I would go for E. User information is better to be stored in DynamoDB plus its high performance in read/write than RDS","poster":"colortex","timestamp":"1675569480.0","upvote_count":"1","comment_id":"798597"},{"content":"Selected Answer: E\nWhy not D: “ Record the user's information in Amazon RDS AND create a role in IAM with appropriate permissions” So for every new user an IAM role is created?! That going to be a hole lot of roles. Better to create one role and let it be assumed (temp credentials) by every user as needed.","comment_id":"771726","upvote_count":"1","poster":"CertNerd1234","timestamp":"1673378700.0"},{"timestamp":"1670896680.0","upvote_count":"1","poster":"TigerInTheCloud","comment_id":"743495","content":"Selected Answer: E\nE. DynamoDB, simpler than RDS, and Cognito, with IAM role through STS to get temporary credentials."},{"poster":"jamat","timestamp":"1665900900.0","content":"I go for D\nIAM role + AssumeRole make perfect sense here\nOnly 1 IAM role could used for all users with a variable\nhttps://youtu.be/-1gkwLBfBCo\nFinally RDS is perfectly fine with millions of records, isn’t it..?","upvote_count":"1","comment_id":"696031"},{"content":"Selected Answer: E\nvote for E","timestamp":"1656897660.0","comment_id":"626763","poster":"aandc","upvote_count":"2"},{"content":"I believe E is the answer, and D could not be correct - not because of RDS/DynamoDB, but the mentioning of \"AssumeRole\". With \"AssumeRole\", the caller must be an AWS identity. However the mobile users don't have AWS identity before assuming role.","upvote_count":"5","timestamp":"1655026680.0","comment_id":"615245","poster":"BingTR"},{"poster":"jyrajan69","timestamp":"1653181320.0","upvote_count":"1","comment_id":"605063","content":"First you have millions of users which rules D out, SQL not designed for this, for me easy answer, it must be E"},{"poster":"pankajrawat","upvote_count":"2","content":"Selected Answer: E\nE is better, I'll not create user in IAM, instead use AssumeRole","timestamp":"1651400700.0","comment_id":"595553"},{"timestamp":"1640614740.0","upvote_count":"3","content":"It believe it's answer E for two reasons:\n- dynamoDB is more suitable than RDS for scaling reasons.\n- answer D seems to indicate a role per user which is not scalable.","poster":"AwsSuperTrooper","comment_id":"510369"},{"poster":"cldy","timestamp":"1638853440.0","content":"E. Record the user's information in Amazon DynamoDB. When the user uses their mobile app, create temporary credentials using AWS Security Token Service with appropriate permissions. Store these credentials in the mobile app's memory and use them to access Amazon S3. Generate new credentials the next time the user runs the mobile app.","comment_id":"495610","upvote_count":"1"},{"content":"I'd go with D","comment_id":"488883","timestamp":"1638080760.0","upvote_count":"1","comments":[{"poster":"backfringe","timestamp":"1638080760.0","upvote_count":"1","content":"type I meant EEEE","comment_id":"488885"}],"poster":"backfringe"},{"upvote_count":"1","comment_id":"482118","content":"EEE - Why would one millions of these IAM roles? \"create a role in IAM with appropriate permissions\". That is exactly what this solution states to do for EACH new user.","comments":[{"content":"You don't create millions of roles , you create one role and assume it using STS \nThat's how STS works , without the role you can't just use STS to grant permission.\nAnswer E is missing the part that makes STS work which creating that role that will give your users permission to access S3\nSo the correct answer is D","upvote_count":"1","comment_id":"706711","poster":"Cal88","timestamp":"1666983420.0"}],"timestamp":"1637359200.0","poster":"sashenka"},{"poster":"Akhil254","timestamp":"1636260720.0","content":"D Correct","comment_id":"405823","upvote_count":"1"},{"comment_id":"398007","poster":"backfringe","upvote_count":"1","timestamp":"1636129500.0","content":"I go with E"},{"content":"D\nFor all agreeing with answer E, if you look at https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html and search for \"SourceIdentity\".\nSourceIdentity: The source identity specified by the principal that is calling the AssumeRole operation.\nRequired: No\nSo, for AssumeRole calls, you don't have to have a SourceIdentity i.e. it doesn't have to be an existing user.\nSo, the most reasonable answer is D.\nIf someone has an argument contradicting this, please help me!!","comment_id":"384450","upvote_count":"4","poster":"DashL","timestamp":"1635930960.0"},{"timestamp":"1635739740.0","content":"E.\n\nHow could D be correct?\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html\n\"The AssumeRole API operation is useful for allowing existing IAM users to access AWS resources that they don't already have access to. For example, the user might need access to resources in another AWS account\"","poster":"01037","upvote_count":"3","comment_id":"370706"},{"upvote_count":"2","timestamp":"1635728100.0","content":"D is probably correct if 'AssumeRole' weren't there: the role would probably be assumed with 'AssumeRoleWithWebIdentity' from mobile since you can't directly log into an AWS account from a mobile app.","comment_id":"368618","poster":"ptnlzy"},{"comment_id":"351711","timestamp":"1635603840.0","upvote_count":"3","poster":"pt8","content":"Only D mentioned creating a role, which is critical in this case before we can leverage STS. The solution has to be feasible before putting cost effectiveness into considerations."},{"content":"no answer. Cognito is the best solution.","upvote_count":"1","timestamp":"1635320460.0","comment_id":"336286","poster":"littlewat"},{"comments":[{"timestamp":"1635136440.0","comment_id":"323932","upvote_count":"3","content":"Typo. E is Correct.","poster":"cldy"}],"comment_id":"323931","upvote_count":"3","poster":"cldy","content":"C. Correct.\nMobile App will call STS with AssumeRoleWithWebIdentity. \nAssumeRole is used with existing IAM user.","timestamp":"1635039360.0"},{"poster":"ppshein","upvote_count":"1","content":"Answer should be E. Because D is using RDS to store user information that's costly.","comment_id":"316364","timestamp":"1634980320.0"},{"poster":"ppshein","upvote_count":"3","content":"E is the best answer for me.","timestamp":"1634938800.0","comment_id":"309578"},{"comment_id":"282388","content":"I ll go with E","timestamp":"1634798340.0","upvote_count":"3","poster":"bnagaraja9099"},{"upvote_count":"1","comment_id":"240846","poster":"kmaiti","content":"Ans: D ( As millions of users are in question so users can be stored in dynamodb from scalability point of view but at option E , app request for sts credentials without any role. Thus, access to s3 storing photo is not possible. So, in option D, this bottleneck will be eliminated. However scaling db is challenging but it is possible to store millions of users in rds. )","timestamp":"1634794920.0"},{"comments":[{"poster":"ChauPhan","upvote_count":"1","timestamp":"1634745480.0","comment_id":"232782","content":"Sorry I'll go with D. Seem the AWS Security Token Service \"AssumeRole\" function is the function written on mobile app , it will send API call to STS and get temporary credentials. For this token temporary credentials returned, it will send Access API call with this token to relevant AWS resources, in this case it is S3. The token returned includes the IAM role which permits mobile app access AWS resources"}],"comment_id":"232732","content":"For D \"...create temporary credentials using the AWS Security Token Service \"AssumeRole\" function\" does not make sense.\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc_manual.html\n\nIn your app, make an unsigned call to the AssumeRoleWithWebIdentity action to request temporary security credentials. In the request, you pass the IdP's authentication token and specify the Amazon Resource Name (ARN) for the IAM role that you created for that IdP. AWS verifies that the token is trusted and valid and if so, returns temporary security credentials to your app that have the permissions for the role that you name in the request. The response also includes metadata about the user from the IdP, such as the unique user ID that the IdP associates with the user.","timestamp":"1634592720.0","poster":"ChauPhan","upvote_count":"1"},{"timestamp":"1633969500.0","comment_id":"207341","poster":"cpal012","content":"E seems the best answer. For D - AssumeRole is usually associated with an existing user or for cross-account access. Plus you wouldn't generate a new role at all. There's nothing wrong with E and DynamoDB is a better fit","upvote_count":"3"},{"timestamp":"1633903980.0","poster":"srknbngl","upvote_count":"1","content":"D is Correct","comment_id":"190199"},{"comment_id":"172574","poster":"kaush","upvote_count":"1","content":"E should work as we can give Folders within same bucket for each user and apply a policy to permit only the ${username} folder to each user , with that method we can do this in a same bucket and D method :assume role is not necessary \nshoud there is a need to assume role every one will have access to everyones photoes \nOtherwise creating millions of roles will be not practicle","timestamp":"1633640220.0"},{"comment_id":"166023","upvote_count":"1","content":"For Assume Role, the user must be an AWS user.... Since we are talking of an app, so will not go with D...Better E since it talks of STS without mentioning the Assume Role... One option could be WebIdentity using STS.... so Option E","poster":"khan11","comments":[{"poster":"manoj101","upvote_count":"1","comment_id":"174873","content":"E is correct. Assume role is applicable for SAML authentication.","timestamp":"1633805820.0"}],"timestamp":"1633589460.0"},{"content":"Would go for D because an IAM role is created (and assume bound to app) for the app, which is imo more natural (and crucial in this question) than create/bind an IAM user for/to the app. \nSecond, AsumeRole can then use the IAM role (same) as arg acc the the mentioned link 'https://aws.amazon.com/blogs/security/understanding-the-api-options-for-securely-delegating-access-to-your-aws-account/' . Yes RDS is not best but viable solution, here more distractor.\nIn E its not mentioned how to create STS by means of which API","comment_id":"148514","poster":"sensor","timestamp":"1633552980.0","upvote_count":"2"},{"comment_id":"143413","poster":"fullaws","upvote_count":"1","timestamp":"1633480500.0","content":"D is correct, (use AssumeRole, cant create temporary credential with appropriate permission as permission already pre-set from the role you assume)"},{"comment_id":"142868","poster":"guptas","upvote_count":"1","content":"I think D is the answer although E is quite convincing, it lacks completion.","timestamp":"1633419480.0"},{"timestamp":"1633047360.0","upvote_count":"1","comment_id":"127931","poster":"sirmie_slim","content":"I’ll go with E"},{"comment_id":"127371","poster":"noisonnoiton","upvote_count":"2","content":"go with E","timestamp":"1633021560.0"},{"timestamp":"1632982260.0","upvote_count":"1","content":"Following blog is more closer to explanation on why to use \"AssumeRole\".\nhttps://aws.amazon.com/blogs/security/understanding-the-api-options-for-securely-delegating-access-to-your-aws-account/","poster":"manoj101","comment_id":"116910"},{"timestamp":"1632982140.0","content":"E suits better, D - you create a role with every user. which means millions of roles,","poster":"oatif","comment_id":"115187","upvote_count":"1"},{"poster":"Merlin1","timestamp":"1632926220.0","comment_id":"101616","upvote_count":"2","content":"Not to mention Dynamo is better suited for this application....It would still use a role probably with a condition to provide the specific access but it wouldn't create a role evey time a user registers. In the real world E would work better. Assumptions aside."},{"comments":[{"timestamp":"1666983840.0","comment_id":"706713","poster":"Cal88","content":"You only created one role in answer D and it says that in the answer \"create a role\"\nso one role then you uses STS to assume that role for all of your users","upvote_count":"1"}],"upvote_count":"3","comment_id":"101613","content":"So answer D would create millions of roles...not practical and not even doable as there is a limit on roles....Answer E is better...Use STS and web identity federation although Id like the answer better if it included Web identity rather than assuming it....Either eway...millions of roles? No can do.","timestamp":"1632884640.0","poster":"Merlin1"},{"content":"Answer is E. \nD is wrong . AssumeRole is built in to STS. Assume role automatically callas STS. You dont have to assume role . This is how sts works\nBy default, the temporary security credentials created by AssumeRole last for one hour","timestamp":"1632855000.0","poster":"JAWS1600","comment_id":"100473","upvote_count":"2"},{"upvote_count":"2","timestamp":"1632737040.0","content":"D. https://acloud.guru/forums/aws-certified-solutions-architect-associate/discussion/-KLmsIhGny5Cw_sl75Qg/rds-vs-dynamodb\nFull text for E is:\nRecord the user’s Information In Amazon DynamoDB. When the user uses their mobile app create temporary credentials using AWS Security Token Service with appropriate permissions Store these credentials in the mobile app’s memory and use them to access Amazon S3 Generate new credentials the next time the user runs the mobile app.\nTemporary credentials cannot be used “next time” expire soon","poster":"Joeylee","comment_id":"75178"},{"upvote_count":"1","timestamp":"1632702540.0","comments":[{"content":"It clearly says create A ROLE. the answer is D. You create one role and it is assumed by millions not create million roles lol","timestamp":"1633389120.0","poster":"xhova","upvote_count":"2","comment_id":"135867"}],"poster":"frankzeng","content":"E. If D, it will create a role for each user and million of roles, crazy.","comment_id":"70897"},{"upvote_count":"3","timestamp":"1632524460.0","poster":"BillyC","comment_id":"49657","content":"D is Correct!","comments":[{"upvote_count":"2","poster":"drneon","comments":[{"content":"There is a limit of 5000 users per account, this solution needs a IAM role and temp credentials.","timestamp":"1632697320.0","upvote_count":"1","poster":"kakashi","comment_id":"68586"},{"comment_id":"706712","poster":"Cal88","upvote_count":"1","content":"If you don't create the role then how will your users get permission to access S3 using STS?!!\nif you look at STS docs at\nhttps://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html\nYou will find:\nRoleArn\nThe Amazon Resource Name (ARN) of the role to assume.\n\nType: String\n\nLength Constraints: Minimum length of 20. Maximum length of 2048.\n\nPattern: [\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]+\n\nRequired: Yes\n\n\nso a role is mandatory to get permission using AssumeRole \nTherefore since there is no mention of that role in answer E its not correct\nThe right answer is D","timestamp":"1666983720.0"}],"content":"No need to create IAM Role for photo app.\nso answer is E.","timestamp":"1632563640.0","comment_id":"66681"}]},{"comment_id":"39055","timestamp":"1632463140.0","content":"D is the answer. Because it is Relational and we need to store AND retrieve (via query) the information in the database. Dynamo is faster but it is \"no-sql\". No structure per se.","upvote_count":"4","poster":"ReggieR2"},{"content":"millions of users... I guess maybe RDS also works for storing metadata...","poster":"jasonsunbao","comment_id":"23992","timestamp":"1632427260.0","upvote_count":"1"},{"content":"Sorry overlooked D suits better coz it does mention IAM role with permission for s3 as well as assume role. Still millions of users with RDS eeerrrrr","comment_id":"21866","upvote_count":"1","timestamp":"1632192300.0","poster":"Tamili"},{"poster":"Tamili","upvote_count":"2","timestamp":"1632177480.0","comment_id":"21865","content":"Yes E suits better"}],"answers_community":["E (83%)","D (17%)"],"url":"https://www.examtopics.com/discussions/amazon/view/7192-exam-aws-certified-solutions-architect-professional-topic-1/","answer_description":"","answer":"E","question_images":[],"timestamp":"2019-10-25 10:02:00","topic":"1","choices":{"D":"Record the user's information in Amazon RDS and create a role in IAM with appropriate permissions. When the user uses their mobile app, create temporary credentials using the AWS Security Token Service \"AssumeRole\" function. Store these credentials in the mobile app's memory and use them to access Amazon S3. Generate new credentials the next time the user runs the mobile app.","C":"Create a set of long-term credentials using AWS Security Token Service with appropriate permissions. Store these credentials in the mobile app and use them to access Amazon S3.","E":"Record the user's information in Amazon DynamoDB. When the user uses their mobile app, create temporary credentials using AWS Security Token Service with appropriate permissions. Store these credentials in the mobile app's memory and use them to access Amazon S3. Generate new credentials the next time the user runs the mobile app.","A":"Create an IAM user. Update the bucket policy with appropriate permissions for the IAM user. Generate an access key and secret key for the IAM user, store them in the mobile app and use these credentials to access Amazon S3.","B":"Create an IAM user. Assign appropriate permissions to the IAM user. Generate an access key and secret key for the IAM user, store them in the mobile app and use these credentials to access Amazon S3."}},{"id":"5GIbjjgM5P63oyQnRi8B","answers_community":[],"question_text":"Over which of the following Ethernet standards does AWS Direct Connect link your internal network to an AWS Direct Connect location?","timestamp":"2021-06-08 15:48:00","discussion":[{"content":"A. Your network must use single-mode fiber with a 1000BASE-LX (1310 nm) transceiver for 1 gigabit Ethernet, a 10GBASE-LR (1310 nm) transceiver for 10 gigabit, or a 100GBASE-LR4 for 100 gigabit Ethernet.","upvote_count":"1","poster":"Devgela","comment_id":"529582","timestamp":"1642823760.0"},{"upvote_count":"1","poster":"cldy","content":"A. Single mode fiber-optic cable","timestamp":"1638687000.0","comment_id":"494117"},{"content":"A\nhttps://docs.aws.amazon.com/directconnect/latest/UserGuide/Welcome.html#overview_requirements","poster":"wahlbergusa","timestamp":"1638369060.0","upvote_count":"2","comment_id":"491723"},{"upvote_count":"2","timestamp":"1633755360.0","poster":"Aline_H","content":"https://docs.aws.amazon.com/directconnect/latest/UserGuide/Welcome.html#overview_requirements","comment_id":"377570"}],"answer_images":[],"answer":"A","url":"https://www.examtopics.com/discussions/amazon/view/54893-exam-aws-certified-solutions-architect-professional-topic-1/","topic":"1","answer_description":"AWS Direct Connect links your internal network to an AWS Direct Connect location over a standard 1 gigabit or 10 gigabit Ethernet single mode fiber-optic cable.\nReference:\nhttp://docs.aws.amazon.com/directconnect/latest/UserGuide/Welcome.html","unix_timestamp":1623160080,"choices":{"B":"Multi-mode fiber-optic cable","C":"Shielded balanced copper cable","A":"Single mode fiber-optic cable","D":"Twisted pair cable"},"answer_ET":"A","exam_id":32,"question_id":289,"isMC":true,"question_images":[]},{"id":"q1oucOsnR7xg5YwIfEvZ","url":"https://www.examtopics.com/discussions/amazon/view/12832-exam-aws-certified-solutions-architect-professional-topic-1/","question_id":290,"discussion":[{"content":"Selected Answer: C\nerror is C","timestamp":"1686934020.0","comment_id":"925397","poster":"SkyZeroZx","upvote_count":"1"},{"comment_id":"925352","upvote_count":"1","timestamp":"1686930780.0","poster":"SkyZeroZx","content":"Selected Answer: C\nThe statement that is NOT correct about ec2-net-utils is:\n\nC. ec2-net-utils detaches a primary network interface from an instance.\n\nThe correct statement is that ec2-net-utils does not detach a primary network interface from an instance. The primary network interface is an essential component of an Amazon EC2 instance and cannot be detached while the instance is running."},{"timestamp":"1672909320.0","comment_id":"766420","upvote_count":"1","content":"Selected Answer: C\nC You can't detach primary network interface. Strange vote result here.","poster":"hollie"},{"timestamp":"1662188580.0","poster":"nnope","upvote_count":"1","content":"Selected Answer: D\nIn the common case, customers should not need to be aware of its operation. Configuration of network interfaces should occur following the principle of least astonishment. That is, traffic should be routed via the ENI associated with the source address. Custom configuration should be respected. New ENI attachments should be used automatically, and associated resources should be cleaned up on detachment. Manipulation of an ENI attachment should not impact the functionality of any other ENIs.","comment_id":"658148"},{"upvote_count":"1","timestamp":"1659693180.0","poster":"gondohwe","content":"C isnt correct...u cant detach a primary interface on an instance regardless of instance state...D is the correct if u interested in passing this Architect exam lol","comment_id":"642887"},{"upvote_count":"2","content":"C. ec2-net-utils detaches a primary network interface from an instance.","comment_id":"494367","timestamp":"1638711240.0","poster":"cldy"},{"timestamp":"1636259280.0","content":"C its correct.\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/best-practices-for-configuring-network-interfaces.html","poster":"rodolfo2020","upvote_count":"3","comment_id":"407337"},{"upvote_count":"2","poster":"Aline_H","timestamp":"1636088040.0","comment_id":"377912","content":"not C? Question is NOT correct. And they mentioned \n\"You can detach secondary network interfaces when the instance is running or stopped. However, you can't detach the primary network interface.\""},{"upvote_count":"1","poster":"fcbflo","comments":[{"comment_id":"381869","timestamp":"1636093500.0","upvote_count":"1","poster":"01037","content":"Are you proving D is NOT \"NOT correct\"?"}],"timestamp":"1635082260.0","comment_id":"348352","content":"It's D https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/best-practices-for-configuring-network-interfaces.html\ne.g.: \"Identifies network interfaces when they are attached, detached, or reattached to a running instance, and ensures that the hotplug script runs (53-ec2-network-interfaces.rules). Maps the MAC address to a device name (75-persistent-net-generator.rules, which generates 70-persistent-net.rules). \""},{"content":"D is correct","comments":[{"content":"pls ignore; C is correct answer ( Qn has NOT )","poster":"sohrshai","upvote_count":"1","timestamp":"1634821560.0","comment_id":"209994"}],"poster":"sohrshai","upvote_count":"1","timestamp":"1633341780.0","comment_id":"209992"},{"poster":"Denis_H","comment_id":"43204","content":"FYI, bellow the complete text for D:\n\"ec2-net-utils identifies network interfaces when they are attached, detached, or reattached to a running instance.\"","timestamp":"1632725040.0","upvote_count":"2"}],"isMC":true,"exam_id":32,"question_images":[],"answer_ET":"C","topic":"1","answers_community":["C (60%)","D (20%)","B (20%)"],"unix_timestamp":1580117280,"answer_images":[],"timestamp":"2020-01-27 10:28:00","answer":"C","answer_description":"","choices":{"C":"ec2-net-utils detaches a primary network interface from an instance.","D":"ec2-net-utils identifies network interfaces when they are attached, detached, or reattached to a running instance.","A":"ec2-net-utils generates an interface configuration file suitable for use with DHCP.","B":"ec2-net-utils extends the functionality of the standard if up."},"question_text":"One of the components that is part of ec2-net-utils used with ENI's is ec2ifscan.\nWhich of the following is not correct about ec2-net-utils?"}],"exam":{"numberOfQuestions":1019,"name":"AWS Certified Solutions Architect - Professional","isMCOnly":false,"isBeta":false,"lastUpdated":"11 Apr 2025","provider":"Amazon","id":32,"isImplemented":true},"currentPage":58},"__N_SSP":true}