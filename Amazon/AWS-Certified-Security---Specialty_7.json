{"pageProps":{"questions":[{"id":"QOzD2ZCWGcFVct0j6jYO","exam_id":29,"topic":"1","answer_ET":"AC","answer_images":[],"isMC":true,"question_text":"A corporate cloud security policy states that communications between the company's VPC and KMS must travel entirely within the AWS network and not use public service endpoints.\nWhich combination of the following actions MOST satisfies this requirement? (Choose two.)","discussion":[{"comment_id":"323940","upvote_count":"20","poster":"Larsson","timestamp":"1633476180.0","content":"AC for sure","comments":[{"upvote_count":"6","timestamp":"1633688880.0","poster":"ramozo","comment_id":"366164","content":"https://docs.aws.amazon.com/kms/latest/developerguide/kms-vpc-endpoint.html"}]},{"poster":"Meta512","upvote_count":"5","content":"Selected Answer: AC\nImport Key is not applicable here","timestamp":"1673805240.0","comment_id":"776898"},{"content":"Selected Answer: AC\nCorrect answers AC","poster":"Raphaello","upvote_count":"1","comment_id":"1149733","timestamp":"1707873660.0"},{"content":"Selected Answer: CD\nC. Create a VPC endpoint for AWS KMS with private DNS enabled.\nD. Use the KMS Import Key feature to securely transfer the AWS KMS key over a VPN.\n\nTo ensure that communications between the company's VPC and KMS travel entirely within the AWS network and do not use public service endpoints, the following actions should be taken:\n\nCreate a VPC endpoint for AWS KMS with private DNS enabled. This will allow the company's VPC to communicate with KMS without the need to traverse the public internet.\nUse the KMS Import Key feature to securely transfer the AWS KMS key over a VPN. This will ensure that the key is securely transferred to the company's VPC without the need to traverse the public internet.","poster":"IBANGA007","comment_id":"767102","upvote_count":"1","timestamp":"1672957740.0"},{"comment_id":"719115","poster":"jAWStest","content":"Selected Answer: AC\nExplanation is correct","upvote_count":"2","timestamp":"1668544800.0"},{"comment_id":"517811","timestamp":"1641417420.0","content":"AC... easy","upvote_count":"1","poster":"roger8978"},{"timestamp":"1635756480.0","poster":"kiev","upvote_count":"3","content":"Ac for me as well","comment_id":"437325"},{"content":"A and C","timestamp":"1634749020.0","poster":"refuz","upvote_count":"3","comment_id":"388803"},{"upvote_count":"2","timestamp":"1633372620.0","poster":"gfhbox0083","comment_id":"90499","content":"A, C, for sure."},{"poster":"xaccan","upvote_count":"1","content":"AC 100%","comment_id":"77574","timestamp":"1632955080.0"},{"timestamp":"1632631860.0","poster":"Raj9","comment_id":"66568","content":"a,c for sure","upvote_count":"1"},{"comment_id":"66236","upvote_count":"1","poster":"RaySmith","timestamp":"1632476580.0","content":"AC for me"},{"timestamp":"1632372480.0","upvote_count":"3","content":"A & Cis correct","poster":"awssecuritynewbie","comment_id":"65774"}],"question_id":31,"choices":{"E":"Add the following condition to the AWS KMS key policy: \"aws:SourceIp\": \"10.0.0.0/16\".","A":"Add the aws:sourceVpce condition to the AWS KMS key policy referencing the company's VPC endpoint ID.","B":"Remove the VPC internet gateway from the VPC and add a virtual private gateway to the VPC to prevent direct, public internet connectivity.","D":"Use the KMS Import Key feature to securely transfer the AWS KMS key over a VPN.","C":"Create a VPC endpoint for AWS KMS with private DNS enabled."},"answer_description":"","url":"https://www.examtopics.com/discussions/amazon/view/16947-exam-aws-certified-security-specialty-topic-1-question-126/","timestamp":"2020-03-18 21:54:00","question_images":[],"unix_timestamp":1584564840,"answers_community":["AC (89%)","11%"],"answer":"AC"},{"id":"kj14fJV2tiqyza7E2rG7","question_id":32,"answer_ET":"A","answer_description":"","answer_images":[],"question_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/16948-exam-aws-certified-security-specialty-topic-1-question-127/","isMC":true,"choices":{"D":"Obtain the fingerprint for the key pair from the AWS Management Console, then search for the fingerprint in Amazon CloudWatch Logs using: aws logs filter-log-events.","B":"Obtain the fingerprint for the key pair from the AWS Management Console, then search for the fingerprint in the Amazon Inspector logs.","A":"Obtain the list of instances by directly querying Amazon EC2 using: aws ec2 describe-instances --filters \"Name=key- name,Values=KEYNAMEHERE\".","C":"Obtain the output from the EC2 instance metadata using: curl http://169.254.169.254/latest/meta-data/public-keys/0/."},"unix_timestamp":1584565080,"answer":"A","exam_id":29,"timestamp":"2020-03-18 21:58:00","question_text":"A company had one of its Amazon EC2 key pairs compromised. A Security Engineer must identify which current Linux EC2 instances were deployed and used the compromised key pair.\nHow can this task be accomplished?","answers_community":["A (100%)"],"discussion":[{"upvote_count":"18","timestamp":"1633875240.0","comment_id":"104756","poster":"Awraith","comments":[{"timestamp":"1634223000.0","poster":"elmuste","content":"you can't change the key on an ec2 instance","comment_id":"159901","upvote_count":"4"},{"timestamp":"1635253380.0","upvote_count":"3","comment_id":"369165","content":"A is correct , if we assume the key-name is know and not changed since its launch . But D is correct if the Cloudtrail sends logs to Cloudwatch and query is used . D is more clean.","poster":"Gustava6272"}],"content":"A seems indeed the most likely answer but I see that : \n\"key-name : The name of the key pair used when the instance was launched.\"\nWhat if the compromised key is not the key used when the instance was launched ?"},{"comment_id":"125341","content":"Got this question in exam","timestamp":"1633919580.0","poster":"NarenG","comments":[{"content":"A Correct answer !","poster":"deegadaze1","timestamp":"1634505720.0","comment_id":"186418","upvote_count":"2"}],"upvote_count":"7"},{"content":"Selected Answer: A\nA is the correct answer here. Straightforward.","timestamp":"1707873720.0","upvote_count":"1","comment_id":"1149734","poster":"Raphaello"},{"content":"Selected Answer: A\nIt's A","poster":"michele_scar","timestamp":"1684764540.0","upvote_count":"1","comment_id":"904121"},{"poster":"tobedeleted","content":"Selected Answer: A\nFollowing Command gives an output of ALL EC2 Instances in That REGION, which is having a Particular Key: \naws ec2 describe-instances --filters \"Name=key-name, Values=MyKeyPair1\" --region ap-southeast-1\n\nIf there would have been another option of Cloud Trail Events, then that too captures the Events around those Keys creation, deletion etc. with its associated Instance Id.","timestamp":"1668099600.0","comment_id":"715411","upvote_count":"1"},{"content":"Answer A \nCheck the command below:\naws ec2 describe-instances --filters \"Name=key-name,Values=keyname\"","timestamp":"1665424920.0","upvote_count":"1","comment_id":"691399","poster":"KDA33"},{"poster":"Rja148393","content":"Selected Answer: A\nA : with below reference https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html","upvote_count":"2","timestamp":"1659604740.0","comment_id":"642282"},{"poster":"Radhaghosh","timestamp":"1643334120.0","upvote_count":"1","comment_id":"534258","content":"Correct Answer is A\n\n Obtain the list of instances by directly querying Amazon EC2 using: aws ec2 describe-instances --filters \"Name=key- name,Values=KEYNAMEHERE\"."},{"comment_id":"481287","timestamp":"1637288280.0","content":"Selected Answer: A\nJust clean and fast list of the Key Pairs.","poster":"Hariru","upvote_count":"1"},{"comment_id":"480714","upvote_count":"1","timestamp":"1637240640.0","content":"answer is A","poster":"IMAHM"},{"content":"You need to find which servers have compromised key so A is correct.\nC will show you as below\n[root@ip- ~]# curl http://169.254.169.254/latest/meta-data/public-keys/0/\nopenssh-key","upvote_count":"1","comment_id":"409688","timestamp":"1636165200.0","poster":"ChauPhan"},{"poster":"Kdosec","timestamp":"1635520080.0","content":"Honestly, I can't find this command in my test: aws ec2 describe-instances --filters \"Name=key- name,Values=KEYNAMEHERE\".","comment_id":"400647","upvote_count":"1"},{"upvote_count":"2","timestamp":"1635167700.0","poster":"Daniel76","comment_id":"351442","content":"A - we do not need fingerprint-which is to verify the private key- but just the key name.\nRefer to this link on how to show the key name of the EC2.\nhttps://docs.aws.amazon.com/cli/latest/reference/ec2/describe-instances.html"},{"comments":[{"comments":[{"timestamp":"1636114920.0","upvote_count":"1","poster":"ChauPhan","comment_id":"409686","content":"You need to find which instances have the compromised key, not the content of the key"}],"poster":"chengxu32","comment_id":"331365","content":"I found the reason why C is not correct. Above command has to be run from the instance. The question asks for the list of EC2s that was deployed using the compromised the key pair, and command in A can be run from AWS CLI, not from the EC2 instance","upvote_count":"3","timestamp":"1634799600.0"}],"timestamp":"1634791620.0","poster":"chengxu32","comment_id":"331359","content":"Why C is not correct ?\n\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#identify-key-pair-specified-at-launch\n\nThe public key that you specified when you launched an instance is also available to you through its instance metadata. To view the public key that you specified when launching the instance, use the following command from your instance:\n\nTOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"` \\\n&& curl -H \"X-aws-ec2-metadata-token: $TOKEN\" â€“v http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key","upvote_count":"2"},{"timestamp":"1634731980.0","content":"This is a DUP, it's A","comment_id":"257455","upvote_count":"1","poster":"erezhazan1"},{"content":"Answer is A","upvote_count":"1","poster":"gfhbox0083","comment_id":"89473","timestamp":"1633365600.0"},{"upvote_count":"2","content":"A true, run command","timestamp":"1632673680.0","poster":"xaccan","comment_id":"77575"},{"upvote_count":"1","content":"should be A","comment_id":"75618","poster":"Raj9","timestamp":"1632330000.0"},{"comment_id":"68854","upvote_count":"1","timestamp":"1632311160.0","content":"answer is A","poster":"Name1937122"},{"upvote_count":"2","comment_id":"66237","poster":"RaySmith","content":"A for me","timestamp":"1632194760.0"},{"timestamp":"1632147540.0","upvote_count":"3","comment_id":"65777","content":"I think it is A","poster":"awssecuritynewbie"}],"topic":"1"},{"id":"bruKhyn4QaBdzsIUUEDG","answer_description":"","url":"https://www.examtopics.com/discussions/amazon/view/17067-exam-aws-certified-security-specialty-topic-1-question-128/","isMC":true,"question_images":[],"answer":"C","exam_id":29,"topic":"1","answers_community":["C (100%)"],"answer_images":[],"answer_ET":"C","timestamp":"2020-03-21 01:43:00","question_id":33,"question_text":"A Security Engineer for a large company is managing a data processing application used by 1,500 subsidiary companies. The parent and subsidiary companies all use AWS. The application uses TCP port 443 and runs on Amazon EC2 behind a Network Load Balancer (NLB). For compliance reasons, the application should only be accessible to the subsidiaries and should not be available on the public internet. To meet the compliance requirements for restricted access, the Engineer has received the public and private CIDR block ranges for each subsidiary.\nWhat solution should the Engineer use to implement the appropriate access restrictions for the application?","choices":{"D":"Create an AWS security group to allow access on TCP port 443 from the 1,500 subsidiary CIDR block ranges. Associate the security group with EC2 instances.","C":"Create an AWS PrivateLink endpoint service in the parent company account attached to the NLB. Create an AWS security group for the instances to allow access on TCP port 443 from the AWS PrivateLink endpoint. Use AWS PrivateLink interface endpoints in the 1,500 subsidiary AWS accounts to connect to the data processing application.","A":"Create a NACL to allow access on TCP port 443 from the 1,500 subsidiary CIDR block ranges. Associate the NACL to both the NLB and EC2 instances","B":"Create an AWS security group to allow access on TCP port 443 from the 1,500 subsidiary CIDR block ranges. Associate the security group to the NLB. Create a second security group for EC2 instances with access on TCP port 443 from the NLB security group."},"discussion":[{"content":"Selected Answer: C\nA picture is better than 1000 worlds\nhttps://www.fugue.co/hs-fs/hubfs/Cloud-Network-feature.png?noresize&width=672&height=380&name=Cloud-Network-feature.png","upvote_count":"8","poster":"sapien45","timestamp":"1662039600.0","comment_id":"656308"},{"timestamp":"1642691760.0","poster":"sam_live","comment_id":"528519","upvote_count":"6","content":"Answer C. the firms accessing the data are also using AWS, so create a privatelink to connect VPCs in different accounts. \nhttps://docs.aws.amazon.com/whitepapers/latest/aws-vpc-connectivity-options/aws-privatelink.html"},{"timestamp":"1707874140.0","poster":"Raphaello","content":"Selected Answer: C\nIdeal scenario for PrivateLink service (VPC endpoint - Consumer/Provider)\nCorrect answer is C.","upvote_count":"1","comment_id":"1149742"},{"upvote_count":"3","content":"I don't know much about PrivateLink but if I were a security engineer, creating NACL and Security Group to allow port 443 for 1500 Ip ranges would be a nightmare so option C is the most appropriate.","poster":"ati","timestamp":"1688454540.0","comment_id":"942460"},{"content":"The key requirement here: For compliance reasons, the application should only be accessible to the subsidiaries and should not be available on the public internet. Therefore, we need a private communication link and a security group to meet the business requirements.","upvote_count":"2","comment_id":"866520","timestamp":"1681150500.0","poster":"ITGURU51"},{"upvote_count":"2","comment_id":"601442","content":"NACL have limitations, far less than 1500, so the answer should be c","poster":"treeli","timestamp":"1652507460.0"},{"poster":"TigerInTheCloud","timestamp":"1649879880.0","content":"Selected Answer: C\nAfter reading the question, I searched for endpoint service, which is only in D. The other answers, without the endpoint service, might be doable, but why should I care.","comment_id":"585418","upvote_count":"3"},{"timestamp":"1644506280.0","comments":[{"upvote_count":"1","timestamp":"1644506520.0","poster":"AWS_Dude","content":"Actually NVM Each security group can have a maximum of 50 rules per:\nI think this can be adjusted but still can't have 1,500 cidrs in an SG or even multiple I don't think. Sorry!\n \n50 inbound/outbound, IPv4/IPv6 rules","comment_id":"544661"},{"upvote_count":"4","comment_id":"557911","timestamp":"1646031420.0","content":"B may not be technically correct, because, there is a 60 rule limit on security group and cannot include 1500 IP ranges.\n\nhttps://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html","poster":"VikramCh"}],"poster":"AWS_Dude","comment_id":"544656","upvote_count":"1","content":"Technically B and C are correct but C is much better architecture so that is why it's the correct choice. Would be nice if the questions said \"which is the BEST answer\" since technically B works too it's just more manual work."},{"timestamp":"1636139760.0","upvote_count":"1","comment_id":"437331","poster":"kiev","content":"Private Link#C"},{"comment_id":"388805","upvote_count":"4","content":"C is correct","timestamp":"1636012020.0","poster":"refuz"},{"poster":"kj07","timestamp":"1635647400.0","content":"C, duplicated question","comment_id":"178340","upvote_count":"3"},{"comment_id":"107879","upvote_count":"2","poster":"awssecuritynewbie","timestamp":"1635271200.0","content":"Yeah it is C"},{"content":"c\nis correct","timestamp":"1633836720.0","comment_id":"92962","poster":"pitz","upvote_count":"1"},{"poster":"gfhbox0083","timestamp":"1632789780.0","comment_id":"90501","content":"C, for sure","upvote_count":"1"},{"content":"c for me as well","timestamp":"1632099000.0","poster":"Raj9","upvote_count":"1","comment_id":"66569"},{"poster":"RaySmith","upvote_count":"2","comment_id":"66372","content":"C to me","timestamp":"1632096060.0"}],"unix_timestamp":1584751380},{"id":"P2XQ3r0tvIvySbtZV2F7","question_text":"To meet regulatory requirements, a Security Engineer needs to implement an IAM policy that restricts the use of AWS services to the us-east-1 Region.\nWhat policy should the Engineer implement?\nA.\n//IMG//\n\nB.\n//IMG//\n\nC.\n//IMG//\n\nD.\n//IMG//","unix_timestamp":1615694640,"exam_id":29,"url":"https://www.examtopics.com/discussions/amazon/view/46988-exam-aws-certified-security-specialty-topic-1-question-129/","topic":"1","answer":"B","isMC":false,"timestamp":"2021-03-14 05:04:00","answers_community":[],"question_id":34,"answer_description":"","question_images":["https://www.examtopics.com/assets/media/exam-media/04239/0008000001.png","https://www.examtopics.com/assets/media/exam-media/04239/0008100001.png","https://www.examtopics.com/assets/media/exam-media/04239/0008200001.png","https://www.examtopics.com/assets/media/exam-media/04239/0008300001.png"],"answer_images":[],"discussion":[{"comment_id":"358411","content":"Answer is C.","poster":"Samoanhulk","upvote_count":"39","comments":[{"poster":"scuzzy2010","content":"I agree. Ref : https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_aws_deny-requested-region.html","timestamp":"1635778620.0","comment_id":"385192","upvote_count":"8"}],"timestamp":"1635243360.0"},{"comment_id":"715437","content":"Answer is C. \nB is Wrong. It's about EC2 instances. Whereas Questions is about ALL AWS Services. \nA is Wrong. It doesn't Explicitly DENY other Regions.\nD is Wrong. Because the NotAction element in a statement with \"Effect\": \"Deny\" to deny access to all of the listed resources except for the actions specified in the NotAction element.","upvote_count":"12","poster":"tobedeleted","timestamp":"1668102420.0"},{"content":"Correct answer is C.","poster":"Raphaello","comment_id":"1149775","upvote_count":"2","timestamp":"1707876180.0"},{"content":"C\nThe ask is not to all everything (*) in us-east-1; on opposite, it is to deny anything that is not requested in us-east-1.\nTherefore, it is C not A.","upvote_count":"2","poster":"Raphaello","comment_id":"1094997","timestamp":"1702418940.0"},{"content":"cccccccccccccccccc","upvote_count":"1","poster":"chen0305_099","comment_id":"1015760","timestamp":"1695558840.0"},{"comment_id":"991642","timestamp":"1693167300.0","poster":"mamila","content":"C for sure, it is denying any access to AWS services from all regions except us-east-1","upvote_count":"1"},{"poster":"ITGURU51","comment_id":"909710","upvote_count":"1","timestamp":"1685392920.0","content":"A is the correct answer according to the following link: https://aws.amazon.com/blogs/security/easier-way-to-control-access-to-aws-regions-using-iam-policies/"},{"comment_id":"906132","upvote_count":"1","poster":"sudipta0007","content":"Ans is A .\nref : https://aws.amazon.com/blogs/security/easier-way-to-control-access-to-aws-regions-using-iam-policies/","timestamp":"1684958460.0"},{"timestamp":"1684839480.0","poster":"Shely","content":"Answer should be A\nhttps://www.linkedin.com/pulse/aws-restrict-users-access-services-specific-region-using-xavier","comment_id":"904829","upvote_count":"1"},{"timestamp":"1683615780.0","upvote_count":"1","poster":"matrpro","content":"A is the correct. one. You need and explicit allow to permit the action. C denies all the other regions explicitly but it does not allow NV either -> https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html","comment_id":"892864"},{"comment_id":"846442","timestamp":"1679440800.0","content":"Its c because it denies all the other regions except us-east-1. you can still allow actions with option b bc there is no explicit deny","poster":"sp951","upvote_count":"1"},{"timestamp":"1677504540.0","content":"A is correct . https://aws.amazon.com/blogs/security/easier-way-to-control-access-to-aws-regions-using-iam-policies/","poster":"ep007","upvote_count":"1","comment_id":"823729"},{"comments":[{"comments":[{"content":"By default, you cannot deploy in any region. It's called an implicit deny.","poster":"awsmonkey","comment_id":"774079","upvote_count":"1","timestamp":"1673581980.0"}],"content":"No, its C. By default, you can use any AWS region. If you want to restrict all access to a certain region, you must explicitly deny access in all regions BUT the one you want to allow.\nWith A, i could still be able deploy in other regions","upvote_count":"1","timestamp":"1672824600.0","poster":"luis12345","comment_id":"765437"},{"comment_id":"922788","timestamp":"1686722880.0","poster":"Tofu13","upvote_count":"1","content":"The question does not ask to give access to any server but to \" restrict the use of AWS services to the us-east-1 Region\". A allows only us-east-1 Region, but it is possible to create another policy that will allow access to a resource in a different Region. Hence, A is not explicitly restrictive. C is.","comments":[{"poster":"Tofu13","comment_id":"922792","content":"server -> service","upvote_count":"1","timestamp":"1686723120.0"}]}],"comment_id":"754647","timestamp":"1671847260.0","content":"A is correct, it will allow only in us-east-1 region.\nC as it is presented, will not allow anything, because it is still missing an Allow. Create a Role with that policy, see what happens.","poster":"awsmonkey","upvote_count":"3"},{"timestamp":"1669732800.0","upvote_count":"2","content":"Answer is C","poster":"kwch791","comment_id":"730520"},{"poster":"knc","content":"Correct Ans: C\nThis is an example of SCP which acts as Guardrails and should be implemented as explicit \"Deny\". And as it is talking about all aws resources, out of C and D, the answer should C as it is talking about AWS and not only ec2.","comment_id":"689573","upvote_count":"4","timestamp":"1665252000.0"},{"upvote_count":"3","content":"I'd go with C: explicit deny trumps everything else.\n\nImagine you have explicit allow, allowing only one region, if you create more explicit allows, you can get access to more regions. But with an explicit deny, it doesnt matter how many explicit allows you create, new regions will be denied due to the explicit deny you created.","poster":"Root_Access","timestamp":"1662325140.0","comment_id":"659542"},{"upvote_count":"3","comments":[{"comment_id":"653423","content":"Based on FW ACL settings , if set acl as:\n# deny a.a.a.a \n# deny b.b.b.b\n# deny c.c.c.c\nif d.d.d.d come, it will also deny the d.d.d.d, because no allow for d.d.d.d be defined.","timestamp":"1661766180.0","upvote_count":"1","poster":"cloud_collector"}],"comment_id":"653422","content":"Between A and C , I still believe the A is correct.\nBased on the below process, \"no explicit allow\" and \"explicit deny\" will lead to DENY action at the end. \nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/images/PolicyEvaluationHorizontal111621.png\n\nIn the Answer C , it will deny all the request when the destination is not \"us-east-1\", but not means it will allow the request go through if it go to \"us-east-1\".","timestamp":"1661765700.0","poster":"cloud_collector"},{"upvote_count":"1","poster":"skywalker","timestamp":"1661323380.0","content":"A since it restrict to use resource to one particular region. \nB is not correct as it de-allow to use resource in one particular region","comment_id":"651125"},{"timestamp":"1658324160.0","poster":"sapien45","comment_id":"634072","upvote_count":"1","content":"C\n\n{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Sid\": \"DenyAllOutsideRequestedRegions\",\n \"Effect\": \"Deny\",\n \"NotAction\": [\n \"cloudfront:*\",\n \"iam:*\",\n \"route53:*\",\n \"support:*\"\n ],\n \"Resource\": \"*\",\n \"Condition\": {\n \"StringNotEquals\": {\n \"aws:RequestedRegion\": [\n \"eu-central-1\",\n \"eu-west-1\",\n \"eu-west-2\",\n \"eu-west-3\"\n ]\n }\n }\n }\n ]\n}"},{"comment_id":"583386","upvote_count":"6","timestamp":"1649519280.0","poster":"Malluchan","content":"Answer is C, \nwhenever question referring to restrict we must look for \"Effect\": \"Deny\". in this case deny if string is not equal to US-East-1. Basically deny all other region..."},{"timestamp":"1648084680.0","comments":[{"poster":"f4bi4n","timestamp":"1649523120.0","content":"yes, your are 100% right","comment_id":"583416","upvote_count":"1"}],"content":"Answer: B\nThe problem is \"Using AWS services\", not \"Access for CLI or SDK (Amazon EC2 API operations) only\".\n1. Specific Allow Related\n a. Allow only specific: Allow (you must use this)\n b. Reject only specifics: Deny\n2. Problem is \"Using AWS service\", not for CLI or SDK\n a. So the Condition is \"ec2:Region\" .\n - \"aws:RequestedRegion\" is for Amazon EC2 API operations (CLI or SDK).\n3. Reference URL\n a. https://docs.aws.amazon.com/en_us/IAM/latest/UserGuide/reference_policies_examples_ec2_region.html\n b. https://docs.aws.amazon.com/en_us/AWSEC2/latest/UserGuide/ExamplePolicies_EC2.html#iam-example-region","comment_id":"573986","poster":"rootblack","upvote_count":"2"},{"timestamp":"1643334240.0","comment_id":"534259","poster":"Radhaghosh","content":"Best Answer C\nDeny with is region is not us-east-1","upvote_count":"1"},{"poster":"Hariru","timestamp":"1637288340.0","content":"C, maybe the easiest question I saw here.","comment_id":"481288","upvote_count":"2"},{"comment_id":"480716","timestamp":"1637240760.0","upvote_count":"1","poster":"IMAHM","content":"Answer is C."},{"upvote_count":"1","comment_id":"441181","poster":"TollaMS","content":"{\n \"Version\": \"2012-10-17\",\n \"Statement\": [\n {\n \"Sid\": \"DenyAllOutsideRequestedRegions\",\n \"Effect\": \"Deny\",\n \"NotAction\": [\n \"cloudfront:*\",\n \"iam:*\",\n \"route53:*\",\n \"support:*\"\n ],\n \"Resource\": \"*\",\n \"Condition\": {\n \"StringNotEquals\": {\n \"aws:RequestedRegion\": [\n \"eu-central-1\",\n \"eu-west-1\",\n \"eu-west-2\",\n \"eu-west-3\"\n ]\n }\n }\n }\n ]\n} \nplease watch this","timestamp":"1636175880.0"},{"timestamp":"1636001400.0","upvote_count":"1","comment_id":"438885","poster":"mselway","content":"I think B is correct. Restrict access to services in a region.\nSo it has to be an allow, not a deny (ruling out C & D).\nThe condition is as listed in B"},{"comment_id":"437337","upvote_count":"1","poster":"kiev","content":"C for me and I looked for deny and string not equal aws request region is US EAST1","timestamp":"1635913380.0"},{"timestamp":"1635910800.0","poster":"vmalj","comment_id":"423490","upvote_count":"1","content":"Answer is C.\n\nReference here : https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_aws_deny-requested-region.html"},{"content":"C is correct, it is a tricky question, Restrict to use AWS service on one specific region only, so C is correct.","timestamp":"1635838740.0","poster":"Kdosec","comment_id":"400669","upvote_count":"1"},{"comment_id":"384412","comments":[{"upvote_count":"4","content":"an implicit deny is easily overriden by an explicit allow in any other region. u need to explicitly deny any action in any region other than us-east1, hence the combination of deny and string not equal . hope this help","poster":"alghoundar","comment_id":"538166","timestamp":"1643744940.0"}],"poster":"beebatov","content":"A. \nThereâ€™s IMPLICIT DENY by default that wouldnâ€™t allow any actions in other regions, we need to ALLOW resources in a specific region + StringEquals would take care of restricting it to US East 1","upvote_count":"3","timestamp":"1635520740.0"},{"poster":"sig","content":"A is correct due to \"implicit Deny\". Not C.","comments":[{"poster":"skipbaylessfor3","comment_id":"403607","timestamp":"1635886080.0","content":"A would work, but its not exactly least privilege, which is best practice. A would allow everything in the us-east-1 region. But we want to restrict the use of AWS services to the us-east-1 region, so the question's wording seems more geared towards restricting, i.e. an explicit deny, which is also least privilege","upvote_count":"5"}],"timestamp":"1635520260.0","upvote_count":"3","comment_id":"383703"},{"upvote_count":"2","comment_id":"381242","timestamp":"1635391740.0","content":"C - it says RESTRICT not ALLOW. 'A' is allowing but not restricting.","poster":"DerekKey"},{"timestamp":"1634955420.0","content":"Answer- C\nA-Does not deny other region from accessing. Need to deny all except traffic from us-east-1.\nB-\"ec2:Region\" is wrong.\nD-This will deny traffic from us-east-1","comment_id":"351575","upvote_count":"1","poster":"Daniel76"},{"comment_id":"348927","timestamp":"1634852640.0","poster":"Paimon","upvote_count":"1","content":"I mean.....it's obviously A. You want to allow any resource/action as long as it is requested in the region."},{"timestamp":"1634687280.0","content":"C\nDeny if Aws requested region not equal to us-east-1. The only solution which makes sense.","comment_id":"347505","upvote_count":"1","poster":"Fyg"},{"content":"It should be D, we need to restict in that region","timestamp":"1634496120.0","upvote_count":"1","poster":"iura","comment_id":"344454"},{"timestamp":"1634451480.0","content":"Restrict X to Y = only allow X do in Y\n-> C is answer\nA can be correct if it has not any explicit allow in resource based policies","comment_id":"338181","poster":"Hungdv","upvote_count":"4"},{"poster":"Naylz","timestamp":"1634200560.0","upvote_count":"2","comment_id":"334880","content":"Not sure why they would give A and C in the same question as both do the same thing. But I guess a deny rule is more secure than an allow rule."},{"upvote_count":"2","comment_id":"333866","timestamp":"1633768740.0","content":"This clearly shows that nobody is reading the question! It says restrict access to all services in a region, A is allow all services in a region so 100% wrong, B is 200% wrong as its mentioning ec2 region, C is 100% wrong as the effect is deny and the stringNOTequal variable makes it to allow it in the region and deny in all other regions, D is the absolute correct answer as the action is deny and the stringequal variable points to the actual region","poster":"lycan","comments":[{"comment_id":"344637","poster":"ramozo","upvote_count":"2","timestamp":"1634532060.0","content":"I agree with your explanation, except that the policy is using 'NOTAction : (*)'. 'Deny' with 'NotAction' would mean 'except' these actions, so, everything would be allowed for the region. It makes D a wrong answer, in summary, I do not see the right answer.","comments":[{"content":"I mend my comment. Now I understand better the question. Correct answer is C. Denying any action if the requested region (where the resource exists) is not us-east-1","comment_id":"344656","poster":"ramozo","timestamp":"1634538300.0","upvote_count":"3"}]},{"poster":"johnsm","timestamp":"1634962380.0","upvote_count":"4","comment_id":"351633","content":"I think you got lost in translation. Restrict the services to a region means you only want services to be allowed in that specific region ONLY. Between A and C i'd say C is the right answer as the policy evaluation order always starts with an explicit deny."}]},{"content":"C. Remembering that an explicit deny overrides an allow somewhere else.","poster":"Larsson","upvote_count":"4","timestamp":"1633712100.0","comments":[{"content":"Agree C is the correct answer. From \"least privilege\" perspective, you shall never use policy A, which allows everything in us-east-1","poster":"chengxu32","timestamp":"1633768740.0","comment_id":"331379","upvote_count":"3"}],"comment_id":"323957"},{"timestamp":"1633341480.0","comments":[{"upvote_count":"1","poster":"ChinkSantana","content":"Where did you see allow EC2 on A?","comment_id":"322369","timestamp":"1633443840.0"}],"upvote_count":"1","poster":"[Removed]","content":"Question ask to allow all service from the region , not just ec2, so C is correct","comment_id":"322129"},{"comment_id":"316810","poster":"cldy","timestamp":"1633223280.0","content":"A. \nFor C you need a separate Allow as well.","comments":[{"poster":"vernfwx","content":"it's saying restrict, didn't specifically ask to allow.","comment_id":"323372","timestamp":"1633656060.0","upvote_count":"1"}],"upvote_count":"2"},{"upvote_count":"1","poster":"[Removed]","timestamp":"1633219740.0","comment_id":"315926","content":"A and C both work.. Example for A: https://aws.amazon.com/blogs/security/easier-way-to-control-access-to-aws-regions-using-iam-policies/ and example for C: https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_aws_deny-requested-region.html"},{"content":"C and A are both correct","comment_id":"312940","upvote_count":"1","poster":"Nebolos","comments":[{"timestamp":"1632914700.0","content":"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_aws_deny-requested-region.html","comment_id":"312941","poster":"Nebolos","upvote_count":"2"}],"timestamp":"1632862740.0"},{"upvote_count":"3","content":"A.\nhttps://www.wellarchitectedlabs.com/cost/200_labs/200_2_cost_and_usage_governance/2_ec2_restrict_region/","poster":"JAWS1600","timestamp":"1632634620.0","comment_id":"311532"},{"upvote_count":"4","timestamp":"1632596220.0","comment_id":"310231","poster":"anitasonai1994","content":"I think C."}],"answer_ET":"B"},{"id":"robSxbn3ekyf8Fdvk1im","isMC":true,"url":"https://www.examtopics.com/discussions/amazon/view/1877-exam-aws-certified-security-specialty-topic-1-question-13/","answer_description":"","question_images":[],"unix_timestamp":1560947220,"question_text":"A water utility company uses a number of Amazon EC2 instances to manage updates to a fleet of 2,000 Internet of Things (IoT) field devices that monitor water quality. These devices each have unique access credentials.\nAn operational safety policy requires that access to specific credentials is independently auditable.\nWhat is the MOST cost-effective way to manage the storage of credentials?","question_id":35,"choices":{"B":"Use AWS Key Management System to store a master key, which is used to encrypt the credentials. The encrypted credentials are stored in an Amazon RDS instance.","A":"Use AWS Systems Manager to store the credentials as Secure Strings Parameters. Secure by using an AWS KMS key.","D":"Store the credentials in a JSON file on Amazon S3 with server-side encryption.","C":"Use AWS Secrets Manager to store the credentials."},"answer_ET":"A","topic":"1","discussion":[{"timestamp":"1632699840.0","upvote_count":"39","comments":[{"upvote_count":"6","timestamp":"1634468580.0","content":"Agreed, A is correct","poster":"cloudprincipal","comment_id":"38219"}],"content":"There is two possible answer for this question: SSM parameter store and secret manager.\nSince in the question it is mentioned \"What is the MOST cost-effective way to manage the storage of credentials?\" hence answer will be SSM parameter store, there is no charges for keeping password in SSM parameter store.","poster":"cloudguy365","comment_id":"9896"},{"timestamp":"1632585120.0","upvote_count":"22","poster":"DP15","comment_id":"9008","content":"A is correct! \nA secure string parameter is any sensitive data that needs to be stored and referenced in a secure manner. If you have data that you don't want users to alter or reference in plain text, such as passwords or license keys, create those parameters using the SecureString datatype. For the following scenarios-\n\nYou want to use data/parameters across AWS services without exposing the values as plain text in commands, functions, agent logs, or AWS CloudTrail logs.\nYou want to control who has access to sensitive data.\nYou want to be able to audit when sensitive data is accessed (AWS CloudTrail).\nYou want to encrypt your sensitive data and you want to bring your own encryption keys to manage access.\n\n**Most Cost-Effective Way**"},{"content":"Answer is A. as per AWS documentation, there is no charge from Parameter Store to create a SecureString parameter, but charges for use of AWS KMS encryption do apply. Hence its the most cost effective way to store secure strings. https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html","timestamp":"1718180880.0","poster":"salmantarik","upvote_count":"1","comment_id":"1228905"},{"upvote_count":"1","comment_id":"1166869","timestamp":"1709690100.0","poster":"Raphaello","content":"Selected Answer: A\nWithin the limit of SSM Parameter Store keys (10000). ,\nA is the most cost-effective solution."},{"upvote_count":"1","poster":"Benah","comment_id":"1005400","timestamp":"1694495280.0","content":"A is correct\nUse AWS Systems Manager to store the credentials as Secure Strings Parameters. Secure by using an AWS KMS key."},{"comment_id":"715984","poster":"gg12345","upvote_count":"4","content":"Selected Answer: A\na - Most cost effective\nSecrets manager is a great service for this use case - however is expensive, especially at this scale.","timestamp":"1668164640.0"},{"timestamp":"1666240920.0","content":"A is cost effective. SSM parameter store allow upto 10,000 secrets less than 4KB in size for free as standard parameters","upvote_count":"1","poster":"Qasimac","comment_id":"699553"},{"content":"Selected Answer: A\nA seems to be more cost effective than Secrets Manager. Check this link for a comparison: https://medium.com/awesome-cloud/aws-difference-between-secrets-manager-and-parameter-store-systems-manager-f02686604eae","upvote_count":"1","comment_id":"641468","timestamp":"1659476580.0","poster":"dcasabona"},{"upvote_count":"1","poster":"lotfi50","timestamp":"1654616220.0","comment_id":"612809","content":"Selected Answer: A\nA is correct!"},{"comment_id":"353762","content":"Ans:A 100%","poster":"sanjaym","upvote_count":"1","timestamp":"1636167780.0"},{"content":"\"MOST cost effective way\" is the key. Answer : A","comment_id":"331559","timestamp":"1636082940.0","poster":"durmusc","upvote_count":"1"},{"upvote_count":"1","poster":"lferrara","comment_id":"226837","content":"A is the best answer.","timestamp":"1635882060.0"},{"poster":"devjava","content":"Ans > A","timestamp":"1635862920.0","upvote_count":"1","comment_id":"221779"},{"poster":"AfricanCloudGuru","upvote_count":"1","content":"Ans (A)\nBecause SSM create Parameters using Secure String and also its cost friendly \n\nhttps://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html\n\nhttps://aws.amazon.com/systems-manager/pricing/","timestamp":"1635821160.0","comment_id":"207383"},{"content":"A is correct","upvote_count":"1","poster":"enthuguys","comment_id":"154556","timestamp":"1635264360.0"},{"comment_id":"103812","poster":"samCarson","comments":[{"content":"The question does not ask about encryption and KMS\nBut A seems correct","upvote_count":"1","poster":"OhCobblers","timestamp":"1635341760.0","comment_id":"178699"}],"timestamp":"1635158760.0","content":"A is correct and is MOST cost effective way. No charge for storing credentials. You just have to pay the KMS key used for parameters using SecureString ($1 per month). Way cheaper.\n\nThough you can also use the \"Secret Manager\" to store the credentials but there is $0.40 per secret per month + $0.05 per 10,000 API calls cost that you need to consider. Not cost effective if you have thousand of credentials to keep.","upvote_count":"4"},{"poster":"RajeshNayyar","content":"A is correct","upvote_count":"1","comment_id":"98964","timestamp":"1634926200.0"},{"poster":"tomtom2020","content":"I would say \"A\"","comment_id":"70738","timestamp":"1634846940.0","upvote_count":"1"},{"poster":"RaySmith","upvote_count":"1","comment_id":"68096","timestamp":"1634577420.0","content":"A is correct"},{"comment_id":"41590","poster":"henry76","timestamp":"1634469120.0","content":"System parameter syore + KMs for better security. The answer is A","upvote_count":"1"},{"poster":"AnNguyen","upvote_count":"1","content":"Answer is A: Using standard parameter for cost effective\nhttps://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-advanced-parameters.html","comment_id":"34839","timestamp":"1633617360.0"},{"comment_id":"10790","timestamp":"1633300380.0","poster":"INASR","upvote_count":"6","content":"A is sure correct, the most cost-efficient way as stated in the question is using SSM standard parameter store which allows 10,000 parameters for free. https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-advanced-parameters.html"},{"timestamp":"1632863700.0","comment_id":"10289","content":"Agreed. Correct is A.\nAWS System Manager allow you to separate your secrets and configuration data from your code by using parameters, with or without encryption, and then reference those parameters from a number of other AWS services. Ref- https://docs.aws.amazon.com/systems-manager/latest/userguide/what-is-systems-manager.html","poster":"josellama2000","upvote_count":"6"},{"content":"A ! Correct","comment_id":"4951","upvote_count":"4","timestamp":"1632500520.0","poster":"Wpcorgan"},{"upvote_count":"3","comment_id":"2917","content":"the ans should be B","poster":"alng","timestamp":"1632355680.0"}],"exam_id":29,"answer":"A","answer_images":[],"answers_community":["A (100%)"],"timestamp":"2019-06-19 14:27:00"}],"exam":{"isBeta":false,"isImplemented":true,"isMCOnly":false,"provider":"Amazon","name":"AWS Certified Security - Specialty","id":29,"lastUpdated":"11 Apr 2025","numberOfQuestions":509},"currentPage":7},"__N_SSP":true}