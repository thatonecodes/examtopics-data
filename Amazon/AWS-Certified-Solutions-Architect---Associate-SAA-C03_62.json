{"pageProps":{"questions":[{"id":"KbjEFex182Jo67rEYecN","answer":"B","unix_timestamp":1676983980,"choices":{"D":"Move the data objects to S3 One Zone-Infrequent Access (S3 One Zone-IA) immediately.","A":"Move the data objects to S3 Glacier Deep Archive after 30 days.","B":"Move the data objects to S3 Standard-Infrequent Access (S3 Standard-IA) after 30 days.","C":"Move the data objects to S3 One Zone-Infrequent Access (S3 One Zone-IA) after 30 days."},"isMC":true,"answer_images":[],"answer_description":"","question_images":[],"exam_id":31,"question_id":306,"question_text":"A company stores its data objects in Amazon S3 Standard storage. A solutions architect has found that 75% of the data is rarely accessed after 30 days. The company needs all the data to remain immediately accessible with the same high availability and resiliency, but the company wants to minimize storage costs.\n\nWhich storage solution will meet these requirements?","answer_ET":"B","url":"https://www.examtopics.com/discussions/amazon/view/100229-exam-aws-certified-solutions-architect-associate-saa-c03/","answers_community":["B (100%)"],"discussion":[{"comment_id":"820668","timestamp":"1677252900.0","content":"Selected Answer: B\nNeeds immediate accessibility after 30days, IF they need to be accessed.","poster":"Lonojack","upvote_count":"5"},{"upvote_count":"5","comment_id":"858123","content":"Highly available so One Zone IA is out the question\nGlacier Deep archive isn't immediately accessible 12-48 hours\nB is the answer.","poster":"Piccalo","timestamp":"1680367320.0"},{"upvote_count":"2","timestamp":"1731101040.0","content":"Selected Answer: B\nKey - high availability and resiliency\nKey-the data to remain immediately accessible \n\nIts not C or D because its One zone \nits no B even if glacier is cheaper the problem is that data must be immediately accesible so the answer is B","comment_id":"1308929","poster":"Danilus"},{"upvote_count":"2","timestamp":"1721227380.0","comment_id":"1249696","content":"Option B","poster":"Aru_1994"},{"poster":"Apexakil1996","content":"One -zone -infrequent access cannot be the answer because it requires high availability so standard infrequent access should be the answer","upvote_count":"5","comment_id":"1102756","timestamp":"1703177400.0"},{"poster":"TariqKipkemei","comment_id":"1044643","content":"Selected Answer: B\nhigh availability, resiliency = multi AZ\n75% of the data is rarely accessed but remain immediately accessible = Standard-Infrequent Access","upvote_count":"4","timestamp":"1697429340.0"},{"content":"Selected Answer: B\nThe correct answer is B.\n\nS3 Standard-IA is a storage class that is designed for infrequently accessed data. It offers lower storage costs than S3 Standard, but it has a retrieval latency of 1-5 minutes.","upvote_count":"4","comment_id":"998492","timestamp":"1693827240.0","poster":"Guru4Cloud"},{"content":"Selected Answer: B\nS3 Glacier Deep Archive is intended for data that is rarely accessed and can tolerate retrieval times measured in hours. Moving data to S3 One Zone-IA immediately would not meet the requirement of immediate accessibility with the same high availability and resiliency.","poster":"elearningtakai","timestamp":"1680185400.0","upvote_count":"2","comment_id":"855856"},{"content":"The answer should be C.\nS3 One Zone-IA is for data that is accessed less frequently but requires rapid access when needed. Unlike other S3 Storage Classes which store data in a minimum of three Availability Zones (AZs), S3 One Zone-IA stores data in a single AZ and costs 20% less than S3 Standard-IA.\n\n\nhttps://aws.amazon.com/s3/storage-classes/#:~:text=S3%20One%20Zone%2DIA%20is,less%20than%20S3%20Standard%2DIA.","poster":"KS2020","comment_id":"843487","upvote_count":"1","comments":[{"poster":"shanwford","upvote_count":"3","timestamp":"1679901840.0","comment_id":"851862","content":"The Question emphasises to kepp same high availability class - S3 One Zone-IA doesnt support multiple Availability Zone data resilience model like S3 Standard-Infrequent Access."}],"timestamp":"1679207760.0"},{"comment_id":"818453","timestamp":"1677101340.0","content":"Selected Answer: B\nS3 Standard-Infrequent Access after 30 days","poster":"bdp123","upvote_count":"3"},{"upvote_count":"5","comment_id":"816582","poster":"NolaHOla","timestamp":"1676983980.0","content":"B\nOption B - Move the data objects to S3 Standard-Infrequent Access (S3 Standard-IA) after 30 days - will meet the requirements of keeping the data immediately accessible with high availability and resiliency, while minimizing storage costs. S3 Standard-IA is designed for infrequently accessed data, and it provides a lower storage cost than S3 Standard, while still offering the same low latency, high throughput, and high durability as S3 Standard."}],"timestamp":"2023-02-21 13:53:00","topic":"1"},{"id":"ahv0xMzQUeUk6JhbBS0d","topic":"1","discussion":[{"poster":"Steve_4542636","comment_id":"827528","upvote_count":"7","content":"Selected Answer: AD\nA because Elasticache, despite being ideal for leaderboards per Amazon, doesn't cache at edge locations. D because FSx has higher performance for low latency needs.\n\nhttps://www.techtarget.com/searchaws/tip/Amazon-FSx-vs-EFS-Compare-the-AWS-file-services\n\n\"FSx is built for high performance and submillisecond latency using solid-state drive storage volumes. This design enables users to select storage capacity and latency independently. Thus, even a subterabyte file system can have 256 Mbps or higher throughput and support volumes up to 64 TB.\"","comments":[{"comment_id":"838540","timestamp":"1678766400.0","poster":"Nel8","upvote_count":"2","content":"Just to add, ElastiCache is use in front of AWS database."},{"content":"Why not EFS?","comment_id":"1012618","timestamp":"1695245160.0","upvote_count":"1","poster":"baba365"}],"timestamp":"1677798360.0"},{"comment_id":"998489","content":"Selected Answer: AD\nThe reasons are:\n\nStoring static files in S3 with CloudFront provides durability, high availability, and low latency by caching at edge locations.\nFSx for Windows File Server provides a fully managed Windows native file system that can be accessed from the Windows EC2 instances to share server-side code. It is designed for high availability and scales up to 10s of GBPS throughput.\nEFS and EBS volumes can be attached to a single AZ. FSx and S3 are replicated across AZs for high availability.","poster":"Guru4Cloud","upvote_count":"6","timestamp":"1693826640.0"},{"upvote_count":"2","content":"Selected Answer: AD\nKey: Static files and dynamic server-side code.\nKey: Windows Server.\n\nThe answer is A because S3 is for static files, and CloudFront is a CDN.\n\nThe second answer is D because FSx works for Windows File Server.\n\nIt's not C because EFS is just for Linux.\nIt's not E because EBS doesn't share files between EC2 instances.","comment_id":"1308933","timestamp":"1731101640.0","poster":"Danilus"},{"upvote_count":"2","content":"Selected Answer: AD\nA because Elasticache doesn't cache at edge locations. D because FSx has higher performance for low latency needs.","poster":"rodrigoleoncio","comment_id":"1215572","timestamp":"1716366840.0"},{"upvote_count":"2","timestamp":"1705597920.0","poster":"awsgeek75","comment_id":"1126073","content":"The question and options are badly worded. How does (D) storing server side code on a file server makes it executable?"},{"upvote_count":"3","timestamp":"1705141920.0","content":"you can't mount efs on windows","poster":"4fad2f8","comment_id":"1121511"},{"upvote_count":"5","poster":"WherecanIstart","comment_id":"843393","content":"Selected Answer: AD\nA & D for sure","timestamp":"1679195640.0"},{"upvote_count":"2","timestamp":"1677384780.0","content":"It is obvious that A and D.","poster":"KZM","comment_id":"822065"},{"comment_id":"818455","upvote_count":"2","content":"Selected Answer: AD\nboth A and D seem correct","timestamp":"1677101340.0","poster":"bdp123"},{"comment_id":"816584","upvote_count":"2","content":"A and D seems correct","poster":"NolaHOla","timestamp":"1676984100.0"}],"question_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/100230-exam-aws-certified-solutions-architect-associate-saa-c03/","choices":{"A":"Store the static files on Amazon S3. Use Amazon CloudFront to cache objects at the edge.","C":"Store the server-side code on Amazon Elastic File System (Amazon EFS). Mount the EFS volume on each EC2 instance to share the files.","D":"Store the server-side code on Amazon FSx for Windows File Server. Mount the FSx for Windows File Server volume on each EC2 instance to share the files.","B":"Store the static files on Amazon S3. Use Amazon ElastiCache to cache objects at the edge.","E":"Store the server-side code on a General Purpose SSD (gp2) Amazon Elastic Block Store (Amazon EBS) volume. Mount the EBS volume on each EC2 instance to share the files."},"unix_timestamp":1676984100,"timestamp":"2023-02-21 13:55:00","question_id":307,"answer_description":"","isMC":true,"answers_community":["AD (100%)"],"answer":"AD","answer_images":[],"answer_ET":"AD","question_text":"A gaming company is moving its public scoreboard from a data center to the AWS Cloud. The company uses Amazon EC2 Windows Server instances behind an Application Load Balancer to host its dynamic application. The company needs a highly available storage solution for the application. The application consists of static files and dynamic server-side code.\n\nWhich combination of steps should a solutions architect take to meet these requirements? (Choose two.)","exam_id":31},{"id":"QAr3KTmhZu1iIPyL9Bra","question_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/100231-exam-aws-certified-solutions-architect-associate-saa-c03/","answer_description":"","answer":"C","question_text":"A social media company runs its application on Amazon EC2 instances behind an Application Load Balancer (ALB). The ALB is the origin for an Amazon CloudFront distribution. The application has more than a billion images stored in an Amazon S3 bucket and processes thousands of images each second. The company wants to resize the images dynamically and serve appropriate formats to clients.\n\nWhich solution will meet these requirements with the LEAST operational overhead?","isMC":true,"exam_id":31,"discussion":[{"poster":"NolaHOla","upvote_count":"21","content":"Use a Lambda@Edge function with an external image management library. Associate the Lambda@Edge function with the CloudFront behaviors that serve the images.\n\nUsing a Lambda@Edge function with an external image management library is the best solution to resize the images dynamically and serve appropriate formats to clients. Lambda@Edge is a serverless computing service that allows running custom code in response to CloudFront events, such as viewer requests and origin requests. By using a Lambda@Edge function, it's possible to process images on the fly and modify the CloudFront response before it's sent back to the client. Additionally, Lambda@Edge has built-in support for external libraries that can be used to process images. This approach will reduce operational overhead and scale automatically with traffic.","timestamp":"1692615420.0","comment_id":"816586"},{"upvote_count":"9","timestamp":"1713241200.0","poster":"TariqKipkemei","comment_id":"1044649","content":"Selected Answer: C\nThe moment there is a need to implement some logic at the CDN think Lambda@Edge."},{"poster":"Guru4Cloud","comment_id":"998484","timestamp":"1709558040.0","upvote_count":"4","content":"Selected Answer: C\nThe correct answer is C.\n\nA Lambda@Edge function is a serverless function that runs at the edge of the CloudFront network. This means that the function is executed close to the user, which can improve performance.\nAn external image management library can be used to resize images and to serve the appropriate format.\nAssociating the Lambda@Edge function with the CloudFront behaviors that serve the images ensures that the function is executed for all requests that are served by those behaviors."},{"content":"Selected Answer: B\nIf the user asks for the most optimized image format (JPEG,WebP, or AVIF) using the directive format=auto, CloudFront Function will select the best format based on the Accept header present in the request.\n\nLatest documentation: https://aws.amazon.com/blogs/networking-and-content-delivery/image-optimization-using-amazon-cloudfront-and-aws-lambda/","comment_id":"998054","poster":"BrijMohan08","timestamp":"1709520060.0","upvote_count":"3","comments":[{"timestamp":"1719738600.0","content":"But a policy alone cannot resize images.","poster":"pentium75","comment_id":"1109631","upvote_count":"1"}]},{"upvote_count":"5","content":"Selected Answer: C\nhttps://aws.amazon.com/cn/blogs/networking-and-content-delivery/resizing-images-with-amazon-cloudfront-lambdaedge-aws-cdn-blog/","poster":"bdp123","comment_id":"818459","timestamp":"1692732660.0"},{"comment_id":"816640","upvote_count":"3","timestamp":"1692619140.0","poster":"everfly","content":"Selected Answer: C\nhttps://aws.amazon.com/cn/blogs/networking-and-content-delivery/resizing-images-with-amazon-cloudfront-lambdaedge-aws-cdn-blog/"}],"choices":{"C":"Use a Lambda@Edge function with an external image management library. Associate the Lambda@Edge function with the CloudFront behaviors that serve the images.","A":"Install an external image management library on an EC2 instance. Use the image management library to process the images.","B":"Create a CloudFront origin request policy. Use the policy to automatically resize images and to serve the appropriate format based on the User-Agent HTTP header in the request.","D":"Create a CloudFront response headers policy. Use the policy to automatically resize images and to serve the appropriate format based on the User-Agent HTTP header in the request."},"answers_community":["C (88%)","13%"],"topic":"1","question_id":308,"answer_ET":"C","unix_timestamp":1676984220,"timestamp":"2023-02-21 13:57:00","answer_images":[]},{"id":"4w7i28jHTFqzG8sEvhRK","answer":"C","unix_timestamp":1676984520,"choices":{"B":"Use the aws:SecureTransport condition on S3 bucket policies to allow only encrypted connections over HTTPS (TLS). Configure default encryption for each S3 bucket to use server-side encryption with S3 managed encryption keys (SSE-S3). Assign the compliance team to manage the SSE-S3 keys.","A":"Create a public SSL/TLS certificate in AWS Certificate Manager (ACM). Associate the certificate with Amazon S3. Configure default encryption for each S3 bucket to use server-side encryption with AWS KMS keys (SSE-KMS). Assign the compliance team to manage the KMS keys.","C":"Use the aws:SecureTransport condition on S3 bucket policies to allow only encrypted connections over HTTPS (TLS). Configure default encryption for each S3 bucket to use server-side encryption with AWS KMS keys (SSE-KMS). Assign the compliance team to manage the KMS keys.","D":"Use the aws:SecureTransport condition on S3 bucket policies to allow only encrypted connections over HTTPS (TLS). Use Amazon Macie to protect the sensitive data that is stored in Amazon S3. Assign the compliance team to manage Macie."},"isMC":true,"answer_images":[],"answer_description":"","question_images":[],"exam_id":31,"question_id":309,"answer_ET":"C","question_text":"A hospital needs to store patient records in an Amazon S3 bucket. The hospital’s compliance team must ensure that all protected health information (PHI) is encrypted in transit and at rest. The compliance team must administer the encryption key for data at rest.\n\nWhich solution will meet these requirements?","url":"https://www.examtopics.com/discussions/amazon/view/100232-exam-aws-certified-solutions-architect-associate-saa-c03/","answers_community":["C (89%)","9%"],"discussion":[{"comments":[{"upvote_count":"4","content":"Perfect explanation. I Agree","comment_id":"820640","timestamp":"1692882000.0","poster":"Lonojack"}],"content":"Option C is correct because it allows the compliance team to manage the KMS keys used for server-side encryption, thereby providing the necessary control over the encryption keys. Additionally, the use of the \"aws:SecureTransport\" condition on the bucket policy ensures that all connections to the S3 bucket are encrypted in transit.\noption B might be misleading but using SSE-S3, the encryption keys are managed by AWS and not by the compliance team","upvote_count":"27","comment_id":"816594","poster":"NolaHOla","timestamp":"1692615720.0"},{"poster":"pentium75","upvote_count":"13","timestamp":"1719738780.0","content":"Selected Answer: C\nNot A, Certificate Manager has nothing to do with S3\nNot B, SSE-S3 does not allow compliance team to manage the key\nNot D, Macie is for identifying sensitive data, not protecting it","comment_id":"1109634"},{"upvote_count":"3","content":"Selected Answer: C\nMacie does not encrypt the data like the question is asking\nhttps://docs.aws.amazon.com/macie/latest/user/what-is-macie.html\n\nAlso, SSE-S3 encryption is fully managed by AWS so the Compliance Team can't administer this.","timestamp":"1709557860.0","comment_id":"998481","poster":"Guru4Cloud"},{"poster":"Yadav_Sanjay","content":"Selected Answer: C\nD - Can't be because - Amazon Macie is a data security service that uses machine learning (ML) and pattern matching to discover and help protect your sensitive data.\nMacie discovers sensitive information, can help in protection but can't protect","comment_id":"901236","timestamp":"1700320920.0","upvote_count":"3"},{"timestamp":"1699770540.0","poster":"TariqKipkemei","content":"Selected Answer: C\nB can work if they do not want control over encryption keys.","upvote_count":"2","comment_id":"895637"},{"comments":[{"timestamp":"1719738720.0","upvote_count":"3","content":"ACM is for website certificates, has nothing to do with S3.","comment_id":"1109633","poster":"pentium75"},{"comment_id":"873186","poster":"Shrestwt","content":"ACM cannot be integrated with Amazon S3 bucket directly.","upvote_count":"3","timestamp":"1697587500.0"}],"poster":"Russs99","timestamp":"1695852180.0","upvote_count":"1","content":"Selected Answer: A\nOption A proposes creating a public SSL/TLS certificate in AWS Certificate Manager and associating it with Amazon S3. This step ensures that data is encrypted in transit. Then, the default encryption for each S3 bucket will be configured to use server-side encryption with AWS KMS keys (SSE-KMS), which will provide encryption at rest for the data stored in S3. In this solution, the compliance team will manage the KMS keys, ensuring that they control the encryption keys for data at rest.","comment_id":"852517"},{"poster":"Bofi","comment_id":"850306","timestamp":"1695654540.0","upvote_count":"2","content":"Selected Answer: C\nOption C seems to be the correct answer, option A is also close but ACM cannot be integrated with Amazon S3 bucket directly, hence, u can not attached TLS to S3. You can only attached TLS certificate to ALB, API Gateway and CloudFront and maybe Global Accelerator but definitely NOT EC2 instance and S3 bucket"},{"comment_id":"841252","timestamp":"1694880000.0","poster":"CapJackSparrow","upvote_count":"3","content":"Selected Answer: C\nD makes no sense."},{"upvote_count":"3","poster":"Dody","content":"Selected Answer: C\nCorrect Answer is \"C\"\n“D” is not correct because Amazon Macie securely stores your data at rest using AWS encryption solutions. Macie encrypts data, such as findings, using an AWS managed key from AWS Key Management Service (AWS KMS). However, in the question there is a requirement that the compliance team must administer the encryption key for data at rest.\nhttps://docs.aws.amazon.com/macie/latest/user/data-protection.html","comment_id":"833528","timestamp":"1694217060.0"},{"comment_id":"831501","poster":"cegama543","timestamp":"1694047740.0","upvote_count":"2","content":"Selected Answer: C\nOption C will meet the requirements.\n\nExplanation:\n\nThe compliance team needs to administer the encryption key for data at rest in order to ensure that protected health information (PHI) is encrypted in transit and at rest. Therefore, we need to use server-side encryption with AWS KMS keys (SSE-KMS). The default encryption for each S3 bucket can be configured to use SSE-KMS to ensure that all new objects in the bucket are encrypted with KMS keys.\n\nAdditionally, we can configure the S3 bucket policies to allow only encrypted connections over HTTPS (TLS) using the aws:SecureTransport condition. This ensures that the data is encrypted in transit."},{"content":"Selected Answer: C\nWe must provide encrypted in transit and at rest. Macie is needed to discover and recognize any PII or Protected Health Information. We already know that the hospital is working with the sensitive data ) so protect them witn KMS and SSL. Answer D is unnecessary","timestamp":"1693828140.0","comment_id":"829004","upvote_count":"2","poster":"Karlos99"},{"upvote_count":"3","comment_id":"828489","timestamp":"1693780440.0","poster":"Steve_4542636","content":"Selected Answer: C\nMacie does not encrypt the data like the question is asking\nhttps://docs.aws.amazon.com/macie/latest/user/what-is-macie.html\n\nAlso, SSE-S3 encryption is fully managed by AWS so the Compliance Team can't administer this."},{"content":"Selected Answer: C\nC [Correct]: Ensures Https only traffic (encrypted transit), Enables compliance team to govern encryption key.\nD [Incorrect]: Misleading; PHI is required to be encrypted not discovered. Maice is a discovery service. (https://aws.amazon.com/macie/)","timestamp":"1693749840.0","comment_id":"828113","upvote_count":"5","poster":"Abhineet9148232"},{"content":"Selected Answer: D\nCorrect answer should be D. \"Use Amazon Macie to protect the sensitive data...\"\nAs requirement says \"The hospitals's compliance team must ensure that all protected health information (PHI) is encrypted in transit and at rest.\"\n\nMacie protects personal record such as PHI. Macie provides you with an inventory of your S3 buckets, and automatically evaluates and monitors the buckets for security and access control. If Macie detects a potential issue with the security or privacy of your data, such as a bucket that becomes publicly accessible, Macie generates a finding for you to review and remediate as necessary.","poster":"Nel8","comment_id":"824375","timestamp":"1693188600.0","upvote_count":"4"},{"poster":"Drayen25","timestamp":"1692949260.0","content":"Option C should be","upvote_count":"3","comment_id":"821350"}],"timestamp":"2023-02-21 14:02:00","topic":"1"},{"id":"044W4ZJ4N3bRJ9BX9vLN","answer_description":"","exam_id":31,"discussion":[{"poster":"pooppants","timestamp":"1665408240.0","upvote_count":"71","comment_id":"691176","comments":[{"timestamp":"1686500520.0","upvote_count":"5","content":"The answer is C, because \"Server-side encryption with Amazon S3 managed keys (SSE-S3) is the base level of encryption configuration for every bucket in Amazon S3. If you want to use a different type of default encryption, you can also specify server-side encryption with AWS Key Management Service (AWS KMS) keys (SSE-KMS) or customer-provided keys (SSE-C)\"\n\nBy using SSE-KMS, you can encrypt the data stored in the S3 buckets with a customer managed KMS key. This ensures that the data is protected and allows you to have control over the encryption key. By creating an S3 bucket in each Region and configuring replication between them, you can have data and key redundancy in both Regions.","comment_id":"920835","comments":[{"content":"Option B, AWS KMS supports multi-Region keys, which are AWS KMS keys in different AWS Regions that can be used interchangeably – as though you had the same key in multiple Regions. Each set of related multi-Region keys has the same key material and key ID, so you can encrypt data in one AWS Region and decrypt it in a different AWS Region without re-encrypting or making a cross-Region call to AWS KMS.\nYou can use multi-Region keys with client-side encryption libraries, such as the AWS Encryption SDK, the DynamoDB Encryption Client, and Amazon S3 client-side encryption. For an example of using multi-Region keys with Amazon DynamoDB global tables and the DynamoDB Encryption Client, see Encrypt global data client-side with AWS KMS multi-Region keys in the AWS Security Blog. https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html","timestamp":"1691531160.0","comment_id":"976058","poster":"Clouddon","upvote_count":"7"},{"upvote_count":"1","poster":"aatikah","timestamp":"1734013680.0","content":"Does NOT meet the requirement of using a customer managed KMS key","comment_id":"1325664"}],"poster":"hypnozz"},{"content":"Amazon S3 cross-region replication decrypts and re-encrypts data under a KMS key in the destination Region, even when replicating objects protected by a multi-Region key. So stating that Amazon S3 cross-region replication decrypts and re-encrypts data under a KMS key in the destination Region, even when replicating objects protected by a multi-Region key is required is incorrect","timestamp":"1668977220.0","comments":[{"poster":"thanhvx1","timestamp":"1680589800.0","comment_id":"860717","content":"Option B involves configuring the application to use client-side encryption, which can increase the operational overhead of managing and securing the keys.","upvote_count":"2"},{"content":"@magazz: it's not true then. Based on the document from AWS https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-config-for-kms-objects.html , we will need to setup the replication rule with destination KMS. In order to have the key available in more than 2, then multi-region key should be required. But I'm still not favor option B - we can use server-side when why wasting effort to do client side encryption.","comments":[{"content":"I would say it's true... Not sure the previous one say \"not true\" :D.","upvote_count":"1","comments":[{"content":"It's not clear what you are saying. Are you saying that B is correct or D is correct?","comment_id":"732787","timestamp":"1669909920.0","comments":[{"upvote_count":"2","comment_id":"766007","timestamp":"1672858320.0","poster":"karbob","content":":D => is smile i thought"}],"upvote_count":"2","poster":"JayBee65"}],"poster":"TuLe","timestamp":"1669515600.0","comment_id":"727893"}],"timestamp":"1669515540.0","poster":"TuLe","comment_id":"727892","upvote_count":"2"}],"comment_id":"722996","upvote_count":"5","poster":"magazz"},{"poster":"Edwars","upvote_count":"3","content":"I'd say D because multi-region keys can be used with server side encryption as well.\n\n\"Multi-Region keys are supported in the AWS KMS console, the AWS KMS API, the AWS Encryption SDK, Amazon DynamoDB Encryption Client, and Amazon S3 Encryption Client. AWS services also let you configure multi-Region keys for server-side encryption in case you want the same key to protect data that needs both server-side and client-side encryption.\"\nhttps://aws.amazon.com/blogs/security/encrypt-global-data-client-side-with-aws-kms-multi-region-keys/","comment_id":"1223533","timestamp":"1717411260.0"},{"comments":[{"comment_id":"1280986","poster":"babayomi","content":"Note, The question did not ask for server side encryption, It stated Customer manages encryption. So reason why Customer side encryption makes the solution much easier and applicable. Hence B as an answer","timestamp":"1725893460.0","upvote_count":"1"},{"content":"It says encrypt all data and the data originates from the application. Making it B","poster":"kelmryan1","upvote_count":"1","timestamp":"1714758900.0","comment_id":"1206233"}],"poster":"Instantqueue","upvote_count":"8","timestamp":"1696893960.0","content":"It’s not correct because the question asks for server side encryption, not client side (before the objects reach the bucket).","comment_id":"1039017"},{"comments":[{"timestamp":"1725893580.0","poster":"babayomi","upvote_count":"2","comment_id":"1280987","content":"Note, The question did not ask for server side encryption, It stated Customer manages encryption. So reason why Customer side encryption makes the solution much easier and applicable. Hence B as an answer"},{"comments":[],"poster":"0203b0f","content":"Answer is D : This option aligns with the requirement to use a customer-managed KMS key for encryption.\nIt also ensures that the same KMS key is used for encryption and decryption across both AWS Regions, as required.\nBy using SSE-KMS, you can ensure that encryption keys are managed by AWS KMS, providing greater control and security over the encryption process.\nConfiguring replication between the S3 buckets ensures that data is synchronized across both regions.\nThis approach minimizes operational overhead while meeting the specified requirements.","comment_id":"1207229","upvote_count":"4","timestamp":"1714979640.0"},{"poster":"kelmryan1","content":"The SAME key would exist in both regions","comment_id":"1206234","timestamp":"1714758960.0","upvote_count":"1"},{"upvote_count":"4","content":"Each set of related multi-Region keys has the same key material and key ID, so you can encrypt data in one AWS Region and decrypt it in a different AWS Region without re-encrypting or making a cross-Region call to AWS KMS.","timestamp":"1697610060.0","comment_id":"1046623","poster":"sakurali"}],"poster":"sohailn","comment_id":"976217","content":"Absoutely D is the right one because s3 kms multi region as an individual key so you must first decrypt in source bucket and then re-encrypt in target bucket","timestamp":"1691553180.0","upvote_count":"6"},{"content":"KMS multi-region keys are typically used when you need to enable cross-Region replication of encrypted data","upvote_count":"1","comment_id":"1098408","timestamp":"1702751700.0","poster":"Johan_jelly"},{"content":"AWS services that integrate with AWS KMS for encryption at rest or digital signatures currently treat multi-Region keys as though they were single-Region keys. They might re-wrap or re-encrypt data moved between Regions. For example, Amazon S3 cross-region replication decrypts and re-encrypts data under a KMS key in the destination Region, even when replicating objects protected by a multi-Region key.","poster":"dwx101","comment_id":"1023469","timestamp":"1696282980.0","upvote_count":"3"}],"content":"Selected Answer: B\nKMS Multi-region keys are required https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html"},{"upvote_count":"68","poster":"KJa","comment_id":"692906","comments":[{"poster":"th3cookie","comment_id":"720210","comments":[{"content":"\"The data in both S3 buckets must be encrypted and decrypted with the same KMS key\"\nClient side encryption means that key is generated in from the cient without storing that in the KMS...","poster":"kakka22","upvote_count":"7","timestamp":"1680550140.0","comment_id":"860294"}],"timestamp":"1668660720.0","upvote_count":"14","content":"How does client side encryption increase OPERATIONAL overhead? Do you think every connected client is sitting there with gpg cli, decrypting/encrypting every packet that comes in/out? No, it's done via SDK -> https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/introduction.html\n\nThe correct answer is B because that's the only way to actually get the same key across multiple regions with minimal operational overhead"},{"comment_id":"693495","poster":"mattlai","upvote_count":"1","content":"fun joke, if u dont do encryption on client side, where else could it be?","comments":[{"poster":"Newptone","upvote_count":"7","comments":[{"comment_id":"712757","upvote_count":"2","poster":"Newptone","content":"Sorry for the typo, I mean option D.","timestamp":"1667787300.0"}],"timestamp":"1667787120.0","content":"It could be server side. For client side, the application need to finish the encryption and decryption by itself. So S3 object encryption on the server side is less operational overhead. https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingClientSideEncryption.html\n\nBut for option B, the major issue is if you create KMS keys in 2 regions, they can not be the same.","comment_id":"712756"}],"timestamp":"1665624060.0"},{"upvote_count":"2","timestamp":"1691531340.0","poster":"Clouddon","content":"Kindly point at where server-side encryption support multi-region. It is only mention on the aws blog that client-side support multi-region.","comment_id":"976059"},{"content":"The data in both S3 buckets must be encrypted and decrypted with the same KMS key. \nAWS KMS supports multi-Region keys, which are AWS KMS keys in different AWS Regions that can be used interchangeably – as though you had the same key in multiple Regions. \n\"as though\" means it's different.\nSo I agree with B","poster":"BoboChow","timestamp":"1665723300.0","upvote_count":"15","comments":[{"poster":"BoboChow","timestamp":"1665723720.0","comment_id":"694503","content":"key change across regions unless you use multi-Region keys","upvote_count":"2"},{"comment_id":"1105033","upvote_count":"1","content":"B includes replicating the data in the S3 buckets, which is not mentioned anywhere in the stem. It says that you need to store data in two buckets, not that you need to replicate content between buckets.","comments":[{"upvote_count":"1","content":"All the choices involve replication between the buckets.","poster":"Drew3000","timestamp":"1710032820.0","comment_id":"1169976"}],"timestamp":"1703482440.0","poster":"pentium75"}],"comment_id":"694498"}],"timestamp":"1665567300.0","content":"Selected Answer: D\nCannot be A - question says customer managed key\nCannot B - client side encryption is operational overhead\nCannot C -as it says SSE-S3 instead of customer managed\nso the answer is D though it required one time setup of keys"},{"upvote_count":"1","poster":"Yak_Yeti","content":"Selected Answer: B\nD says \"Create a customer managed KMS key and an S3 bucket in each Region.\" If there are keys created in both regions, then the keys are not the same. If it said create a multi region key and synch it, then I would pick D.","comment_id":"1410702","timestamp":"1743040680.0"},{"poster":"SleeplessHossam","upvote_count":"1","comment_id":"1399065","content":"Selected Answer: B\nI was confused which to choose, B or D, but someone in discussion mentioned really important point, D suggests creating two keys and two regions, which they can't be the same Key, so D of course is not the correct answer.","timestamp":"1742077320.0"},{"upvote_count":"1","comment_id":"1361807","poster":"Anastesas","content":"Selected Answer: D\nGiven the requirements to encrypt and decrypt data stored in S3 buckets in two AWS Regions using the same KMS key with minimal operational overhead, server-side encryption with AWS KMS (SSE-KMS) is the most suitable solution. It provides simplicity, seamless integration, centralized key management, and optimal performance.\n\nTherefore: Option D: Create a customer managed KMS key and an S3 bucket in each Region. Configure the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS). Configure replication between the S3 buckets.","timestamp":"1740553980.0"},{"poster":"iwantcertificates","timestamp":"1740444780.0","content":"Selected Answer: D\nI think this question would be invalidated in an actual test. Both B and D has problems. B uses client-side encryption, wich adds complexity to the operation. Additionally, KMS by default uses server side encryption, SSE-KMS. But the option D also has a imprecision, because you are creating two KMS keys instead of just one with multi-region","upvote_count":"1","comment_id":"1361227"},{"upvote_count":"1","comment_id":"1359060","timestamp":"1740018900.0","poster":"sammo08","content":"Selected Answer: B\nKey Reason: Separate KMS Keys in Each Region\n\nIn Option D, you are creating a separate AWS KMS key in each Region, meaning the encryption keys are distinct.\nWhen replicating data between Regions, AWS does not allow direct decryption of objects encrypted with an SSE-KMS key in one Region using a different KMS key in another Region.\nKMS keys are tied to a specific Region unless you use a Multi-Region key.\nBecause of this, the replicated objects cannot be automatically decrypted in the destination Region without additional configuration, increasing operational overhead.\nWhy Option B is Better\nOption B uses a Multi-Region KMS Key that allows encryption and decryption with the same key across both Regions.\nLess operational complexity, as the application does not have to handle different keys in each Region.\nSeamless replication and decryption of data across Regions."},{"poster":"Clpsz","timestamp":"1738881780.0","comment_id":"1352689","upvote_count":"1","content":"Selected Answer: D\nB: client side encryption is not correct"},{"poster":"AshishDhole","timestamp":"1738854480.0","content":"Selected Answer: B\nhe data in both S3 buckets must be encrypted and decrypted with the same KMS key. The data and the key must be stored in each of the two Regions --> Single Key for both region. So multi region key will be the answer","upvote_count":"1","comment_id":"1352469"},{"timestamp":"1738580520.0","comment_id":"1350835","poster":"Krenil","content":"Selected Answer: D\nCorrect Ans: D\nOption B is not the best solution because it involves client-side encryption, which adds unnecessary complexity and operational overhead. Here's why:\n\nClient-side encryption means that the application itself must handle the encryption and decryption of data before it is uploaded to S3 and after it is downloaded. This requires additional development work, key management, and the management of encryption and decryption logic in the application.\n\nIn contrast, SSE-KMS (option D) allows Amazon S3 to manage the encryption and decryption process automatically on the server side, which reduces operational overhead and simplifies the implementation.","upvote_count":"1"},{"comment_id":"1349548","upvote_count":"1","content":"Selected Answer: D\nB and D are in short list (using customer managed key and KMS) but B requires that each client encrypts the data before sending it, wheras the D is totally transparent so with \"LEAST overhead\"","poster":"Tika57","timestamp":"1738333380.0"},{"poster":"dariar","content":"Selected Answer: D\nFor me the answer is D.\nIt could also be the B-answer, but whet it asks \"Configure the application \", it sounds like the \"operational overhead\", so it's eliminatory for me","upvote_count":"1","timestamp":"1737713700.0","comment_id":"1346056"},{"timestamp":"1737456000.0","poster":"AtiiF","upvote_count":"1","comment_id":"1344099","content":"Selected Answer: D\n=======> D"},{"poster":"V2910","comment_id":"1343611","content":"Selected Answer: D\nDifference between B and D is server side encryption","timestamp":"1737377640.0","upvote_count":"1"},{"comment_id":"1342569","content":"Selected Answer: B\nMentioning of the \"multi-Region KMS key\" https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html","poster":"CloudExpert01","timestamp":"1737214620.0","upvote_count":"1"},{"timestamp":"1734580020.0","poster":"aefuen1","content":"Selected Answer: B\nIt's B, it has to use the same key in both regions.","upvote_count":"2","comment_id":"1328847"},{"comment_id":"1327810","content":"Selected Answer: B\nMulti-Region KMS keys supports client-side encryption\nhttps://aws.amazon.com/about-aws/whats-new/2021/06/kms-multi-region-keys/","timestamp":"1734424800.0","upvote_count":"1","poster":"pg6058"},{"comment_id":"1326128","timestamp":"1734095820.0","poster":"Upchar","content":"Selected Answer: D\nOption D is the most appropriate solution because:\n-It uses SSE-KMS with a customer managed KMS key, which satisfies the encryption requirement.\n-It supports cross-region replication with minimal operational overhead.\n-It meets the company's needs of using the same key across both regions without introducing extra complexity.","upvote_count":"1"},{"content":"Selected Answer: D\nOption D:\n\nCreates a customer managed KMS key\nUses server-side encryption with AWS KMS keys (SSE-KMS)\nAllows using the same KMS key across both Regions\nMinimal operational overhead\nMeets all the specified requirements\n\nThe key differences that make Option D the best solution:\n\nIt uses a customer managed KMS key\nImplements server-side encryption (SSE-KMS)\nAllows easy replication between S3 buckets\nProvides the least operational overhead","timestamp":"1734013620.0","upvote_count":"1","poster":"aatikah","comment_id":"1325663"},{"timestamp":"1733975580.0","comment_id":"1325393","upvote_count":"1","poster":"chirag_a_parikh","content":"Selected Answer: B\nS3 belongs to two region hence needed multi region keys"},{"upvote_count":"1","poster":"EllenLiu","comments":[{"comment_id":"1324464","timestamp":"1733822400.0","poster":"EllenLiu","content":"if D mentioned multi-region key, that is correct as well , however it doesn't.","upvote_count":"1"}],"comment_id":"1324463","timestamp":"1733822340.0","content":"Selected Answer: B\nit is all about multi-region key.\nAWS KMS supports multi-Region keys, which are AWS KMS keys in different AWS Regions that can be used interchangeably – as though you had the same key in multiple Regions. Each set of related multi-Region keys has the same key material and key ID, so you can encrypt data in one AWS Region and decrypt it in a different AWS Region without re-encrypting or making a cross-Region call to AWS KMS.\nYou can use multi-Region keys with client-side encryption libraries such as S3 client-side encryption\nhttps://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html"},{"content":"La opción D es la correcta y la que presenta la menor sobrecarga operativa porque:\n\nUtiliza una clave KMS gestionada por el cliente, cumpliendo con el requisito de seguridad.\nLa encriptación del lado del servidor con SSE-KMS permite que AWS maneje automáticamente la encriptación y desencriptación, reduciendo la carga sobre la aplicación del cliente.\nConfigurar la replicación entre los buckets S3 es un proceso estándar en AWS que no añade complejidad significativa.\n\nPor lo tanto, la opción D es la más eficiente y menos complicada operativamente para cumplir con los requisitos dados.","upvote_count":"1","poster":"S3venM","timestamp":"1732506660.0","comment_id":"1317310"},{"content":"Selected Answer: B\nThe key to this question is the data is encrypted in 2 regions. If we were to use a region specific key to encrypt the data in S3, we will have to decrypt then re-encrypt the data in each region which increase operational complexity. Meanwhile, if we offload the responsibility of encrypting data to client side, then we no longer have to worry about such issue. Once the data in on AWS, we can use multi-region key managed by KMS to replicate data between regions.","timestamp":"1732013280.0","poster":"EzKkk","upvote_count":"1","comment_id":"1314579"},{"upvote_count":"1","content":"Respuesta B \nCrear una clave KMS en una región :\nPrimero, cree una clave KMS administrada por el cliente (CMK) en la región principal (por ejemplo, us-east-1).\nReplicar la clave KMS en la segunda región :\nUsa la capacidad de réplica de claves de AWS KMS para replicar la clave de la región principal a la segunda región (por ejemplo, us-west-2).\nEsta réplica crea una clave independiente pero relacionada, lo que permite que el mismo material criptográfico esté disponible en ambas regiones.\nConfigurar el cifrado en los depósitos de S3 :\nConfigure los buckets de S3 en ambas regiones para que utilicen sus respectivas claves KMS (la clave original en la región primaria y la clave replicada en la región secundaria) para el cifrado.\nDe esta forma, los datos se cifran y descifran localmente en cada región, utilizando la clave correspondiente en esa región.","poster":"f51a8bd","timestamp":"1731459600.0","comment_id":"1311013"},{"poster":"UncleA","upvote_count":"1","content":"Selected Answer: D\nCorrect choice","timestamp":"1729668300.0","comment_id":"1301924"},{"upvote_count":"2","comment_id":"1293155","timestamp":"1728056040.0","poster":"aturret","content":"Selected Answer: D\nCan't you guys see \"it must be stored in KMS\"?"},{"timestamp":"1726814040.0","poster":"bignatov","upvote_count":"3","content":"Selected Answer: D\nThe Correct answer is D. The key requirement is: \"The company must use an AWS Key Management Service (AWS KMS) customer managed key to encrypt all data that is stored in the S3 buckets.\" KMS doesn't work for client side encryption!!!","comment_id":"1286684"},{"upvote_count":"2","timestamp":"1726556280.0","content":"Selected Answer: D\nD is correct answer.","poster":"tonybuivannghia","comment_id":"1285066"},{"poster":"MrPCarrot","timestamp":"1725873780.0","comment_id":"1280818","content":"Lets stick with B","upvote_count":"1"},{"comment_id":"1275723","upvote_count":"2","timestamp":"1725135420.0","content":"Selected Answer: D\nCustomer managed key","poster":"LibbyS"},{"poster":"PaulGa","upvote_count":"2","comment_id":"1274143","timestamp":"1724855220.0","content":"Selected Answer: B\nAns B - multi-region keys"},{"upvote_count":"2","poster":"DavidNgTan","timestamp":"1722147720.0","comment_id":"1256608","content":"Selected Answer: D\nSSE-S3 uses Amazon S3-managed keys, while SSE-KMS uses customer-managed keys (CMKs) in AWS KMS."},{"comment_id":"1255983","content":"Selected Answer: D\nIt is D\nCreate a customer managed KMS key in AWS KMS.\nConfigure your Amazon S3 buckets to use this CMK for server-side encryption (SSE-KMS).\nDuring data uploads, specify the CMK as the encryption key using the --sse-kms-key-id parameter.\nThis ensures consistent encryption and decryption across both S3 buckets in different regions.\nYou’ll have full control over the key, including rotation, access controls, and cross-account access. https://repost.aws/knowledge-center/s3-object-encryption-keys","upvote_count":"3","timestamp":"1722050880.0","poster":"KTEgghead"},{"content":"I think the answer was all stated clear in the question per sya.\n\" The data and the key must be stored in each of the two Regions.\" make it really clear it's either C or D. \nSince the customer \"must use AWS kMS customer managed key to encrypt all data...\", the answer should be D.","poster":"jasmine48718372","upvote_count":"2","comment_id":"1250516","timestamp":"1721317200.0"},{"poster":"dekol347","upvote_count":"3","comment_id":"1241120","content":"Selected Answer: D\nhttps://aws.amazon.com/getting-started/hands-on/replicate-data-using-amazon-s3-replication/\nhttps://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-config-for-kms-objects.html\nBasically, from two sources above, none mention to use KMS Multi Region (Option B), and client-side encryption. \nOption C is not really valid because SSE-S3 is AWS managed not customer managed.\nOption D is the most logical and straightforward solution, you can create customer managed SSE-KMS.","timestamp":"1719974280.0"},{"timestamp":"1719617820.0","upvote_count":"2","content":"Selected Answer: D\nD support Multi region key, use aws KMS (less overhead)","comment_id":"1238961","poster":"jatric"},{"content":"Selected Answer: B\nB for sure","comment_id":"1230723","timestamp":"1718410200.0","poster":"ChymKuBoy","upvote_count":"1"},{"content":"Selected Answer: B\nB is correct because we should use multi-region key in this case.","upvote_count":"2","comment_id":"1220188","timestamp":"1716895980.0","poster":"Lin878"},{"comment_id":"1217296","poster":"lofzee","timestamp":"1716537720.0","content":"Selected Answer: D\ngoing for D because the question says it needs a customer managed KMS key which equals SSE-KMS","comments":[{"timestamp":"1717158300.0","content":"B also have SSE- KMS","upvote_count":"1","poster":"3680113","comment_id":"1222142"}],"upvote_count":"2"},{"upvote_count":"1","content":"Selected Answer: B\nB is correct","poster":"zinabu","timestamp":"1714288320.0","comment_id":"1203432"},{"upvote_count":"1","poster":"ManikRoy","content":"Selected Answer: B\nIts likely to be option B as it is the only option that mentions KMS multi region Keys. \nMulti region keys can also be used for client side encryption. Also CSE means the object will be encrypted before it reaches S3 bucket and will be decrypted after the object is fetched from S3 bucket, so while in S3 bucket it stays in encrypted status.","comment_id":"1201263","timestamp":"1713955140.0"},{"comment_id":"1196286","timestamp":"1713230280.0","poster":"Karthikdav","upvote_count":"2","content":"Selected Answer: D\nThe question specifically says to use client managed keys and not client side encryption."},{"poster":"jaykania","content":"Selected Answer: D\nCan't be B as the question requires SSE and not CSE","timestamp":"1713011580.0","comment_id":"1194954","upvote_count":"1"},{"poster":"zinabu","upvote_count":"1","content":"Both B & D have their own problems , \nC, it was ok with multi region KMS key since we need the same key for both regions , but the problem is it says client side encryption , Using KMS is server side encryption from the beginning.\nD, it says to create S3 bucket and KMS key in each region, that means the two key for the two region are not the same cause we create for each region. but the question asked to use the same key.","comment_id":"1194732","timestamp":"1712992560.0"},{"timestamp":"1712893320.0","poster":"firsttimetesttaker","upvote_count":"1","content":"Selected Answer: D\nIt has to be D, \nClient-side encryption requires additional handling within the application code, increasing operational overhead if we go with option B. So with option of elimination, next best option is D.","comment_id":"1194120"},{"comment_id":"1181055","poster":"ml1190","upvote_count":"1","content":"SSE encryption is not required and multi-region keys support client side encryption, so the correct answer is B","timestamp":"1711214640.0"},{"poster":"hro","upvote_count":"1","timestamp":"1711154220.0","comment_id":"1180449","content":"C - The question implies that the Data AND Key must be in EACH of the two Regions"},{"timestamp":"1710081900.0","content":"Selected Answer: D\nhe sayed \"The company must use an Key Management Service (AWS KMS) customer managed key\"\nB. is using client side encryption not even aws key\nRight... ??","comment_id":"1170389","poster":"MoAboDaif","upvote_count":"1"},{"poster":"NishantM","timestamp":"1709444340.0","comment_id":"1164515","upvote_count":"1","content":"Selected Answer: D\nIt is mentioning server side encryption using KMS."},{"comment_id":"1157091","upvote_count":"1","poster":"jhakas_bijoy","timestamp":"1708688700.0","content":"Selected Answer: B\nthis is clear case of multi region key"},{"poster":"TheFivePips","upvote_count":"1","timestamp":"1708442460.0","content":"Selected Answer: B\n\"A single-Region KMS key generated by AWS KMS is stored and used only in the Region in which it was created. With AWS KMS multi-Region keys you can choose to replicate a multi-Region primary key into multiple Regions within the same AWS partition.\"\n\nhttps://aws.amazon.com/kms/faqs/","comment_id":"1154815"},{"poster":"Mohammed_Kamal","timestamp":"1707722040.0","upvote_count":"2","content":"Selected Answer: B\ni found the answer guys. acually i never found resource state that normal keys (not multi regions key) can be replicated across region.\nalso i found this \"A single-Region KMS key generated by AWS KMS is stored and used only in the Region in which it was created. With AWS KMS multi-Region keys you can choose to replicate a multi-Region primary key into multiple Regions within the same AWS partition.\" which mean option D can't never be correct since key can't be used in another region which seem logically otherwise they wouldn't make multi region keys if we can simply copy keys","comment_id":"1147864"},{"upvote_count":"1","poster":"modehqudah","content":"Selected Answer: B\nThe data in both S3 buckets must be encrypted and decrypted with the same KMS key.","timestamp":"1706683140.0","comment_id":"1136462"},{"timestamp":"1706586120.0","poster":"klimaxk666","comment_id":"1135480","upvote_count":"1","content":"Selected Answer: B\nBy creating a customer managed multi-Region KMS key, you can have a single key that works across both AWS Regions.\nCreating an S3 bucket in each Region allows you to store data in both Regions.\nConfiguring replication between the S3 buckets ensures that the data is replicated between the Regions.\nUsing client-side encryption with the KMS key ensures that the data is encrypted and decrypted with the same KMS key"},{"poster":"yonwick","content":"I say D.\n\nB is not the right one because it uses client-side key.","timestamp":"1706164020.0","upvote_count":"2","comment_id":"1131368"},{"upvote_count":"1","timestamp":"1706065140.0","poster":"mn2013","content":"Selected Answer: B\nGoing with B as that is the only option that allows to use the same key in multiple regions which is reqd for the cross-region replication. They key used is AWS KMS key and for multi-region. But the encryption and decryption will be done by the client.","comment_id":"1130160"},{"poster":"upliftinghut","upvote_count":"1","comments":[{"content":"SSE-S3 and SSE-KMS are both server side and managed by AWS","poster":"upliftinghut","upvote_count":"1","comment_id":"1127964","timestamp":"1705855200.0"}],"comment_id":"1127962","timestamp":"1705855080.0","content":"Selected Answer: B\nB is correct. If server side and customer managed key, must be SSE-C => D not correct. Link: https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-config-for-kms-objects.html"},{"comment_id":"1122108","upvote_count":"2","content":"Selected Answer: B\nA: Not customer managed\nC: SSE-S3 cannot use customer provided keys, you have to use SSE-C\nhttps://docs.aws.amazon.com/AmazonS3/latest/userguide/specifying-s3-encryption.html\nIf you want to specify a different encryption type in your PUT requests, you can use server-side encryption with AWS Key Management Service (AWS KMS) keys (SSE-KMS), dual-layer server-side encryption with AWS KMS keys (DSSE-KMS), or server-side encryption with customer-provided keys (SSE-C). If you want to set a different default encryption configuration in the destination bucket, you can use SSE-KMS or DSSE-KMS.\n\nD: Creates 2 separate keys in 2 regions so it's wrong\nB: is correct","timestamp":"1705186740.0","poster":"awsgeek75"},{"comment_id":"1121652","poster":"A_jaa","timestamp":"1705149780.0","upvote_count":"1","content":"Selected Answer: B\nAnswer-B"},{"content":"While answer D is make more sense in aligned with these points:\n- data in both S3 buckets must be encrypted and decrypted with the same KMS keys\n- The \"data\" and the \"key\" must be stored in in each of the two regions\n- LEAST operational overhead\n\nWhy exam answer given is C where not using KMS to perform server-side encryption?","comment_id":"1105122","upvote_count":"1","poster":"rt_7777","timestamp":"1703495100.0"},{"content":"Btw, this seems the algorithm (in Powershell) that ET uses to determine the \"correct answer\":\n\n@(\"A\",\"B\",\"C\",\"D\") | Get-Random","timestamp":"1703482860.0","poster":"pentium75","upvote_count":"2","comment_id":"1105036"},{"upvote_count":"3","content":"Selected Answer: B\nAfter reading the discussion and reference material, vote for B. Was for D first, but it says to \"create a key in each region\" which would result in two different keys.","timestamp":"1703482800.0","comment_id":"1105035","comments":[{"timestamp":"1707815340.0","upvote_count":"1","poster":"cheroh_tots","content":"D. Create a customer managed KMS key and an S3 bucket in each Region. Configure the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS). Configure replication between the S3 buckets.\n This solution ensures that both the data and the key are stored in each Region. By using SSE-KMS, you achieve encryption with a customer managed key while minimizing operational overhead.\nThe replication between the S3 buckets ensures data consistency across Regions.","comment_id":"1149024"}],"poster":"pentium75"},{"timestamp":"1703170320.0","upvote_count":"2","comment_id":"1102631","poster":"bujuman","content":"Selected Answer: B\nmulti-Region KMS key is the mandatory requirement and it's supported by AWS KMS"},{"timestamp":"1702735200.0","comment_id":"1098212","content":"Selected Answer: B\nMulti-Region keys are supported for client-side encryption in the AWS Encryption SDK, AWS S3 Encryption Client, and AWS DynamoDB Encryption Client. \nhttps://aws.amazon.com/about-aws/whats-new/2021/06/kms-multi-region-keys/","upvote_count":"2","poster":"anikolov"},{"comment_id":"1097913","poster":"SaurabhTiwari1","content":"Selected Answer: B\nThe correct answer is B.\n\nCreate a customer managed multi-Region KMS key. This allows the same key to be used in multiple regions. Then, create an S3 bucket in each Region. Configure replication between the S3 buckets. This ensures that data is stored in both regions. Finally, configure the application to use the KMS key with client-side encryption. This ensures that all data stored in the S3 buckets is encrypted and decrypted with the same KMS key. This solution meets all the requirements with the least operational overhead.\n\nThe other options do not meet all the requirements because they either do not use the same KMS key in both regions (Options A and C), or they do not specify the use of a multi-Region KMS key (Option D).","timestamp":"1702702740.0","upvote_count":"1"},{"upvote_count":"2","content":"Looks like ChatGPT selects \"D\". \nSteps:\n1. Create a Customer managed Key (CMK) in AWS KMS\n2. Enable multi-region Supports for the key\n3. Replicate the key to secondary region\n4. Configure S3 bucket Encryption\n5. Enable Cross-Region Replication (CRR) for S3 buckets","poster":"[Removed]","timestamp":"1702532460.0","comment_id":"1096069"},{"poster":"ansagr","comment_id":"1090658","content":"Selected Answer: B\nWhen using server-side encryption with AWS KMS keys (SSE-KMS) and configuring replication between S3 buckets, the AWS KMS key itself is not replicated. The replication is for the encrypted data in the S3 buckets.","timestamp":"1701991860.0","upvote_count":"1"},{"timestamp":"1701722280.0","content":"Selected Answer: D\nwhile option B is using a multi-Region KMS key, it involves client-side encryption, which introduces operational overhead for encryption and decryption within the application.","upvote_count":"1","comment_id":"1087978","poster":"ale_brd_111"},{"upvote_count":"1","timestamp":"1699730760.0","comment_id":"1068052","content":"Selected Answer: B\nA multi-Region KMS key allows you to create a primary key in one region and replicate it in another region. The replica key in the different region is a separate AWS resource but shares the same key material as the primary key.","poster":"Marco_St"},{"upvote_count":"1","timestamp":"1699223940.0","poster":"NickGordon","comment_id":"1063355","content":"Selected Answer: B\nD is incorrect as it does not mention key replication. the keys created in 2 different regions are not same. \nB is correct as it is the only one has key replication enabled."},{"content":"Selected Answer: D\nA. not using KMS\nB. key need to be store in AWS so not a client side encryption\nC. Not using KMS for encryption\nD. good answer","poster":"kidomaruto","upvote_count":"1","comment_id":"1059757","timestamp":"1698846960.0"},{"timestamp":"1698586500.0","upvote_count":"2","comment_id":"1056846","poster":"Eneiss","content":"Selected Answer: D\nD because server-side encryption with customer-manager KMS key"},{"content":"Selected Answer: D\nIt cannot be B because it is an extreme operational overhead case, client-side encryption requires setting up encryption SDK to encrypt the file before sending to S3 a call to KMS generateDataKey for encryption and with every read of the file, the same process reversed will be done\n\n+ There is no point in creating the key in two regions if the app itself will encrypt the files before sending them to S3","upvote_count":"4","comment_id":"1048954","timestamp":"1697820660.0","poster":"sweetheatmn"},{"timestamp":"1697732820.0","comment_id":"1048102","poster":"AWSStudyBuddy","content":"Selected Answer: B\nI go with Option B. \nThe solution with the least operational overhead to meet the company's requirements is to use a multi-Region key in AWS KMS.\n\nMulti-Region keys are AWS KMS keys in different AWS Regions that can be used interchangeably. They have the same key material and key ID, so you can encrypt data in one AWS Region and decrypt it in a different AWS Region without re-encrypting or making a cross-Region call to AWS KMS.","upvote_count":"2","comments":[{"poster":"AWSStudyBuddy","upvote_count":"1","content":"https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html","timestamp":"1697732880.0","comment_id":"1048106"}]},{"comment_id":"1041457","poster":"iwannabeawsgod","content":"i think B is correct","upvote_count":"1","timestamp":"1697094840.0"},{"content":"Answer by ChatGPT 4.0 is D","poster":"daniel1","comment_id":"1037223","timestamp":"1696857960.0","upvote_count":"3"},{"upvote_count":"1","timestamp":"1696380720.0","content":"Selected Answer: D\nhttps://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n\nAWS services that integrate with AWS KMS for encryption at rest or digital signatures currently treat multi-Region keys as though they were single-Region keys. They might re-wrap or re-encrypt data moved between Regions. For example, Amazon S3 cross-region replication decrypts and re-encrypts data under a KMS key in the destination Region, even when replicating objects protected by a multi-Region key.","poster":"Barbie54","comment_id":"1024307"},{"comment_id":"1023470","content":"you know what, Multi KMS i get the argument, its true be like having one key in diff regions, but its the way it encrypting on replication...gonna go try it.....be back with this one","timestamp":"1696283160.0","upvote_count":"1","poster":"dwx101"},{"comment_id":"1023432","content":"Selected Answer: B\nSo its obvious that A and C are incorrect as those keys are managed on AWS side. Answer comes down to B and D. I had to do some research and re-read the question a few times and I think the answer is B. If you go with D, you end up creating 2 keys that can't be the same. B is 1 key. \n\nA multi-Region replica key is a KMS key that has the same key ID and key material as its primary key and related replica keys, but exists in a different AWS Region. A replica key is a fully functional KMS key with it own key policy, grants, alias, tags, and other properties.","upvote_count":"1","poster":"awashenko","timestamp":"1696277580.0","comments":[{"timestamp":"1696277700.0","comment_id":"1023435","content":"Correction; its two keys that act as 1 basically","upvote_count":"1","poster":"awashenko"}]},{"comment_id":"1018808","content":"Selected Answer: B\nthe reason why \"B\" is correct it's because they are asking for only one key, if you create a key per region you now have 2 Keys one for each bucket and they need the same one to work in both of the buckets. C and D are incorrect","timestamp":"1695819120.0","poster":"David_Ang","upvote_count":"1"},{"content":"Selected Answer: B\nB. This solution creates a customer managed multi-Region KMS key, which meets the requirement to use the same KMS key across two regions. It uses client-side encryption with the KMS key, which means the application is responsible for encryption and decryption processes. This satisfies all requirements.\n\n\nD. While this solution does use customer managed KMS keys, it creates separate KMS keys in each region. Although it uses SSE-KMS, which would be closer to the requirement, it doesn't meet the requirement of using the same KMS key across two regions.","timestamp":"1695809220.0","upvote_count":"1","comment_id":"1018691","poster":"M0SHE"},{"comment_id":"1018038","upvote_count":"1","content":"Selected Answer: D\n\"The company must use an AWS Key Management Service (AWS KMS) customer managed key\n\n(AWS-KMS) was mentioned only in a D option, then only D meets the requirements","timestamp":"1695749940.0","poster":"SymnuiSlon"},{"poster":"dagr","comment_id":"1016173","content":"Selected Answer: B\nI think the key to this question is mult-region keys","upvote_count":"1","timestamp":"1695588540.0"},{"content":"Selected Answer: C\nYou cannot create multi-Region keys in a custom key store.\nhttps://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html#:~:text=imported%20key%20material-,You%20cannot%20create%20multi%2DRegion%20keys%20in%20a%20custom%20key%20store.,-Topics","timestamp":"1695043800.0","comment_id":"1010640","poster":"hieulam","upvote_count":"1"},{"content":"Selected Answer: B\nB - It satisfies both conditions. \n1. The data in both S3 buckets must be encrypted and decrypted with the same KMS key. 2. The data and the key must be stored in each of the two Regions.\nWith D, you will not have same keys.","comment_id":"1005947","timestamp":"1694538960.0","upvote_count":"1","poster":"gsax"},{"content":"Selected Answer: B\nB because the question requires using the same KMS key for both buckets encryption","comment_id":"985302","timestamp":"1692459480.0","upvote_count":"1","poster":"KawtarZ"},{"upvote_count":"2","timestamp":"1692165360.0","poster":"2284","comment_id":"982231","content":"Selected Answer: D\nThe requirement is to use a customer managed key from AWS Key Management Service (AWS KMS) to encrypt all data stored in Amazon S3 buckets across two AWS Regions.\nOption D fulfills this requirement by using customer managed KMS keys (which can be multi-Region keys) for encryption. This ensures that the same key is used for encrypting and decrypting data across both Regions, while also allowing for centralized key management.\nThe use of SSE-KMS provides strong encryption and enables the customer to control access to the encryption keys.\nReplicating data between the S3 buckets in different Regions helps maintain data consistency and availability."},{"content":"Focus on the REQUIREMENTS and not parameters like \"min operational overhead\". The reqs are far more important than params.\n\nThat being said, C and D are automatically INCORRECT because they start off with this \"Create a customer managed KMS key and an S3 bucket in //each// Region\" Creating two keys immediately fails the reqs of having one key.\n\nA is INCORRECT because it creates an \"AWS Managed Key\", so that fails the reqs of having a \"Cust Managed Key\". \n\nThat leaves B, which has a Multi-Region, Cust Managed Key. Which Meets the REQUIREMENTS and is within the (admittedly vague) parameters.","upvote_count":"3","comments":[{"content":"interesting that you said it:\n\"Create a customer managed KMS key and an S3 bucket in //each// Region\" - doesnt this mean - a key in each region? if yes - this would indeed mean 2 keys, no? or, when you say - put a ball in each bucket, you mean put 1 ball in both buckets... i guess these are nested buckets :D it does not seem to be working with regions, no?","poster":"slackbot","comments":[{"comment_id":"983794","content":"Yes, it means 1 key per each region, which immediately fails to meet the requirements.","timestamp":"1692288060.0","upvote_count":"1","poster":"aaroncelestin"}],"upvote_count":"1","comment_id":"983649","timestamp":"1692277560.0"}],"timestamp":"1692152580.0","comment_id":"982126","poster":"aaroncelestin"},{"timestamp":"1692014700.0","content":"Selected Answer: B\nKMS Multi-region keys are required\nhttps://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html","comment_id":"980755","poster":"Guru4Cloud","upvote_count":"1"},{"poster":"jksnu","content":"Selected Answer: D\nOptions A and C both use Amazon S3 managed encryption keys (SSE-S3), which do not meet the requirement of using a customer managed KMS key for encryption.\nOption B suggests using a customer managed multi-Region KMS key and client-side encryption, but this introduces more operational complexity than necessary.\nTherefore, Option D is the most suitable solution with the least operational overhead to meet the given requirement","upvote_count":"1","timestamp":"1691900100.0","comment_id":"979728"},{"timestamp":"1691798400.0","poster":"bindagooner","content":"After go through related document, D should be the correct answer.","comment_id":"979039","upvote_count":"2"},{"poster":"nafeez7950","content":"Selected Answer: C\nPerhaps we could take the question this way, where just because it mentions about the data has to be encrypted with the same KMS key, it doesn't mean the data is not encrypted yet. Also, by default, starting in Jan 2023, S3 is already encrypted by SSE-S3 by default. So, my assumption is that the data could be encrypted again with our customer managed KMS, because as we create our KMS key, it can be re-used in other regions, thus using the same key to encrypt and decrypt.","timestamp":"1691770020.0","upvote_count":"2","comment_id":"978792"},{"content":"Selected Answer: B\nKeyword is \"same KMS key\"","poster":"Eobard","timestamp":"1691759340.0","comment_id":"978639","upvote_count":"1"},{"comment_id":"977363","timestamp":"1691649480.0","poster":"Abdou1604","upvote_count":"1","content":"Option D meets the requirement of using a customer managed KMS key for encryption while also enabling data replication between S3 buckets in different regions. AWS Key Management Service (AWS KMS) customer managed keys provide central management and control over encryption keys, which ensures that the same key can be used for encryption and decryption across multiple regions. This minimizes operational overhead and ensures consistency.\nOption A suggests using Amazon S3 managed encryption keys (SSE-S3), which would require separate keys for each region and might lead to inconsistency and operational complexity.\nOption B suggests using a customer managed multi-Region KMS key, which could be used with client-side encryption, but it's more complex than needed for this scenario.\nOption C suggests using customer managed KMS keys with SSE-S3, which also introduces operational complexity and does not ensure that the same key is used for encryption and decryption in both regions."},{"comments":[{"content":"Creating a key in each region**","poster":"Nava702","upvote_count":"1","timestamp":"1691622900.0","comment_id":"977087"}],"poster":"Nava702","content":"Selected Answer: B\nCreating a key in region means the keys would be different. Since the ask is that data in both regions use the same key, the answer is option B.","upvote_count":"1","timestamp":"1691622900.0","comment_id":"977086"},{"comment_id":"976216","upvote_count":"1","timestamp":"1691553000.0","poster":"sohailn","content":"we can use aws kms multi-region key but right now amazon s3 treated it as individual key so this is not the good choice answer should be D"},{"comment_id":"975826","upvote_count":"1","content":"Selected Answer: B\nTough one...but for me it's B because of multi region KMS key. Option D is very debatable whether because different key are created for each region.","timestamp":"1691509620.0","poster":"Theocode"},{"comment_id":"974596","content":"Selected Answer: B\n\"The data and the key must be stored in each of the two Regions.\" -> Since the key must also be stored in two regions, that only leaves KMS Multi-region keys. Option D will only store the key in the region it was created in.","poster":"Aelodus","timestamp":"1691404680.0","upvote_count":"1"},{"poster":"cookieMr","upvote_count":"1","timestamp":"1691398500.0","comment_id":"974533","content":"Selected Answer: D\nA & C is incorrect. SSE-S3 is managed by S3.\nB is incorrect. Client-side encryption is not the least operation overhead.\nThus D is correct."},{"content":"Selected Answer: B\nAny option with server-side encryption is ruled out. This leaves B.","upvote_count":"1","poster":"TariqKipkemei","timestamp":"1691037240.0","comment_id":"970737"},{"upvote_count":"1","timestamp":"1689945840.0","comment_id":"958541","poster":"Chan1010","content":"Selected Answer: B\nOption A and Option C involve using server-side encryption with Amazon S3 managed encryption keys (SSE-S3), which does not allow for a customer-managed key to be used for encryption.\n\nOption D involves using server-side encryption with AWS KMS keys (SSE-KMS), but it does not address the requirement of using the same KMS key in both Regions for data encryption and decryption."},{"upvote_count":"1","timestamp":"1689749280.0","comment_id":"956340","content":"Selected Answer: B\nKeyword \"multi-Region KMS key\" in answer B. See \"Multi-Region keys in AWS KMS\" at https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html","poster":"james2033"},{"poster":"miki111","upvote_count":"1","comment_id":"953627","timestamp":"1689539460.0","content":"Option B is the right answer for this."},{"timestamp":"1689268980.0","comment_id":"950893","content":"Selected Answer: B\nAnswer is B","poster":"Kaab_B","upvote_count":"1"},{"upvote_count":"1","timestamp":"1689251160.0","content":"Selected Answer: B\nB is correct","poster":"ayrus1992","comment_id":"950656"},{"upvote_count":"1","poster":"slimjago","content":"Selected Answer: B\naccording to this https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingClientSideEncryption.html , B seems to be the answer.","timestamp":"1689185940.0","comment_id":"950081"},{"timestamp":"1689148800.0","comment_id":"949578","poster":"RupeC","upvote_count":"1","content":"Selected Answer: D\nA. is S3 managed so cannot be right\nB. is client-side encryption - so expensive and higher overhead\nC. is S3 managed encryption keys (SSE-S3)so cannot be right\nD. is customer-managed KMS key and meets the rest of the criteria"},{"comments":[{"content":"Sorry D is also client managed but lower cost and overhead","comment_id":"948929","timestamp":"1689076140.0","poster":"RupeC","upvote_count":"1"}],"poster":"RupeC","content":"Selected Answer: D\nA & C are out as they are both Amazon S3 managed encryption keys\nB - is client-side encryption, but it asks for client-managed keys\nso D","upvote_count":"1","timestamp":"1689076080.0","comment_id":"948928"},{"content":"Selected Answer: B\nA company is building an application in the AWS Cloud. The application will store data in Amazon S3 buckets in two AWS Regions. The company must use an AWS Key Management Service (AWS KMS) customer managed key to encrypt all data that is stored in the S3 buckets. The data in both S3 buckets must be encrypted and decrypted with the same KMS key. The data and the key must be stored in each of the two Regions.\n\nRef: https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html\n\nHence, B is the answer","poster":"jaydesai8","upvote_count":"2","comment_id":"945792","timestamp":"1688743920.0"},{"comment_id":"939959","content":"Selected Answer is D\nIt seems D is correct and S3 encryption for customer will be server side encryption.","poster":"dhiru0102","upvote_count":"1","timestamp":"1688216700.0"},{"upvote_count":"1","timestamp":"1688028360.0","comment_id":"937810","poster":"kfnguessan","content":"Selected Answer: D\nThe solution that meets the requirements with the least operational overhead is option D: Create a customer managed KMS key and an S3 bucket in each Region. Configure the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS). Configure replication between the S3 buckets."},{"content":"Selected Answer: B\nOption D cannot be because it requests: \"The data in both S3 buckets must be encrypted and decrypted with the same KMS key.\"\n\nIt's option B. It's not important if it adds more overhead but it's the only one that fulfill requirements.\n\nFirst of all check possible solutions that fulfill requirements. Then, among those, choose the one with LEAST operational overhead.\n\nThe fact is that here only one fulfill requirements, so only possible answer is B.","poster":"live_reply_developers","comment_id":"937808","timestamp":"1688028060.0","upvote_count":"1"},{"comment_id":"936748","upvote_count":"3","content":"Selected Answer: D\nleast OPERATIONAL overhead, not configuration overhead.\n\nB: client side encryption\nD: server side encryption\n\nTherefor D should be correct","poster":"dlaskfj","timestamp":"1687961640.0"},{"timestamp":"1687536420.0","content":"Selected Answer: B\nAWS KMS supports multi-Region keys, which are AWS KMS keys in different AWS Regions that can be used interchangeably – as though you had the same key in multiple Regions. Each set of related multi-Region keys has the same key material and key ID, so you can encrypt data in one AWS Region and decrypt it in a different AWS Region without re-encrypting or making a cross-Region call to AWS KMS.\nB is correct","comment_id":"931757","upvote_count":"1","poster":"TienHuynh"},{"upvote_count":"3","timestamp":"1687089300.0","content":"Selected Answer: D\nOption A is not suitable because it does not utilize the AWS KMS customer managed key for encryption. SSE-S3 uses Amazon S3 managed encryption keys, which are not aligned with the requirement of using a customer managed key.\n\nOption B adds unnecessary complexity and overhead. Client-side encryption requires the application to handle the encryption and decryption processes, which can increase the application's complexity and maintenance.\n\nOption C does not provide consistency in encryption and decryption between the two S3 buckets. The requirement states that the data and the key must be stored in each Region, which can be achieved more efficiently by using SSE-KMS with a single customer managed KMS key.\n\nTherefore, option D is the recommended solution as it meets the requirements with the least operational overhead by using a customer managed KMS key, SSE-KMS encryption, and S3 bucket replication between the two Regions.","poster":"cookieMr","comment_id":"926660"},{"comments":[{"upvote_count":"1","comment_id":"921588","timestamp":"1686588240.0","poster":"pedroso","content":"C is wrong, but on my main comment, I want to mean B is wrong."}],"poster":"pedroso","upvote_count":"1","content":"Selected Answer: D\nC is wrong.\nD is right.\n\nIt is not because is \"AWS Key Management Service (AWS KMS) customer managed key\", that is client-side encryption (CSE).\n\nhttps://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html\nIf you want to use a customer managed key for SSE-KMS, create a symmetric encryption customer managed key before you configure SSE-KMS. Then, when you configure SSE-KMS for your bucket, specify the existing customer managed key.","timestamp":"1686575340.0","comment_id":"921477"},{"upvote_count":"1","poster":"hypnozz","timestamp":"1686499980.0","content":"Selected Answer: C\nAs it says in the AWS KMS \"Server-side encryption with Amazon S3 managed keys (SSE-S3) is the base level of encryption configuration for every bucket in Amazon S3. If you want to use a different type of default encryption, you can also specify server-side encryption with AWS Key Management Service (AWS KMS) keys (SSE-KMS) or customer-provided keys (SSE-C)\". \n\nThat means, you can use it, SSE-S3","comment_id":"920828"},{"upvote_count":"1","content":"Selected Answer: D\nD exactly","comment_id":"914458","timestamp":"1685877000.0","poster":"hobeen"},{"poster":"alvarosaavedra","timestamp":"1685803020.0","comment_id":"913688","content":"The question says that you want to use the same KMS key for both S3 bucket, it can only be B, C indicates to create a key for each environment, it does not fulfill what the question says.","upvote_count":"1"},{"upvote_count":"1","comment_id":"912829","timestamp":"1685710920.0","poster":"Bmarodi","content":"Selected Answer: B\nThe correct answer shoud option B. \nHere is a link: https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingClientSideEncryption.html"},{"upvote_count":"1","comment_id":"910925","timestamp":"1685515320.0","poster":"antropaws","content":"Selected Answer: B\nD is not correct simply because it's just not using customer managed keys. Many people prioritize the \"operational overhead\" over what the scenario is actually asking."},{"comment_id":"903131","content":"Selected Answer: B\nmulti-region is required. all other options are eliminated because of this.","upvote_count":"1","poster":"abhishek2021","timestamp":"1684666920.0"},{"timestamp":"1684473120.0","poster":"DipeshGandhi131","content":"Selected Answer: D\noption D because in case of option C when i followed the steps, I didn't saw option to enable client side encryption when creating bucket","upvote_count":"1","comment_id":"901653"},{"timestamp":"1684432200.0","poster":"PrasanthVarada","content":"A, C - Wrong - Becuase it usese SSE-S3 instead of Customer Managed.\nB - Wrong - client-side encryption is operational overhead.\nD- Correct, because it uses Customer managed keys SSE-KMS. Also You need to explicitly enable the Replication for SSE-KMS option.","comment_id":"901426","upvote_count":"2"},{"comment_id":"898903","upvote_count":"1","content":"EXAMPLE: \n\nPrimary key: arn:aws:kms:us-east-1:111122223333:key/mrk-1234abcd12ab34cd56ef12345678990ab\nReplica key: arn:aws:kms:eu-west-1:111122223333:key/mrk-1234abcd12ab34cd56ef12345678990ab","timestamp":"1684216200.0","poster":"Abrar2022"},{"timestamp":"1683661740.0","poster":"Squeaky","upvote_count":"1","comment_id":"893401","content":"d:\nhttps://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html"},{"timestamp":"1683054060.0","comment_id":"887812","upvote_count":"2","poster":"AlaTaftaf","content":"Selected Answer: B\nOption B is the correct solution.\n\nThis is the answer of ChatGPT \"In this scenario, a customer-managed multi-Region KMS key should be created, which allows the company to encrypt and decrypt data in both S3 buckets with the same key. By using a customer-managed key, the company can have greater control over key management and security.\n\nCreating an S3 bucket in each Region and configuring replication between them is also necessary to ensure that the data is accessible in both Regions.\n\nFinally, configuring the application to use the KMS key with client-side encryption provides end-to-end encryption and helps ensure that the data is protected from unauthorized access.\""},{"timestamp":"1682891580.0","content":"Selected Answer: B\nsame KMS key --> only possible with KMS Multi-Region Keys","upvote_count":"1","poster":"studynoplay","comment_id":"885648"},{"timestamp":"1682858460.0","content":"Selected Answer: D\nOption B: Requires client side encryption, which increases operational overhead. \nso Option D.","comment_id":"885194","poster":"rushi0611","upvote_count":"1"},{"poster":"darkknight23","upvote_count":"1","content":"Selected Answer: B\nI think Multi Region is the key. Question clearly says \"The data in both S3 buckets must be encrypted and decrypted with the same KMS key.\". I would go for B.","comment_id":"883072","timestamp":"1682633340.0"},{"poster":"kamx44","content":"Selected Answer: B\nkey word is \"the same KMS key\" so it has to be B","comment_id":"873855","timestamp":"1681835160.0","upvote_count":"1"},{"timestamp":"1681016160.0","upvote_count":"1","comment_id":"865288","poster":"shinejh0528","content":"Selected Answer: B\nno doupt, This is B.\nbecause of client-side encrypion that always encrypt, decrypt on client-side."},{"timestamp":"1681015920.0","content":"Selected Answer: D\nThere is little point in using KMS when you do client-side encryption, that's why D should be correct.","upvote_count":"1","comment_id":"865283","poster":"examtp1"},{"timestamp":"1680610860.0","upvote_count":"1","poster":"Rekhaachu","content":"https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html - Gives the answer as B","comment_id":"861005"},{"content":"Selected Answer: D\nI didn't choose B as it mentions 'KMS key with client-side encryption'","comment_id":"858635","upvote_count":"1","poster":"channn","timestamp":"1680423300.0"},{"upvote_count":"2","content":"Selected Answer: B\nClient-side encryption is a method of encrypting data before it is sent to a storage service, such as Amazon S3, instead of relying on the storage service to perform the encryption. In this approach, the data is encrypted on the client side using an encryption key, and then the encrypted data is uploaded to the storage service. This provides an additional layer of security and control over the data, as the encryption key is kept by the client and not stored on the storage service.","poster":"linux_admin","comment_id":"857101","timestamp":"1680268200.0"},{"comment_id":"857093","poster":"linux_admin","timestamp":"1680267960.0","content":"Selected Answer: B\nThis solution meets the requirement of using a single KMS key to encrypt and decrypt the data stored in the S3 buckets in both Regions. A multi-Region KMS key ensures that the key can be used in both Regions without requiring replication of the key. Using client-side encryption with the KMS key provides the required encryption and decryption of the data with the same key.\n\nIn addition, this solution provides the ability to replicate the data between the S3 buckets in both Regions for backup and disaster recovery purposes. However, this solution may require additional management and configuration overhead to ensure that the client-side encryption is implemented correctly.\n\nOption D, using server-side encryption with SSE-KMS, would require creating separate KMS keys for each Region, which would not meet the requirement of using the same KMS key in both Regions.","upvote_count":"1"},{"comment_id":"856640","timestamp":"1680241140.0","poster":"apchandana","upvote_count":"1","content":"Selected Answer: B\n1.multi region KMS key is required for this scenario. https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-config-for-kms-objects.html\n2.as the application is being built, application can cater client side encryption.\n3.then S3 replication can be done \n\nno other options would support the basic requirement"},{"timestamp":"1680089340.0","poster":"Abhineet9148232","upvote_count":"1","content":"Selected Answer: B\nD is not viable because - Replicating encrypted object is not supported by default in S3 (https://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-walkthrough-4.html). This would have additional overhead.\n\nB - multi-region keys even with client-side encryption involves lesser overhead.","comment_id":"854327"},{"content":"Answer B:\nKMS multi-Region KMS key are required.","upvote_count":"1","poster":"alexiscloud","timestamp":"1680048900.0","comment_id":"853826"},{"comment_id":"849390","poster":"aphesis","timestamp":"1679668260.0","content":"Selected Answer: D\nOption D suggests creating a customer managed KMS key and an S3 bucket in each Region. By using SSE-KMS with the customer managed KMS key, all data stored in the S3 buckets will be encrypted with the same key. This ensures that the data in both S3 buckets is encrypted and decrypted with the same KMS key. Additionally, since the data and the key are stored in each of the two Regions, it meets the requirement of storing the data and key in each Region.","upvote_count":"1"},{"poster":"volkan4242","content":"Option D is the optimal solution because it meets all the requirements specified in the question. It uses a customer managed KMS key to encrypt and decrypt data stored in S3 buckets in two regions. Additionally, this solution uses server-side encryption with AWS KMS keys (SSE-KMS) to encrypt the data, which is the recommended method for encrypting data in S3 buckets using KMS keys. Finally, it replicates the data between the S3 buckets in the two regions to ensure that the data is available in both regions.","comment_id":"846419","timestamp":"1679438400.0","upvote_count":"2"},{"comment_id":"844095","content":"ı have tried this scnerio on my aws account \non my experince answer is clearly A","timestamp":"1679250600.0","poster":"sezer","upvote_count":"1"},{"poster":"asoli","upvote_count":"3","timestamp":"1679243340.0","comment_id":"843949","content":"Selected Answer: B\nThe CORRECT answer is B if you want to have the SAME key in multiple regions. Do not think about why it says clients ide encryption and why not server side! That was not something important in the question.\nThe main consideration is to use the SAME key. the other 3 options cannot provide that. So, B is the answer"},{"upvote_count":"1","timestamp":"1678198260.0","comment_id":"831980","content":"Selected Answer: D\nClient-side encryption is the act of encrypting your data locally to ensure its security as it passes to the Amazon S3 service. The Amazon S3 service receives your encrypted data; it does not play a role in encrypting or decrypting it.\n\nTo enable client-side encryption, you have the following options:\n\nUse a key stored in AWS Key Management Service (AWS KMS).\n\nUse a key that you store within your application.","poster":"bilel500"},{"poster":"Steve_4542636","upvote_count":"2","timestamp":"1677945600.0","comment_id":"829095","content":"Selected Answer: D\nKMS is server side encryption only. So it's not b"},{"upvote_count":"1","comment_id":"821221","poster":"KittieHearts","timestamp":"1677304140.0","content":"Selected Answer: B\nI original thought D as they mentioned customer keys to be managed on the the system side. however, while reviewing the comments, the question does say that the same key should be used in both regions. due to this the answer is B"},{"content":"Selected Answer: B\nFor server side KMS encrypted S3 object, they are not replicated between buckets. \nhttps://docs.aws.amazon.com/AmazonS3/latest/userguide/replication-config-for-kms-objects.html\n\"By default, Amazon S3 doesn't replicate objects that are stored at rest using server-side encryption with AWS KMS keys stored in AWS KMS. This section explains the additional configuration that you add to direct Amazon S3 to replicate these objects.\"\n\nClient side encryption is handled 100% on the client side so AWS doesn't even know the S3 objects are encrypted.","comment_id":"820914","upvote_count":"1","timestamp":"1677270600.0","poster":"Steve_4542636"},{"upvote_count":"1","comment_id":"818112","poster":"Bhawesh","timestamp":"1677087240.0","content":"Option B, satisfies both these requirements. Amazon Kinesis Data Firehose calls Lambda function, which removes sensitive info and stores the sanitized data in DynamoDB. Amazon Kinesis Data Firehose also stores un-sanitized data into S3. Then, other internal application can consume that un-sanitized data from S3.\n\nInterestingly, Also Option C meets these 2 requirements, but Option B presents less overhead for the other internal applications. example: some internal application may not be able to consume the un-sanitized stream coming from Kinesis (option: C) but all the internal applications should be able to consume the un-sanitized data from S3 (option: B)."},{"timestamp":"1676655960.0","content":"Selected Answer: B\nFrom https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html For\nmost users, the default AWS KMS key store, which is protected by FIPS 140-2 validated cryptographic\nmodules, fulfills their security requirements. There is no need to add an extra layer of maintenance\nresponsibility or a dependency on an additional service. However, you might consider creating a\ncustom key store if your organization has any of the following requirements: Key material cannot be\nstored in a shared environment. Key material must be subject to a secondary, independent audit\npath. The HSMs that generate and store key material must be certified at FIPS 140-2 Level 3.\nhttps://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html\nhttps://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html","poster":"bdp123","comment_id":"812176","upvote_count":"1"},{"comment_id":"811538","timestamp":"1676614620.0","poster":"Help2023","content":"Selected Answer: B\nB is correct. The key part of the question is \"customer managed key\". Customer managed keys gives more control over its encryption/decryption which no one knows of i.e. AWS except the customer itself and they only store it in KMS. This could be data for banks, governments etc. very confidential and private. Secondly, multi region KMS can be one key so the customer provided key shared in the two regions that the S3's are in.","upvote_count":"1"},{"poster":"NitiATOS","content":"Selected Answer: B\nI am goingwith this option based on Multi regioin key : \nhttps://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html#:~:text=You%20can%20use%20multi%2DRegion%20keys%20with%20client%2Dside%20encryption%20libraries%2C%20such%20as%20the%20AWS%20Encryption%20SDK%2C%20the%20DynamoDB%20Encryption%20Client%2C%20and%20Amazon%20S3%20client%2Dside%20encryption.%20For","timestamp":"1676451720.0","upvote_count":"1","comment_id":"809296"},{"timestamp":"1676108220.0","upvote_count":"1","content":"Selected Answer: D\nI would choose between B and D, but 'client side' encryption in B is not a good idea - so I choose D","poster":"maciekmaciek","comment_id":"805111"},{"content":"Selected Answer: D\nclient side encryption is operational overhead","comment_id":"803933","timestamp":"1675999560.0","poster":"Wiss7","upvote_count":"1"},{"upvote_count":"1","comment_id":"803673","poster":"K0nAn","content":"Selected Answer: D\nSince it says LEAST operational ,I think we should go with option D","timestamp":"1675976040.0"},{"upvote_count":"1","content":"Selected Answer: B\nMulti-region keys can be used for client-side encryption","timestamp":"1675689420.0","comment_id":"799746","poster":"RONNYC"},{"comment_id":"799643","content":"Selected Answer: B\nB because it says \"customer managed key\". Customer managed is the important part. It's basically a key generated by the customer which is than stored on AWS KMS.","upvote_count":"2","poster":"Ello2023","timestamp":"1675681320.0"},{"timestamp":"1675453560.0","content":"Selected Answer: B\nB is correct","comment_id":"797312","upvote_count":"1","poster":"AndyMartinez"},{"upvote_count":"2","comment_id":"794642","poster":"remand","timestamp":"1675201740.0","content":"Selected Answer: D\nD is correct"},{"content":"Selected Answer: D\n\"Which solution will meet these requirements with the LEAST operational overhead?\"\nOption B is not the option with the least overhead because of the client encryption. On the top of that, it is mentioned that \"The data and the key must be stored in each of the two Regions.\", so option D would be my choice.","poster":"pgomess","upvote_count":"1","timestamp":"1675192680.0","comment_id":"794530"},{"content":"Selected Answer: B\nKMS Multi-region keys are required","upvote_count":"1","comment_id":"793135","poster":"Pankul","timestamp":"1675101060.0"},{"content":"ans b\nAWS KMS supports multi-Region keys, which are AWS KMS keys in different AWS Regions that can be used interchangeably – as though you had the same key in multiple Regions. Each set of related multi-Region keys has the same key material and key ID, so you can encrypt data in one AWS Region and decrypt it in a different AWS Region without re-encrypting or making a cross-Region call to AWS KMS.","comment_id":"783978","timestamp":"1674368940.0","upvote_count":"1","poster":"kdinesh95"},{"poster":"remand","content":"Selected Answer: D\nD -is correct","timestamp":"1673632800.0","upvote_count":"2","comment_id":"774758"},{"timestamp":"1673587740.0","comment_id":"774140","poster":"jannymacna","content":"D. Create a customer managed KMS key and an S3 bucket in each Region. Configure the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS). Configure replication between the S3 buckets.\n\nThis solution will meet the requirements of using the same KMS key for encryption and decryption in both S3 buckets, with the least operational overhead. By creating a customer managed KMS key and an S3 bucket in each Region, configuring the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS), and configuring replication between the S3 buckets, the data will be encrypted and decrypted with the same key in both Regions, and the data and the key will be stored in each of the two Regions. This eliminates the need for client-side encryption and replication between the S3 buckets with SSE-S3, which would add operational overhead.","upvote_count":"2"},{"comment_id":"769255","upvote_count":"1","content":"Selected Answer: B\nI think it is B. Only B states multi-region keys. Keys in 2 regions can be the same in key id hash, but they will be treated as 2 keys. So it is not important whether it is client-side encryption.","poster":"goodmail","timestamp":"1673171100.0"},{"poster":"TamZei","comment_id":"768808","timestamp":"1673115480.0","content":"The answer is (D). both SSE-KMS and SSE-S3 uses serer-side encryption, there for any answer that has Client-Side encryption is wrong. Also, the requirement that the data and the KEY must be stored in each region, the default SSE-S3 is created by AWS therefore, the company does not have the control on the key for encryption and decryption. Therefore (D) is correct since the company has control on the key and can store it in both regions","upvote_count":"1"},{"timestamp":"1672842120.0","upvote_count":"1","content":"Selected Answer: B\nas per the AWS documents when it is needed to encrypt/decrypt with the sae key cross region Multi-region key is the feature to use -> https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html","comment_id":"765745","poster":"dexpos"},{"content":"Selected Answer: D\nWhen you use server-side encryption with AWS KMS (SSE-KMS), you can use the default AWS managed key, or you can specify a customer managed key that you have already created. \nhttps://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html#aws-managed-customer-managed-keys\nClient-side encryption is operational overhead.","comment_id":"762523","timestamp":"1672470900.0","poster":"John_Zhuang","upvote_count":"1"},{"upvote_count":"1","timestamp":"1672060320.0","content":"To meet the requirements of encrypting data stored in S3 buckets in two different regions with the same AWS KMS key and with the least operational overhead, you can use the following solution:\n\nCreate a KMS customer managed key in one of the regions.\nUse this key to encrypt the data that is stored in the S3 bucket in that region.\nCreate a cross-region replication configuration for the S3 bucket in the first region, replicating the data to the S3 bucket in the second region.\nEnable object-level encryption for the replication configuration, using the same KMS customer managed key that was used to encrypt the data in the first region.\nThis solution allows you to use the same KMS key to encrypt the data in both regions, without having to manually replicate the key to the second region. The key remains securely stored in the first region, and the encrypted data is replicated to the second region using the replication configuration. This solution also allows you to manage the key and the encrypted data in a single region, minimizing operational overhead.\n=> C","comment_id":"757447","comments":[{"timestamp":"1672060500.0","poster":"Zerotn3","upvote_count":"1","comment_id":"757452","content":"Sorry, typing wrong => That B is correct"}],"poster":"Zerotn3"},{"comments":[{"timestamp":"1671561360.0","poster":"pazabal","upvote_count":"2","content":"Actually the solution that meets the requirements with the least operational overhead is option D","comment_id":"751342"},{"content":"A, doesn't meet the reqs of using same key for both regions\nB, requires the app to handle encryption/decryption which increases opp overhead\nC, requires the app to manage both types of keys, which increases opp overhead","timestamp":"1671561600.0","upvote_count":"1","poster":"pazabal","comment_id":"751345"}],"content":"Selected Answer: B\nencrypted and decrypted with the same KMS key = Not D. Multi-region keys = B","timestamp":"1671556380.0","upvote_count":"1","poster":"pazabal","comment_id":"751266"},{"comment_id":"750438","upvote_count":"3","content":"Selected Answer: D\nThe correct answer is D: Create a customer managed KMS key and an S3 bucket in each Region. Configure the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS). Configure replication between the S3 buckets.\n\nTo meet the requirements of the company, you should create a customer managed KMS key and an S3 bucket in each Region. Then, you should configure the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS), which will allow the data in the S3 buckets to be encrypted and decrypted with the same KMS key. Finally, you should configure replication between the S3 buckets to ensure that the data and the key are stored in both Regions.","comments":[{"comment_id":"750439","upvote_count":"1","timestamp":"1671505980.0","poster":"Buruguduystunstugudunstuy","comments":[{"timestamp":"1672614540.0","upvote_count":"1","comments":[{"upvote_count":"1","timestamp":"1677478260.0","content":"Here's a side-by-side comparison of the two options:\n\nAnswer B:\n\n1. Create a customer-managed multi-Region KMS key.\n2. Create an S3 bucket in each Region.\n3. Configure replication between the S3 buckets.\n4. Configure the application to use the KMS key with client-side encryption.\n\nAnswer D:\n\n1. Create a customer-managed KMS key and an S3 bucket in each Region.\n2. Configure the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS).\n3. Configure replication between the S3 buckets.\n\nThe main difference between the two options is the type of encryption used and where the encryption occurs. Answer B uses client-side encryption, which means that the data is encrypted before it is uploaded to S3. The application must handle the encryption and decryption of the data using the customer-managed KMS key. In contrast, Answer D uses server-side encryption with SSE-KMS, which means that the data is encrypted by S3 using the customer-managed KMS key.","comments":[{"timestamp":"1677478320.0","poster":"Buruguduystunstugudunstuy","content":"Answer D has the advantage of reducing the operational overhead of the application, as the encryption and decryption of the data are handled by S3. This simplifies the application logic and reduces the amount of code that needs to be written and maintained. Additionally, SSE-KMS provides a higher level of security than client-side encryption, as the encryption keys never leave AWS and are never exposed to the application.\n\nAnswer B, on the other hand, maybe preferred if there are specific security or compliance requirements that mandate the use of client-side encryption. However, it adds additional operational overhead to the application, as the application must handle the encryption and decryption of the data using the customer-managed KMS key. \n\nTherefore, Answer (D) is the correct answer for me.","comment_id":"823270","upvote_count":"2"}],"poster":"Buruguduystunstugudunstuy","comment_id":"823269"},{"timestamp":"1672614600.0","poster":"Mahadeva","upvote_count":"1","content":"So, the correct answer is (B).","comment_id":"763385"}],"poster":"Mahadeva","content":"Your interpretation of the question seems to be wrong. \"Both S3 buckets must be encrypted and decrypted with same KMS key.\" This condition means S3 buckets in 2 regions should be using the same KMS key for enc/dec. This is possible only sharing the KMS key across 2 regions. ie. Multi-Region KMS key. Client-encryption may be an overload. But, in this situation once after the replication is done, a client-side replication is less-overhead because \"there is another condition: data and key must be stored in each region.\" ie data and key is duplicated. Rather than have two-time server-side encryption (for 2 regions), it is less overhead to do a one-time client-side encryption and store the data in the region. SSE-C btw supports the replication of the encrypted data in a cross-region-replication.","comment_id":"763384"}],"content":"Using server-side encryption with AWS KMS keys (SSE-KMS) allows you to use a single key to encrypt and decrypt data in multiple S3 buckets, which reduces the operational overhead of managing multiple keys. In contrast, using server-side encryption with Amazon S3 managed encryption keys (SSE-S3) would require you to manage a separate key for each S3 bucket, which would increase the operational overhead.\n\nClient-side encryption requires you to manage the encryption and decryption of data within the application, which would also increase the operational overhead compared to using server-side encryption with AWS KMS keys (SSE-KMS)."}],"poster":"Buruguduystunstugudunstuy","timestamp":"1671505980.0"},{"upvote_count":"1","comment_id":"749558","timestamp":"1671432660.0","content":"Selected Answer: B\nOption B","poster":"career360guru"},{"comment_id":"748233","poster":"yoben84","timestamp":"1671296820.0","upvote_count":"2","content":"Selected Answer: B\nI'm for option b since it states the same key that should be used, so multi region key."},{"poster":"arseyam","timestamp":"1671260640.0","content":"Selected Answer: B\nActive-active applications that span multiple Regions\nSome workloads and applications can span multiple Regions in active-active architectures. For these applications, multi-Region keys can reduce complexity by providing the same key material for concurrent encrypt and decrypt operations on data that might be moving across Region boundaries.\n\nYou can use multi-Region keys with client-side encryption libraries, such as the AWS Encryption SDK, the DynamoDB Encryption Client, and Amazon S3 client-side encryption. For an example of using multi-Region keys with Amazon DynamoDB global tables and the DynamoDB Encryption Client, see Encrypt global data client-side with AWS KMS multi-Region keys in the AWS Security Blog.\n\nhttps://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html","upvote_count":"1","comment_id":"747833"},{"timestamp":"1670924640.0","content":"Answer is D \nThe question with the least operational overhead, you can create a customer managed KMS key and an S3 bucket in each Region. You can then configure the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS), which allows you to encrypt and decrypt data in your S3 buckets using a customer managed KMS key.","upvote_count":"1","poster":"Shasha1","comment_id":"743832"},{"content":"D he question with the least operational overhead, you can create a customer managed KMS key and an S3 bucket in each Region. You can then configure the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS), which allows you to encrypt and decrypt data in your S3 buckets using a customer managed KMS key.","upvote_count":"1","comment_id":"743830","poster":"Shasha1","timestamp":"1670924580.0"},{"timestamp":"1670782740.0","upvote_count":"1","content":"Selected Answer: B\ni didn't get the replication part","poster":"333666999","comment_id":"741970"},{"poster":"prethesh","timestamp":"1670763900.0","comment_id":"741714","upvote_count":"1","content":"Selected Answer: B\nAWS KMS supports multi-Region keys, which are AWS KMS keys in different AWS Regions that can be used interchangeably, so you can encrypt data in one AWS Region and decrypt it in a different AWS Region without re-encrypting or making a cross-Region call to AWS KMS.\nhttps://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html"},{"upvote_count":"1","comment_id":"730052","content":"The main point asked in the question is to use same kms key, if that is not in the answer rest of the facts are not viable.","timestamp":"1669706940.0","poster":"workatpace"},{"poster":"Mikkka","upvote_count":"1","timestamp":"1668722760.0","comment_id":"720912","content":"BBBBBB"},{"upvote_count":"1","timestamp":"1668237420.0","comment_id":"716514","content":"Should be D (cant b B as B is client side encryption , but question says SSE-KMS)","poster":"manu427"},{"comment_id":"710827","poster":"backbencher2022","content":"Selected Answer: B\nB is the correct answer because of same key usage requirements at both regions and Multi-Region keys in AWS KMS fulfills this requirement. For more details check - https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html","timestamp":"1667518680.0","upvote_count":"2"},{"comment_id":"705996","timestamp":"1666916040.0","upvote_count":"2","content":"B. “The company must use an AWS Key Management Service (AWS KMS) customer managed key to encrypt all data that is stored in the S3 buckets”. Customer managed keys can be multi-region. SSE-S3 doesn’t allow for customer managed key, AWS S3 manages the key— server side encryption.","poster":"The_Body"},{"content":"Selected Answer: B\nCatch is multi-region keys and those must be same. so its B","poster":"ManoAni","comment_id":"704899","timestamp":"1666805640.0","upvote_count":"2"},{"comments":[{"poster":"BoboChow","content":"The data in both S3 buckets must be encrypted and decrypted with the same KMS key.\nD creates KMS key in each region, which means to create two key in total","upvote_count":"2","comment_id":"706196","timestamp":"1666938540.0"}],"comment_id":"703173","timestamp":"1666626360.0","poster":"Six_Fingered_Jose","upvote_count":"2","content":"Selected Answer: D\nanswer should be D as question explicitly mentioned the use of AWS KMS key for the s3 encryption, while C is only mentioning the creation of the key but only encrypting with S3 encryption"},{"content":"B is right answer","timestamp":"1665428460.0","comment_id":"691449","poster":"Ekie","upvote_count":"2"},{"content":"B is the correct answer","upvote_count":"2","comment_id":"689484","timestamp":"1665244260.0","poster":"CloudGuru99"}],"unix_timestamp":1665244260,"question_text":"A company is building an application in the AWS Cloud. The application will store data in Amazon S3 buckets in two AWS Regions. The company must use an AWS Key Management Service (AWS KMS) customer managed key to encrypt all data that is stored in the S3 buckets. The data in both S3 buckets must be encrypted and decrypted with the same KMS key. The data and the key must be stored in each of the two Regions.\nWhich solution will meet these requirements with the LEAST operational overhead?","answer_images":[],"answers_community":["B (53%)","D (46%)","1%"],"question_images":[],"choices":{"B":"Create a customer managed multi-Region KMS key. Create an S3 bucket in each Region. Configure replication between the S3 buckets. Configure the application to use the KMS key with client-side encryption.","C":"Create a customer managed KMS key and an S3 bucket in each Region. Configure the S3 buckets to use server-side encryption with Amazon S3 managed encryption keys (SSE-S3). Configure replication between the S3 buckets.","D":"Create a customer managed KMS key and an S3 bucket in each Region. Configure the S3 buckets to use server-side encryption with AWS KMS keys (SSE-KMS). Configure replication between the S3 buckets.","A":"Create an S3 bucket in each Region. Configure the S3 buckets to use server-side encryption with Amazon S3 managed encryption keys (SSE-S3). Configure replication between the S3 buckets."},"url":"https://www.examtopics.com/discussions/amazon/view/84747-exam-aws-certified-solutions-architect-associate-saa-c03/","topic":"1","isMC":true,"answer":"B","answer_ET":"B","timestamp":"2022-10-08 17:51:00","question_id":310}],"exam":{"isImplemented":true,"numberOfQuestions":1019,"isMCOnly":true,"id":31,"lastUpdated":"11 Apr 2025","provider":"Amazon","isBeta":false,"name":"AWS Certified Solutions Architect - Associate SAA-C03"},"currentPage":62},"__N_SSP":true}