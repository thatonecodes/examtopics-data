{"pageProps":{"questions":[{"id":"TNYqz9wFHvrrF4d4FFDm","exam_id":25,"question_images":[],"choices":{"A":"Use the --page-size parameter to request a smaller number of items.","D":"Use quotation marks around strings to enclose data structure.","B":"Use shorthand syntax to separate the list by a single space.","C":"Use the yaml-stream output for faster viewing of large datasets."},"question_id":416,"answer":"A","answer_description":"","answer_ET":"A","topic":"1","answer_images":[],"answers_community":["A (100%)"],"isMC":true,"url":"https://www.examtopics.com/discussions/amazon/view/79292-exam-aws-certified-developer-associate-topic-1-question-74/","timestamp":"2022-09-02 08:21:00","discussion":[{"comment_id":"657052","upvote_count":"5","content":"Selected Answer: A\nAAAAAAAA","timestamp":"1662099660.0","poster":"LEHUY"},{"content":"Selected Answer: A\nA) Correct\n\nWhen running AWS CLI list commands (e.g., aws s3 ls, aws ec2 describe-instances), the CLI may time out due to the amount of data being retrieved in a single API request. To mitigate this, the --page-size parameter can be used to limit the number of items returned per page in each API call. This reduces the load on the CLI and prevents timeouts.","upvote_count":"1","poster":"sumanshu","comment_id":"1328404","timestamp":"1734519240.0"},{"timestamp":"1687956300.0","upvote_count":"1","poster":"rcaliandro","comment_id":"936667","content":"Selected Answer: A\nThe correct answer is A. While the B (using --max-items) reduce the number of elements that are sent as output, the --page-size parameter instead, return all the items of the specified resource. If we set this parameter to a value for example equals to 5, it means that in background the cli will execute ona API after the other and each API requests only 5 elements by time. This is a way to avoid timeouts without interfer with the final result"},{"content":"How to use the --page-size parameter\nIf you see issues when running list commands on a large number of resources, the default page size might be too high. This can cause calls to AWS services to exceed the maximum allowed time and generate a \"timed out\" error. You can use the --page-size option to specify that the AWS CLI request a smaller number of items from each call to the AWS service. The AWS CLI still retrieves the full list, but performs a larger number of service API calls in the background and retrieves a smaller number of items with each call. This gives the individual calls a better chance of succeeding without a timeout. Changing the page size doesn't affect the output; it affects only the number of API calls that need to be made to generate the output.\n\n\n$ aws s3api list-objects \\\n --bucket my-bucket \\\n --page-size 100\n{\n \"Contents\": [","upvote_count":"1","poster":"sichilam","timestamp":"1673184660.0","comment_id":"769459"},{"content":"A is correct","comment_id":"769458","upvote_count":"1","poster":"sichilam","timestamp":"1673184540.0"},{"poster":"dark_cherrymon","upvote_count":"2","content":"Selected Answer: A\nit's A","comment_id":"720881","timestamp":"1668720660.0"},{"upvote_count":"4","content":"Selected Answer: A\nA: https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-pagination.html#:~:text=How%20to%20use%20the%20%2D%2Dpage%2Dsize%20parameter","comment_id":"672330","poster":"robbyboss","timestamp":"1663503540.0"}],"question_text":"A developer notices timeouts from the AWS CLI when the developer runs list commands.\nWhat should the developer do to avoid these timeouts?","unix_timestamp":1662099660},{"id":"3utsDdQxLwcPEA1v1tJP","unix_timestamp":1662160380,"choices":{"A":"Place the API behind an Amazon API Gateway API. Set the server-side throttling limits.","B":"Place the API behind a Network Load Balancer. Set the target group throttling limits.","C":"Place the API behind an Application Load Balancer. Set the target group throttling limits.","D":"Place the API behind an Amazon API Gateway API. Set the per-client throttling limits."},"question_images":[],"answer_ET":"A","topic":"1","answers_community":["A (55%)","D (45%)"],"answer":"A","question_id":417,"exam_id":25,"url":"https://www.examtopics.com/discussions/amazon/view/79625-exam-aws-certified-developer-associate-topic-1-question-75/","question_text":"A company has moved a legacy on-premises application to AWS by performing a lift and shift. The application exposes a REST API that can be used to retrieve billing information. The application is running on a single Amazon EC2 instance. The application code cannot support concurrent invocations. Many clients access the API, and the company adds new clients all the time.\nA developer is concerned that the application might become overwhelmed by too many requests. The developer needs to limit the number of requests to the API for all current and future clients. The developer must not change the API, the application, or the client code.\nWhat should the developer do to meet these requirements?","timestamp":"2022-09-03 01:13:00","isMC":true,"discussion":[{"comments":[{"content":"D does not require client code change.","poster":"KT_Yu","upvote_count":"4","comment_id":"775060","timestamp":"1673666460.0"}],"poster":"Fay46","upvote_count":"13","comment_id":"661554","content":"Selected Answer: A\ncannot be D since adding API key would require client code change","timestamp":"1662487980.0"},{"poster":"robbyboss","comment_id":"672336","timestamp":"1663503720.0","comments":[{"content":"Agreed. And thinking logically, you want to throttle on server side to reduce potential over-demand concerns. If you throttled per client, you risk there being too many clients.","upvote_count":"2","poster":"Spamuel","comment_id":"674184","timestamp":"1663678740.0","comments":[{"poster":"Spamuel","comment_id":"680017","timestamp":"1664214180.0","upvote_count":"9","content":"Ignore this, the answer is D. A is not an option per https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html"}]}],"upvote_count":"11","content":"Selected Answer: A\nA since all clients has to be limited same \"limit the number of requests to the API for all current and future clients\""},{"upvote_count":"1","comment_id":"1328439","poster":"sumanshu","content":"Selected Answer: A\nOption A: \"Place the API behind an API Gateway and set server-side throttling limits.\"\n\nThis refers to stage-level throttling or account-level throttling, which limits traffic globally for all clients collectively. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html\n✅ This approach is correct because the question asks for a global throttling mechanism that applies to all current and future clients.\n\nOption D: \"Place the API behind an API Gateway and set per-client throttling limits.\"\n\nThis refers to usage plans with API keys, where throttling limits are set per client.\n❌ This approach is incorrect because the question explicitly states that the limit should apply to all clients collectively.","timestamp":"1734520680.0"},{"upvote_count":"1","content":"i think it should be D since the question mentions about limiting the number of requests for client so it has to be D and with A there is no such server side throttling in API gateway instead there is stage level throttling","timestamp":"1708600380.0","comment_id":"1156319","poster":"akash_38"},{"timestamp":"1707113580.0","upvote_count":"1","content":"Selected Answer: A\nI know there is no such option as server side throttling as such, but I think AWS here is referring to per API, per Stage limits. Per client throttling can be used for individual clients, but if the number of client increase it would still cause a problem overall. Furthermore it uses Client Identifiers as the API Key. How can these be provisioned keeping in mind all future clients.","comment_id":"1140703","poster":"SD_CS"},{"poster":"Jazz888","upvote_count":"1","comment_id":"1108917","timestamp":"1703868420.0","content":"A\nThe only reason and important point that makes D incorrect is the keyword \"cannot support concurrent invocations\". And again, what makes A doubt full is the term \"server side throttling\" is there a such thing related to API Gateway? So my conclusion I would take the risk of answering A is correct - but I could be wrong."},{"poster":"sweetheatmn","comment_id":"1024899","upvote_count":"3","timestamp":"1696429680.0","content":"I go with A and here is why D is not correct \n\nLet's assume the ec2 instance in the question can only process 100 requests per second and will not cope with further request count\n\n- On the API Gateway console there are two kinds of throttling, one of which can be applied the whole stage and this limits the number of all requests coming through the API to the origin EC2 this one is correct because it makes sure that the APP will never get overwhelmed by requests it can not cope with so for example if we set the stage to 100 requests per second, only 100 requests will pass throw the API to the EC2 instance\n\nscreenshot: https://monosnap.com/file/0o6S7cqqQ4X2aKYCYWFgDMx1cStwt7\n\n- D can not be correct because if we set the per-client limit to for example 1 and we then get 200 customers, this means 200 requests can pass through the API and overwhelm the instance"},{"comment_id":"989178","timestamp":"1692879540.0","upvote_count":"3","poster":"ninomfr64","content":"Selected Answer: A\nYet another tricky worded questions ... \nOn one side, there is no such a thing like \"server-side\" throttling in APIGW. However, in the context of the question this sounds to me like \"per-stage / per-method\" throttling. On the other side, per-client throttling would not prevent different client to concurrently access the API. Thus A (by the way I think that per API-limit cannot prevent different client to concurrently access the API, but only limit it)"},{"poster":"AWSdeveloper08","timestamp":"1689867300.0","comment_id":"957759","content":"Selected Answer: A\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html","upvote_count":"1"},{"upvote_count":"1","poster":"ezredame","comments":[{"content":"on the other hand there is no such thing as server side limit.So I change my answer as D","poster":"ezredame","upvote_count":"2","comments":[{"upvote_count":"1","comment_id":"1012492","content":"yes there is no server side limit. checking on the docs","timestamp":"1695226500.0","poster":"Kazman"}],"timestamp":"1685362020.0","comment_id":"909372"}],"comment_id":"909363","timestamp":"1685361480.0","content":"Selected Answer: A\nOption D (placing the API behind an Amazon API Gateway API and setting per-client throttling limits) would require modifying the client code, which is explicitly mentioned as a constraint in the question."},{"poster":"KDennisss","timestamp":"1681625340.0","comment_id":"871503","upvote_count":"1","content":"Selected Answer: A\nD provides per-client throttling, but still accesses the application's REST API directly and does not solve the issue of API load."},{"content":"The answer is D and I am 100% sure. For those who chose A, there is no such thing as server side limit. And the question clearly states that the developer needs to set limits for current and future clients. Such an easy question but people seem to be confused.\nRefer to this page:\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html","timestamp":"1677186180.0","poster":"pancman","comment_id":"819750","upvote_count":"3","comments":[{"poster":"borisgor","timestamp":"1681291260.0","content":"Per document, no such thing , from exam perspective , it's D but logically there is a problem. Only one client can invoke , if there are 3 clients requesting, only one of them is allowed by app. Let's say we have per-client limit as 1 request , this is for each client , meaning we have still 3 requests. Whereas if we have server side limit to allow only 1 request, it's going to be regardless of number of clients.\nThat's why people thinking target side limit makes much more sense. I would select Per-API limit if it would be in options.","comment_id":"868097","upvote_count":"1"}]},{"upvote_count":"1","poster":"MMaquis","content":"Selected Answer: D\nAnswer is D","comment_id":"811602","timestamp":"1676619540.0"},{"timestamp":"1674998400.0","poster":"unbornfroyo","content":"Selected Answer: A\nThis option meets the requirements as it allows the developer to limit the number of requests to the API without changing the API, the application or the client code. By placing the API behind an Amazon API Gateway, the developer can set server-side throttling limits which will apply to all clients accessing the API. This will ensure that the number of requests to the API does not become overwhelming and affect the performance of the application.","comment_id":"791656","upvote_count":"2"},{"upvote_count":"2","poster":"whenthan","comment_id":"773058","content":"answer D \nAs an API developer, you can set the target limits for individual API stages or methods to improve overall performance across all APIs in your account. Alternatively, you can enable usage plans to set throttles on client request submissions based on specified requests rates and quotas.","timestamp":"1673490000.0"},{"timestamp":"1673196480.0","comment_id":"769636","poster":"sichilam","upvote_count":"1","content":"D it is \n\n\nAmazon API Gateway provides four basic types of throttling-related settings:\n\nAWS throttling limits are applied across all accounts and clients in a region. \n\nPer-account limits are applied to all APIs in an account in a specified Region. \n\nPer-API, per-stage throttling limits are applied at the API method level for a stage. \n\nPer-client throttling limits are applied to clients that use API keys associated with your usage plan as client identifier. Note that these limits can't be higher than the per-account limits."},{"timestamp":"1673104320.0","poster":"KT_Yu","content":"ANS: D\nPer-client throttling limits are applied to clients that use API keys associated with your \nsage plan as client identifier. Note that these limits can't be higher than the per-account limits.\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html","comment_id":"768677","upvote_count":"1"},{"content":"Selected Answer: D\nD for sure","timestamp":"1673104200.0","upvote_count":"1","comment_id":"768675","poster":"KT_Yu"},{"poster":"fabriciollf","timestamp":"1671757200.0","content":"Selected Answer: A\nConfiguring method-level throttling targets in a usage plan\nYou can set additional throttling targets at the method level in Usage Plans as shown in Create a usage plan. In the API Gateway console, these are set by specifying Resource=<resource>, Method=<method> in the Configure Method Throttling setting. For example, for the PetStore example, you might specify Resource=/pets, Method=GET.","comment_id":"753780","upvote_count":"2"},{"content":"Selected Answer: D\nD because the throttling happens in API not the server","upvote_count":"1","comment_id":"728584","timestamp":"1669582080.0","poster":"gpit"},{"timestamp":"1668720960.0","upvote_count":"1","comment_id":"720884","poster":"dark_cherrymon","content":"Selected Answer: D\nD\n\ni don't think there is such a thing as server side throttling limit. i intitially went for C, but after reading the question again, it says restrict traffic to api so it's D"},{"content":"Selected Answer: D\nD does not require client code change. \"You can generate an API key in API Gateway, or import it into API Gateway from an external source\". The throttling then takes effect in API Gateway based on the API key of the client.","timestamp":"1665664080.0","upvote_count":"4","poster":"Arnaud92","comment_id":"693883"},{"timestamp":"1665576720.0","upvote_count":"5","content":"Selected Answer: D\nA does not exist. D is correct as already pointed out by other users:\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html","poster":"tbhtp","comment_id":"693054"},{"poster":"haazybanj","comment_id":"690446","timestamp":"1665339600.0","upvote_count":"1","content":"Selected Answer: D\nD is the answer."},{"upvote_count":"3","poster":"haazybanj","content":"Selected Answer: D\nD is the answer.\nper-client throttling limits","timestamp":"1664895600.0","comment_id":"686265"},{"comment_id":"682126","timestamp":"1664399460.0","poster":"XAvenger","upvote_count":"2","comments":[{"timestamp":"1664464380.0","poster":"zhangyu20000","content":"AWS throttling is not allowed to be changed.","upvote_count":"1","comment_id":"682798"}],"content":"Selected Answer: D\nhttps://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html\nyou can enable usage plans to set throttles on client request submissions based on specified requests rates and quotas."},{"timestamp":"1664300520.0","poster":"AulaitQM","comment_id":"681016","content":"Selected Answer: D\nA would make sense if it actually was an option. Also, the question is confusing us on purpose by using the word \"client\". New clients according to the question seems to mean new customers, but clients as for D seems to refer to software clients that use your API.","upvote_count":"2"},{"content":"Selected Answer: D\nDefinitely D: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html","comment_id":"678066","upvote_count":"4","timestamp":"1664039460.0","poster":"david00"},{"upvote_count":"4","comment_id":"657892","content":"Selected Answer: D\nCorrect Answer is D","poster":"m_t_kd","timestamp":"1662160380.0"}],"answer_description":"","answer_images":[]},{"id":"5epdF07iYSoZHOIZJCXF","unix_timestamp":1662044400,"choices":{"C":"On the ECS web server configuration, use a GeoIP database to look up the requested IP address and redirect requests to the correct URLs by country.","D":"Use AWS WAF to determine the country of origin. Create an AWS WAF custom rule with a geographic match condition to redirect traffic from each country to the correct URL.","A":"Update the routing policy for the application's Route 53 record to specify geolocation routing. Configure listener rules based on a unique alias location to redirect requests to the correct URLs by country.","B":"Create a CloudFront function to inspect the CloudFront-Viewer-Country header and return redirect responses to different URLs based on user location."},"question_images":[],"answer_ET":"B","topic":"1","answer":"B","answers_community":["B (67%)","A (33%)"],"question_id":418,"exam_id":25,"url":"https://www.examtopics.com/discussions/amazon/view/79072-exam-aws-certified-developer-associate-topic-1-question-76/","question_text":"An ecommerce company wants to redirect users to a country-specific website when they enter the example.com website. For example, the company wants to redirect United States users to example.com/us/ and wants to redirect French users to example.com/fr/. The web application is using Amazon CloudFront and an\nApplication Load Balancer with an Amazon Elastic Container Service (Amazon ECS) cluster. The application's domain name resolution is configured in an\nAmazon Route 53 public hosted zone.\nWhich solution will meet these requirements with the LEAST operational effort?","timestamp":"2022-09-01 17:00:00","isMC":true,"discussion":[{"upvote_count":"9","timestamp":"1662044400.0","content":"This should be B I think:\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-redirect-url.html\n\nRoute 53/DNS can't redirect urls, only domains from what I can see","comment_id":"656381","poster":"JOL86"},{"content":"Selected Answer: B\nB) - Correct - mazon CloudFront provides the CloudFront-Viewer-Country header.\nYou can create a lightweight CloudFront function to inspect this header and generate a redirect response to the appropriate country-specific URL.","timestamp":"1734521700.0","upvote_count":"1","poster":"sumanshu","comment_id":"1328462"},{"upvote_count":"1","comment_id":"1310554","poster":"JonasKahnwald","timestamp":"1731412560.0","content":"Selected Answer: B\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example_cloudfront_functions_redirect_based_on_country_section.html"},{"poster":"Teemo2023","comment_id":"1104449","content":"Selected Answer: B\nninomfr64 is right","timestamp":"1703393460.0","upvote_count":"1"},{"poster":"sweetheatmn","content":"Selected Answer: B\nI go with B","upvote_count":"1","timestamp":"1696429860.0","comment_id":"1024903"},{"content":"Selected Answer: B\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-redirect-url.html","timestamp":"1689866520.0","comment_id":"957738","upvote_count":"1","poster":"AWSdeveloper08"},{"upvote_count":"1","comment_id":"940556","poster":"tuongthuy","timestamp":"1688274060.0","content":"Selected Answer: B\nCorrect answer is B"},{"poster":"rcaliandro","timestamp":"1687956780.0","upvote_count":"1","comment_id":"936672","content":"Selected Answer: A\nThe correct answer is A. With Route 53 we can take advantage to geolocation to configure the routing based on the request Country and set the URLs for the specified Countries.","comments":[{"upvote_count":"7","comments":[{"timestamp":"1692880980.0","content":"Here is the AWS doc with CloudFront Function to implement this specific use case https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-redirect-url.html","comment_id":"989204","poster":"ninomfr64","upvote_count":"3"}],"poster":"ninomfr64","comment_id":"989186","content":"This would work if we redirect to us.example.com, but here we are redirecting to example.com/us and Route53 works with hostnames not paths. To me R53 would be a solution if the scenario had multiple ECS cluster in different regions","timestamp":"1692880020.0"}]},{"poster":"ezredame","upvote_count":"1","content":"Selected Answer: B\nyou must configure CloudFront to add the CloudFront-Viewer-Country header to incoming requests by adding it to the allowed headers in a cache policy or an origin request policy","timestamp":"1685362680.0","comment_id":"909383"},{"timestamp":"1682457900.0","comment_id":"880875","upvote_count":"1","poster":"MrTee","content":"Selected Answer: B\nB. Create a CloudFront function to inspect the CloudFront-Viewer-Country header and return redirect responses to different URLs based on user location. This allows the developer to use a CloudFront function to inspect the request headers and redirect users to the appropriate country-specific website based on their location."},{"timestamp":"1682263560.0","poster":"javarun","content":"Selected Answer: B\nB sounds correct","comment_id":"878531","upvote_count":"1"},{"timestamp":"1680230520.0","content":"Selected Answer: B\nroute 53 geolocation routing policy can route traffic to another AWS resource / another DNS record, it can't route to URLs","poster":"xifengying","upvote_count":"4","comment_id":"856556"},{"comment_id":"822120","timestamp":"1677394740.0","upvote_count":"2","poster":"ts1989","content":"Selected Answer: B\nI don't think route table can add /us URL"},{"content":"Selected Answer: A\nA route 53 make more sense since require least operational effort\nhttps://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html","poster":"eversonzs","comment_id":"821548","upvote_count":"1","comments":[{"comments":[{"timestamp":"1681292160.0","upvote_count":"1","content":"Right, child urls (xxxxx.com/us or /fr) cant have different dns records , it's B","poster":"borisgor","comment_id":"868113"}],"timestamp":"1677929160.0","upvote_count":"1","content":"No way you can add any url to Geolocation policy, Geolocation Policy works with IP address of the server hosting the url so this two URL have the same IP example.com/us/ example.com/fr/ route53 is not the option.","comment_id":"828851","poster":"rlnd2000"}],"timestamp":"1677334440.0"},{"poster":"ezeik","comment_id":"815779","upvote_count":"2","timestamp":"1676923560.0","content":"Selected Answer: A\nI think the A is correct, https://stackoverflow.com/questions/46212241/domain-redirection-based-on-geo-aws"},{"content":"Selected Answer: A\nThe solution requires LEAST operational effort, which is definitely not a CloudForm function configuring. It's much easier to use route 53 geo.","comment_id":"811605","upvote_count":"1","poster":"MMaquis","timestamp":"1676619780.0"},{"upvote_count":"1","poster":"Smartiup","timestamp":"1676147700.0","comments":[{"timestamp":"1676209020.0","content":"Its B... after further investigation its not possible with route 53 alone to redirect to a path like www.example.com/fr or /us. The most correct way to resolve this would be to use route53 AND cloudfront, since you can only pick 1 service cloudfront will have to do it alone in a hacky way by using the function to determine origin country.","upvote_count":"2","comment_id":"806373","poster":"Smartiup"}],"content":"Selected Answer: A\nMake it with route 53 since its possible to check the country of the request and map from cname to cname. Also it requires the least effort since you dont have to make a function for it to work.","comment_id":"805655"},{"upvote_count":"3","poster":"whenthan","timestamp":"1673490240.0","content":"answer A \nLEAST operational effort","comment_id":"773060"},{"content":"Selected Answer: B\nhttps://aws.amazon.com/about-aws/whats-new/2020/07/cloudfront-geolocation-headers/\n...You can use these additional geolocation headers along with the existing supported CloudFront headers to personalize the content that you deliver to your viewers. For example, you can pass the postal-code header to your origin to display hyper-local content or ads. You can also use Lambda@Edge origin request functions to make network calls to pull in local language files and construct and return a language specific HTML page for each country or region.","poster":"Dirisme","upvote_count":"1","comment_id":"769763","timestamp":"1673206200.0"},{"poster":"sichilam","comment_id":"769663","upvote_count":"1","content":"1. Simple routing policy:\n\n2. Weighted: \n3. LBR (Latency based routing): \n4. Failover: U\n\n5. Geolocation: \n6. Multivalue answer: \n7. IP-based:","timestamp":"1673198700.0"},{"timestamp":"1673196720.0","comment_id":"769638","upvote_count":"1","content":"A it is","poster":"sichilam"},{"comment_id":"759246","content":"Selected Answer: A\nhttps://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html\n\"You can specify geographic locations by continent, by country, or by state in the United States.\"\nLeast operational effort is the important part here.","poster":"fabriciollf","timestamp":"1672191180.0","upvote_count":"3"},{"timestamp":"1670510820.0","content":"Selected Answer: B\nCloudFront Function supports URL redirects or rewrites - You can redirect viewers to other pages based on information in the request, or rewrite all requests from one path to another.\n\nRef: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/edge-functions.html","upvote_count":"2","poster":"aws_leo","comment_id":"739174"},{"comment_id":"721037","timestamp":"1668742140.0","upvote_count":"2","poster":"dark_cherrymon","content":"still B\n\nroute 53 can redirect to cnames by geolocation but cnames can't include the path like /fn. so i think route 53 is possible, but probably very hard"},{"comment_id":"720961","timestamp":"1668728340.0","poster":"dark_cherrymon","content":"Selected Answer: B\nB i didn't do that much research but thinking about route53 geo routing is giving me a headace so B is simplier","upvote_count":"1"},{"comment_id":"689357","content":"Selected Answer: B\nA is perfect low operational effort for subdomains only\n\nHence, B","timestamp":"1665236340.0","upvote_count":"3","poster":"habros"},{"comment_id":"678407","timestamp":"1664079900.0","content":"Looks like B\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-cloudfront-headers.html","upvote_count":"2","poster":"RUKSHANA"},{"content":"Selected Answer: A\nA&B works, but the \"least operational effort\" is A, as it needs no code changes","poster":"david00","upvote_count":"3","comment_id":"678076","timestamp":"1664039940.0"},{"poster":"Spamuel","upvote_count":"2","content":"I'm struggling between A & B here. A is also possible, but I'm not sure which is less operational effort.\n\nhttps://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html","timestamp":"1663678920.0","comment_id":"674189"},{"timestamp":"1663660980.0","poster":"arun00028","comments":[{"poster":"Burakko","content":"LEAST operational effort","timestamp":"1671225060.0","upvote_count":"1","comment_id":"747589"}],"comment_id":"673919","upvote_count":"1","content":"why can't it be A?"},{"poster":"[Removed]","upvote_count":"2","comment_id":"661175","timestamp":"1662464460.0","content":"Selected Answer: B\nI think should be B\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-redirect-url.html"}],"answer_description":"","answer_images":[]},{"id":"hqjewta1ZrSZgkFZ2VMX","discussion":[{"poster":"hongy","comment_id":"671253","upvote_count":"10","content":"D\nUsing CloudWatch Logs to find the error messages.","timestamp":"1663389840.0"},{"poster":"sumanshu","timestamp":"1734523080.0","comment_id":"1328477","content":"Selected Answer: A\nA) Correct - CloudTrail logs all API calls made in your AWS environment, including Lambda invocations and calls to other services (like S3). By inspecting CloudTrail logs, you can verify whether the Lambda function was triggered by the creation of the new S3 bucket and if it successfully made the API calls to attach the lifecycle policy.","comments":[{"comment_id":"1328478","timestamp":"1734523080.0","upvote_count":"1","content":"D) - Eliminated - While CloudWatch can help you investigate Lambda function issues (e.g., via logs), it doesn't track all API calls like CloudTrail does. If the Lambda function failed silently or didn’t invoke properly, CloudWatch may not give you a clear picture of what caused the failure (for example, it won't show the S3 bucket creation event that triggered the Lambda).","poster":"sumanshu"},{"content":"Not Sure -- \n\nD) - Also looks correct - While CloudTrail records API calls made to AWS services, it might not provide the detailed information about the internal execution of the Lambda function that's needed for debugging.","comment_id":"1328482","timestamp":"1734523380.0","poster":"sumanshu","upvote_count":"1"}],"upvote_count":"1"},{"comment_id":"1154847","upvote_count":"2","content":"Selected Answer: D\nCloudWatch contain valuable information, including errors and print statements from the Lambda function execution, which will be helpful for troubleshoot the error","poster":"kishkish","timestamp":"1708447440.0"},{"upvote_count":"1","poster":"Jazz888","timestamp":"1703884200.0","comment_id":"1109107","content":"D-\nReason I would go for D is, to achieve this we need to make use of EventBridge to capture the event of newly created S3 bucket and invoke Lambda Function for matching event pattern."},{"upvote_count":"1","content":"D\nhttps://blog.awsfundamentals.com/cloudwatch-vs-cloudtrail-understanding-the-differences\nIn conclusion, while both AWS CloudWatch and CloudTrail are monitoring and logging services, they serve different purposes. CloudWatch is used to monitor and log the internal workings of an application, while CloudTrail is used to track all API activities that take place within an AWS account.\n\nCloudWatch provides various products, such as Logs, Metrics, Alarms, X-Ray, Synthetics, and Evidently. These products can be used to set alarms for Lambda errors, create dashboards, and debug user requests.","comment_id":"1070236","timestamp":"1699958040.0","poster":"Wendy1113"},{"upvote_count":"1","timestamp":"1692880380.0","poster":"ninomfr64","content":"Selected Answer: D\nCW Metrics and Logs allows you to identify errors in the Lambda executions","comment_id":"989191"},{"content":"Selected Answer: D\nhttps://aws.amazon.com/blogs/mt/monitoring-aws-lambda-errors-using-amazon-cloudwatch/","timestamp":"1689866280.0","upvote_count":"2","poster":"AWSdeveloper08","comment_id":"957733"},{"upvote_count":"4","poster":"Yasser001","timestamp":"1688549940.0","comment_id":"943542","content":"Selected Answer: A\nA. AWS CloudTrail\n\nAWS CloudTrail is the service that provides a record of actions taken by a user, role, or AWS service in your AWS account. It logs API calls made to various AWS services, including Lambda function invocations, S3 bucket creations, and other actions. By reviewing the CloudTrail logs, the developer can find detailed information about the API calls made to create the new S3 buckets and check if there were any errors or issues related to attaching the S3 Lifecycle policy.\n\nBy investigating the CloudTrail logs, the developer can identify any errors or exceptions that occurred during the Lambda function's execution and troubleshoot the issue with attaching the S3 Lifecycle policy to the newly created buckets. This will help the developer understand what went wrong and take corrective actions to ensure the Lambda function works as intended."},{"timestamp":"1688524140.0","comment_id":"943246","content":"A: AWS CloudTrail is a service that enables governance, compliance, operational auditing, and risk auditing of an AWS account. It records API calls and events that occur within the account, providing a history of activity. By analyzing the CloudTrail logs, the developer can identify if there are any errors or issues related to the Lambda function's execution.","upvote_count":"3","poster":"r3mo"},{"upvote_count":"2","comment_id":"938892","content":"Selected Answer: D\nOption A is incorrect because AWS CloudTrail is a service that provides a record of actions taken by a user, role, or an AWS service in an AWS account, not for finding errors in a Lambda function","poster":"bakamon","timestamp":"1688109480.0"},{"timestamp":"1688109420.0","poster":"bakamon","content":"Selected Answer: B\nOption A is incorrect because AWS CloudTrail is a service that provides a record of actions taken by a user, role, or an AWS service in an AWS account, not for finding errors in a Lambda function","comment_id":"938891","upvote_count":"1"},{"upvote_count":"1","poster":"rcaliandro","timestamp":"1687957260.0","comment_id":"936680","content":"Selected Answer: D\nWe are not evaluation the API calls to aws service, we want to debug and find any error in the lambda function. I disagree with most of you, in my opinion D is the correct answer.\nEache function has a start and an end that is logged in CloudWatch plus other logs commands in the function will be reported on CloudWatch"},{"content":"Selected Answer: A\nA. AWS CloudTrail\n\nAWS CloudTrail provides detailed logging and auditing capabilities for API actions across various AWS services, including AWS Lambda and Amazon S3. By enabling CloudTrail, the developer can capture the API calls made to create the S3 buckets and review the logs to identify any errors or issues in the Lambda function execution.\n\nWith CloudTrail, the developer can track the API activity and see if the Lambda function is invoked properly when a new S3 bucket is created. It can help identify any errors, exceptions, or misconfigurations that may be causing the S3 Lifecycle policy not to be attached.\n\nBy reviewing the CloudTrail logs, the developer can gain visibility into the sequence of API calls, parameters, and responses, allowing them to troubleshoot and resolve the issue with the Lambda function not attaching the S3 Lifecycle policy as expected.","poster":"pranay_2406","comment_id":"904659","timestamp":"1684824840.0","upvote_count":"2"},{"upvote_count":"1","poster":"rlnd2000","timestamp":"1682757600.0","content":"Selected Answer: D\nD is obvious answer, any error in lambda will be in cloudwatch log.","comment_id":"884169"},{"poster":"MrTee","content":"D. Amazon CloudWatch to find a possible error in the Lambda function. Amazon CloudWatch allows the developer to monitor and troubleshoot the Lambda function by providing access to logs and metrics. The developer can use this information to identify and fix any issues that may be preventing the Lambda function from attaching an S3 Lifecycle policy to newly created S3 buckets.","upvote_count":"1","timestamp":"1682458020.0","comment_id":"880877"},{"upvote_count":"4","timestamp":"1681311780.0","content":"Selected Answer: A\nYou guys are wrong. Stop agreeing on wrong answers. It’s A.\n\nOption D, Amazon CloudWatch, is incorrect because it is a monitoring service for AWS resources and applications. While CloudWatch can be used to monitor the performance of Lambda functions, it does not provide a mechanism to identify issues in the Lambda function itself.","comment_id":"868472","poster":"Syre","comments":[{"timestamp":"1682757780.0","upvote_count":"1","poster":"rlnd2000","content":"Can you please explain how to use s3 for finding errors in lambda? the question is... Which AWS service should the developer use to find a possible error in the Lambda function?","comments":[{"comment_id":"884173","poster":"rlnd2000","upvote_count":"1","content":"I meant CloudTrial","timestamp":"1682757840.0"}],"comment_id":"884172"}]},{"comment_id":"795798","upvote_count":"2","timestamp":"1675318080.0","content":"D, because even though we could use cloudTrial to trace access requests for AWS service before determining API access request we need to check if there is an error in Lambda and for that we can use cloudWatch logs","poster":"appuNBablu"},{"timestamp":"1673199660.0","upvote_count":"1","poster":"sichilam","comment_id":"769669","content":"CloudTrail, you can get a history of AWS API calls for your account, \nincluding API calls made via the AWS Management Console, AWS SDKs, command line tools, and higher-level AWS services (such as AWS CloudFormation).\n\nSo CloudWatch it is"},{"comments":[{"comment_id":"797840","poster":"Jay1299","upvote_count":"1","content":"Answer lies in your question. If lambda was not triggered at all then there shouldn't be a cloudwatch log for that trigger. So first we check the cloudwatch log and if there is any discrepancy in its logs then we may check cloudtrail.","timestamp":"1675507680.0"}],"upvote_count":"1","comment_id":"762220","poster":"tieyua","content":"If bucket created and no policy attached, it's likely lambda not triggered or no permission to retrieve policy or attach to S3. Shouldn't that be in the CloudTrail log?","timestamp":"1672424640.0"},{"upvote_count":"1","timestamp":"1668728460.0","comment_id":"720962","content":"Selected Answer: D\ni voted D","poster":"dark_cherrymon"},{"content":"Selected Answer: D\nCloudwatch","upvote_count":"2","timestamp":"1665664860.0","comment_id":"693896","poster":"Arnaud92"},{"upvote_count":"1","poster":"NIFY9977","comments":[{"upvote_count":"2","timestamp":"1664605200.0","poster":"habros","content":"Cloud trail is maiming staging management, data and insight logs away for audit purposes.\n\nTo monitor resources, cloud watch is the way to go","comment_id":"684036","comments":[{"content":"Mainly stashing *","poster":"habros","timestamp":"1664605260.0","comment_id":"684037","upvote_count":"1"}]}],"comment_id":"683399","timestamp":"1664527080.0","content":"Why can't we use CloudTrail?"}],"answer_ET":"D","answer_description":"","isMC":true,"question_text":"A developer deploys an AWS Lambda function that runs each time a new Amazon S3 bucket is created. The Lambda function is supposed to attach an S3\nLifecycle policy to each new S3 bucket. The developer discovers that newly created S3 buckets have no S3 Lifecycle policy attached.\nWhich AWS service should the developer use to find a possible error in the Lambda function?","timestamp":"2022-09-17 06:44:00","unix_timestamp":1663389840,"choices":{"D":"Amazon CloudWatch","B":"Amazon S3","C":"AWS CloudFormation","A":"AWS CloudTrail"},"answers_community":["D (50%)","A (46%)","4%"],"topic":"1","url":"https://www.examtopics.com/discussions/amazon/view/82479-exam-aws-certified-developer-associate-topic-1-question-77/","exam_id":25,"question_images":[],"answer_images":[],"question_id":419,"answer":"D"},{"id":"5YoEJkBWYTU13c22Bo03","choices":{"A":"Add a request routing rule to the ALB to return a 401 status code if the authorization header is missing.","C":"Create a CloudFront function for the distribution Use the crypto module in the function to validate the JWT.","B":"Add a container to the ECS task definition to validate JWTs Set the new container as a dependency of the application container.","D":"Add a custom authorizer for AWS Lambda to the CloudFront distribution to validate the JWT."},"answer_description":"","topic":"1","question_images":[],"unix_timestamp":1662147660,"discussion":[{"upvote_count":"12","poster":"Danbraga","timestamp":"1662147660.0","comment_id":"657767","content":"Selected Answer: C\nC seems right to me\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-validate-token.html","comments":[{"upvote_count":"1","poster":"m4r0ck","timestamp":"1676887980.0","comments":[{"comment_id":"865427","timestamp":"1681036560.0","content":"AWS Lambda are not mentionned in the question so D is not correct","upvote_count":"1","poster":"LittleSoap"}],"content":"the function uses crypto module indeed, however D is the correct answer here as the custom authorizer would decide whether or not a particular call should be made to the API based on the validity of the token","comment_id":"815094"}]},{"content":"Selected Answer: C\nA) Eliminated - ALB does not have built-in support for JWT validation. It cannot determine if a JWT is valid or invalid, only whether the authorization header exists.\n\nB) Eliminated - This approach introduces unnecessary complexity and does not efficiently reduce unauthenticated requests.\n\nD) Eliminated - it is less efficient than CloudFront functions - due to increase cost","poster":"sumanshu","timestamp":"1737588600.0","upvote_count":"1","comment_id":"1344998"},{"comment_id":"904655","timestamp":"1684824780.0","upvote_count":"1","poster":"pranay_2406","comments":[{"poster":"pranay_2406","comment_id":"904658","timestamp":"1684824780.0","content":"It's irrelevant to this question the answer is for next question","upvote_count":"1"}],"content":"Selected Answer: A\nA. AWS CloudTrail\n\nAWS CloudTrail provides detailed logging and auditing capabilities for API actions across various AWS services, including AWS Lambda and Amazon S3. By enabling CloudTrail, the developer can capture the API calls made to create the S3 buckets and review the logs to identify any errors or issues in the Lambda function execution.\n\nWith CloudTrail, the developer can track the API activity and see if the Lambda function is invoked properly when a new S3 bucket is created. It can help identify any errors, exceptions, or misconfigurations that may be causing the S3 Lifecycle policy not to be attached.\n\nBy reviewing the CloudTrail logs, the developer can gain visibility into the sequence of API calls, parameters, and responses, allowing them to troubleshoot and resolve the issue with the Lambda function not attaching the S3 Lifecycle policy as expected."},{"content":"Selected Answer: D\nD should be the answer . This is from ChatGpt :- Option C, creating a CloudFront function for the distribution to validate the JWT, is not recommended as the crypto module is not officially supported by AWS for use in CloudFront functions. Moreover, it can be complex to manage and maintain custom code in a CloudFront function.","comments":[{"timestamp":"1687455240.0","poster":"kagu","comment_id":"930846","content":">This is from ChatGpt...\nanswer D will increase your AWS cost to high heavens, implementing D would in fact have no affect on the current problem.\n\nYou want to reduce the number of calls to the api, using a probabilistic method to filter out some invalid JWTs is the correct way.\n\nPlease think carefully before considering ChatGpt as your default answer.","upvote_count":"1"}],"poster":"Rpod","timestamp":"1682496720.0","comment_id":"881300","upvote_count":"1"},{"poster":"Syre","comment_id":"868482","upvote_count":"1","timestamp":"1681312380.0","content":"Selected Answer: D\nI don’t think you guys are correct. The answer Should be D.\nA custom authorizer is an AWS Lambda function that verifies the token and returns an IAM policy that specifies the permissions for the requested resource. This will ensure that only authenticated requests are passed through to the API, reducing the number of unauthenticated requests."},{"timestamp":"1680792540.0","content":"Selected Answer: C\nC is correct.","comment_id":"863056","poster":"Krok","upvote_count":"1"},{"comment_id":"739178","upvote_count":"1","poster":"aws_leo","content":"Selected Answer: C\nYou can offload authorization by using CloudFront Function. Find full example code here: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-validate-token.html","timestamp":"1670510940.0"},{"content":"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html\n\nThe question states the JWT is sent as part of authorization header. In the solution C, it assumes that JWT will be sent as part of query string.","comment_id":"728855","upvote_count":"2","timestamp":"1669621440.0","comments":[{"timestamp":"1669621500.0","poster":"ACZ","comments":[{"comment_id":"1016540","content":"That URL is for the ApiGateway and here we have only CloudFront, ALB and ECS! I wouldn't say that's the correct explanation","upvote_count":"1","timestamp":"1695624600.0","poster":"kaes"}],"content":"The correct answer is D","comment_id":"728856","upvote_count":"2"}],"poster":"ACZ"},{"content":"Selected Answer: C\nI vote for C!\nThe following example function validates a JSON web token (JWT) in the query string of a request. If the token is valid, the function returns the original, unmodified request to CloudFront. If the token is not valid, the function generates an error response. This function uses the crypto module.\n\nThis function assumes that requests contain a JWT value in a query string parameter named jwt. Also, for this function to work, you must configure CloudFront to cache based on the jwt query string parameter. \n\nhttps://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-validate-token.html","comment_id":"674958","timestamp":"1663752540.0","poster":"princajen","upvote_count":"4"}],"exam_id":25,"answer_images":[],"answer_ET":"C","isMC":true,"answers_community":["C (86%)","9%"],"question_text":"A developer has created a web API that uses Amazon Elastic Container Service (Amazon ECS) and an Application Load Balancer (ALB). An Amazon CloudFront distribution uses the API as an origin for web clients. The application has received millions of requests with a JSON Web Token (JWT) that is not valid in the authorization header. The developer has scaled out the application to handle the unauthenticated requests.\nWhat should the developer do to reduce the number of unauthenticated requests to the API?","question_id":420,"timestamp":"2022-09-02 21:41:00","url":"https://www.examtopics.com/discussions/amazon/view/79556-exam-aws-certified-developer-associate-topic-1-question-78/","answer":"C"}],"exam":{"isBeta":false,"lastUpdated":"11 Apr 2025","name":"AWS Certified Developer Associate","isMCOnly":true,"provider":"Amazon","id":25,"numberOfQuestions":443,"isImplemented":true},"currentPage":84},"__N_SSP":true}