{"pageProps":{"questions":[{"id":"IMR0xbf0DacEthFtOPr5","url":"https://www.examtopics.com/discussions/amazon/view/88599-exam-aws-certified-developer-associate-topic-1-question-194/","answer_description":"","answers_community":["C (45%)","B (33%)","A (15%)","8%"],"question_id":106,"isMC":true,"answer_ET":"C","discussion":[{"upvote_count":"1","timestamp":"1710766500.0","poster":"a15ce96","content":"Selected Answer: C\nIMHO, C looks the most secure. Because of: the pre-signed URL, a secure VPN connection between on-prem and cloud (MUST), no need to store any creds on the on-prem side. The question doesn't contain keywords like \"less operational overhead\", but \"the most secure\". It means that we can go with more complex, but secure solution.","comment_id":"1176491"},{"poster":"perfmon","content":"Option B - Risk Profile: - Create an IAM role, which provides temporary security credentials without the need for long-term access keys and secrets.\n- utilizes IAM roles with temporary credentials and follows the principle of least privilege. Only one permission is required. S3:PutObject\n- Roles can be assumed by trusted entities, reducing the risk associated with long-term credentials being compromised.\n- The AssumeRole functionality allows the on-premises system to temporarily assume the permissions of the IAM role, enhancing security.\nOption C - Risk Profile: - This option involves using presigned URLs, which are temporary URLs generated by AWS that grant limited access to specific S3 operations.\n- It requires setting up a private REST API endpoint, which adds complexity to the architecture.\n- Creating a Site-to-Site VPN connection between the on-premises network and the VPC adds an additional layer of security for communication, but it also introduces management overhead.","timestamp":"1709865300.0","comment_id":"1168511","upvote_count":"1"},{"content":"Yes, you can attach a user or a role to an IAM policy in AWS. \n\nCreating roles and attaching policies (console)\nhttps://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_job-functions_create-policies.html\n\nAttach an IAM managed policy to a user\nhttps://docs.aws.amazon.com/cli/latest/userguide/cli-services-iam-policy.html","comment_id":"1168410","upvote_count":"1","timestamp":"1709851560.0","poster":"perfmon"},{"poster":"monishvster","comment_id":"1158927","content":"Selected Answer: B\nLESS STEPS","upvote_count":"1","timestamp":"1708876080.0"},{"poster":"a_win","upvote_count":"1","timestamp":"1703576040.0","content":"Selected Answer: B\nit is most secure with less overhead","comment_id":"1105790"},{"comment_id":"1049179","timestamp":"1697843880.0","upvote_count":"1","content":"Selected Answer: D\nWhy C is the most popular? Why do we need a VPN to VPC if we need access to S3 which is not in VPC? But the C option clearly states \"AWS Site-to-Site VPN connection between the on-premises network and the VPC\".","poster":"wonder_man","comments":[{"upvote_count":"2","content":"Sorry, that's for the REST API endpoint inside the VPC, therefore C is the most secure option. Anyway, I think this solution is too complicated for simple uploading stuff into S3","poster":"wonder_man","comment_id":"1049182","timestamp":"1697844600.0"}]},{"upvote_count":"3","timestamp":"1690126380.0","comment_id":"960579","poster":"AswinDe","content":"why it is not A?","comments":[{"comment_id":"995175","poster":"ninomfr64","content":"A uses long term credentials, while B uses short term credentials. Using Signed URL would be even more secure as no credential is needed to be store on-premise. Thus A","timestamp":"1693490760.0","upvote_count":"1"}]},{"timestamp":"1688049240.0","upvote_count":"1","comment_id":"938264","content":"AI DONNO","poster":"rcaliandro"},{"timestamp":"1684673700.0","upvote_count":"4","poster":"pranay_2406","comment_id":"903231","content":"Selected Answer: C\nOption C provides a secure solution by leveraging S3 presigned URLs and a private REST API endpoint. Here's how it works:\n\nGenerate S3 presigned URLs: Use an AWS Lambda function to generate S3 presigned URLs. These URLs will have a limited time validity and will grant temporary access to upload the ID card images to the S3 bucket.\nPrivate REST API endpoint: Create a private REST API endpoint in API Gateway that invokes the Lambda function. This API endpoint should be accessible only from within the AWS infrastructure or through a secure connection.\nAWS Site-to-Site VPN connection: Establish an AWS Site-to-Site VPN connection between the on-premises network and the Amazon Virtual Private Cloud (VPC) where the API Gateway and Lambda function reside. This VPN connection ensures secure and encrypted communication between the on-premises system and the private REST API endpoint.","comments":[{"timestamp":"1684673760.0","content":"On-premises system integration: Configure the on-premises system to call the private REST API endpoint to receive the generated S3 presigned URLs. This can be done through the VPN connection established in the previous step.\n\nUploading ID card images: The on-premises system can then use the received presigned URLs to directly upload the ID card images to the S3 bucket. The presigned URLs grant temporary access and permissions for uploading the images without the need for long-term access keys or credentials.\n\nBy using S3 presigned URLs with a private REST API endpoint and a VPN connection, the on-premises system securely uploads the ID card images to the S3 bucket without exposing any long-term access keys or credentials. The private REST API endpoint ensures that the API is only accessible from within the AWS infrastructure or through the secure VPN connection, providing an additional layer of security.","poster":"pranay_2406","comment_id":"903232","comments":[{"content":"Let's take a closer look at why option B is not the most secure solution for the given requirements.\n\nOption B suggests creating an IAM role and attaching it to a policy that includes the s3:PutObject permission. The on-premises system would then use the AssumeRole functionality in the AWS SDK to authenticate access to AWS and directly upload the ID card images to the S3 bucket.\n\nWhile using an IAM role is a more secure approach than using access keys (as mentioned in option A), it still has some limitations and potential security risks in this scenario:\n\nNetwork connectivity: Option B assumes that there is a direct network connection between the on-premises system and AWS. This introduces potential security concerns, especially if the connection is not properly secured or if the on-premises system is exposed to the internet.","comment_id":"903233","comments":[{"poster":"pranay_2406","comments":[{"timestamp":"1686649140.0","comment_id":"922119","content":"God ho kya bhai","upvote_count":"3","poster":"shasankperiwal"}],"timestamp":"1684673820.0","comment_id":"903234","upvote_count":"1","content":"Access management: Creating and managing IAM roles for each on-premises system can become cumbersome, especially if there are a large number of systems or frequent changes. It may also introduce the risk of misconfiguration or granting excessive permissions if not properly managed.\n\nLong-term credentials: While the AssumeRole functionality allows for temporary access to AWS services, the on-premises system would still need to have long-term credentials (such as access keys) to assume the IAM role. This introduces the risk of these credentials being compromised, potentially leading to unauthorized access to the S3 bucket.\n\nGiven these considerations, option C, which leverages S3 presigned URLs with a private REST API endpoint and a VPN connection, provides a more secure approach for uploading ID card images from the on-premises system to the S3 bucket. It avoids the need for long-term credentials and ensures secure communication through a private API endpoint and a VPN connection."}],"timestamp":"1684673760.0","upvote_count":"1","poster":"pranay_2406"}],"upvote_count":"1"}]},{"comment_id":"881453","timestamp":"1682505360.0","content":"Selected Answer: B\nOption B is the most secure because it involves creating an IAM role with the required permissions and configuring the on-premises system to use AssumeRole functionality in the AWS SDK to authenticate access to AWS. This way, the on-premises system does not have access keys or secrets, reducing the risk of compromise. Also, IAM roles have temporary security credentials that automatically rotate, making it harder for attackers to gain persistent access to the S3 bucket.","poster":"MrTee","upvote_count":"3"},{"timestamp":"1681721340.0","upvote_count":"2","poster":"ondrejc","comment_id":"872498","content":"Selected Answer: C\nIt is C"},{"comment_id":"868067","timestamp":"1681288680.0","content":"Why D is not an option?","poster":"qsergii","upvote_count":"2"},{"upvote_count":"1","timestamp":"1680065280.0","content":"Selected Answer: B\nI prefer B over C as C creates an URL that can be leaked and therefore, IMO, is less secure than B.","poster":"capesignalfreer","comment_id":"854013"},{"upvote_count":"4","comment_id":"820646","timestamp":"1677251100.0","content":"Selected Answer: C\nThe answer is C. A and B are wrong at first because u can't attach user|role to a policy.","comments":[{"timestamp":"1677251160.0","comment_id":"820649","poster":"MMaquis","content":"I'm surprised the voted answers are very wrong, great job engineers.","upvote_count":"1"}],"poster":"MMaquis"},{"comment_id":"817255","poster":"m4r0ck","upvote_count":"2","content":"Selected Answer: C\nC is the right answer: Presigned URL generated dynamically using the SDK on a lambda function + site to site VPN","timestamp":"1677019920.0"},{"comment_id":"816996","content":"Selected Answer: D\nThe most secure way to meet this requirement is option D: Use S3 presigned URLs to upload the images to the S3 bucket directly from the on-premises system. Generate the presigned URLs by using an AWS Lambda function and a public REST API endpoint. Secure the API by adding an Amazon Cognito authorizer. Create a user for the on-premises system to use for authentication to call the API to receive the presigned URLs.\n\nOption D provides a secure solution as it uses S3 presigned URLs, which are time-limited URLs that grant temporary access to upload the ID card images to the S3 bucket. By generating presigned URLs on the server-side with an AWS Lambda function, the on-premises system can securely upload the ID card images directly to the S3 bucket without requiring access keys and secrets.\n\nTo further secure the solution, an Amazon Cognito authorizer can be added to the public REST API endpoint to authenticate the on-premises system before allowing access to generate the presigned URLs. This approach ensures that only authenticated and authorized systems can generate the presigned URLs, providing an additional layer of security.","poster":"mistral","timestamp":"1677004320.0","upvote_count":"1"},{"content":"Selected Answer: C\nthe c is the most secure imho.","timestamp":"1676999160.0","comment_id":"816899","upvote_count":"1","poster":"ezeik"},{"timestamp":"1676905320.0","poster":"pancman","content":"Selected Answer: B\nThe answer is B. But I think there is a typo with the answer where it says attach role to policy. It has to be vice versa.","upvote_count":"1","comment_id":"815413"},{"comment_id":"814345","upvote_count":"3","content":"it's C definitively","timestamp":"1676829720.0","poster":"JuanFe"},{"timestamp":"1676582580.0","comment_id":"811115","upvote_count":"1","content":"Selected Answer: A\nA , how can we attach a role to policy hence B is ruled out I think.","poster":"ShriniW","comments":[{"comments":[{"timestamp":"1678379340.0","comment_id":"834176","upvote_count":"1","poster":"Jay1299","content":"XD!!!!!"}],"upvote_count":"1","poster":"pancman","timestamp":"1676905260.0","content":"And if you are going with A, how do you attach a user to a policy? :)","comment_id":"815412"}]},{"comment_id":"807795","poster":"Smartiup","content":"Selected Answer: C\nDon't understand why people are not voting C Since on top of only signed timebased URL to being able to upload documents. You have a VPN to go thru to update the files. That is the MOST secure option.","upvote_count":"3","timestamp":"1676321220.0"},{"content":"Selected Answer: B\nhttps://medium.com/geekculture/upload-images-to-aws-s3-using-presigned-url-in-react-native-45059fe3d31b","upvote_count":"1","comment_id":"804727","poster":"Krt5894","timestamp":"1676060340.0"},{"comment_id":"790021","content":"Selected Answer: D\nD \nhttps://medium.com/geekculture/upload-images-to-aws-s3-using-presigned-url-in-react-native-45059fe3d31b \n\nC VPN is not used for data transfer \nA and B are not as secure as resigned URL","timestamp":"1674854940.0","poster":"mistral","upvote_count":"1"},{"comment_id":"790019","timestamp":"1674854880.0","upvote_count":"1","poster":"mistral","content":"C\nhttps://medium.com/geekculture/upload-images-to-aws-s3-using-presigned-url-in-react-native-45059fe3d31b\n\nC VPN is not used for data transfer\nA and B are not as secure as resigned URL"},{"poster":"michele_scar","timestamp":"1674812580.0","comment_id":"789482","content":"Selected Answer: C\nThe MOST secure is C! Others have \"public\" connection or \"hardcoded\" key to do the job.\nB is uncorrect by definition, A is the LESS secure and with D you will go in public internet","upvote_count":"1"},{"upvote_count":"3","comments":[{"poster":"BobAWS23","comment_id":"781953","content":"I don't agree. I just don't think you would create a user for that - it's more a role. I chose B","upvote_count":"1","timestamp":"1674198900.0"}],"poster":"Mom305","timestamp":"1673913120.0","content":"Selected Answer: A\nNot B, first you can't attach a Role to a policy (you attach a Policy to a Role), second you can't AssumeRole from an On-Prem System (Workloads outside AWS can't assume a role). Recently, there's a new feature called \"IAM Roles Anywhere\" (released July 2022), but is not mentioned here. So, Use the SDK, attach an IAM User policy, Generate Access Key and Secrets to authenticate is the only feasible option","comment_id":"778393"},{"poster":"Mom305","upvote_count":"1","comment_id":"778385","timestamp":"1673912760.0","content":"Not B, first you can't attach a Role to a policy (you attach a Policy to a Role), second you can't AssumeRole from an On-Prem System (Workloads outside AWS can't assume a role). Recently, there's a new feature called \"IAM Roles Anywhere\" (released July 2022), but is not mentioned here. So, Use the SDK, attach an IAM User policy, Generate Access Key and Secrets to authenticate is the only feasible option"},{"timestamp":"1672327680.0","comment_id":"761191","poster":"Mark1000","content":"I vote for C\n\nIt's say \"MOST secure\", with SDK the files go over internet (encrypted but over internet); in option C is vpn","upvote_count":"3"},{"comment_id":"742563","timestamp":"1670834940.0","poster":"bbbl34sd","upvote_count":"2","content":"Selected Answer: A\nB ? Attach a role to policy ?"},{"poster":"AbQusay","content":"can someone specify why b not c ?","comments":[{"poster":"Mom305","timestamp":"1673913060.0","upvote_count":"7","content":"Pre-signed URLs are mainly used when you don't need customers/users to authenticate and the generated URL is temporary. There's no need to use a pre-signed URL since you're uploading from On-Prem directly, a single source and why would the system need a temporarily URL.","comment_id":"778389"}],"upvote_count":"4","comment_id":"732990","timestamp":"1669921320.0"},{"content":"Selected Answer: B\nbbbbbbbb","comment_id":"730074","timestamp":"1669708920.0","upvote_count":"2","poster":"michaldavid"},{"comment_id":"726556","content":"Selected Answer: B\nChoosing B","timestamp":"1669367640.0","poster":"k1kavi1","upvote_count":"3"},{"content":"Why not C?","poster":"CloudHandsOn","timestamp":"1669329840.0","comment_id":"726250","upvote_count":"4"}],"unix_timestamp":1669329840,"exam_id":25,"question_text":"A company has copies of customer ID cards in its on-premises system. The company wants the on-premises system to automatically upload the ID card images directly to an Amazon S3 bucket.\n\nWhat is the MOST secure way to meet this requirement?","question_images":[],"answer":"C","timestamp":"2022-11-24 23:44:00","answer_images":[],"topic":"1","choices":{"A":"Use the AWS SDK to upload the images to the S3 bucket directly from the on-premises system. Create an IAM user. Attach the user to a policy that includes the s3:PutObject permission. Configure the on-premises system to use the generated access key and secrets to authenticate access to AWS.","C":"Use S3 presigned URLs to upload the images to the S3 bucket directly from the on-premises system. Generate the presigned URLs by using an AWS Lambda function and a private REST API endpoint. Create an AWS Site-to-Site VPN connection between the on-premises network and the VPC to allow the on-premises system to call the API to receive the presigned URLs.","D":"Use S3 presigned URLs to upload the images to the S3 bucket directly from the on-premises system. Generate the presigned URLs by using an AWS Lambda function and a public REST API endpoint. Secure the API by adding an Amazon Cognito authorizer. Create a user for the on-premises system to use for authentication to call the API to receive the presigned URLs.","B":"Use the AWS SDK to upload the images to the S3 bucket directly from the on-premises system. Create an IAM role. Attach the role to a policy that includes the s3:PutObject permission. Configure the on-premises system to use the AssumeRole functionality in the AWS SDK to authenticate access to AWS."}},{"id":"Yax0a4dEC8Iz6md6bCHB","url":"https://www.examtopics.com/discussions/amazon/view/88656-exam-aws-certified-developer-associate-topic-1-question-195/","exam_id":25,"question_images":[],"topic":"1","answer_description":"","isMC":true,"discussion":[{"timestamp":"1688049480.0","content":"Selected Answer: B\nYep, B is correct. /tmp doesn't provide a direct way to ecnrypt at rest also because it is intended to be a temporary folder. So, we have to use the GenerateDataKey API and encrypt the data in the function before send it to /tmp folder. Remember to configure the permission to the function for read key and encrypt files. B is the correct answer.","upvote_count":"1","comment_id":"938266","poster":"rcaliandro"},{"content":"Selected Answer: B\nIt is B","timestamp":"1676060340.0","poster":"Krt5894","comment_id":"804729","upvote_count":"1"},{"upvote_count":"2","comment_id":"730100","poster":"michaldavid","timestamp":"1669710420.0","content":"Selected Answer: B\nbbbbbbb"},{"timestamp":"1669367940.0","poster":"k1kavi1","comment_id":"726559","content":"Selected Answer: B\nhttps://aws.amazon.com/blogs/compute/using-larger-ephemeral-storage-for-aws-lambda/","comments":[{"comment_id":"731669","upvote_count":"1","timestamp":"1669821540.0","poster":"k1kavi1","content":"https://www.examtopics.com/discussions/amazon/view/69249-exam-aws-certified-developer-associate-topic-1-question-386/"}],"upvote_count":"2"}],"answer_ET":"B","timestamp":"2022-11-25 10:19:00","answer_images":[],"unix_timestamp":1669367940,"question_id":107,"question_text":"A developer is building a highly secure healthcare application using serverless components. This application requires writing temporary data to /tmp storage on an AWS Lambda function.\n\nHow should the developer encrypt this data?","answers_community":["B (100%)"],"choices":{"B":"Set up the Lambda function with a role and key policy to access an AWS KMS key. Use the key to generate a data key used to encrypt all data prior to writing to /tmp storage.","A":"Enable Amazon EBS volume encryption with an AWS KMS key in the Lambda function configuration so that all storage attached to the Lambda function is encrypted.","C":"Use OpenSSL to generate a symmetric encryption key on Lambda startup. Use this key to encrypt the data prior to writing to /tmp.","D":"Use an on-premises hardware security module (HSM) to generate keys, where the Lambda function requests a data key from the HSM and uses that to encrypt data on all requests to the function."},"answer":"B"},{"id":"eQwJ20e0hiGR2F7z2ylN","answer":"D","answer_ET":"D","question_images":[],"isMC":true,"question_id":108,"answer_description":"","unix_timestamp":1669368240,"answers_community":["D (63%)","B (30%)","7%"],"answer_images":[],"discussion":[{"content":"Selected Answer: D\nhttps://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-api","upvote_count":"7","timestamp":"1669892700.0","poster":"SBoksh","comment_id":"732527"},{"upvote_count":"2","timestamp":"1710766860.0","content":"Selected Answer: D\nIn practice, I'd go with D. I'd send a message in an async way to SQS and forget about it. Option \"B\" also looks appropriate. But look: the question says \"service performs critical operations\". Creating tons of costly threads can degrade the performance and reduce system availability (hello from Java). Tricky one to be honest.","poster":"a15ce96","comment_id":"1176498"},{"poster":"perfmon","upvote_count":"1","content":"B.- The web service would initiate the PutMetricData API call in a separate background thread.\n - The main thread of the web service can continue processing the client request and generating the response without waiting for the metric data submission to complete.\n - This approach ensures that the web service returns results to the caller as quickly as possible, improving response time.\nD. - Involves sending metric data to an SQS queue instead of directly calling the PutMetricData API.\n - An AWS Lambda function is configured to process messages from the SQS queue and call the PutMetricData API.\n - By using SQS, the web service can offload the metric data submission task and proceed with generating the response without waiting for the API call to complete.\n - However, compared to option B, this approach introduces additional complexity with the SQS queue and Lambda function setup.","comment_id":"1168534","timestamp":"1709869800.0"},{"poster":"xdkonorek2","content":"Selected Answer: B\nB, Spawning a thread is faster than D. because in D you'd have to wait for one request-response cycle anyway but to SQS instead of CloudWatch","upvote_count":"1","timestamp":"1702643760.0","comment_id":"1097297"},{"comment_id":"938270","upvote_count":"1","content":"Mmm I am not sure about this one and I won't vote. In my opinion D works perfectly. \nI am not able to exclude the B given that also a separate thread can be a good solution to manage API calls in background. \nThe question is: once I receive data from the webservice, do I have to send critical data to an SQS queue or to a specific thread? If you choose one, why the other is not correct?","comments":[{"comment_id":"938272","upvote_count":"1","timestamp":"1688050140.0","poster":"rcaliandro","content":"non-critical*"}],"poster":"rcaliandro","timestamp":"1688050080.0"},{"content":"Selected Answer: B\nOption B is the best solution because it allows the web service to call the PutMetricData API in a background thread. This means that the web service can continue to perform other critical activities without being blocked by the PutMetricData API call. The response time of the web service will not be affected by the time it takes to send metric data to CloudWatch. Also, if there is a failure when sending metric data to CloudWatch, the web service will not be impacted as the PutMetricData API call is noncritical.","timestamp":"1682506140.0","upvote_count":"2","poster":"MrTee","comment_id":"881476"},{"content":"Selected Answer: B\nSince result from putMetric is not needed, using multi-threads to perform two different jobs should be the the best case","comment_id":"821149","timestamp":"1677295560.0","upvote_count":"2","poster":"mendelpeashooter"},{"timestamp":"1677251880.0","poster":"MMaquis","comment_id":"820658","content":"Selected Answer: B\nOption D suggests sending metric data to an Amazon SQS queue and then processing it in an AWS Lambda function. While this approach can offload the processing of the metrics to the Lambda function, it introduces additional latency as the metrics need to be queued and then processed by the Lambda function, which can take some time.\n\nAdditionally, the question specifically mentions that the response data from the PutMetricData API is not necessary to create the web service response. Therefore, it is not necessary to wait for a response from the API before returning a response to the caller.\n\nOn the other hand, Option B suggests calling the PutMetricData API in a background thread, which can improve the response time of the web service since the API call can be made asynchronously without waiting for a response. This approach can help decouple the metric publishing process from the web service response, allowing the web service to return results to the caller as quickly as possible.","upvote_count":"4"},{"comments":[{"content":"To Moderator: Could you please edit and remove the P.S. section above? Not really helpful and not sure what I was thinking. If you can't edit, just deny all and I'll repost the relevant section. Thanks.","upvote_count":"1","comment_id":"818705","timestamp":"1677120600.0","poster":"tieyua"},{"content":"PLEASE DENY/REMOVE THIS COMMENT THREAD!!!\n\nI'll come back and post a more better version, Thanks","comment_id":"819405","upvote_count":"1","poster":"tieyua","timestamp":"1677170100.0"}],"poster":"tieyua","content":"Selected Answer: D\nAh, finally settled with a solid proof.\n\nhttps://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_limits.html\nPutMetricData can handle 500 transactions per second (TPS), which is the maximum number of operation requests that you can make per second without being throttled \n\nP.S.\nMy \"contributor\" privilege is up, can't afford renewal with sky high inflation. This is probably my last post. Good luck everyone chasing whatever days left of C01 and exciting upcoming C02 adventure.","comment_id":"818692","timestamp":"1677119700.0","upvote_count":"3"},{"comments":[{"comment_id":"1163075","timestamp":"1709247060.0","content":"\"a web service\", nobody is saying the main function is running in a. Lambda.\nI vote for D btw.","poster":"Teemo2023","upvote_count":"1"}],"timestamp":"1677020880.0","content":"Selected Answer: D\nB is not correct. If a background thread is started within a Lambda function and any work is still running after the lambda timeout expires, the thread will be forcibly terminated. Starting a background thread within a Lambda function can be a useful technique, but it's important to be aware of the potential implications on function execution time.\nThe correct answer is D as the adopted approach is asynchronous which goes in line with the requirement to return results to the caller as quickly as possible as we don't care if the response data from PutMetricData API is received or not to create a web service response.","upvote_count":"3","comment_id":"817269","poster":"m4r0ck"},{"comment_id":"815431","upvote_count":"1","poster":"pancman","timestamp":"1676906100.0","content":"Selected Answer: D\nThe answer is D, and I'm 100% positive. Using SQS will make our request async. We will send the metric to a queue to be handled by another Lambda function. We won't have to wait for the answer from CloudWatch. This will improve response time.\n\nThose who suggested B, it is not correct because using background threads to publish monitor data is not a good idea either. Because while the container is not handling any request, it is in the frozen state. AWS Lambda doesn’t allocate CPU resource/slot in frozen state, so background threads can’t publish monitoring data. If data publishing takes place during request execution, it increases the duration."},{"content":"Selected Answer: D\nWhy Synchronous , generating an event is the quick thing what I feel.","upvote_count":"1","timestamp":"1676583420.0","comment_id":"811122","poster":"ShriniW"},{"timestamp":"1676060340.0","poster":"Krt5894","upvote_count":"1","comment_id":"804730","content":"Selected Answer: D\nChoosing D"},{"comment_id":"779727","poster":"miensol","content":"IMHO it makes no sense to replace PutMetricsData with SQS Queue sent API. The latter may or may not be faster. I don't see any clear indication that PutMetricsData is slower?\nI only checked Java SDK, but I'm pretty sure any AWS-SDK supports asynchronous requests invocation (e.g. in a background thread) which for me suggests A.","upvote_count":"1","timestamp":"1674028200.0"},{"comment_id":"775951","content":"Selected Answer: D\nit's D everyone!","timestamp":"1673732220.0","upvote_count":"1","poster":"bearcandy"},{"timestamp":"1670274600.0","upvote_count":"4","content":"b or d.\n\nb makes more logical sense, d is more amazon","comment_id":"736308","poster":"rrrrrrrrrr1"},{"timestamp":"1670195460.0","comment_id":"735513","poster":"hamimelon","content":"D. Regarding C, it makes no sense to use synchronous processing.","upvote_count":"3"},{"poster":"michaldavid","upvote_count":"1","comments":[{"comment_id":"743595","timestamp":"1670907120.0","content":"There's no way it can be C as the synchronous call will make the service wait for lambda response.","upvote_count":"4","poster":"xicomynor"}],"comment_id":"730108","content":"Selected Answer: C\ncccccccc","timestamp":"1669710720.0"},{"comment_id":"726564","content":"Selected Answer: C\nChoosing C","timestamp":"1669368240.0","poster":"k1kavi1","comments":[{"comment_id":"815423","poster":"pancman","upvote_count":"1","content":"C is the least likely option to be the correct answer. It's not correct.","timestamp":"1676905680.0"}],"upvote_count":"1"}],"choices":{"A":"Upgrade to the latest version of the AWS SDK.","B":"Call the PutMetricData API in a background thread.","D":"Send metric data to an Amazon Simple Queue Service (Amazon SQS) queue. Configure an AWS Lambda function with the queue as the event source. Call the PutMetricData API within the Lambda function.","C":"Use the AWS SDK to perform a synchronous call to an AWS Lambda function. Call the PutMetricData API within the Lambda function."},"question_text":"A developer creates a web service that performs many critical activities. The web service code uses an AWS SDK to publish noncritical metrics to Amazon CloudWatch by using the PutMetricData API. The web service must return results to the caller as quickly as possible. The response data from the PutMetricData API is not necessary to create the web service response.\n\nWhich solution will MOST improve the response time of the web service?","url":"https://www.examtopics.com/discussions/amazon/view/88658-exam-aws-certified-developer-associate-topic-1-question-196/","timestamp":"2022-11-25 10:24:00","topic":"1","exam_id":25},{"id":"hH85WZHgmElwrVRMWGEw","discussion":[{"timestamp":"1688050200.0","upvote_count":"1","content":"Selected Answer: D\nYep, I totally agree. Elastic Beanstalk is the right way. Once the Ruby application is ready the only thing the developer must do is to import the code. D is correct!","comment_id":"938275","poster":"rcaliandro"},{"upvote_count":"1","poster":"pancman","content":"Selected Answer: D\nThe keyword here is \"without requiring knowledge of the underlying infrastructure\". This should immediately ring the bell for you - it's ElasticBeanstalk","timestamp":"1676906160.0","comment_id":"815434"},{"poster":"Krt5894","timestamp":"1676060400.0","comment_id":"804731","content":"Selected Answer: D\nAgreed it is a D. https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Ruby.html","upvote_count":"1"},{"upvote_count":"2","content":"Selected Answer: D\ndddddddd","comment_id":"730109","poster":"michaldavid","timestamp":"1669710780.0"},{"content":"Selected Answer: D\nI agree","timestamp":"1669368360.0","comment_id":"726566","upvote_count":"2","poster":"k1kavi1","comments":[{"poster":"k1kavi1","timestamp":"1669822080.0","content":"https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Ruby.html","upvote_count":"2","comment_id":"731677"}]}],"isMC":true,"question_id":109,"url":"https://www.examtopics.com/discussions/amazon/view/88659-exam-aws-certified-developer-associate-topic-1-question-197/","topic":"1","answer_description":"","answer_ET":"D","choices":{"D":"AWS Elastic Beanstalk","C":"AWS OpsWorks","B":"AWS CloudFormation","A":"AWS CodeDeploy"},"question_text":"A developer is creating a Ruby application and needs to automate the deployment, scaling, and management of an environment without requiring knowledge of the underlying infrastructure.\n\nWhich service would best accomplish this task?","answer":"D","unix_timestamp":1669368360,"timestamp":"2022-11-25 10:26:00","question_images":[],"answer_images":[],"exam_id":25,"answers_community":["D (100%)"]},{"id":"M1TKqVR73ViA1Ze2MZax","question_text":"A company has an Amazon S3 bucket that contains sensitive data. The data must be encrypted in transit and at rest. The company encrypts the data in the S3 bucket by using an AWS Key Management Service (AWS KMS) key. A developer needs to grant several other AWS accounts the permission to use the S3 GetObject operation to retrieve the data from the S3 bucket.\n\nHow can the developer enforce that all requests to retrieve the data provide encryption in transit?","answers_community":["A (89%)","11%"],"timestamp":"2022-11-25 10:29:00","topic":"1","exam_id":25,"unix_timestamp":1669368540,"answer_description":"","answer_ET":"A","answer":"A","isMC":true,"question_id":110,"question_images":[],"choices":{"C":"Define a role-based policy on the other accounts' roles to deny access when a request meets the condition of \"aws:SecureTransport\": \"false\".","A":"Define a resource-based policy on the S3 bucket to deny access when a request meets the condition \"aws:SecureTransport\": \"false\".","B":"Define a resource-based policy on the S3 bucket to allow access when a request meets the condition \"aws:SecureTransport\": \"false\".","D":"Define a resource-based policy on the KMS key to deny access when a request meets the condition of \"aws:SecureTransport\": \"false\"."},"answer_images":[],"url":"https://www.examtopics.com/discussions/amazon/view/88660-exam-aws-certified-developer-associate-topic-1-question-198/","discussion":[{"timestamp":"1688050380.0","upvote_count":"1","poster":"rcaliandro","content":"Selected Answer: A\nI will go with A as well. Even if we have specific users, we have to stabilish a policy on the S3 bucket to deny all the requests that have \"aws:SecureTransport\":\"false\"","comment_id":"938279"},{"timestamp":"1680882480.0","comment_id":"864051","poster":"RajinderKaur","upvote_count":"1","content":"Answer is C\nhttps://repost.aws/knowledge-center/cross-account-access-s3\nCross-account IAM roles for programmatic and console access to S3 bucket objects"},{"content":"Selected Answer: A\nA. Define a resource-based policy on the S3 bucket to deny access when a request meets the condition \"aws:SecureTransport\": \"false\".\n\nThis option is the correct solution to enforce that all requests to retrieve the data provide encryption in transit. By defining a resource-based policy on the S3 bucket, you can specify the \"aws:SecureTransport\" condition to deny access to any request that does not use encryption in transit. This ensures that all requests to retrieve the data are encrypted in transit, which is a requirement for the sensitive data stored in the S3 bucket.\nOption C is also incorrect because it only applies to the other accounts' roles, and not to all requests to retrieve the data.","timestamp":"1677252180.0","poster":"MMaquis","upvote_count":"1","comment_id":"820661"},{"comment_id":"815437","upvote_count":"1","poster":"pancman","content":"Selected Answer: A\nA is correct","timestamp":"1676906280.0"},{"comment_id":"811282","upvote_count":"1","content":"Selected Answer: C\nQuestion says \"other AWS accounts\"","comments":[{"upvote_count":"1","poster":"pancman","content":"Doesn't matter. C doesn't provide the expected solution","comment_id":"815439","timestamp":"1676906340.0"}],"poster":"Rups79","timestamp":"1676596920.0"},{"comment_id":"811127","poster":"ShriniW","timestamp":"1676584080.0","upvote_count":"1","content":"Selected Answer: A\nA is the right , why C is highlighted its wrong"},{"poster":"michaldavid","upvote_count":"2","content":"Selected Answer: A\naaaaaaaaa","comment_id":"730110","timestamp":"1669710840.0"},{"upvote_count":"2","content":"Selected Answer: A\nhttps://aws.amazon.com/premiumsupport/knowledge-center/s3-bucket-policy-for-config-rule/","comment_id":"726568","timestamp":"1669368540.0","poster":"k1kavi1"}]}],"exam":{"isImplemented":true,"id":25,"lastUpdated":"11 Apr 2025","provider":"Amazon","numberOfQuestions":443,"isMCOnly":true,"name":"AWS Certified Developer Associate","isBeta":false},"currentPage":22},"__N_SSP":true}