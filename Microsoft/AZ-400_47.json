{"pageProps":{"questions":[{"id":"P3CxLh7hhzAMJDgVSG3g","timestamp":"2023-01-18 14:02:00","answers_community":["C (100%)"],"answer_description":"","answer_ET":"C","discussion":[{"content":"Selected Answer: C\nThis question came today (2023-02-14)","upvote_count":"9","comment_id":"808139","timestamp":"1691986680.0","poster":"surensaluka"},{"timestamp":"1701450000.0","upvote_count":"7","poster":"zellck","content":"Selected Answer: C\nC is the answer.\n\nhttps://learn.microsoft.com/en-us/azure/automation/source-control-integration\nSource control integration in Azure Automation supports single-direction synchronization from your source control repository. Source control allows you to keep your runbooks in your Automation account up to date with scripts in your GitHub or Azure DevOps source control repository. This feature makes it easy to promote code that has been tested in your development environment to your production Automation account.","comment_id":"912198"},{"upvote_count":"1","timestamp":"1724362320.0","content":"Selected Answer: C\nC. the Source control settings for the Automation account","poster":"ozbonny","comment_id":"1156791"},{"comment_id":"1100231","upvote_count":"1","content":"Selected Answer: C\nAgree with C","poster":"vsvaid","timestamp":"1718758620.0"},{"comment_id":"958352","timestamp":"1705841640.0","content":"Selected Answer: C\nC. the Source control settings for the Automation account\nIt allow you connect to Azure Devops repository containing the runbook.\nWhenever a change is committed to the repository.\nAzure Automation can automatically sync the changes and publish the runbook.\n\nService hooks, Not directly involved in sync and publis runbooks, Used for notifications, integrations, and triggering external actions based on events in Azure DevOps.","upvote_count":"2","poster":"renzoku"},{"poster":"AzureJobsTillRetire","timestamp":"1689736440.0","comment_id":"780741","upvote_count":"4","content":"Source control allows you to ensure that all of your Azure Automation runbooks are up-to-date with your scripts in an external source control. Click 'Add' to create a new source control configuration which will import all of the runbooks within a given folder in your external source control to your Automation account."},{"poster":"memoor","timestamp":"1689678120.0","comment_id":"780017","upvote_count":"5","content":"Given Answer is correct. https://learn.microsoft.com/en-us/azure/automation/source-control-integration"}],"answer_images":[],"url":"https://www.examtopics.com/discussions/microsoft/view/95839-exam-az-400-topic-5-question-22-discussion/","answer":"C","isMC":true,"choices":{"A":"the Service hooks settings for Project1","C":"the Source control settings for the Automation account","D":"the Service connections settings for Project1","B":"the Connections settings for the Automation account"},"topic":"5","question_images":[],"question_id":231,"exam_id":55,"question_text":"You have an Azure Automation account that contains a runbook. The runbook is used to configure the application infrastructure of an Azure subscription.\n\nYou have a project in Azure DevOps named Project1. Project1 contains a repository that stores code for the runbook.\n\nYou need to ensure that every committed change to the code will update automatically and publish the runbook to Azure Automation.\n\nWhat should you configure?","unix_timestamp":1674046920},{"id":"ZKjRIepH144RPDa9lt0K","choices":{"B":"Add the name of the non-default branch to the on:push specification in the code scanning workflow.","E":"Add a new workflow for code scanning.","C":"Delete the pull request, and then raise the request again from the default branch.","A":"Add the name of the default branch to the on: push specification in the code scanning workflow.","D":"Update the code in the pull request."},"exam_id":55,"discussion":[{"comment_id":"781312","upvote_count":"23","comments":[{"poster":"AzureJobsTillRetire","content":"I think this answer is more convincing.","comment_id":"786188","timestamp":"1674540060.0","upvote_count":"1"}],"poster":"Wengatz","content":"Selected Answer: BD\nFrom https://docs.github.com/en/enterprise-server@3.4/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository\n\nThere are other situations where there may be no analysis for the latest commit to the base branch for a pull request. These include:\n\nThe pull request has been raised against a branch other than the default branch, and this branch hasn't been analyzed.\n\nThe solution in this situation is to add the name of the base branch to the on:push [THIS IS ANSWER B] and on:pull_request specification in the code scanning workflow on that branch and then make a change that updates the open pull request that you want to scan [THIS IS ANSWER D].","timestamp":"1674145980.0"},{"comments":[{"upvote_count":"4","content":"The solution in this situation is to add the name of the base branch to the on:push and on:pull_request specification in the code scanning workflow on that branch and then make a change that updates the open pull request that you want to scan.","comment_id":"780745","timestamp":"1674106200.0","poster":"AzureJobsTillRetire"}],"comment_id":"780043","timestamp":"1674048780.0","content":"Given answer is correct...https://docs.github.com/en/enterprise-server@3.4/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository","upvote_count":"8","poster":"memoor"},{"content":"Selected Answer: BD\nBD is the right answer","timestamp":"1730238480.0","comment_id":"1304720","poster":"MrAZ105","upvote_count":"1"},{"timestamp":"1719660480.0","comment_id":"1239234","poster":"Marti98","upvote_count":"1","content":"Selected Answer: AD\nI think people here don't really understand what is the \"base\" branch in the documentation they quote. However, it is explained above in the docs:\n \"base branch (the branch into which you want to merge the pull request)\"\n \"topic branch (the branch you used to create the pull request)\"\nIn the question, Microsoft states: \"You raise a pull request from a non-default branch.\" -> This means that the non-default branch is named in the documentation \"topic branch\" -> The default branch is called in the documentation the base branch.\n\nSo when the documentation says: \n \"The solution in this situation is to add the name of the base branch to the on:push and on:pull_request specification in the code scanning workflow on that branch and then make a change that updates the open pull request that you want to scan.\"\nThey mean nothing else than: \"add the name of the default branch to the on:push \""},{"poster":"vsvaid","timestamp":"1702955220.0","upvote_count":"3","content":"Selected Answer: BD\nAgree with BD","comment_id":"1100233"},{"comment_id":"1080110","poster":"Firdous586","content":"The solution in this situation is to add the name of the base branch to the on:push and on:pull_request specification in the code scanning workflow on that branch and then make a change that updates the open pull request that you want to scan.\n\nhttps://docs.github.com/en/enterprise-server@3.4/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository\n\n100% BD is the correct answer","timestamp":"1700925600.0","upvote_count":"2"},{"comment_id":"1049403","content":"BD\n\nGiven the scenario, the two actions that make the most sense are:\nB. Add the name of the non-default branch to the on:push specification in the code scanning workflow.\nD. Update the code in the pull request (only because this action might trigger the code scanning if the workflow is set up to run on pull requests).","upvote_count":"1","poster":"software_dev_delivery","timestamp":"1697883720.0"},{"upvote_count":"3","content":"Selected Answer: AD\nhttps://docs.github.com/en/enterprise-server@3.4/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository#reasons-for-the-analysis-not-found-message\n\nwith example and wording of the \"default branch\"","comment_id":"987190","timestamp":"1692689760.0","poster":"heeloco"},{"poster":"ieboaix","upvote_count":"2","timestamp":"1692093060.0","content":"after read the https://docs.github.com/en/enterprise-server@3.4/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository , i think given answer is correct. the base branch mentioned the in article is the branch you want to merge into. so A and D.","comment_id":"981497"},{"content":"Selected Answer: BD\nB. Add the name of the non-default branch to the on:push specification in the code scanning workflow.\nname: Code Scanning\non:\n push:\n branches:\n - feature-dev # we have to add non-default branch\n\nNON-DEFAULT branch -> pull request -> DEFAULT branch\nAdd who is pushing the code to 'on: push: branches:'\n\nD. Update the code in the pull request.\nIf there's an error in the code, the code scanning workflow wouldn't triggered and you'll get the error \"Analysis not found\"","timestamp":"1690020600.0","poster":"renzoku","comment_id":"959407","upvote_count":"1"},{"content":"Selected Answer: BD\nBD is the answer.\n\nhttps://docs.github.com/en/enterprise-server@3.4/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository?learn=code_security_actions&learnProduct=code-security#reasons-for-the-analysis-not-found-message\nThe solution in this situation is to add the name of the base branch to the on:push and on:pull_request specification in the code scanning workflow on that branch and then make a change that updates the open pull request that you want to scan.","comment_id":"908256","upvote_count":"4","timestamp":"1685233980.0","poster":"zellck"},{"comment_id":"860996","upvote_count":"3","content":"Selected Answer: BD\nSo, the trick here seems to be making a small change (any change, really) to the already updated and pushed branch after the on:push branch re-configuration has been made, so that the on:push event will trigger once again, although, this time, with the correct branch setup hence starting the code scan.","poster":"FNog","timestamp":"1680610560.0"},{"comment_id":"810053","upvote_count":"2","poster":"kay000001","content":"Selected Answer: BD\nB & D\nThis link will explain: https://docs.github.com/en/enterprise-server@3.4/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository","timestamp":"1676501040.0"},{"upvote_count":"1","content":"Selected Answer: AD\nhttps://docs.github.com/en/enterprise-server@3.4/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/customizing-code-scanning#scanning-pull-requests","comment_id":"791481","poster":"warchoon","timestamp":"1674982440.0"},{"comment_id":"783687","timestamp":"1674327720.0","upvote_count":"3","content":"Selected Answer: BC\nI think it's bc","poster":"Iaminall"},{"comment_id":"781523","upvote_count":"4","content":"Selected Answer: BD\nIts a non default branche so that name must be added","poster":"Emil_Topics","comments":[{"upvote_count":"1","timestamp":"1674982140.0","content":"But the pull request push will be to the default branch.","comment_id":"791478","poster":"warchoon"}],"timestamp":"1674156000.0"},{"comment_id":"780277","timestamp":"1674064200.0","upvote_count":"1","content":"I think BC","poster":"Iaminall"}],"url":"https://www.examtopics.com/discussions/microsoft/view/95843-exam-az-400-topic-5-question-23-discussion/","timestamp":"2023-01-18 14:33:00","question_id":232,"answer_ET":"BD","unix_timestamp":1674048780,"question_images":[],"question_text":"You use Git for source control.\n\nYou enable GitHub code scanning.\n\nYou raise a pull request from a non-default branch. In the code scanning output, you receive the following error message: “Analysis not found.”\n\nYou need to ensure that the code scanning completes successfully for the pull request.\n\nWhich two actions should you perform? Each correct answer presents part of the solution.\n\nNOTE: Each correct selection is worth one point.","answers_community":["BD (84%)","Other"],"isMC":true,"topic":"5","answer_description":"","answer_images":[],"answer":"BD"},{"id":"s9a3z3W1P6m5Ib4WMPSg","topic":"5","url":"https://www.examtopics.com/discussions/microsoft/view/96638-exam-az-400-topic-5-question-24-discussion/","question_id":233,"unix_timestamp":1674507540,"discussion":[{"poster":"AzureJobsTillRetire","timestamp":"1690171500.0","content":"double star double star and double star","comment_id":"786191","upvote_count":"26"},{"timestamp":"1701138540.0","poster":"zellck","comment_id":"908252","upvote_count":"11","content":"1. - 'releases/**'\n2. - 'src/**'\n3. - '**/*.md'\n\nhttps://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-including-paths\n\nhttps://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-excluding-paths"},{"poster":"hanzocodes","upvote_count":"2","comment_id":"1103504","timestamp":"1719066480.0","content":"release scarce meds - double stars"},{"timestamp":"1718759940.0","poster":"vsvaid","comment_id":"1100241","upvote_count":"1","content":"Agree with answer"},{"upvote_count":"1","comment_id":"1013915","poster":"KingTN","timestamp":"1711107180.0","content":"* is a simple, non-recursive wildcard representing zero or more characters which you can use for paths and file names.\n** is a recursive wildcard which can only be used with paths, not file names.\n\nhttps://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet"},{"comment_id":"959376","content":"You have a GitHub repository named repo1 that stores the code of an app named App1.\n\nYou need deploy a workflow for repo1 by using GitHub Actions. The solution must meet the following requirements:\n\n• Scan on pushes to the main branch.\n• Scan on pull requests to the main branch.\n• Scan on pull requests to any branch that has a prefix of releases/.\n• Scan all the files in the subdirectories of the src directory.\n• Exclude scanning of markdown files.\n\nHow should you complete ___________ in the code with the next alternatives? \nA. '**/*.md'\nB. '*.md'\nC. 'release*'\nD. 'releases/**'\nE. 'src/*'\nF. 'src/**'\n\non:\n push:\n branches: [main]\n pull_request:\n branches:\n - main \n ___________\n paths:\n ___________\n paths-ignore:\n ___________","poster":"renzoku","timestamp":"1705922220.0","upvote_count":"1"},{"timestamp":"1704429600.0","poster":"gujjudesi420","upvote_count":"2","content":"Box 1 'releases/**' matches branches that start with \"releases/\" and can have any number of levels of directory structure after the prefix. It matches branches like \"releases/v1\", \"releases/stable\", and \"releases/v1/bugfix\" because it allows any level of subdirectories after the \"releases/\" prefix.\nBox 2 **/*.md: This pattern matches any file with the .md extension in any directory and its subdirectories. The ** is a wildcard that represents any level of directories. So, for example, it would match files like file.md, subdir/file.md, subdir/subdir2/file.md, and so on.\nBox 3 src/**: This pattern matches any file or directory within the src directory and its subdirectories. The ** is a wildcard that represents any level of directories. So, for example, it would match files or directories like src/file.txt, src/subdir/file.txt, src/subdir/subdir2/file.txt, and so on.","comment_id":"943250"},{"upvote_count":"3","poster":"warchoon","timestamp":"1690616640.0","comment_id":"791523","content":"Correct\n'*' Matches all branch and tag names that don't contain a slash (/). The * character is a \nspecial character in YAML. When you start a pattern with *, you must use quotes.\n'**' Matches all branch and tag names. This is the default behavior when you don't use a branches or tags filter.\n\n\nhttps://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet\n\nhttps://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions\n\nhttps://www.examtopics.com/discussions/microsoft/view/96638-exam-az-400-topic-5-question-24-discussion/"},{"upvote_count":"2","timestamp":"1690138740.0","comment_id":"785829","content":"Correct","poster":"Bill727"}],"question_images":["https://img.examtopics.com/az-400/image13.png"],"exam_id":55,"timestamp":"2023-01-23 21:59:00","answer_images":["https://img.examtopics.com/az-400/image14.png"],"question_text":"DRAG DROP\n-\n\nYou have a GitHub repository named repo1 that stores the code of an app named App1.\n\nYou need deploy a workflow for repo1 by using GitHub Actions. The solution must meet the following requirements:\n\n• Scan on pushes to the main branch.\n• Scan on pull requests to the main branch.\n• Scan on pull requests to any branch that has a prefix of releases/.\n• Scan all the files in the subdirectories of the src directory.\n• Exclude scanning of markdown files.\n\nHow should you complete the code? To answer, drag the appropriate values to the correct targets. Each value may be used once, more than once, or not at all. You may need to drag the split bar between panes or scroll to view content.\n\nNOTE: Each correct selection is worth one point.\n\n//IMG//","isMC":false,"answer":"","answer_ET":"","answer_description":"","answers_community":[]},{"id":"djLSWyt9nOcOukPKRWqH","discussion":[{"comment_id":"781349","upvote_count":"19","content":"Selected Answer: D\nAnswer is correct:\nhttps://learn.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#use-other-repositories\n\nIf you want to use a particular, fixed version of the template, be sure to pin to a ref. The refs are either branches (refs/heads/<name>) or tags (refs/tags/<name>). If you want to pin a specific commit, first create a tag pointing to that commit, then pin to that tag.","comments":[{"content":"Correct Answer: D\nSHA-based hashes (B) provide the most immutable reference to a specific version, however the official Microsoft documentation explicitly recommends using refs (branches or tags) for fixing template versions:\n\nFrom the above reference link: \"If you want to use a particular, fixed version of the template, be sure to pin to a ref. The refs are either branches (refs/heads/<name>) or tags (refs/tags/<name>).\"\nTherefore, D (the branch) is the technically correct answer according to Microsoft's official guidance, even though SHA-based hashes would also work.\n\nyaml would look like this:\nyamlCopyresources:\n repositories:\n - repository: templates\n type: github\n name: org/repo\n ref: refs/heads/release-1.0 # Branch reference\n\n1. Using a branch reference is the recommended approach per Microsoft\n2. Using tags (which are a type of ref) is particularly good for version control\n3. SHA hashes, while perfectly functional, are not the primary recommended method","timestamp":"1737205440.0","poster":"Freyr","comment_id":"1342517","upvote_count":"2"}],"timestamp":"1674147060.0","poster":"Wengatz"},{"content":"Selected Answer: B\nThe question asks for a *fixed version* of the template. If you use the main branch for instance, which is a branch that usually points to the latest version, then you are not using a fixed version because it changes over time as commits are made. Its like using the latest version of a software. Today the latest version might be 1.32.2 but next year it could be 4.17.5 . Tags would be a valid answer since they are used to denote a specific version and point to a specific commit, but branches are not. You don't have tags as an available answer but the SHA should do because the SHA is the identifier of a specific commit.","comment_id":"957872","timestamp":"1689881580.0","upvote_count":"10","poster":"resonant","comments":[{"content":"I just read the link that @Wengatz provided and even though I still think the correct answer should be the SHA, if I found this question in the exam I'd choose D because that's literally what the Microsoft's documentation says.","upvote_count":"4","comment_id":"957875","poster":"resonant","timestamp":"1689882120.0"}]},{"poster":"SunnyIOM","upvote_count":"1","content":"Selected Answer: B\nSHA-based hashes: Each commit in a GitHub repository is identified by a unique SHA-1 hash. By referencing the SHA-based hash of a specific commit, you can ensure that your pipeline uses the exact version of the template from that commit. This is the most reliable way to lock in a specific version of the template, as it is immutable and will not change over time.","timestamp":"1744194600.0","comment_id":"1559202"},{"comment_id":"1353825","upvote_count":"1","content":"Selected Answer: B\nWhy not D, here is the answer from Gemini : While you could reference a branch, branches are mutable. If the branch is updated, your pipeline will use the latest version of the template on that branch, which might not be what you intend. This makes your pipeline deployments unpredictable. You want to lock in a specific version, and branches can change.","poster":"learningCat","timestamp":"1739094600.0"},{"poster":"Christian_garcia_martin","comment_id":"1340289","content":"Selected Answer: B\nSHA-based hashes","upvote_count":"1","timestamp":"1736851140.0"},{"upvote_count":"2","content":"Selected Answer: B\nShould be B.\nhttps://learn.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops&pivots=templates-includes#use-other-repositories\n\n\"You can also pin to a specific commit in Git with the SHA value for a repository resource. The SHA value is a 40-character checksum hash that uniquely identifies the commit.\"","poster":"Aimen","timestamp":"1736076480.0","comment_id":"1336728"},{"timestamp":"1731416760.0","content":"Selected Answer: D\nAgree with D\n\nhttps://learn.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#use-other-repositories","comment_id":"1310589","poster":"Gooldmember","upvote_count":"1"},{"upvote_count":"2","comment_id":"1293415","poster":"Mattt","content":"Selected Answer: B\nI go with SHA hashes","timestamp":"1728120780.0"},{"poster":"UrbanRellik","content":"Selected Answer: B\nI'm here just to adjust the voting % in favor of B.\n\nYou would use SHA-based hashes to identify a fixed version of the template. \nUsing a branch is not going to lock you into a fixed version of the template.","comment_id":"1250624","upvote_count":"2","timestamp":"1721328120.0"},{"upvote_count":"1","content":"Selected Answer: D\nBy using SHA-based hashes, you're locking your pipelines to a specific, immutable version of the template, which is the most reliable way to ensure consistency across multiple pipeline deployments.","poster":"5c3d677","timestamp":"1718983560.0","comment_id":"1234551"},{"content":"https://learn.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops&pivots=templates-includes#use-other-repositories\n\"You can also pin to a specific commit in Git with the SHA value for a repository resource. The SHA value is a 40-character checksum hash that uniquely identifies the commit.\"","comment_id":"1166295","poster":"DrSohan93","timestamp":"1709626680.0","upvote_count":"3"},{"timestamp":"1706292720.0","poster":"freddyneen","comment_id":"1132724","content":"Selected Answer: B\nFrom link: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#use-other-repositories\nIf you want to use a particular, fixed version of the template, be sure to pin to a ref. The refs are either branches (refs/heads/<name>) or tags (refs/tags/<name>). If you want to pin a specific commit, first create a tag pointing to that commit, then pin to that tag.\n\nYou can also pin to a specific commit in Git with the SHA value for a repository resource. The SHA value is a 40-character checksum hash that uniquely identifies the commit.","upvote_count":"2"},{"comment_id":"1110616","timestamp":"1704031200.0","content":"Selected Answer: B\nBranch can have multiple commits of template so using branch ref is no gaurantee. SHA based reference will always point to same coomit","upvote_count":"2","poster":"vsvaid"},{"comment_id":"1108519","content":"Selected Answer: B\nChoosing d (branch) here doesn't suffice the requirement of a fixed version.","upvote_count":"2","poster":"hardinxcore","timestamp":"1703841360.0"},{"content":"i would say D is the correct answer as per my MS Document\n\nInitially i was thinking with SHA Based only but after doing some research with other websites i did not found any evidence of SHA based therefore i would go to Branch Option only","poster":"Firdous586","comment_id":"1080132","upvote_count":"1","timestamp":"1700927340.0"},{"timestamp":"1695899880.0","poster":"flafernan","content":"Selected Answer: B\nThe most widely accepted and recommended approach to ensuring that you are using a fixed version of the pipeline model is to use SHA hashing (SHA-based hashes), as it provides an accurate and reliable way to identify a specific version of code in your repository , regardless of the branch in which it is located.\n\nTherefore, while \"the branch\" may be a valid answer depending on the context, \"SHA-based hashes\" is generally a more accurate and recommended choice for referencing specific versions of code in a GitHub repository.","comments":[{"comment_id":"1080134","timestamp":"1700927460.0","content":"i don't think so its correct answer","upvote_count":"1","poster":"Firdous586"}],"upvote_count":"3","comment_id":"1019767"},{"upvote_count":"2","content":"Selected Answer: D\nEnsure that you use a fixed version of the template.\nThis could be done in 2 ways.\n\ntemplate:\n repo: https://github.com/myorg/mytemplate\n ref: refs/tags/v2 #specify the fixed version of the template\n\n\ntemplate:\n repo: https://github.com/myorg/mytemplate\n ref: sha:<SHA-based hash> #SHA value to the commit used to the fixed version of the template\n\nBut the question is \"use a fixed version\" then the answer should be D, if the question would be use the version to sphttps://www.examtopics.com/exams/microsoft/az-400/view/20/#ecific commit I think should be B.","timestamp":"1690023300.0","poster":"renzoku","comment_id":"959428"},{"poster":"zellck","timestamp":"1685766300.0","upvote_count":"5","content":"Selected Answer: D\nD is the answer.\n\nhttps://learn.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#use-other-repositories\nIf you want to use a particular, fixed version of the template, be sure to pin to a ref. The refs are either branches (refs/heads/<name>) or tags (refs/tags/<name>). If you want to pin a specific commit, first create a tag pointing to that commit, then pin to that tag.","comment_id":"913256"}],"exam_id":55,"answer_ET":"D","answer":"D","question_id":234,"unix_timestamp":1674147060,"timestamp":"2023-01-19 17:51:00","choices":{"B":"the SHA-based hashes","D":"the branch","A":"the serial","C":"the runner"},"url":"https://www.examtopics.com/discussions/microsoft/view/96019-exam-az-400-topic-5-question-25-discussion/","topic":"5","answer_images":[],"answers_community":["D (50%)","B (50%)"],"isMC":true,"question_text":"You have a GitHub repository that contains multiple versions of an Azure Pipelines template.\n\nYou plan to deploy multiple pipelines that will use a template stored in the repository.\n\nYou need to ensure that you use a fixed version of the template.\n\nWhat should you use to reference which version of the template repository to use?","question_images":[],"answer_description":""},{"id":"4n1xgQRSG5LWymsG8OAq","exam_id":55,"answer_images":["https://img.examtopics.com/az-400/image17.png"],"unix_timestamp":1674065640,"question_id":235,"answer_ET":"","topic":"5","question_text":"DRAG DROP\n-\n\nYou have the repositories shown in the following table.\n\n//IMG//\n\n\nYou need to migrate the contents of the GitHub repository to the Azure Repos repository. The solution must ensure that the Azure Repos repository only contains branches and history from the GitHub repository.\n\nWhich three commands should you run in sequence? To answer, move the appropriate commands from the list of commands to the answer area and arrange them in the correct order.\n\n//IMG//","timestamp":"2023-01-18 19:14:00","question_images":["https://img.examtopics.com/az-400/image15.png","https://img.examtopics.com/az-400/image16.png"],"url":"https://www.examtopics.com/discussions/microsoft/view/95882-exam-az-400-topic-5-question-26-discussion/","isMC":false,"answer_description":"","answers_community":[],"discussion":[{"timestamp":"1689696840.0","content":"Given Answer correct.....https://learn.microsoft.com/en-us/azure/devops/repos/git/import-git-repository?view=azure-devops","comments":[{"poster":"NPE_","timestamp":"1721798160.0","upvote_count":"1","comment_id":"1130328","content":"Given Answer is wrong. Just on the page from your link. It clearly writes \"git clone --bare https://github.com/contoso/old-contoso-repo.git\ncd old-contoso-repo.git\"\nSince you used --bare, this would create a folder that ends with .git. So you should use cd project.git command to go to the code"},{"content":"My bad. Given answer is correct. Ignore my last answer...","comment_id":"1130336","poster":"NPE_","upvote_count":"2","timestamp":"1721798640.0"},{"content":"More specific link: https://learn.microsoft.com/en-us/azure/devops/repos/git/import-git-repository?view=azure-devops#manually-import-a-repo-using-git-cli","comment_id":"807197","upvote_count":"3","poster":"petitbilly","timestamp":"1691908380.0"}],"comment_id":"780297","poster":"memoor","upvote_count":"19"},{"timestamp":"1701097620.0","comment_id":"908004","upvote_count":"14","content":"1. git clone --bare https://github.com/contoso/project1.git\n2. cd project1.git\n3. git push --mirror https://dev.azure.com/contoso/project1/_git/proj\n\nhttps://learn.microsoft.com/en-us/azure/devops/repos/git/import-git-repository?view=azure-devops#manually-import-a-repo-using-git-cli","poster":"zellck"},{"comment_id":"986308","upvote_count":"2","content":"https://learn.microsoft.com/en-us/azure/devops/repos/git/import-git-repository?view=azure-devops#manually-import-a-repo-using-git-cli\nIn this link the solution is clearly described step by step.\nProvided answer is correct.","poster":"yana_b","timestamp":"1708509300.0"},{"poster":"RonZhong","content":"Given answer is correct:\n\n> git clone --bare https://github.com/contoso/old-contoso-repo.git\n> cd old-contoso-repo.git\n> git push --mirror https://dev.azure.com/contoso-ltd/MyFirstProject/_git/new-contoso-repo","timestamp":"1697550060.0","comment_id":"872736","upvote_count":"2"},{"poster":"mohiniu","comment_id":"823164","content":"Given answer is correct \nWith git clone --bare , directory name has suffix .git.","timestamp":"1693102140.0","upvote_count":"3"},{"timestamp":"1691936580.0","upvote_count":"5","content":"cd project1.git \n\"When cloning using the bare option, the folder name includes the .git suffix.\"\nhttps://learn.microsoft.com/en-us/azure/devops/repos/git/import-git-repository?view=azure-devops","comment_id":"807581","poster":"darko13"},{"timestamp":"1691549280.0","comment_id":"802835","upvote_count":"1","content":"clone .... project1.git\ncd project1\nmirror .... project1.git","comments":[{"timestamp":"1732355700.0","content":".git is part of the project name\nFor step 2 \"cd project1.git\" is correct.\n\nThe given answer is correct.","comment_id":"1216365","upvote_count":"1","poster":"Mattt"}],"poster":"318touring"},{"timestamp":"1690643460.0","content":"Git clone --bare https://github.com/contoso/project1.git\nCd project1\nGit push --mirror https://dev.azure.com/contoso/project1/_git/project1","comment_id":"791864","poster":"GedeonTheOne","upvote_count":"3"},{"comment_id":"789514","content":"GitHub repo name is misspelled.","timestamp":"1690447440.0","upvote_count":"6","poster":"ShivaUdari"},{"upvote_count":"3","comment_id":"784299","timestamp":"1690022640.0","comments":[{"upvote_count":"3","timestamp":"1690268700.0","poster":"kai_luni","content":"this is certainly not correct, cd project1.git does not work, as 'project1.git' is not a directory","comment_id":"787437","comments":[{"comments":[{"content":"It depends on how you clone. With the --bare option, the folder that git creates in the current directory will have the .git suffix. If you didn't pass the --bare option then the folder will be project1 without the .git suffix.","timestamp":"1706613240.0","comment_id":"966988","poster":"resonant","upvote_count":"1"},{"content":"So microsoft is wrong on their learning page. Really sad. What's the answer then?","poster":"warchoon","comment_id":"803965","timestamp":"1691635260.0","comments":[{"poster":"resonant","comment_id":"966984","timestamp":"1706613120.0","upvote_count":"1","content":"@mohiniu clarified this already. A normal git clone creates a directory without the .git suffix. A clone with the --bare option passed created a directory with the .git suffix. Just try it yourself."}],"upvote_count":"1"}],"comment_id":"791799","poster":"buzzerboy","content":"agree, when u clone https://xxxx/yyyyy.git, it creates a folder named yyyy, not yyyyyy.git. Remaining solution is correct.\n\n1. clone from github --bare\n2. cd project1\n3. push to ado --mirror","upvote_count":"1","timestamp":"1690639200.0"}]}],"content":"Git clone --bare https://github.com/contoso/project1.git\nCd project1.git\nGit push --mirror https://dev.azure.com/contoso/project1/_git/project1","poster":"mrg998"}],"answer":""}],"exam":{"name":"AZ-400","provider":"Microsoft","isBeta":false,"isImplemented":true,"id":55,"numberOfQuestions":558,"lastUpdated":"12 Apr 2025","isMCOnly":false},"currentPage":47},"__N_SSP":true}