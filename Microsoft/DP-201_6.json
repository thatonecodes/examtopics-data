{"pageProps":{"questions":[{"id":"vlzvhdgDHY41pH7gfkGP","answer_description":"A Hyperscale database is an Azure SQL database in the Hyperscale service tier that is backed by the Hyperscale scale-out storage technology. A Hyperscale database supports up to 100 TB of data and provides high throughput and performance, as well as rapid scaling to adapt to the workload requirements. Scaling is transparent to the application ג€\" connectivity, query processing, etc. work like any other Azure SQL database.\nIncorrect Answers:\nA: SQL Database elastic pools are a simple, cost-effective solution for managing and scaling multiple databases that have varying and unpredictable usage demands. The databases in an elastic pool are on a single Azure SQL Database server and share a set number of resources at a set price. Elastic pools in Azure\nSQL Database enable SaaS developers to optimize the price performance for a group of databases within a prescribed budget while delivering performance elasticity for each database.\nB: Rather than SQL Data Warehouse, consider other options for operational (OLTP) workloads that have large numbers of singleton selects.\nReference:\nhttps://docs.microsoft.com/en-us/azure/sql-database/sql-database-service-tier-hyperscale-faq","question_images":[],"answer_ET":"D","topic":"1","isMC":true,"discussion":[{"comment_id":"315889","poster":"riteshsinha18","upvote_count":"9","timestamp":"1616277480.0","content":"correct answer"},{"poster":"kimalto452","timestamp":"1634479140.0","content":"synapse support singleton operations...","upvote_count":"1","comment_id":"463562"},{"upvote_count":"1","poster":"achamizo","timestamp":"1626187860.0","content":"Singlenton operations = transactional operations, so only relational databases supports it. Hyperscale supports up to 100TB.","comment_id":"405504"},{"upvote_count":"1","timestamp":"1621675380.0","comment_id":"363545","comments":[{"content":"Go through the ACID concept","comment_id":"365669","poster":"[Removed]","timestamp":"1621867260.0","upvote_count":"1"},{"upvote_count":"1","poster":"Steve92873197","content":"Would take that to mean single row inserts, or updates","comment_id":"365740","timestamp":"1621874940.0"}],"poster":"toandm","content":"can anyone tell what 'singleton inserts, singleton updates' mean? I've been looking on the internet but no solid definition"},{"comment_id":"362785","timestamp":"1621582680.0","content":"azure synapse is better for OLAP purposes while for OLTP, use of Azure SQL is the best choice. as the requirement states it requires to perform insert and update.","upvote_count":"1","poster":"cadio30"},{"content":"But isn't Datawarehouse (Synapse Analytics) a right choice considering that we have table geometries (hash distribution) to efficiently perform inserts updates and deletes?","poster":"aksoumi","comment_id":"329017","upvote_count":"1","timestamp":"1617653220.0","comments":[{"comment_id":"387027","content":"No DWH is not a place for singleton updates","poster":"savin","timestamp":"1624273980.0","upvote_count":"1"},{"content":"Keyword here is 100TB based on the support link.","poster":"DongDuong","upvote_count":"10","comment_id":"331882","timestamp":"1617964500.0"}]}],"answers_community":[],"unix_timestamp":1616277480,"timestamp":"2021-03-20 22:58:00","answer":"D","exam_id":66,"question_text":"You are designing a data storage solution for a database that is expected to grow to 50 TB. The usage pattern is singleton inserts, singleton updates, and reporting.\nWhich storage solution should you use?","answer_images":[],"choices":{"B":"Azure Synapse Analytics","A":"Azure SQL Database elastic pools","D":"Azure SQL Database Hyperscale","C":"Azure Cosmos DB that uses the Gremlin API"},"question_id":26,"url":"https://www.examtopics.com/discussions/microsoft/view/47833-exam-dp-201-topic-1-question-32-discussion/"},{"id":"MWzUOAfm7u1jTxrnpkkg","answer_images":["https://www.examtopics.com/assets/media/exam-media/03774/0008300001.png"],"question_images":["https://www.examtopics.com/assets/media/exam-media/03774/0008100001.png","https://www.examtopics.com/assets/media/exam-media/03774/0008200001.png"],"unix_timestamp":1586972220,"url":"https://www.examtopics.com/discussions/microsoft/view/18498-exam-dp-201-topic-1-question-33-discussion/","question_text":"HOTSPOT -\nYou are designing a solution that will use Azure Table storage. The solution will log records in the following entity.\n//IMG//\n\nYou are evaluating which partition key to use based on the following two scenarios:\n✑ Scenario1: Minimize hotspots under heavy write workloads.\n✑ Scenario2: Ensure that date lookups are as efficient as possible for read workloads.\nWhich partition key should you use for each scenario? To answer, select the appropriate options in the answer area.\nNOTE: Each correct selection is worth one point.\nHot Area:\n//IMG//","exam_id":66,"discussion":[{"comment_id":"78009","timestamp":"1587578040.0","content":"Scenerio1: DepartmentName+EmployeeID","comments":[{"timestamp":"1589816940.0","comment_id":"91451","content":"Even if 1-2 departments have more employees than other departments, practically not all employees will not sign-up for events all at a time.","upvote_count":"1","poster":"JamesCho"},{"content":"thats the answer as per\n\nhttps://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-design-guide#solution-11","comments":[{"comment_id":"153564","poster":"Treadmill","content":"Scenario 1: Department+EmployeeID = avoids hotspots on inserts which happen at the same time\nScenario 2: Year+month+day+hour+EventID = date is included as a string for date lookups\n\nWrong\nDatetime: The partition key value (For example: \"Andrew\"). The partition key value can be of string or numeric types.\n\nhttps://docs.microsoft.com/en-us/azure/cosmos-db/partitioning-overview\n\nhttps://docs.microsoft.com/en-us/azure/cosmos-db/table-storage-design-guide#solution-11","timestamp":"1596971520.0","upvote_count":"23"}],"timestamp":"1589728020.0","poster":"vistran","upvote_count":"20","comment_id":"90654"}],"upvote_count":"78","poster":"Yuri1101"},{"upvote_count":"43","timestamp":"1601410500.0","poster":"groy","comment_id":"189912","content":"Correct final answers.....!!\n\n1: Department+EmployeeID = avoids hotspots on inserts which happen at the same time\n2: Year+month+day+hour+EventID = date is included as a string for date lookups"},{"comment_id":"319158","poster":"Pairon","upvote_count":"2","content":"I agree with the given answer.\n\"You could also partition your data by a Date or DateTime attribute (or some part of).\" (https://trycatch.me/data-partitioning-strategy-in-cosmosdb/), so datetime field can be used as partition key.","timestamp":"1616593620.0"},{"content":"Not sure about DepartmentName+EmployeeID: the department name could change.","upvote_count":"2","poster":"Pairon","timestamp":"1616593440.0","comment_id":"319154"},{"upvote_count":"2","content":"For Scenario 2 : is it Year-Month-Day-Hour-EventID ??","poster":"AhmedReda","timestamp":"1593089280.0","comment_id":"119445"},{"timestamp":"1592723880.0","upvote_count":"2","content":"The timestamp is of milliseconds precision, in that case, it won't lead to hot partitions.","poster":"Abhilvs","comment_id":"115325","comments":[{"poster":"Ash666","upvote_count":"4","content":"Can’t set date time type as partition key. \nEither string or numeric type.","comment_id":"155892","timestamp":"1597182660.0"}]},{"comment_id":"96757","content":"Surname cannot be a partition key because ~750 records have a null value.","poster":"Mathster","timestamp":"1590580500.0","upvote_count":"1"},{"timestamp":"1589003040.0","poster":"azurearch","comment_id":"85943","upvote_count":"1","content":"choosing timestamp would create multiple partitions and affects insert operations. composite key could be the right choice here"},{"comment_id":"79131","poster":"Tombarc","comments":[{"upvote_count":"1","comment_id":"85941","content":"the scenario is for write heavy workload, on a certain hour there could be many events causing hot spots.","poster":"azurearch","timestamp":"1589002260.0"},{"content":"for each event it would be return in a separate partition since we are adding event id to the partition key. that would introduce write latency. dept + empid makes logical. can be the answer.","timestamp":"1589692140.0","comment_id":"90330","upvote_count":"2","poster":"azurearch"}],"upvote_count":"7","content":"DepartmentName+EmployeeID could still result in hot partitions as there might be departments with many more employees than others. I'd say both scenarios would have a combination of \"Year+month+day+hour_EventID\" to suffice the requirements, and then a \"rowkey\" would be used to distinguish between the two.\n\nhttps://docs.microsoft.com/en-us/rest/api/storageservices/designing-a-scalable-partitioning-strategy-for-azure-table-storage#r","timestamp":"1587733680.0"},{"timestamp":"1586972220.0","upvote_count":"6","content":"Timestamp would actually be the worst possible partition option for hotspots. Will result in automatic range partitioning, causing all writes to go to a single partition: https://docs.microsoft.com/en-us/rest/api/storageservices/designing-a-scalable-partitioning-strategy-for-azure-table-storage","comment_id":"74958","comments":[{"poster":"apz333","upvote_count":"2","comment_id":"79050","timestamp":"1587721260.0","content":"Besides, you have to use string values for PartitionKey, and \"EventTimestamp\" is a datetime type. I don't think you could use it at all unless you convert it to string."}],"poster":"zb99"}],"isMC":false,"question_id":27,"answer_description":"References:\nhttps://docs.microsoft.com/en-us/rest/api/storageservices/designing-a-scalable-partitioning-strategy-for-azure-table-storage","answer_ET":"","answer":"","answers_community":[],"topic":"1","timestamp":"2020-04-15 19:37:00"},{"id":"qLA5PnDn97PEBmwVlFBk","timestamp":"2020-04-01 11:34:00","question_text":"DRAG DROP -\nYou have data on the 75,000 employees of your company. The data contains the properties shown in the following table.\n//IMG//\n\nYou need to store the employee data in an Azure Cosmos DB container. Most queries on the data will filter by the Current Department and the Employee\nSurname properties.\nWhich partition key and item ID should you use for the container? To answer, select the appropriate options in the answer area.\nNOTE: Each correct selection is worth one point.\nSelect and Place:\n//IMG//","answer_description":"Partition key: Current Department\n\nItem ID: Employee ID -\nReference:\nhttps://docs.microsoft.com/en-us/rest/api/storageservices/designing-a-scalable-partitioning-strategy-for-azure-table-storage","question_images":["https://www.examtopics.com/assets/media/exam-media/03774/0008400001.png","https://www.examtopics.com/assets/media/exam-media/03774/0008400002.jpg"],"discussion":[{"timestamp":"1586802780.0","content":"I think the partition key should be Department rather than Surname. The reason for this is the read latency. As the question stated, \"most of query would filter by Current Department or Employer Surname\". Having Surname as partition key, you would have 40,000 partition (40,000 unique value), and when you filter your query by Department, you query will need to go through 40,000 partition which would be real bad on performance. Other another hand, having Department as partition key, you would have 25 partition, and to filter surname query, it would be much faster compare to query on 40,000 partition.","poster":"Luke97","comments":[{"timestamp":"1587534660.0","comments":[{"poster":"Isio05","comment_id":"235750","timestamp":"1607176680.0","upvote_count":"2","content":"Current department suggests it's something can change, therefore it can't be parition key. Reasoning that we shouldn't use Surname because it will result in many logical partitions is completely wrong. It's even clearly stated in docs that even item id (with only unique) values is a valid option (however here Surname is more appropriate as we use it a predicate in queries)."}],"upvote_count":"1","poster":"Gashurb","content":"Yepp, i agree too. 40k partitions can't be good.","comment_id":"77766"},{"content":"Wrong, Department can change thus it cant be a partitioning key, moreover your argument is that it would be better if partitioning key would be Department and filtering on Surname because you would need to access only 25 partitions. Yes 25 partition of thousand of values! It is bad either way... but the better one is surname.","upvote_count":"4","poster":"francisco94","timestamp":"1607631300.0","comment_id":"240426"},{"content":"From https://docs.microsoft.com/en-gb/azure/cosmos-db/partitioning-overview:\n\"For all containers, your partition key should:\nBe a property that has a value which does not change. If a property is your partition key, you can't update that property's value.\nHave a high cardinality. In other words, the property should have a wide range of possible values.\nSpread request unit (RU) consumption and data storage evenly across all logical partitions. This ensures even RU consumption and storage distribution across your physical partitions.\"\nFirstly, \"Current Department\" is something that could change. Secondly, \"25\" is not high cardinality, and does not guarantee even distribution of data. E.g. if that was a huge IT company, 50k could be in the Engineering department, 50 in HHRR, 50 in MKT, etc.\nSo I think it should be \"Surname\" and EmployeeID.","poster":"Manue","upvote_count":"57","comments":[{"timestamp":"1638299460.0","comment_id":"490923","content":"The 'Sales' department will not change it's name. An employee may transfer from 'Sales' to 'Engineering' but that causes no issue to the partitioning.","upvote_count":"1","poster":"LiamRT"},{"content":"agree 100%","poster":"aksoumi","upvote_count":"1","comment_id":"329021","timestamp":"1617654180.0"},{"content":"No. It can't be as \"Surname\" as its values are populated only 99%. Will empty value in Partition key works? I think we need a column that is 100% populated. it can be EmpoyeID or the current department. \nSo, I am thinking to go with Key: Employer ID & Item Id: current department","poster":"Dhaval_Azure","timestamp":"1625057520.0","upvote_count":"1","comment_id":"394731"},{"comment_id":"343172","timestamp":"1619433780.0","content":"I agree with this explanation. You should use something you frequently filter on as partition key. \"Current Department\" will change much more frequently than e.g. surname. Since current department has too few unique entries it will lead to low cardinality, which is something you should avoid. You will have a very limited possibility to scale with \"current department\" as partition key, and surname will be the more natural choice (although maybe not optimal) \n\nSince Item ID HAS to be unique since it uniquely identifies the item, the EmployeeID would be the natural choice here","poster":"Apox","upvote_count":"4"}],"timestamp":"1589647740.0","comment_id":"90037"}],"upvote_count":"80","comment_id":"74197"},{"upvote_count":"31","comment_id":"70416","content":"i think the answer should be partition by surname ( as it has more unique values than department) and employeeId as itemid since it's unique.","poster":"Ard","timestamp":"1585830300.0"},{"content":"I think the answer is correct. if you see the data populated column, for the surname it's 99%. A partition key column should not have null values. for department it's 100%, hence department is the best choice here","upvote_count":"1","timestamp":"1687311360.0","poster":"manasa203","comment_id":"928942"},{"comment_id":"465640","timestamp":"1634807340.0","upvote_count":"1","poster":"satyamkishoresingh","content":"Isn't employee ID a good candidate for partitioning ?"},{"upvote_count":"1","timestamp":"1632493140.0","comment_id":"450932","content":"The anwser is wrong ! look at this because the Department could change. \nhttps://docs.microsoft.com/en-gb/azure/cosmos-db/partitioning-overview#choose-partitionkey\nThe answer would be good for a large containers. But in this use case we have a small one. Partition strategy depends on the container size. Since we do not have an Read-Heavy container. We shoud use a property that does not change. Partion key = EmployeeID . (both Department and Surnames can change).\n\" For large read-heavy containers, however, you might want to choose a partition key that appears frequently as a filter in your queries. Queries can be efficiently routed to only the relevant physical partitions by including the partition key in the filter predicate.\nIf most of your workload's requests are queries and most of your queries have an equality filter on the same property, this property can be a good partition key choice.\"","poster":"Marcus1612"},{"poster":"hello_there_","upvote_count":"1","comment_id":"422229","timestamp":"1628526240.0","content":"The partition key should be employee_id. From the documentation (https://docs.microsoft.com/en-us/azure/cosmos-db/partitioning-overview): \n\nFor all containers, your partition key should:\n\n Be a property that has a value which does not change. If a property is your partition key, you can't update that property's value.\n\n Have a high cardinality. In other words, the property should have a wide range of possible values.\n\n Spread request unit (RU) consumption and data storage evenly across all logical partitions. This ensures even RU consumption and storage distribution across your physical partitions.\ncurrentDepartment has a low cardinality and can change. Lastname can change (people get married) and 1% has null lastname, which creates one large partition and thus uneven distribution. The same documentation states: \"For small read-heavy containers or write-heavy containers of any size, the item ID is naturally a great choice for the partition key.\". This container certainly qualifies as small, it's just 75.000 employee records."},{"upvote_count":"3","timestamp":"1620207360.0","comments":[{"comment_id":"359542","upvote_count":"6","timestamp":"1621255500.0","poster":"alain2","content":"pk: Employee Surname\nid: Employee Id"}],"comment_id":"350165","content":"lot of confusion here. what is the correct answer?","poster":"Durga123"},{"comment_id":"300182","content":"I agree with the given solution partion key - current dept\nitem id - emp id","poster":"Deepu1987","upvote_count":"5","timestamp":"1614420840.0"},{"comment_id":"239021","timestamp":"1607502000.0","poster":"syu31svc","upvote_count":"2","content":"The answer given is correct.\nPut aside all the theory and concepts about partitioning and just think about it:\nA company has different departments and each department has its own employees. Between name/surname and ID, ID is definitely the better identifier."},{"comment_id":"237745","comments":[{"comment_id":"371608","content":"Finally someone said it","poster":"BitchNigga","timestamp":"1622527680.0","upvote_count":"3"},{"comment_id":"399907","upvote_count":"2","timestamp":"1625570100.0","content":"But also department is a field that can chagne quite easily, which is something that partitions cannot do. So ultimately this question sucks, but if at gunpoint I had to take one of them, I'd go with Surname.","poster":"captainbee"}],"timestamp":"1607387220.0","content":"partition key should be current department(populated 100%) as surname is only 99% populated. we cannot have a partition key as NULL/ not populated.","poster":"ttAsh","upvote_count":"9"},{"comment_id":"208623","timestamp":"1603980540.0","upvote_count":"1","poster":"essdeecee","content":"I suspect it's surname rather than department. Firstly there are simply too few variants, its also \"current department\" so might is likely to change. Surname is similarly bad on the changeable nature (assume a woman getting married e.g.) but assuming all else it's better than department."},{"comment_id":"179437","timestamp":"1600103220.0","content":"I agree with the suggested answer, I would also argue that the distribution of names will be highly uneven and would result in partitions of very different sizes, including 40,000 with one unique entry. So Current Department by elimination really.","upvote_count":"3","poster":"tdaou"},{"upvote_count":"2","timestamp":"1598551980.0","poster":"zglat","comment_id":"167751","content":"'Current' department suggests that it changes. Surnames change all the time. As a result neither of them are good choice for partition keys. I believe that leaves Employee ID"},{"timestamp":"1596659640.0","poster":"Ash666","upvote_count":"8","comment_id":"151409","content":"From the docs:\n\nFor all containers, your partition key should:\nBe a property that has a value which does not change. If a property is your partition key, you can't update that property's value.\n\nSo current dept can’t be partition key. So obviously it’s surname.\n\nEmployee ID should be item ID","comments":[{"poster":"Ash666","comment_id":"151411","content":"https://docs.microsoft.com/en-us/azure/cosmos-db/partitioning-overview","timestamp":"1596659700.0","upvote_count":"1"}]},{"timestamp":"1594452660.0","content":"I think the answer is correct as\nhttps://docs.microsoft.com/en-us/azure/cosmos-db/partitioning-overview#choose-partitionkey\nIf your container could grow to more than a few physical partitions, then you should make sure you pick a partition key that minimizes cross-partition queries. Your container will require more than a few physical partitions when either of the following are true:\n • Your container will have over 30,000 RU's provisioned\nYour container will store over 100 GB of data\n\nsurname has 40,000 values, which \" more than a few physical partitions\", we should pick a partition key that minimizes cross-partition queries and used in filter. which is \"Current Department\"","poster":"envy","comments":[{"comment_id":"312931","content":"Your Partition key should be a value that does not change cos you would not be able to change it. More so nothing in this question suggests the size of the database to be so large or would have over 30000 RUs provisioned. Yes, the nulls in the surname and the fact that surname could even change is a concern, but Surname is very unlikely to change compared to Current Department. Current tells us it is even very volatile.\n\nI would rather have the Surname as Partitioning key.\nThanks for raising this point though, it is worth considering too","upvote_count":"2","timestamp":"1615954740.0","poster":"Needium"}],"comment_id":"131936","upvote_count":"4"},{"comment_id":"96758","content":"Surname cannot be a partition key because ~750 records have a null value.","upvote_count":"5","poster":"Mathster","comments":[{"poster":"drdean","timestamp":"1591825080.0","comment_id":"107217","upvote_count":"1","content":"That's not the worst thing in the world https://sqlstudies.com/2017/05/03/partitioning-on-a-nullable-column/"}],"timestamp":"1590580560.0"},{"comment_id":"83529","poster":"HeB","upvote_count":"9","content":"I think the answer for Partition Key should be Employee Surname. It has a wider range and more unique values, see:\nhttps://docs.microsoft.com/nl-nl/azure/cosmos-db/partitioning-overview#choose-partitionkey","timestamp":"1588585920.0"},{"poster":"kempstonjoystick","timestamp":"1585733640.0","content":"The link in the answer is for table storage, not CosmosDB. The answer should be Employee Surname and then Current Department.","upvote_count":"8","comment_id":"70074"}],"isMC":false,"url":"https://www.examtopics.com/discussions/microsoft/view/17751-exam-dp-201-topic-1-question-34-discussion/","unix_timestamp":1585733640,"answer_images":["https://www.examtopics.com/assets/media/exam-media/03774/0008500001.jpg"],"answers_community":[],"answer_ET":"","exam_id":66,"topic":"1","answer":"","question_id":28},{"id":"KBrenn0IAgxI0tAPR2wF","answer":"","url":"https://www.examtopics.com/discussions/microsoft/view/46668-exam-dp-201-topic-1-question-35-discussion/","topic":"1","question_text":"DRAG DROP -\nYou need to design a data architecture to bring together all your data at any scale and provide insights into all your users through the use of analytical dashboards, operational reports, and advanced analytics.\nHow should you complete the architecture? To answer, drag the appropriate Azure services to the correct locations in the architecture. Each service may be used once, more than once, or not at all. You may need to drag the split bar between panes or scroll to view content.\nNOTE: Each correct selection is worth one point.\nSelect and Place:\n//IMG//","isMC":false,"answer_description":"Ingest: Azure Data Factory -\n\nStore: Azure Blob storage -\nModel & Serve: Azure Synapse Analytics\nLoad data into Azure Synapse Analytics.\nPrep & Train: Azure Databricks.\nExtract data from Azure Blob storage.\nReference:\nhttps://docs.microsoft.com/en-us/azure/azure-databricks/databricks-extract-load-sql-data-warehouse","question_id":29,"answer_images":["https://www.examtopics.com/assets/media/exam-media/03774/0008600002.jpg"],"answer_ET":"","answers_community":[],"timestamp":"2021-03-12 11:36:00","exam_id":66,"question_images":["https://www.examtopics.com/assets/media/exam-media/03774/0008600001.jpg"],"discussion":[{"content":"Correct.\nhttps://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/advanced-analytics-on-big-data","comments":[{"timestamp":"1621584240.0","poster":"cadio30","content":"The solution would be different if the link provided is the basis as Azure Synapse nowadays could perform the ADF (ingest) , Databricks (Prep & Train) and Model & Serve. Its like an all-in-one package.","comment_id":"362811","upvote_count":"2"}],"comment_id":"308764","timestamp":"1615545360.0","upvote_count":"14","poster":"gabry75"}],"unix_timestamp":1615545360},{"id":"q1CNNtKlCQf4l9XnHhhu","question_id":30,"answer_ET":"","question_images":["https://www.examtopics.com/assets/media/exam-media/03774/0008800001.jpg"],"isMC":false,"timestamp":"2021-03-23 11:21:00","unix_timestamp":1616494860,"answer_description":"Reference:\nhttps://docs.microsoft.com/en-us/azure/sql-data-warehouse/sql-data-warehouse-tables-distribute https://docs.microsoft.com/en-us/azure/sql-data-warehouse/sql-data-warehouse-tables-index","answer_images":["https://www.examtopics.com/assets/media/exam-media/03774/0008900001.jpg"],"answer":"","exam_id":66,"discussion":[{"upvote_count":"8","comment_id":"360211","content":"The answer is straightforward and correct. Even, there is no need to put a comment here.","poster":"dbdev","timestamp":"1621323480.0"},{"poster":"aksoumi","comments":[{"timestamp":"1619434200.0","upvote_count":"8","comments":[{"comment_id":"378186","poster":"BigMF","upvote_count":"1","content":"The question also mentions analytics implying that it is not intended for “single row” queries. So, I agree with this reasoning.","timestamp":"1623234960.0"}],"content":"Clustered indexes and non-clustered indexes only outperform clustered columnstore indexes when a single row needs to be quickly retrieved with extreme speed. So, for highly selective filters this is the right choice. Since this is a star schema where filters may vary, clustered columnstore indexes are the better choice as this generally provides the best overall query performance (and is best for large tables).","poster":"Apox","comment_id":"343182"}],"upvote_count":"1","comment_id":"329031","timestamp":"1617655140.0","content":"How should we decide if it is clustered or a non clustered index? Usually if there are over a million rows (or more than 60 million rows) we use clustered index, but these aren't mentioned in question."},{"content":"Shouldn't be \"Round Robin\" in the first box? Isn't it more efficient compared to \"Hash\" since avoids computing the partitions?","comment_id":"317971","poster":"Pairon","comments":[{"content":"no, since \"The solution must provide the fastest query performance.\"","timestamp":"1618671060.0","comment_id":"337656","upvote_count":"5","poster":"anamaster"},{"timestamp":"1617395220.0","poster":"bdloko","content":"Hash for performance requirement","comment_id":"326982","upvote_count":"5"},{"upvote_count":"1","comment_id":"393023","timestamp":"1624892220.0","content":"loading time: round robin\nquery time: hash","poster":"eurekamike"},{"timestamp":"1621584360.0","comment_id":"362815","content":"round-robin is use in staging tables","poster":"cadio30","upvote_count":"1"}],"upvote_count":"1","timestamp":"1616494860.0"}],"topic":"1","url":"https://www.examtopics.com/discussions/microsoft/view/48003-exam-dp-201-topic-1-question-36-discussion/","question_text":"HOTSPOT -\nYou are designing an enterprise data warehouse in Azure Synapse Analytics that will store website traffic analytic in a star schema.\nYou plan to have a fact table for website visits. The table will be approximately 5 GB.\nYou need to recommend which distribution type and index type to use for the table. The solution must provide the fastest query performance.\nWhat should you recommend? To answer, select the appropriate options in the answer area\nNOTE: Each correct selection is worth one point.\nHot Area:\n//IMG//","answers_community":[]}],"exam":{"name":"DP-201","isBeta":false,"id":66,"lastUpdated":"12 Apr 2025","numberOfQuestions":206,"provider":"Microsoft","isMCOnly":false,"isImplemented":true},"currentPage":6},"__N_SSP":true}