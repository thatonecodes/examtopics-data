{"pageProps":{"questions":[{"id":"GQT0cYRhO886y3xrgptv","answer_ET":"","answers_community":[],"discussion":[{"comment_id":"591070","timestamp":"1650805620.0","content":"Second field should be dotnet publish -c Release -o out","comments":[{"content":"Agree with firewind\n\nFROM mcr.microsoft.com/dotnet/core/sdk:2.1 AS build-env\nWORKDIR /app\n\nCOPY *.csproj ./\nRUN dotnet restore\n\nCOPY . ./\nRUN dotnet publish -c Release -o out\n\nFROM mcr.microsoft.com/dotnet/core/aspnet:2.1\nWORKDIR /app\nCOPY --from=build-env /app/out .\nENTRYPOINT [\"dotnet\", \"asp-net-getting-started.dll\"]","poster":"Angrl","upvote_count":"4","comments":[{"comment_id":"630335","upvote_count":"2","content":"You are right, maybe an error from Examtopics, cos link here is ok \nhttps://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/building-sample-app","poster":"kennynelcon","timestamp":"1657607760.0"}],"timestamp":"1651036320.0","comment_id":"592860"}],"upvote_count":"43","poster":"firewind"},{"upvote_count":"7","content":"On exam 20220727. Answer is:\nSDK\ndotnet publish\nASPnet","timestamp":"1658981280.0","poster":"tjeerd","comment_id":"638430"},{"comment_id":"1298335","poster":"MrAZ105","upvote_count":"1","content":"To minimize the size of the Docker image for your ASP.NET Core app, you can use a multi-stage Dockerfile. This approach ensures that you only include the necessary runtime components in the final image, excluding build dependencies and unnecessary files.\n\nHere's an example of a Dockerfile for an ASP.NET Core app that leverages multi-stage builds to reduce the final image size\n# Stage 1: Build the app\nFROM mcr.microsoft.com/dotnet/sdk:7.0 AS build-env\nWORKDIR /app\n\n# Copy csproj and restore dependencies\nCOPY *.csproj ./\nRUN dotnet restore\n\n# Copy the rest of the app files and build the app\nCOPY . ./\nRUN dotnet publish -c Release -o out\n\n# Stage 2: Create the runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:7.0-alpine\nWORKDIR /app\nCOPY --from=build-env /app/out .\n\n# Expose the port the app runs on\nEXPOSE 80\n\n# Run the app\nENTRYPOINT [\"dotnet\", \"YourApp.dll\"]","timestamp":"1729007100.0"},{"content":"Final answer after going through all the comments\n\n1. /sdk\n2. dotnet publish -c Release -o out\n3. /aspnet","timestamp":"1701240360.0","upvote_count":"5","poster":"varinder82","comment_id":"1083172"},{"poster":"CirusD","timestamp":"1696513560.0","comment_id":"1025728","content":"FROM mcr.microsoft.com/dotnet/aspnet:sdk AS build-env\nWORKDIR /app\n\n# Copy csproj and restore as distinct layers\nCOPY *.csproj ./\nRUN dotnet restore\n\n# Copy everything else and build\nCOPY . ./\nRUN dotnet publish -c Release -o out\n\n# Build runtime image\nFROM mcr.microsoft.com/dotnet/aspnet:runtime\nWORKDIR /app\nCOPY --from=build-env /app/out .\nENTRYPOINT [\"dotnet\", \"YourApp.dll\"]","upvote_count":"2"},{"timestamp":"1663607100.0","content":"for second: dotnet publish -c Release -o out (publish do implicit restore)\nhttps://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-publish#description","upvote_count":"4","poster":"pamswam","comment_id":"673493"},{"upvote_count":"2","comment_id":"646213","timestamp":"1660378320.0","content":"Run dotnet publish -c Release -o out\n\nhttps://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/building-sample-app\n\nOther options are correct","poster":"syu31svc"},{"comment_id":"630623","timestamp":"1657643880.0","upvote_count":"1","poster":"htahara","content":"FROM mcr.microsoft.com/dotnet/core/sdk:5.0 AS build-env\n\nRUN dotnet publish -c Release -o out\n\nFROM mcr.microsoft.com/dotnet/aspnet:5.0"},{"comment_id":"598695","poster":"UnknowMan","timestamp":"1652039940.0","content":"Sdk to build\nPublish on Out folder\naspnet to run","upvote_count":"2"}],"isMC":false,"question_images":["https://www.examtopics.com/assets/media/exam-media/04257/0031100001.png"],"timestamp":"2022-04-24 15:07:00","topic":"7","answer_description":"Box 1: mcr.microsoft.com/dotnet/sdk:5.0\nThe first group of lines declares from which base image we will use to build our container on top of. If the local system does not have this image already, then docker will automatically try and fetch it. The mcr.microsoft.com/dotnet/core/sdk:5.0 comes packaged with the .NET core 5.0 SDK installed, so it's up to the task of building ASP .NET core projects targeting version 5.0\n\nBox 2: dotnet restore -\nThe next instruction changes the working directory in our container to be /app, so all commands following this one execute under this context.\nCOPY *.csproj ./\n\nRUN dotnet restore -\nBox 3: mcr.microsoft.com/dotnet/aspnet:5.0\nWhen building container images, it's good practice to include only the production payload and its dependencies in the container image. We don't want the .NET core SDK included in our final image because we only need the .NET core runtime, so the dockerfile is written to use a temporary container that is packaged with the SDK called build-env to build the app.\nReference:\nhttps://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/building-sample-app","exam_id":55,"answer_images":["https://www.examtopics.com/assets/media/exam-media/04257/0031100002.png"],"unix_timestamp":1650805620,"answer":"","url":"https://www.examtopics.com/discussions/microsoft/view/74325-exam-az-400-topic-7-question-25-discussion/","question_id":346,"question_text":"DRAG DROP -\nYou are creating a container for an ASP.NET Core app.\nYou need to create a Dockerfile file to build the image. The solution must ensure that the size of the image is minimized.\nHow should you configure the file? To answer, drag the appropriate values to the correct targets. Each value may be used once, more than once, or not at all. You may need to drag the split bar between panes or scroll to view content.\nNOTE: Each correct selection is worth one point.\nSelect and Place:\n//IMG//"},{"id":"GRRJhh6BTAtjNU7CiEBg","answer_ET":"","answer_images":["https://www.examtopics.com/assets/media/exam-media/04257/0031300002.png"],"answer":"","answer_description":"Box 1: A check-in policy -\nAdministrators of Team Foundation version control can add check-in policy requirements. These check-in policies require the user to take actions when they conduct a check-in to source control.\nBy default, the following check-in policy types are available:\n✑ Builds Requires that the last build was successful before a check-in.\n✑ Code Analysis Requires that code analysis is run before check-in.\n✑ Work Items Requires that one or more work items be associated with the check-in.\n\nBox 2: Build policy -\nReference:\nhttps://docs.microsoft.com/en-us/azure/devops/repos/tfvc/add-check-policies https://azuredevopslabs.com/labs/vstsextend/sonarcloud/","timestamp":"2021-04-05 12:58:00","url":"https://www.examtopics.com/discussions/microsoft/view/49179-exam-az-400-topic-7-question-26-discussion/","question_images":["https://www.examtopics.com/assets/media/exam-media/04257/0031300001.png"],"question_text":"DRAG DROP -\nYou are configuring the settings of a new Git repository in Azure Repos.\nYou need to ensure that pull requests in a branch meet the following criteria before they are merged:\n✑ Committed code must compile successfully.\n✑ Pull requests must have a Quality Gate status of Passed in SonarCloud.\nWhich policy type should you configure for each requirement? To answer, drag the appropriate policy types to the correct requirements. Each policy type may be used once, more than once, or not at all. You may need to drag the split bar between panes or scroll to view content.\nNOTE: Each correct selection is worth one point.\nSelect and Place:\n//IMG//","unix_timestamp":1617620280,"isMC":false,"topic":"7","exam_id":55,"question_id":347,"discussion":[{"comment_id":"328581","timestamp":"1617620280.0","content":"Should be:\nA build policy\nA status policy\n\nhttps://azuredevopslabs.com/labs/vstsextend/sonarcloud/\nhttps://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops#build-validation","poster":"Sylph","comments":[{"content":"I agree","upvote_count":"2","timestamp":"1622862600.0","comment_id":"374695","poster":"ahaz"},{"upvote_count":"1","poster":"rdemontis","content":"thanks for sharing the articles","comment_id":"573482","timestamp":"1648025160.0"},{"content":"I agree, I checked directly on Azure DevOps since I use it at work and as u said:\nA build policy\nA status policy","comment_id":"349687","upvote_count":"9","timestamp":"1620151680.0","poster":"noussa"},{"content":"Got this question in Feb-2022 exam (scored 910+). This is correct answer.","timestamp":"1644517440.0","poster":"Optimist_Indian","comment_id":"544773","upvote_count":"12"},{"poster":"warchoon","content":"No. Build policy is for PR.\nCheck-in policy is for commit.\nhttps://learn.microsoft.com/en-us/azure/devops/repos/tfvc/add-check-policies?view=azure-devops\nYou can select from the following policies:\n\nBuilds requires that the last build was successful before any new changes can be checked in.","timestamp":"1675409640.0","comment_id":"796840","upvote_count":"2","comments":[{"upvote_count":"2","poster":"warchoon","content":"Sorry. The question is about PR exactly. So you are right - a build policy","comment_id":"796846","timestamp":"1675410360.0"}]}],"upvote_count":"118"},{"timestamp":"1624733700.0","content":"Got this in the AZ-400 exam (June 2021).","comment_id":"391511","upvote_count":"11","poster":"francis6170"},{"poster":"MrAZ105","content":"build validation and status policy","timestamp":"1729007280.0","upvote_count":"1","comment_id":"1298337"},{"comment_id":"1206792","poster":"4bd3116","upvote_count":"1","timestamp":"1714891920.0","content":"To ensure that your pull requests meet the specified criteria in Azure Repos, you should configure the following policy types:\n\nFor the requirement that committed code must compile successfully, you should configure a build policy. This policy will enforce that all code submitted in pull requests is built and passes all the configured tests before it can be merged.\nFor the requirement that pull requests must have a Quality Gate status of Passed in SonarCloud, you should configure a status policy. This policy will check the integration with SonarCloud to ensure that the code quality meets the defined standards before allowing the merge."},{"poster":"Kalaisuran","timestamp":"1711309560.0","upvote_count":"1","content":"build policy\nstatus policy\n\ncheck policy are available only for TFVersion control \nhttps://learn.microsoft.com/en-us/azure/devops/repos/tfvc/add-check-policies?view=azure-devops","comment_id":"1181943"},{"comment_id":"1157491","upvote_count":"1","timestamp":"1708721040.0","content":"A build policy\nA status policy","poster":"ozbonny"},{"poster":"Hillah","timestamp":"1705399860.0","content":"build policy\nstatus policy","upvote_count":"1","comment_id":"1124080"},{"timestamp":"1703207580.0","upvote_count":"1","content":"Build Policy\nStatus Policy","poster":"vsvaid","comment_id":"1103064"},{"poster":"varinder82","content":"Final answer after reading all the commnts\n\n1. build policy\n2. status policy","upvote_count":"2","comment_id":"1083175","timestamp":"1701240540.0"},{"content":"Action 1: Committed code must compile successfully\n\nPolicy: Build policy\n\nA build policy is used to ensure that any changes made to the code can be successfully built. This means that before changes can be merged, the code must compile successfully, which is the requirement you're trying to enforce. By using a build policy, you can ensure that every pull request builds successfully before it's merged into the main branch.\n\nAction 2: Pull requests must have a Quality Gate status of Passed in SonarCloud\n\nPolicy: Status policy\n\nA status policy requires that an external service posts a status to the pull request. In this case, the external service would be SonarCloud. SonarCloud can analyze the code and check whether it meets the defined quality standards (Quality Gates). If it does, SonarCloud can then post a Passed status to the pull request. The status policy will then check this status before allowing the pull request to be merged.\n\nCheck-in policy is a term associated with TFVC (Team Foundation Version Control), not Git, hence it is not applicable here.","upvote_count":"6","poster":"DGladiator","comment_id":"905007","timestamp":"1684853160.0"},{"poster":"RonZhong","upvote_count":"1","content":"Status policy for SonarCloud\n=> https://community.sonarsource.com/t/azure-devops-pull-request-quality-gate-status-check/33957/2","timestamp":"1681913460.0","comment_id":"874770"},{"poster":"RonZhong","timestamp":"1681913400.0","comment_id":"874769","upvote_count":"1","content":"[X] Check-in policy is made for TFVC\n\nhttps://learn.microsoft.com/en-us/azure/devops/repos/tfvc/add-check-policies?view=azure-devops"},{"poster":"Rams_84zO6n","timestamp":"1678363260.0","content":"build, status\nSuccessful last build, code analysis and work item association can be verified before every code commit in check-in policy. But this question is about PR request and not individual check-ins.","upvote_count":"1","comment_id":"833925"},{"timestamp":"1660292040.0","upvote_count":"3","comment_id":"645806","content":"https://azuredevopslabs.com/labs/vstsextend/sonarcloud/\n\nCommitted code must compile successfully ---> Build policy\nPull requests must pass ---> Status Policy","poster":"syu31svc"},{"timestamp":"1658981340.0","content":"On exam 20220727. Answer is:\nBuild policy\nStatus policy","poster":"tjeerd","comment_id":"638431","upvote_count":"4"},{"upvote_count":"4","content":"As per \"Administrators of Team Foundation version control can add check-in policy..\"\nSo Microsoft docs clearly mentions Check-in policy is for TFVC not Git, for git it is build policy.\nanswer is build and status policy as","comment_id":"519616","timestamp":"1641656400.0","poster":"gs12345"},{"poster":"malikimran21","comment_id":"500909","content":"this came in today exam Az-400 (Dec 2021)","upvote_count":"2","timestamp":"1639430340.0"},{"poster":"celciuz","upvote_count":"4","timestamp":"1629296520.0","content":"This question came out, August 2021","comment_id":"426912"},{"upvote_count":"5","poster":"Yuvv","content":"came on june 26 exam","timestamp":"1624802040.0","comment_id":"392105"},{"comment_id":"375836","upvote_count":"2","poster":"vijaysmail84","timestamp":"1622970120.0","content":"Build \nStatus"},{"poster":"fflyin2k","comment_id":"357461","upvote_count":"5","timestamp":"1621021320.0","content":"Agree with Sylph.\n1. A build policy\n2. A status policy\n\nhttps://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops\nhttps://docs.microsoft.com/en-us/azure/devops/repos/git/pr-status-policy?view=azure-devops\n\nby the way, check-in status is for tfvc, not git. \nhttps://docs.microsoft.com/en-us/azure/devops/repos/tfvc/add-check-policies?view=azure-devops"},{"content":"Build Policy\nCheck-in Policy","upvote_count":"1","comment_id":"344440","poster":"nvnrao57","timestamp":"1619589780.0"},{"comment_id":"344342","content":"I agree with Slyph.\nAt point 6 of https://azuredevopslabs.com/labs/vstsextend/sonarcloud/\n\nAt this point, it is still possible to complete the pull request and commit the changes even though the Code Quality check has failed. However, it is simple to configure Azure DevOps to block the commit unless the Code Quality check passes:\n\nGo to the Branch Policy page of the master branch (since the master branch is the one you will want your pull requests to merge into, this is where you have to adjust the policy).\nClick Add status policy\n\nReturn to branch policies\n\nSelect SonarCloud/quality gate from the Status to check drop-down\nSet the Policy requirement to Required\nClick Save","timestamp":"1619577600.0","poster":"edge75","upvote_count":"2"},{"content":"The answer is correct.\n\"Click the Check-in Policy tab and then click Add.\" - https://docs.microsoft.com/en-us/azure/devops/repos/tfvc/add-check-policies?view=azure-devops\n\"Click the + beside Build Validation to add a new build policy:\" - https://azuredevopslabs.com/labs/vstsextend/sonarcloud/","timestamp":"1618937220.0","comments":[{"timestamp":"1669298100.0","content":"Compilation start after check-in, so you can't check the compilation before. \nThe Check-in Policy is for code checks only.","poster":"warchoon","upvote_count":"1","comment_id":"725887"}],"comment_id":"339733","upvote_count":"1","poster":"alexderg"}],"answers_community":[]},{"id":"yr4u1w8dv3e1cEi8IBuN","timestamp":"2021-07-01 21:18:00","answers_community":["A (100%)"],"choices":{"C":"Deployment pools in Project Settings","D":"branch security of the default branch","A":"branch policies of the default branch","B":"Services in Project Settings"},"question_id":348,"answer_description":"","isMC":true,"question_images":[],"answer_ET":"A","question_text":"You use a Git repository in Azure Repos to manage the source code of a web application. Developers commit changes directly to the default branch.\nYou need to implement a change management procedure that meets the following requirements:\n✑ The default branch must be protected, and new changes must be built in the feature branches first.\n✑ Changes must be reviewed and approved by at least one release manager before each merge.\n✑ Changes must be brought into the default branch by using pull requests.\nWhat should you configure in Azure Repos?","url":"https://www.examtopics.com/discussions/microsoft/view/56833-exam-az-400-topic-7-question-27-discussion/","topic":"7","unix_timestamp":1625167080,"answer_images":[],"answer":"A","exam_id":55,"discussion":[{"poster":"goatlord","comment_id":"415889","upvote_count":"11","timestamp":"1643351580.0","content":"Yes Good Correct"},{"comment_id":"396287","poster":"Kazillius","timestamp":"1641071880.0","upvote_count":"5","content":"Correct"},{"poster":"ozbonny","comment_id":"1157492","timestamp":"1724438760.0","upvote_count":"1","content":"Selected Answer: A\nA. branch policies of the default branch"},{"comments":[{"poster":"zellck","timestamp":"1702172520.0","comment_id":"919675","upvote_count":"1","content":"Gotten this in Jun 2023 exam."}],"timestamp":"1701577020.0","content":"Selected Answer: A\nA is the answer.\n\nhttps://learn.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops&tabs=browser\nBranch policies help teams protect their important branches of development. Policies enforce your team's code quality and change management standards.","upvote_count":"3","poster":"zellck","comment_id":"913170"},{"comment_id":"826840","content":"got this in 02 March 2023 exams. scored 870 marks.","upvote_count":"3","timestamp":"1693649700.0","poster":"AlexeyG"},{"upvote_count":"1","poster":"syu31svc","timestamp":"1675679940.0","comment_id":"643255","content":"Selected Answer: A\nA is correct as supported by given link"},{"content":"Selected Answer: A\nCorrect, we can call this Master Branch ?","comment_id":"630338","timestamp":"1673513160.0","poster":"kennynelcon","upvote_count":"2"},{"timestamp":"1668943680.0","upvote_count":"1","poster":"Eltooth","comment_id":"604313","content":"Selected Answer: A\nA is correct answer."},{"timestamp":"1667945160.0","content":"Correct","upvote_count":"1","comment_id":"598698","poster":"UnknowMan"},{"timestamp":"1663915920.0","upvote_count":"1","poster":"rdemontis","comment_id":"573487","content":"Selected Answer: A\ncorrect"},{"poster":"PlumpyTumbler","content":"Selected Answer: A\nBranch policies","upvote_count":"1","comment_id":"531641","timestamp":"1658696880.0"}]},{"id":"XF3fUjpyQNkcIM1qR39Y","answers_community":["B (100%)"],"url":"https://www.examtopics.com/discussions/microsoft/view/30547-exam-az-400-topic-7-question-28-discussion/","isMC":true,"question_text":"Note: This question is part of a series of questions that present the same scenario. Each question in the series contains a unique solution that might meet the stated goals. Some question sets might have more than one correct solution, while others might not have a correct solution.\nAfter you answer a question in this section, you will NOT be able to return to it. As a result, these questions will not appear in the review screen.\nYour company uses Azure DevOps to manage the build and release processes for applications.\nYou use a Git repository for applications source control.\nYou need to implement a pull request strategy that reduces the history volume in the master branch.\nSolution: You implement a pull request strategy that uses fast-forward merges.\nDoes this meet the goal?","question_images":[],"timestamp":"2020-09-04 10:04:00","unix_timestamp":1599206640,"answer_description":"","answer":"B","exam_id":55,"answer_images":[],"topic":"7","answer_ET":"B","discussion":[{"timestamp":"1599206640.0","content":"Should be No. Squash merge - creates a linear history with a single commit in the target branch with the changes from the source branch.","poster":"fallenDaffy","comment_id":"173230","upvote_count":"63"},{"comments":[{"content":"--ff merges the commit history of the source branch when the pull request closes and creates a merge commitin the target branch, and that is not in line with the question. \nSo maybe we can say it is wrong ?","timestamp":"1657609860.0","comment_id":"630350","upvote_count":"1","poster":"kennynelcon"}],"content":"I would argue that this answer is correct (keep in mind that these yes/no questions can have more than one Yes answer). Squash merge is also correct. However fast-forward merging does reduce the main branch history size, by not adding the merge itself into the history. Squash merging is a much better answer, but as the question is written, this answer is 100% correct.","timestamp":"1620172200.0","poster":"JimmyC","comment_id":"349820","upvote_count":"18"},{"upvote_count":"1","content":"Selected Answer: B\nIt should be Squash Merge","timestamp":"1719213600.0","poster":"GPRai","comment_id":"1236174"},{"content":"Selected Answer: B\nShould be B. No","upvote_count":"1","poster":"ozbonny","comment_id":"1157494","timestamp":"1708721280.0"},{"timestamp":"1704306960.0","poster":"ServerBrain","content":"Selected Answer: B\nQuestion: 'a pull request strategy that reduces the history volume'\nBest Answer: Squash merge..","upvote_count":"1","comment_id":"1113026"},{"upvote_count":"1","comment_id":"1103066","timestamp":"1703207940.0","content":"Selected Answer: B\nNo for me","poster":"vsvaid"},{"poster":"yana_b","comment_id":"1053658","upvote_count":"1","content":"Selected Answer: B\nThe proper solution is squash merge -> see link\nhttps://learn.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops&tabs=browser\n\nBasic merge (no fast-forward) creates a merge commit in the target whose parents are the target and source branches.\n\nSquash merge creates a linear history with a single commit in the target branch with the changes from the source branch. Learn more about squash merging and how it affects branch history.\n\nRebase and fast-forward creates a linear history by replaying source commits onto the target branch with no merge commit.\n\nRebase with merge commit replays the source commits onto the target and also creates a merge commit.","timestamp":"1698232500.0"},{"upvote_count":"1","comment_id":"962509","timestamp":"1690273560.0","poster":"xRiot007","content":"We want to reduce the history volume, so SQUASH merge, not rebase. Also, in real life project, please do not use rebase, you will screw the history and nobody will understand anything anymore. At most you should use squash to condense things, but that's about it."},{"upvote_count":"2","comment_id":"646036","timestamp":"1660344060.0","content":"There is No \"Fast Forward merge\" on azure repo\nAzure repo has 4 merge option : 1) Basic (no fast forward) 2Squatch 3) rebase with fast forward 4) rebase with merge commit As i think the correct options which meet the rquirment here is - sqatch And - rebase with fast forward","poster":"MohmmadFayez"},{"poster":"syu31svc","comment_id":"641763","content":"Selected Answer: B\nhttps://docs.microsoft.com/en-us/azure/devops/repos/git/merging-with-squash?view=azure-devops\n\n\"Squash merging is a merge option that allows you to condense the Git history\"\n\nAnswer is No","upvote_count":"1","timestamp":"1659521940.0"},{"timestamp":"1652040420.0","poster":"UnknowMan","content":"Selected Answer: B\nSquash is a better solution","upvote_count":"1","comment_id":"598699"},{"poster":"rdemontis","upvote_count":"1","comment_id":"573488","timestamp":"1648025640.0","content":"Selected Answer: B\nanswer is No, you need to use squash merge to condensate history"},{"content":"Selected Answer: B\nfast forward takes all the commit messages","comment_id":"535555","timestamp":"1643470920.0","poster":"cirojascr","upvote_count":"1"},{"content":"No is correct answer.","upvote_count":"2","comment_id":"529801","timestamp":"1642852860.0","poster":"Art3"},{"content":"Selected Answer: B\nIt should be no. Squash merge is more appropriate.","upvote_count":"2","poster":"Ycombo","comment_id":"511801","timestamp":"1640754420.0"},{"poster":"erickim007","upvote_count":"1","timestamp":"1624337820.0","content":"the answer should be no.","comment_id":"387604"},{"timestamp":"1620228120.0","upvote_count":"2","comment_id":"350397","poster":"monniq","content":"The provided answer contradicts with the explanation in MSDN. \"Rebase and fast-forward - creates a linear history by replaying source commits onto the target branch with no merge commit.\"\nI'd go with 'No'."},{"comment_id":"311429","poster":"DeepMoon","timestamp":"1615813140.0","content":"Fast-Forward history doesn't reduce the history (of commits) volume in the master branch. \nSquash merge does reduce the history by combining all the commits into one commit in the master branch.","upvote_count":"5"},{"upvote_count":"2","content":"The correct answer is no-fast-forward, but the question is about fast-forward, in this case the correct answer is NO https://devblogs.microsoft.com/devops/pull-requests-with-rebase/","poster":"aromanrod","comment_id":"306439","timestamp":"1615300440.0"},{"timestamp":"1609624080.0","poster":"Morke","content":"B: No\nThere's no Fast Forward Merge policy only\nIt's Rebase and Fast forward together","upvote_count":"3","comment_id":"257940"},{"comment_id":"223750","timestamp":"1605886740.0","upvote_count":"2","poster":"kumardeb","content":"B. No ..."},{"timestamp":"1599287940.0","comment_id":"173761","content":"Sometimes, a workflow policy might mandate a clean commit history without merge commits. In such cases, the fast-forward merge is the perfect candidate.\n\nWith fast-forward merge requests, you can retain a linear Git history and a way to accept merge requests without creating merge commits.","poster":"CristianN","upvote_count":"5"},{"comment_id":"173546","content":"Their proof is \"no fast forward merge\" option as well lol","timestamp":"1599242460.0","upvote_count":"2","poster":"NeuralN"}],"question_id":349,"choices":{"A":"Yes","B":"No"}},{"id":"mhKR9i4DQniSimG59BiG","topic":"7","url":"https://www.examtopics.com/discussions/microsoft/view/30548-exam-az-400-topic-7-question-29-discussion/","question_text":"Note: This question is part of a series of questions that present the same scenario. Each question in the series contains a unique solution that might meet the stated goals. Some question sets might have more than one correct solution, while others might not have a correct solution.\nAfter you answer a question in this section, you will NOT be able to return to it. As a result, these questions will not appear in the review screen.\nYour company uses Azure DevOps to manage the build and release processes for applications.\nYou use a Git repository for applications source control.\nYou need to implement a pull request strategy that reduces the history volume in the master branch.\nSolution: You implement a pull request strategy that uses squash merges.\nDoes this meet the goal?","unix_timestamp":1599206700,"question_images":[],"answers_community":["A (100%)"],"answer_description":"","question_id":350,"exam_id":55,"discussion":[{"content":"Should be YES. Squash merge - creates a linear history with a single commit in the target branch with the changes from the source branch.","comment_id":"173231","poster":"fallenDaffy","timestamp":"1614852300.0","upvote_count":"69"},{"upvote_count":"16","timestamp":"1614861780.0","content":"Should be Yes","comment_id":"173318","poster":"Corona_Virus"},{"content":"Selected Answer: A\nShould be yes","upvote_count":"1","timestamp":"1724438940.0","poster":"ozbonny","comment_id":"1157496"},{"timestamp":"1721118240.0","content":"Yes\nhttps://itnext.io/git-merge-vs-rebase-vs-squash-8c3b6a2405e0","poster":"Hillah","upvote_count":"1","comment_id":"1124087"},{"timestamp":"1719012300.0","upvote_count":"1","poster":"vsvaid","comment_id":"1103069","content":"Selected Answer: A\nSquash merge"},{"upvote_count":"1","timestamp":"1714043820.0","comment_id":"1053661","poster":"yana_b","content":"Squash to condense the history.\nRebase to override the history."},{"comment_id":"919882","content":"Gotten this in Jun 2023 exam.","timestamp":"1702201440.0","poster":"zellck","upvote_count":"3"},{"content":"Selected Answer: A\na squash merge adds all the file changes to a single new commit on the default branch","poster":"lucaseto","comment_id":"777874","upvote_count":"2","timestamp":"1689514740.0"},{"comment_id":"770783","timestamp":"1688921880.0","content":"Selected Answer: A\nA. Yes - 100%\nCurrently strategy I use at my work","upvote_count":"2","poster":"icedog"},{"timestamp":"1676248500.0","upvote_count":"1","comment_id":"646035","content":"Azure repo has 4 merge option :\n1) Basic (no fast forward)\n2Squatch\n3) rebase with fast forward\n4) rebase with merge commit\n\nAs i think the correct options which meet the rquirment here is\n- sqatch\nAnd\n- rebase with fast forward","poster":"MohmmadFayez"},{"poster":"syu31svc","comment_id":"641764","content":"Selected Answer: A\nAnswer is Yes\n\nhttps://docs.microsoft.com/en-us/azure/devops/repos/git/merging-with-squash?view=azure-devops\n\n\"Squash merging is a merge option that allows you to condense the Git history\"","upvote_count":"1","timestamp":"1675426860.0"},{"upvote_count":"1","timestamp":"1671906780.0","content":"Selected Answer: A\nsquash merges","comment_id":"621775","poster":"adamsw"},{"timestamp":"1667945280.0","content":"Selected Answer: A\nSquash merge do the job","upvote_count":"1","poster":"UnknowMan","comment_id":"598700"},{"poster":"rdemontis","content":"Selected Answer: A\nanswer is Yes. Squash merge are user just to condensate the history and all the topic commits in only one.","timestamp":"1663916100.0","comment_id":"573489","upvote_count":"1"},{"upvote_count":"1","content":"A, squash merge reduce commit history.","timestamp":"1658484180.0","comment_id":"529802","poster":"Art3"},{"poster":"Sara_Mo","content":"Selected Answer: A\nSquash merge is the correct answer","upvote_count":"2","timestamp":"1658441700.0","comment_id":"529490"},{"timestamp":"1657737600.0","content":"Selected Answer: A\nSquash merge is the correct answer","upvote_count":"1","poster":"Surda","comment_id":"523110"},{"poster":"Pankaj78","comment_id":"504727","timestamp":"1655620380.0","content":"Selected Answer: A\nSquash merge do reduce history by merging all commits in source branch with a single merge commit","upvote_count":"1"},{"comment_id":"498886","content":"Selected Answer: A\nSquash merge do a single commit","poster":"AndyPix","timestamp":"1654879920.0","upvote_count":"1"},{"content":"Selected Answer: A\nSquash merges reduce the history volume. Same question was mentioned a few pages before.","comment_id":"496759","timestamp":"1654679400.0","poster":"debanjan10","upvote_count":"1"},{"upvote_count":"2","timestamp":"1653591360.0","content":"Wow. Another wrong solution by examtopics. I am shocked.","comment_id":"487633","poster":"AlMargoi"},{"timestamp":"1643502120.0","poster":"Lyonel","content":"Squash merging is a merge option that allows you to condense the Git history of topic branches when you complete a pull request.\n\nAnswer is YES because the question asks for a reduction in history volume on the master branch.\n\nLINK: https://docs.microsoft.com/en-us/azure/devops/repos/git/branch-policies?view=azure-devops","upvote_count":"2","comment_id":"417076"},{"poster":"ViktoriaCelcy","comment_id":"397540","timestamp":"1641217320.0","upvote_count":"2","content":"Squash merge is the answer"},{"upvote_count":"2","content":"Not sure where the answer is coming from? It should be Squash.","timestamp":"1641120240.0","poster":"vmzjgsbi","comment_id":"396713"},{"upvote_count":"2","poster":"DipakBhusal112","timestamp":"1640407080.0","content":"Answer Should be Yes.","comment_id":"390080"},{"comment_id":"387605","content":"answer should be yes","poster":"erickim007","timestamp":"1640156280.0","upvote_count":"1"},{"content":"Answer is Yes","poster":"Kinon4","upvote_count":"2","timestamp":"1637328960.0","comment_id":"361319"},{"upvote_count":"2","content":"Definitely Yes","comment_id":"349822","poster":"JimmyC","timestamp":"1636077120.0"},{"timestamp":"1621517940.0","content":"A. Yes","comment_id":"223751","upvote_count":"7","poster":"kumardeb"},{"content":"Should be Yes","upvote_count":"8","poster":"aksingh025","comment_id":"197011","timestamp":"1618005360.0"}],"answer_images":[],"isMC":true,"timestamp":"2020-09-04 10:05:00","answer_ET":"A","answer":"A","choices":{"B":"No","A":"Yes"}}],"exam":{"id":55,"name":"AZ-400","isImplemented":true,"isMCOnly":false,"provider":"Microsoft","isBeta":false,"lastUpdated":"12 Apr 2025","numberOfQuestions":558},"currentPage":70},"__N_SSP":true}