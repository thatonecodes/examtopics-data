{"pageProps":{"questions":[{"id":"j5D2SKUYJpVW09A4JeGp","question_images":[],"url":"https://www.examtopics.com/discussions/microsoft/view/68471-exam-dp-203-topic-4-question-18-discussion/","isMC":true,"answer_images":[],"question_id":311,"timestamp":"2021-12-23 13:57:00","answer":"D","unix_timestamp":1640264220,"question_text":"You are designing a highly available Azure Data Lake Storage solution that will include geo-zone-redundant storage (GZRS).\nYou need to monitor for replication delays that can affect the recovery point objective (RPO).\nWhat should you include in the monitoring solution?","answer_description":"","exam_id":67,"answers_community":["D (88%)","12%"],"topic":"4","discussion":[{"timestamp":"1678344900.0","upvote_count":"5","content":"Selected Answer: D\nhttps://docs.microsoft.com/en-us/azure/storage/common/last-sync-time-get?tabs=azure-powershell","comment_id":"563790","poster":"Nivas2401"},{"content":"Selected Answer: D\nD is correct as we need to see impact on rpo to know that we need to see when was last sync carried out.","timestamp":"1674025680.0","poster":"PallaviPatel","upvote_count":"5","comment_id":"526364"},{"upvote_count":"1","timestamp":"1735216740.0","comment_id":"1331911","poster":"j0n4","content":"Selected Answer: D\nHora de la última sincronización"},{"content":"Selected Answer: D\nlast sync time","timestamp":"1725092940.0","comment_id":"994936","upvote_count":"1","poster":"kkk5566"},{"poster":"vctrhugo","upvote_count":"2","comment_id":"929909","timestamp":"1719002640.0","content":"Selected Answer: D\nD. Last Sync Time: Monitoring the Last Sync Time metric will provide you with the information about the timestamp of the last successful synchronization between the primary and secondary regions. By monitoring this metric, you can determine if there are any replication delays impacting the RPO. If the Last Sync Time is significantly behind the current time, it indicates a replication delay and potential RPO impact."},{"upvote_count":"4","timestamp":"1691913420.0","content":"Selected Answer: D\nagree Last sync time is right","comment_id":"646203","poster":"Deeksha1234"},{"content":"Selected Answer: D\nlast sync time","comment_id":"556031","upvote_count":"4","timestamp":"1677335340.0","poster":"ovokpus"},{"upvote_count":"5","poster":"ANath","comment_id":"531477","content":"Answer is D. \nhttps://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy?toc=/azure/storage/blobs/toc.json#check-the-last-sync-time-property","timestamp":"1674581700.0"},{"timestamp":"1671800220.0","content":"Selected Answer: B\nThe key word in this question is \"monitor\", It means that we would have to see the output over time, so the correct answer should be B. Average Success E2E Latency. In this way we can monitor the spent time for each replication\nhttps://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-scalable-app-verify-metrics","comments":[{"poster":"jv2120","upvote_count":"4","comment_id":"510453","content":"Answer is D. See below why not B.\n\nAny blob, file, queue, or table operation latency can cause cascading slowdowns in your application. The Success E2E Latency metric measures the total amount of time it takes for requests to be processed by the storage account APIs, sent to the client, and then acknowledged by the client.","timestamp":"1672158420.0"}],"poster":"Fer079","comment_id":"507888","upvote_count":"3"}],"answer_ET":"D","choices":{"A":"5xx: Server Error errors","B":"Average Success E2E Latency","C":"availability","D":"Last Sync Time"}},{"id":"LlXnLAeXy2COUDn3CFSO","question_images":[],"url":"https://www.examtopics.com/discussions/microsoft/view/69251-exam-dp-203-topic-4-question-19-discussion/","isMC":true,"answer_images":[],"question_id":312,"timestamp":"2022-01-02 13:24:00","unix_timestamp":1641126240,"answer":"B","question_text":"You configure monitoring for an Azure Synapse Analytics implementation. The implementation uses PolyBase to load data from comma-separated value (CSV) files stored in Azure Data Lake Storage Gen2 using an external table.\nFiles with an invalid schema cause errors to occur.\nYou need to monitor for an invalid schema error.\nFor which error should you monitor?","answer_description":"","exam_id":67,"topic":"4","answers_community":["B (100%)"],"discussion":[{"content":"Selected Answer: B\nhttps://techcommunity.microsoft.com/t5/datacat/polybase-setup-errors-and-possible-solutions/ba-p/305297","timestamp":"1675918500.0","upvote_count":"7","poster":"kilowd","comment_id":"543534"},{"upvote_count":"1","poster":"kkk5566","comment_id":"994937","content":"Selected Answer: B\nB is correct","timestamp":"1725093240.0"},{"upvote_count":"3","poster":"vctrhugo","timestamp":"1719002820.0","content":"Selected Answer: B\nTo monitor for an invalid schema error when using PolyBase to load data from CSV files in Azure Data Lake Storage Gen2 using an external table in Azure Synapse Analytics, you should monitor the following error:\n\nB. Cannot execute the query \"Remote Query\" against OLE DB provider \"SQLNCLI11\" for linked server \"(null)\". Query aborted- the maximum reject threshold (0 rows) was reached while reading from an external source: 1 rows rejected out of total 1 rows processed.\n\nThis error indicates that a row in the CSV file has been rejected due to an invalid schema. By monitoring for this error, you can identify when data loading fails due to an incompatible or incorrect schema in the CSV files.","comment_id":"929913"},{"timestamp":"1691913720.0","content":"Selected Answer: B\nB is correct","comment_id":"646204","upvote_count":"3","poster":"Deeksha1234"},{"content":"Selected Answer: B\nCorrect","comment_id":"527850","timestamp":"1674156480.0","poster":"Raghu108","upvote_count":"4"},{"timestamp":"1674122820.0","content":"Selected Answer: B\ncorrect","comment_id":"527393","upvote_count":"4","poster":"PallaviPatel"},{"poster":"HaBroNounen","content":"correct","comment_id":"514965","upvote_count":"3","timestamp":"1672662240.0"}],"answer_ET":"B","choices":{"A":"EXTERNAL TABLE access failed due to internal error: 'Java exception raised on call to HdfsBridge_Connect: Error [com.microsoft.polybase.client.KerberosSecureLogin] occurred while accessing external file.'","B":"Cannot execute the query \"Remote Query\" against OLE DB provider \"SQLNCLI11\" for linked server \"(null)\". Query aborted- the maximum reject threshold (0 rows) was reached while reading from an external source: 1 rows rejected out of total 1 rows processed.","C":"EXTERNAL TABLE access failed due to internal error: 'Java exception raised on call to HdfsBridge_Connect: Error [Unable to instantiate LoginClass] occurred while accessing external file.'","D":"EXTERNAL TABLE access failed due to internal error: 'Java exception raised on call to HdfsBridge_Connect: Error [No FileSystem for scheme: wasbs] occurred while accessing external file.'"}},{"id":"NWtHVC9meQ3R1gjJJK0n","answer_ET":"B","answers_community":["B (65%)","C (16%)","Other"],"question_text":"You have an Azure Synapse Analytics dedicated SQL pool that contains a large fact table. The table contains 50 columns and 5 billion rows and is a heap.\nMost queries against the table aggregate values from approximately 100 million rows and return only two columns.\nYou discover that the queries against the fact table are very slow.\nWhich type of index should you add to provide the fastest query times?","answer_description":"","choices":{"A":"nonclustered columnstore","C":"nonclustered","B":"clustered columnstore","D":"clustered"},"timestamp":"2021-06-08 19:18:00","question_images":[],"answer":"B","exam_id":67,"isMC":true,"topic":"4","unix_timestamp":1623172680,"question_id":313,"answer_images":[],"url":"https://www.examtopics.com/discussions/microsoft/view/54909-exam-dp-203-topic-4-question-2-discussion/","discussion":[{"timestamp":"1623959760.0","poster":"damaldon","comment_id":"384425","content":"correct!","upvote_count":"32"},{"content":"correct","upvote_count":"14","poster":"Miris","timestamp":"1623172680.0","comment_id":"377703"},{"comment_id":"1399879","content":"Selected Answer: B\nB. Clustered Columnstore Index\nSince your Azure Synapse Analytics dedicated SQL pool contains a large fact table with 5 billion rows stored as a heap, and queries typically aggregate values from 100 million rows, the best indexing strategy is a Clustered Columnstore Index (CCI).\n\nColumnstore indexes are optimized for large tables and analytical workloads (OLAP).\nClustered Columnstore Index (CCI) compresses the data and stores it in columnar format, which significantly improves query performance on aggregations.\nCCI provides the fastest query times for scenarios where:\nA large number of rows is scanned.\nQueries perform aggregations and filtering.\nThe query returns only a few columns from the large dataset","poster":"imatheushenrique","upvote_count":"1","timestamp":"1742252760.0"},{"comment_id":"1322738","poster":"j0n4","timestamp":"1733488620.0","upvote_count":"1","content":"Selected Answer: B\nCORRECTO"},{"comment_id":"1185182","poster":"jsav1","upvote_count":"1","content":"Selected Answer: B\nclustered columnstore index","timestamp":"1711679940.0"},{"content":"Selected Answer: D\nClustered index * Tables with up to 100 million rows\n\n* Large tables (more than 100 million rows) with only 1-2 columns heavily used","poster":"jppdks","upvote_count":"1","comments":[{"timestamp":"1712936100.0","content":"I think you did not read correctly, the queries are aggregating from 100 million rows out of 5 billion, this suggests that there is some form of selection criteria applied, typically through a WHERE clause, to filter the data down to a subset that is relevant to the query. A clustered columnstore index would help in this scenario by efficiently compressing and storing the data in a columnar format, which is optimal for performing large-scale aggregations on a subset of columns. This type of index would indeed support the query patterns described, by enabling faster aggregation and filtering operations on large datasets","poster":"rlnd2000","comment_id":"1194405","upvote_count":"2"}],"timestamp":"1711537980.0","comment_id":"1184019"},{"upvote_count":"1","comment_id":"1122570","timestamp":"1705240680.0","poster":"Azure_2023","content":"Selected Answer: B\nB. clustered columnstore.\n\nA clustered columnstore index is the most efficient type of index for querying large fact tables with a high proportion of aggregation queries. This is because a clustered columnstore index stores data in a columnar format, which is much more efficient for aggregation queries than a row-based format. Additionally, a clustered columnstore index stores data in a compressed format, which further reduces the amount of data that needs to be scanned.\n\nIn this scenario, the fact table contains 50 columns and 5 billion rows, and most queries aggregate values from approximately 100 million rows and return only two columns. This indicates that the queries are primarily interested in summarizing the data in the table, rather than scanning the entire table for specific rows. Therefore, a clustered columnstore index is the most appropriate choice for improving the performance of these queries."},{"timestamp":"1702727520.0","content":"Clustered index\n* Tables with up to 100 million rows\n\n* Large tables (more than 100 million rows) with only 1-2 columns heavily used","poster":"AlfredPennyworth","upvote_count":"2","comment_id":"1098126"},{"timestamp":"1693464000.0","comments":[{"timestamp":"1693464420.0","upvote_count":"2","comments":[{"poster":"axantroff","comment_id":"1137106","timestamp":"1706735940.0","content":"Where did you get this \"60 million rows\" number? I only see the following \n> Clustered columnstore index Great fit for... Large tables (more than 100 million rows)\n\nAnd it seems like our case","upvote_count":"2"}],"comment_id":"994855","poster":"kkk5566","content":"https://learn.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/cheat-sheet"}],"upvote_count":"2","poster":"kkk5566","content":"Selected Answer: D\nf your table size is less than the recommended 60 million rows for clustered columnstore indexing, consider using heap or\nclustered index tables.","comment_id":"994849"},{"upvote_count":"1","poster":"[Removed]","content":"Selected Answer: C\nIt asks which index to add answer c","timestamp":"1692144360.0","comment_id":"982085"},{"upvote_count":"2","poster":"[Removed]","comment_id":"981266","content":"Selected Answer: A\nA heap is a table without a clustered index. One or more nonclustered indexes can be created on tables stored as a heap. \nQuestion says already it's a heap table and asks what to add ? So answer is A","timestamp":"1692071520.0"},{"comments":[{"upvote_count":"1","content":"it is a currently a heap. thus clustered columnstore makes most sense.","comment_id":"977382","poster":"Matt2000","timestamp":"1691651220.0"}],"upvote_count":"1","timestamp":"1689835320.0","comment_id":"957220","poster":"matiandal","content":"why not a NCCI - why not A ? \n\nNonclustered columnstore index on a disk-based heap or B-tree index Use for:\n\n1) An OLTP workload that has some analytics queries. You can drop B-tree indexes created for analytics and replace them with one nonclustered columnstore index.\n\n2) Many traditional OLTP workloads that perform Extract Transform and Load (ETL) operations to move data to a separate data warehouse. You can eliminate ETL and a separate data warehouse by creating a nonclustered columnstore index on some of the OLTP tables. NCCI is an additional index that requires 10% more storage on average.\n\nR: https://learn.microsoft.com/en-us/sql/relational-databases/indexes/columnstore-indexes-design-guidance?view=sql-server-ver16#choose-the-best-columnstore-index-for-your-needs\n\nEnjoy !"},{"upvote_count":"1","content":"Selected Answer: B\nOnly 2 columns returned","timestamp":"1688712960.0","poster":"[Removed]","comment_id":"945419"},{"timestamp":"1687793580.0","comment_id":"934595","upvote_count":"1","poster":"auwia","content":"Selected Answer: B\nB of course, there are a few scenarios where clustered columnstore may not be a good option:\n\nColumnstore tables do not support varchar(max), nvarchar(max), and varbinary(max). Consider heap or clustered index instead.\n\nColumnstore tables may be less efficient for transient data. Consider heap and perhaps even temporary tables.\n\nSmall tables with less than 60 million rows. Consider heap tables."},{"comment_id":"928805","content":"Selected Answer: B\nB. clustered columnstore index.\n\nGiven the large fact table with 50 columns and 5 billion rows, and the fact that most queries aggregate values from approximately 100 million rows and return only two columns, a clustered columnstore index would be the most suitable choice. Clustered columnstore indexes are designed for large-scale data warehousing scenarios and provide excellent compression and query performance for analytical workloads.\n\nA clustered columnstore index stores the data in columnar format, enabling efficient data compression and batch-based query execution. It allows for significant query performance improvements, especially for aggregations and large-scale data retrieval.","poster":"vctrhugo","timestamp":"1687294980.0","upvote_count":"2"},{"content":"im really baffled by all the answers here; noone is even considering clustered index, which is what microsoft is recommending for this particular user case scenario;\nhttps://learn.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/cheat-sheet#index-your-table\nfor a table up to 100 mln records and using heavily 1-2 columns and performing queries with lots of joins and aggregations (group by clause) microsoft recommends clustered index; why is this recommendation not applicable here? could someone explain?","comments":[{"content":"ignore pls; instead of reading watch out if....i read just if, must have been tired?; so clustered index is NOT good when group by operations; its good if you need to retrieve 1 single row or few rows (but aggregate is not just few rows -> its many many rows aggregating to 1 row, which is not the same); by this i believe its indeed clustered columnstore index so the given answer is correct","upvote_count":"5","timestamp":"1683104400.0","comment_id":"888325","poster":"mamahani"}],"comment_id":"884114","upvote_count":"4","timestamp":"1682751960.0","poster":"mamahani"},{"content":"Selected Answer: B\ncorrect","poster":"AHUI","upvote_count":"3","comment_id":"861552","timestamp":"1680647460.0"},{"upvote_count":"3","comment_id":"799195","timestamp":"1675633140.0","poster":"Rakrah","content":"Answer is correct (B) clustered columnstore - This index reordered the physical table data with columnar format which is stored with index and compressed. All the query will fetch from index columnstored data and it is designed specially Data warehouse complex query and aggregated data too."},{"timestamp":"1669716000.0","upvote_count":"1","content":"Selected Answer: B\nIt's B\n\"Do not use a heap when ranges of data are frequently queried from the table. A clustered index on the range column will avoid sorting the entire heap.\"\nhttps://learn.microsoft.com/en-us/sql/relational-databases/indexes/heaps-tables-without-clustered-indexes?toc=%2Fazure%2Fsynapse-analytics%2Fsql-data-warehouse%2Ftoc.json&bc=%2Fazure%2Fsynapse-analytics%2Fsql-data-warehouse%2Fbreadcrumb%2Ftoc.json&view=sql-server-ver15&preserve-view=true#when-not-to-use-a-heap","poster":"OldSchool","comment_id":"730201"},{"content":"Selected Answer: C\nhttps://learn.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/sql-data-warehouse-tables-index","upvote_count":"2","timestamp":"1663932840.0","poster":"stunner85_","comment_id":"677063"},{"content":"Selected Answer: B\n\"return only two columns\" => don't be confused. It's 2 col and not 2 rows => then Clustered columnstore","timestamp":"1662883920.0","upvote_count":"6","comment_id":"665941","poster":"dom271219"},{"upvote_count":"1","poster":"Ast999","content":"Selected Answer: C\nhttps://docs.microsoft.com/en-us/sql/relational-databases/indexes/heaps-tables-without-clustered-indexes?view=sql-server-ver16","timestamp":"1662022200.0","comment_id":"656024"},{"timestamp":"1661802120.0","poster":"proserv","comment_id":"653633","upvote_count":"3","content":"It's Option C , Non Clustered .\n\nReason : Heap table is a table without clustered columns store index and we can create non cluster index on heap table. Furthermore , there is not non cluster column store index exist\nhttps://docs.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/sql-data-warehouse-tables-index#heap-tables\n\nThanks"},{"poster":"Deeksha1234","comment_id":"645993","upvote_count":"1","timestamp":"1660326420.0","content":"correct answer"},{"content":"Selected Answer: B\nIt is clearly Clustered columnstore index","timestamp":"1657481160.0","comment_id":"629719","upvote_count":"3","poster":"dsp17"},{"upvote_count":"2","comment_id":"624605","timestamp":"1656503580.0","content":"Clustered Columnstore Index (CCI) A clustered columnstore index (CCI) is usually the best choice providing optimal query performance for almost large tables. By default, Synapse Analytics creates a clustered columnstore index (CCI), when no index options are specified. \nSo here I would prefer a non cluster index on those two columns.","poster":"NamitSehgal"},{"content":"Selected Answer: B\nIt is clearly Clustered columnstore index","timestamp":"1656307380.0","poster":"StudentFromAus","comment_id":"623069","upvote_count":"3"},{"upvote_count":"2","timestamp":"1654776960.0","content":"I found this and it states that clustered index would be best suited for this case. https://docs.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/cheat-sheet . Please correct me if I'm wrong","comments":[{"poster":"mamahani","comment_id":"884111","timestamp":"1682751720.0","upvote_count":"1","content":"I believe you are correct; according to this cheat sheet from microsoft in this particular case (table up to 100 mln records with heavily used 1-2 columns and using a lot of aggregations) the best option recommended by microsoft is clustered index; if i get this question in the exam, that will be my answer ; thanks for the link btw; very very useful!"}],"poster":"Aditya0891","comment_id":"613973"},{"upvote_count":"3","comments":[{"poster":"vrodriguesp","timestamp":"1673777880.0","content":"Yes, there is no ‘nonclustered columnstore index’ at all. I can’t understand","upvote_count":"1","comment_id":"776415"}],"poster":"Aditya0891","comment_id":"613838","timestamp":"1654770420.0","content":"I don't know how are people are opting for nonclustered columnstore index. It's clearly mentioned the type of indexes supported in dedicated SQL pool - \"Dedicated SQL pool offers several indexing options including clustered columnstore indexes, clustered indexes and nonclustered indexes, and a non-index option also known as heap.\""},{"poster":"sdokmak","timestamp":"1653786480.0","upvote_count":"1","comment_id":"608581","content":"Selected Answer: C\nThe question's not clear, is it just the index type or the queries as well?\nIf queries can change, then it might be A: Clustered Columnstore, but we also don't know how many columns we are using to query, if it's just one column out of 50, then yes A: https://www.spotlightcloud.io/blog/when-to-use-clustered-or-non-clustered-indexes-in-sql-server\n\nOtherwise, it's C: nonclustered.\n\nB's not an option for Synapse as mentioned in other discussions."},{"timestamp":"1650905940.0","upvote_count":"6","poster":"juanlu46","comment_id":"591862","comments":[{"comment_id":"608575","timestamp":"1653785460.0","content":"\"Due to number of rows returned (mora than 60 million) clustered index is not a good option:\" your link says the opposite: good for clustered columnstore index but bad for heaps. But I still think C: nonclustered is the way to go, after reading this thread.","upvote_count":"1","poster":"sdokmak"},{"upvote_count":"1","poster":"juanlu46","timestamp":"1650906120.0","comment_id":"591865","content":"https://docs.microsoft.com/en-us/sql/relational-databases/indexes/heaps-tables-without-clustered-indexes?toc=%2Fazure%2Fsynapse-analytics%2Fsql-data-warehouse%2Ftoc.json&bc=%2Fazure%2Fsynapse-analytics%2Fsql-data-warehouse%2Fbreadcrumb%2Ftoc.json&view=sql-server-ver15&preserve-view=true#when-not-to-use-a-heap"}],"content":"Selected Answer: B\nCorrect.\nThe \"Nonclustered columnstore\" isn't a posibility in synapse, it not exists:\nhttps://docs.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/sql-data-warehouse-tables-index#index-types\n\nDue to number of rows returned (mora than 60 million) clustered index is not a good option:\nhttps://docs.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/sql-data-warehouse-tables-index#heap-tables\n\nIs a Heap table; a table without any index, so clustered columstore index seems to be the correct options. Because non-clustered index is a good option when you have a primary clustered index and usea mutiple columns in where clause, but is a Heap table."},{"upvote_count":"3","comment_id":"590896","poster":"FelixI","content":"Selected Answer: B\nCORRECT","timestamp":"1650779100.0"},{"timestamp":"1650123900.0","content":"Selected Answer: C\nC is the correct answer.\nhttps://docs.microsoft.com/en-us/sql/relational-databases/indexes/heaps-tables-without-clustered-indexes?view=sql-server-ver15","poster":"ecava","upvote_count":"1","comment_id":"586876"},{"poster":"Sanchitagrawal20","content":"Selected Answer: C\nOption C non clustered is correct as that can improve Heap table performance. Others are not applicable.","timestamp":"1644655260.0","comment_id":"545717","upvote_count":"2"},{"comment_id":"510727","poster":"Canary_2021","upvote_count":"5","content":"Selected Answer: A\nA 'Nonclustered Columnstore Index' should be correct Answer.\n\nMost queries against the table aggregate values from approximately 100 million rows and return only two columns. \n\nNonclustered Columnstore Index need to specify a list of columns. A typical usage is to only include columns needed for analytics. For this question, it should create a Nonclustered Columnstore Index with only two columns. If only increase a little bit of storage, but it can run query quick.","timestamp":"1640656500.0"},{"poster":"eoicp","comment_id":"471538","content":"Heap has no order. Therefore clustered will not be correct. Nonclustered Columnstore doesn't exist. That leaves non clustered.","comments":[{"content":"Nonclustered columnstore exist! you can see it here:\nhttps://docs.microsoft.com/es-es/sql/t-sql/statements/create-columnstore-index-transact-sql?view=sql-server-ver15\nSo I would say that the right answer is nonclustered columstore","timestamp":"1639736820.0","comments":[{"poster":"Fer079","upvote_count":"3","comment_id":"516392","content":"Eoicp, you are right, I was wrong because nonclustered columnstore exist but not for synapse, so the right answer should be the option C - Nonclustered","timestamp":"1641287700.0"}],"poster":"Fer079","comment_id":"503565","upvote_count":"1"}],"timestamp":"1635839580.0","upvote_count":"4"},{"poster":"SujithaVulchi","upvote_count":"8","timestamp":"1632866160.0","content":"A heap is a table without a clustered index. One or more nonclustered indexes can be created on tables stored as a heap. Data is stored in the heap without specifying an order. Usually data is initially stored in the order in which is the rows are inserted into the table, but the Database Engine can move data around in the heap to store the rows efficiently; so the data order cannot be predicted. To guarantee the order of rows returned from a heap, you must use the ORDER BY clause. To specify a permanent logical order for storing the rows, create a clustered index on the table, so that the table is not a heap.\nCorrect answer: non clustered","comments":[{"comments":[{"comment_id":"582087","timestamp":"1649290740.0","upvote_count":"1","content":"right, question is asking the effective way to improve performance, so just convert the original heap to a clustered table, thats it.","poster":"sparkchu"}],"comment_id":"476240","upvote_count":"3","poster":"KOSTA007","content":"Okay, but the question states that we're working with a large fact table. And columnstore indexes can achieve gains up to 10 times the query performance. The fact that the table is a heap does not matter as I understand.\n\"...If the existing table is a heap or clustered index, the table is converted to a clustered columnstore index.\"\nhttps://docs.microsoft.com/en-us/sql/t-sql/statements/create-columnstore-index-transact-sql?view=sql-server-ver15","timestamp":"1636638240.0"}],"comment_id":"453671"},{"content":"Why not non-clustered columnstore index ? I do not find clear the different use cases of clustered and non-clustered columnstore indexes...","upvote_count":"3","comments":[{"upvote_count":"7","comment_id":"406936","content":"non-clustered columnstore index dosen't exists","timestamp":"1626339360.0","poster":"lsdudi","comments":[{"comment_id":"518481","comments":[{"timestamp":"1649195580.0","poster":"SQLDev0000","content":"You cant create nonclustered columnstore indexes in Synapse https://docs.microsoft.com/en-us/azure/synapse-analytics/sql-data-warehouse/sql-data-warehouse-tables-index. You article, @snna4, is for regular SQL.","upvote_count":"1","comment_id":"581468"}],"timestamp":"1641494940.0","poster":"snna4","upvote_count":"1","content":"Wrong. Nonclustered columnstore index EXIST. See https://docs.microsoft.com/en-us/sql/relational-databases/indexes/columnstore-indexes-overview?view=sql-server-ver15#nonclustered-columnstore-index"}]},{"comment_id":"462857","content":"a non-clustered and a clustered columnstore index actually function the same, BUT, because it is a HEAP (NO CLUSTERED INDEX) then therefore, your COLUMNSTORE INDEX should be clustered as the table is a HEAP","upvote_count":"3","poster":"berserkguts","timestamp":"1634352300.0"}],"comment_id":"393907","poster":"Marcello83","timestamp":"1624978500.0"}]},{"id":"qelwSkPG0fGHUUg6hqXq","question_images":["https://www.examtopics.com/assets/media/exam-media/04259/0035600001.png"],"question_id":314,"exam_id":67,"question_text":"You have an Azure Synapse Analytics dedicated SQL pool.\nYou run PDW_SHOWSPACEUSED('dbo.FactInternetSales'); and get the results shown in the following table.\n//IMG//\n\nWhich statement accurately describes the dbo.FactInternetSales table?","answer_description":"","topic":"4","discussion":[{"poster":"PallaviPatel","comments":[{"comment_id":"646206","upvote_count":"2","timestamp":"1691913840.0","content":"Agree !","poster":"Deeksha1234"}],"comment_id":"527397","timestamp":"1674123060.0","content":"Selected Answer: D\ncorrect as few distributions have more data and few have no data at all. The data should be evenly distributed across all the distributions.","upvote_count":"5"},{"poster":"ANath","content":"I think the answer is correct because in some cases the rows are zero.","comment_id":"520798","upvote_count":"5","timestamp":"1673348580.0"},{"comment_id":"1003022","upvote_count":"1","timestamp":"1725868260.0","poster":"kkk5566","content":"Selected Answer: D\nD is correct"},{"poster":"kkk5566","timestamp":"1725093900.0","comment_id":"994940","upvote_count":"2","content":"Selected Answer: D\nYou can use DBCC PDW_SHOWSPACEUSED to find the skew, however only on dedicated pools."},{"comment_id":"646207","content":"Selected Answer: D\nD is correct","upvote_count":"5","timestamp":"1691913900.0","poster":"Deeksha1234"},{"content":"Selected Answer: D\nAnswer is correct","poster":"StudentFromAus","comment_id":"623517","timestamp":"1687904700.0","upvote_count":"4"},{"timestamp":"1676586600.0","content":"Selected Answer: D\ncorrect","comment_id":"548972","upvote_count":"3","poster":"agar"},{"poster":"Raghu108","content":"Selected Answer: D\nCorrect","timestamp":"1674156540.0","comment_id":"527852","upvote_count":"3"}],"answer":"D","choices":{"C":"The table uses round-robin distribution.","A":"All distributions contain data.","D":"The table is skewed.","B":"The table contains less than 10,000 rows."},"unix_timestamp":1641812580,"timestamp":"2022-01-10 12:03:00","isMC":true,"url":"https://www.examtopics.com/discussions/microsoft/view/69803-exam-dp-203-topic-4-question-20-discussion/","answers_community":["D (100%)"],"answer_ET":"D","answer_images":[]},{"id":"67eD4fAxdnjD0IPIMGIn","question_id":315,"isMC":true,"answer_description":"","discussion":[{"timestamp":"1642587120.0","comment_id":"527399","poster":"PallaviPatel","content":"Selected Answer: B\ncorrect","upvote_count":"5"},{"comment_id":"1399884","poster":"imatheushenrique","upvote_count":"1","timestamp":"1742253060.0","content":"Selected Answer: B\ncorrect. hash distribuition improves join operations"},{"upvote_count":"1","poster":"renan_ineu","timestamp":"1726312320.0","content":"Selected Answer: B\nDo not HASH where? Do not hash WHERE.","comment_id":"1283607"},{"poster":"7082935","timestamp":"1722535620.0","content":"Doing a Hash on the ArrivalAirportID/AirportID ensures that the joined data from each of these tables is located on the same distribution block. This ensure that no shuffling of data occurs between the 60 distribution blocks.","upvote_count":"1","comment_id":"1259506"},{"timestamp":"1713900660.0","content":"why not C? for answer B, if some airport is very large and busy, it will contain skewed data","comment_id":"1200945","upvote_count":"1","poster":"pass3in3mon"},{"comment_id":"994943","content":"Selected Answer: B\ncorrect","poster":"kkk5566","upvote_count":"1","timestamp":"1693471620.0"},{"content":"Why not D?","upvote_count":"2","timestamp":"1672692000.0","comment_id":"763974","comments":[{"poster":"shoottheduck","comment_id":"823645","content":"Also, a composite key does not improve performance on its own.\nDistributing on the two columns that are joined, will","upvote_count":"2","timestamp":"1677500760.0"},{"upvote_count":"2","poster":"sensaint","comment_id":"764727","content":"Then you are partly distributing on a date column which is very bad for performance.","timestamp":"1672755360.0"}],"poster":"75082SN"},{"poster":"Deeksha1234","content":"B seems correct but not sure what's wrong with D ?","timestamp":"1660378140.0","comment_id":"646208","upvote_count":"3"},{"poster":"bad_atitude","timestamp":"1640599200.0","upvote_count":"3","comment_id":"510210","content":"B is correct"}],"exam_id":67,"answer":"B","answer_images":[],"question_images":["https://www.examtopics.com/assets/media/exam-media/04259/0035700001.png"],"answers_community":["B (100%)"],"url":"https://www.examtopics.com/discussions/microsoft/view/68634-exam-dp-203-topic-4-question-21-discussion/","answer_ET":"B","choices":{"A":"In the tables use a hash distribution of ArrivalDateTime and ReportDateTime.","D":"In each table, create a column as a composite of the other two columns in the table.","C":"In each table, create an IDENTITY column.","B":"In the tables use a hash distribution of ArrivalAirportID and AirportID."},"unix_timestamp":1640599200,"timestamp":"2021-12-27 11:00:00","question_text":"You have two fact tables named Flight and Weather. Queries targeting the tables will be based on the join between the following columns.\n//IMG//\n\nYou need to recommend a solution that maximizes query performance.\nWhat should you include in the recommendation?","topic":"4"}],"exam":{"id":67,"name":"DP-203","isImplemented":true,"provider":"Microsoft","isBeta":false,"numberOfQuestions":384,"isMCOnly":false,"lastUpdated":"12 Apr 2025"},"currentPage":63},"__N_SSP":true}