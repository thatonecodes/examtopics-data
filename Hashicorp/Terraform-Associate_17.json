{"pageProps":{"questions":[{"id":"ejYWhHURqCWSEHHLyvsf","unix_timestamp":1662525660,"topic":"1","choices":{"C":"Setting credentials as Terraform variables","A":"Using environment variables","B":"Specifying the login credentials in the provider block","D":"None of the above"},"url":"https://www.examtopics.com/discussions/hashicorp/view/80804-exam-terraform-associate-topic-1-question-171-discussion/","exam_id":169,"answer_description":"","question_text":"Which provider authentication method prevents credentials from being stored in the state file?","discussion":[{"timestamp":"1690366680.0","poster":"Jayanth","comments":[{"poster":"gerardjongh","content":"That is because you are referring to a secret tied to a resource which will eventually always end up in the state file. The question is about secrets for provider authentication so to sign in to Azure for example. This will not end up in the state file when using environment variable hence:\nThe correct anwser is A.","upvote_count":"2","timestamp":"1723112640.0","comment_id":"1262443"}],"upvote_count":"7","comment_id":"963589","content":"D is the right answer.\n\n I tested in my local machine to create Sql server with 2 environment vaiables $env:TF_VAR_sql_admin = \"username\" and $env:TF_VAR_sql_password = \"sqldbpassword\"\nAlso created the SQL Server with Terraform which accesses env variable during execution.\n\nBUT FOUND MY SENSITIVE ENVIRONMENT VARIABLE VALUES ARE STILL LISTED IN THE \"STATE FILE\" \n\nso answer should be \"D\""},{"content":"Selected Answer: A\nA-Above Terraform version 1.10-\"Before Terraform 1.10, a data source was used to fetch the secret, in which case the secret value would be stored in both the plan and state file.-\"https://www.hashicorp.com/en/blog/terraform-1-10-improves-handling-secrets-in-state-with-ephemeral-values","upvote_count":"1","timestamp":"1743401100.0","poster":"thure","comment_id":"1413968"},{"comment_id":"1337533","upvote_count":"1","poster":"gplusplus","content":"Selected Answer: D\nI'll go with D. *provider* credentials do not typically end up in state file because they are not part of the config, regardless if they are provided them via envvars or not. \nThe question asks how to prevent \"credentials\" from being in the state file, which means ALL credentials, not specifically provider credentials. \nVery ambiguous question tho","timestamp":"1736248860.0"},{"poster":"azizbaghirov","comment_id":"1313143","upvote_count":"1","timestamp":"1731776760.0","content":"Selected Answer: D\nterraform {\n required_providers {\n aws = {\n source = \"hashicorp/aws\"\n version = \"~> 4.40\"\n }\n }\n\n required_version = \">= 1.3.6\"\n}\n\nprovider \"aws\" {\n region = \"us-east-2\"\n access_key = \"MY AWS ACCESS KEY\"\n secret_key = \"MY AWS SECRET KEY\"\n}\n\nI provided the credentials directly in the provider block, then after apply the state file does not contain any information about these secrets."},{"comment_id":"1275777","content":"Selected Answer: D\nD is correct, I just tried this in terraform and found that provider credentials are not stored in state file. The key here is provider credentials not other sensitive values.","timestamp":"1725156660.0","upvote_count":"1","poster":"anand0310","comments":[{"content":"So it should be A then? The question asks provider auth, and provider auth is by provider creds, which are then not stored in the state file when done via env vars..","poster":"RealPro111","comment_id":"1282792","timestamp":"1726164660.0","upvote_count":"2"}]},{"content":"Selected Answer: A\nWhen you use environment variables to store credentials, Terraform does not include these credentials in the state file. Environment variables are read at runtime, which means they are not persisted in the configuration files or the state file.","upvote_count":"3","timestamp":"1719138900.0","poster":"dzhang344","comment_id":"1235784"},{"poster":"abobeida94","comment_id":"1209700","upvote_count":"2","content":"Selected Answer: A\nAnswer is A 100%: Using environment variables\n\nWe already use Terraform this way: \n\nBash\nexport AWS_ACCESS_KEY_ID=\"YOUR_ACCESS_KEY\"\nexport AWS_SECRET_ACCESS_KEY=\"YOUR_SECRET_KEY\"\n\nTerraform\nprovider \"aws\" {\n access_key = \"YOUR_ACCESS_KEY\"\n secret_key = \"YOUR_SECRET_KEY\"\n}","timestamp":"1715425080.0"},{"content":"Selected Answer: A\nUsing environment variables","comment_id":"1152190","upvote_count":"1","poster":"mattuyghur","timestamp":"1708110360.0"},{"upvote_count":"2","content":"Selected Answer: D\n1. Code example:\n...\nresource \"azurerm_sql_server\" \"example\" {\n name = \"example-sqlserver\"\n resource_group_name = azurerm_resource_group.example.name\n location = azurerm_resource_group.example.location\n version = \"12.0\"\n administrator_login = var.sql_admin_username\n administrator_login_password = var.sql_admin_password\n}\n\nvariable \"sql_admin_username\" {}\nvariable \"sql_admin_password\" {}\n...\n\n2. Set env variables:\nexport TF_VAR_sql_admin_username=\"adminuser\"\nexport TF_VAR_sql_admin_password=\"SuperSecretPassword\"\n\n3. terraform init\n\n4. terraform apply\n\n5. After applying, if you inspect the state file (terraform.tfstate), you will find that it contains the administrator login and password.","timestamp":"1706112300.0","comment_id":"1130845","poster":"Bere"},{"comments":[{"content":"It doesn't say anything about Terraform Enterprise or Terraform Cloud. Its something you assumed. . .","timestamp":"1705903620.0","comment_id":"1128367","poster":"AndreiWebNet","upvote_count":"3"}],"comment_id":"1096898","timestamp":"1702595160.0","content":"Selected Answer: D\nTerraform Enterprise and Terraform Cloud credentials are not stored in Terraform state or the CI/CD platform. Therefore, the correct answer to your question is D. None of the above.","poster":"frees","upvote_count":"1"},{"timestamp":"1700678640.0","poster":"Ramdi1","upvote_count":"1","comment_id":"1077679","content":"Selected Answer: A\nnswer: using environment variables\n\n\n\nThe only method list above that will not result in the username/password being written to the state file is environment variables. All of the other options will result in the provider's credentials in the state file.\n\nTerraform runs will receive the full text of sensitive variables, and might print the value in logs and state files if the configuration pipes the value through to an output or a resource parameter. Additionally, Sentinel mocks downloaded from runs will contain the sensitive values of Terraform (but not environment) variables. Take care when writing your configurations to avoid unnecessary credential disclosure. Whenever possible, use environment variables since these cannot end up in state files or in Sentinel mocks. (Environment variables can end up in log files if TF_LOG is set to TRACE.)"},{"poster":"akm_1010","timestamp":"1691886480.0","comment_id":"979673","content":"Selected Answer: D\nAll secrets will end up in statefile.","upvote_count":"1","comments":[{"comment_id":"1132017","content":"Your answer is right, but your explanation is not.","timestamp":"1706212980.0","poster":"Alandt","upvote_count":"1"},{"poster":"Alandt","upvote_count":"2","timestamp":"1706091780.0","comment_id":"1130490","content":"Wrong.\n\nIn terraform, are environment variables stored in state file?\n\nChatGPT\nNo, environment variables are not stored in the Terraform state file. The state file contains information about resources, not configuration values. Use environment variables or other secure methods to pass sensitive information during Terraform execution."}]},{"comment_id":"976233","timestamp":"1691554860.0","poster":"Rajmane","upvote_count":"3","content":"Selected Answer: D\nIt's D only currently there is no way to prevent it"},{"comment_id":"959824","timestamp":"1690059180.0","upvote_count":"3","poster":"Ha_Baruh_Architect13","content":"nothign prevents this, only thing is we can encrytp answer is D"},{"content":"Selected Answer: D\nRefer: https://developer.hashicorp.com/terraform/language/values/variables\nSetting a variable as sensitive prevents Terraform from showing its value in the plan or apply output, when you use that variable elsewhere in your configuration.\n\nTerraform will still record sensitive values in the state, and so anyone who can access the state data will have access to the sensitive values in cleartext. For more information, see Sensitive Data in State.","poster":"VSMu","timestamp":"1689866640.0","comment_id":"957740","upvote_count":"2"},{"content":"Selected Answer: A\nThe answer is A. Using environment variables.\n\nHere is an example of how to use environment variables to provide authentication credentials for an AWS provider:\nprovider \"aws\" {\n region = var.aws_region\n access_key_id = var.aws_access_key_id\n secret_access_key = var.aws_secret_access_key\n}","upvote_count":"1","comment_id":"937792","timestamp":"1688026080.0","poster":"[Removed]"},{"upvote_count":"2","poster":"Jhaggar","comment_id":"896408","timestamp":"1683954300.0","content":"Selected Answer: D\nNo, environment variables are not safe to store credentials in the state file of Terraform. Environment variables can be accessed by any process running on the same machine, including potentially malicious processes. It's important to use a secure method of storing credentials, such as using a secrets manager or key vault. Additionally, it's important to ensure that the state file itself is properly secured, either by encrypting it or by storing it in a secure location."},{"content":"I think correct answer is A.\nI have checked in my remote state file sitting in Azure storage account. (I used Azure DevOps environment variables) secret files are not visible in the state file.","upvote_count":"2","comment_id":"893870","timestamp":"1683719460.0","poster":"OMERKENT"},{"timestamp":"1683163740.0","content":"Selected Answer: A\nOpt A. If you look into official terraform provider documentation, including terraform enterprise, all providers point to \"Dynamic Provider Credentials\". This workflow generally exposes a temporary OIDC compliment token as environment variable and authenticated by cloud providers. So I would say the straight forward answer would be environment variables.","comments":[{"upvote_count":"1","poster":"zanhsieh","timestamp":"1683174780.0","comment_id":"889087","content":"https://developer.hashicorp.com/terraform/enterprise/workspaces/dynamic-provider-credentials"}],"upvote_count":"3","poster":"zanhsieh","comment_id":"889086"},{"upvote_count":"1","content":"Selected Answer: D\nDefinitely \"D\", I wonder how A is the even an \"authentication method\"? Read the question carefully, or am I trying to read in between the lines?","timestamp":"1681585500.0","comment_id":"871229","poster":"FarziWaliMarzi"},{"upvote_count":"2","content":"Selected Answer: D\nNone of the above options prevents credentials from being stored in the state file.\n\nStoring credentials in Terraform code or environment variables is not recommended, as it can expose sensitive information and make it more difficult to manage and rotate credentials.\n\nInstead, you should use an external authentication method, such as the \"external\" authentication method in Terraform, which allows you to execute an external program to obtain authentication credentials at runtime, rather than storing the credentials in the state file. This method keeps your credentials secure and allows you to use authentication mechanisms that do not expose credentials in plain text or that require interactive authentication.","comment_id":"864998","timestamp":"1680982920.0","poster":"Stanislav4907"},{"upvote_count":"1","content":"Selected Answer: D\nAll secrets will end up in statefile","timestamp":"1680863400.0","comment_id":"863726","poster":"taomibaobao"},{"content":"Selected Answer: A\nA. Using environment variables.\n\nUsing environment variables for provider authentication is a best practice that prevents credentials from being stored in the Terraform state file. When using environment variables, Terraform retrieves the credentials at runtime from the environment, rather than storing them in the state file. This provides an extra layer of security by ensuring that the credentials are not exposed in the state file or in version control. Additionally, using environment variables makes it easier to manage and rotate credentials, as they are not tied to a specific configuration file. The other options, specifying the login credentials in the provider block or setting credentials as Terraform variables, would result in the credentials being stored in the state file, making them potentially vulnerable to unauthorized access.","comment_id":"857025","upvote_count":"4","poster":"camps","timestamp":"1680264300.0"},{"upvote_count":"2","content":"Selected Answer: A\nYou can use environment variables to store provider credentials and other sensitive information, rather than storing them directly in the Terraform configuration or state file. To use this method, you can set the necessary environment variables on your machine or in your CI/CD pipeline, and then reference them in the Terraform configuration using interpolation syntax (e.g. \"${var.ENV_VAR_NAME}\"). This allows you to keep the credentials out of version control and reduces the risk of them being exposed.","comment_id":"760694","timestamp":"1672296660.0","poster":"InformationOverload"},{"content":"A. Using environment variables is the provider authentication method that prevents credentials from being stored in the state file.\n\nIn Terraform, the state file is a local file that stores information about the infrastructure that has been deployed, including the resources that have been created and their properties. When you use environment variables to provide authentication credentials for a provider, the credentials are not stored in the state file. Instead, they are passed to Terraform at runtime, which allows you to use the same configuration files in different environments without having to store sensitive information in version control.","timestamp":"1672250400.0","comment_id":"760180","poster":"babisko","upvote_count":"1"},{"content":"https://medium.com/codex/how-to-use-environment-variables-on-terraform-f2ab6f95f82d A is the correct answer, using environment variables like arm_access_key., it is possible to keep secrets out of state file","upvote_count":"1","comment_id":"747878","timestamp":"1671265560.0","poster":"azurearch"},{"comment_id":"735426","content":"D - Correct - credentials used during resource creation will always end up in tfstate","timestamp":"1670184960.0","poster":"DerekKey","upvote_count":"1"},{"poster":"sieira","timestamp":"1669760340.0","content":"Selected Answer: D\nD is the answer because no matter which technique you use to encrypt the secrets on your end, there is still one place where they will end up in plain text: Terraform state","comment_id":"730902","upvote_count":"1"},{"timestamp":"1669485540.0","poster":"stalos","upvote_count":"1","content":"its D - using ENV variables does not help. They will still be visible in the state file.","comment_id":"727731"},{"content":"provider authentication are not saved in state file","comment_id":"676624","timestamp":"1663890600.0","poster":"yaza","upvote_count":"3","comments":[{"upvote_count":"1","timestamp":"1678982100.0","poster":"David_C_90","content":"what should the answer b then? D?","comment_id":"841142"}]},{"upvote_count":"3","comment_id":"661991","poster":"depal_dhir","content":"Selected Answer: A\nThis is the best option available. However, Vault, which is not listed here, should be used.","timestamp":"1662525660.0"}],"answer":"A","isMC":true,"question_id":81,"answer_images":[],"question_images":[],"timestamp":"2022-09-07 06:41:00","answers_community":["A (53%)","D (48%)"],"answer_ET":"A"},{"id":"XGk8ZHwUi38twQXBPF3g","question_id":82,"question_images":[],"answer_description":"","answer_images":[],"answers_community":["B (70%)","A (30%)"],"isMC":true,"unix_timestamp":1662135360,"answer_ET":"B","exam_id":169,"discussion":[{"content":"Selected Answer: B\nThe terraform fmt command is used to rewrite Terraform configuration files to a canonical format and style.","upvote_count":"17","timestamp":"1677780960.0","comment_id":"657592","poster":"Burakko"},{"upvote_count":"1","poster":"ARBAR","comment_id":"1199511","timestamp":"1729496160.0","content":"Selected Answer: A\nRunning terraform fmt without any flags in a directory with Terraform configuration files will indeed check the formatting of those files without changing their contents. It will only modify the formatting to comply with Terraform's style conventions if necessary, without altering the actual content of the files."},{"poster":"Bere","timestamp":"1721834940.0","comment_id":"1130921","upvote_count":"4","content":"Selected Answer: B\nRunning terraform fmt without any flags in a directory with Terraform configuration files will not only check the formatting of those files but will also rewrite them to a canonical format if they are not already formatted correctly.\n\nIf you want to check the formatting without making any changes, you should use the -check flag with the command. This flag will instruct Terraform to check if the input is formatted correctly and return a non-zero exit code if it isn't, without modifying the files."},{"comment_id":"1089252","timestamp":"1717665840.0","upvote_count":"1","content":"Selected Answer: B\nTested. The terraform fmt command, format files content. No need for any flag","poster":"Albion"},{"poster":"diegoa","comment_id":"1086668","content":"Selected Answer: A\nIf no flag is given, fmt rewrites the Terraform configuration files to a canonical format and style.https://developer.hashicorp.com/terraform/cli/commands/fmt","upvote_count":"2","timestamp":"1717391280.0"},{"comment_id":"1078324","upvote_count":"1","timestamp":"1716452760.0","content":"Selected Answer: A\njust read the document, it says if you use it without a flag or directory it will not process anything. however if you add a flag it will process it","poster":"Ramdi1"},{"comment_id":"1072129","content":"A 100%\n\nRunning terraform fmt without any flags in a directory with Terraform configuration files checks the formatting without altering the content because the command is used to format and standardize the layout of Terraform configuration files according to the defined conventions. When executed without any flags, it checks whether the files comply with the expected formatting standards but does not modify the content unless there's a need for formatting changes to align with the defined conventions.\n\nIf you want to format it, you have to add the “-w” flag","timestamp":"1715825340.0","poster":"LemonadeSoftware","upvote_count":"2"},{"poster":"arun00028","comment_id":"1042453","content":"Option A","timestamp":"1712997480.0","upvote_count":"1"},{"upvote_count":"1","comment_id":"957806","timestamp":"1705774140.0","content":"Selected Answer: B\nTested. The answer is B. Running terraform fmt updates (formats) the .tf files in the current working directory.","poster":"VSMu"},{"poster":"SimoAz","content":"Selected Answer: A\ndefault write value is false donc A is correct","timestamp":"1705592340.0","upvote_count":"2","comment_id":"955487"},{"comment_id":"873492","poster":"tycho","timestamp":"1697624520.0","upvote_count":"1","content":"apparently according to this question the changing of the format is a change in the file content, therefore answer is B ; somehow it wants to highlight the diff between -check option and without it"},{"content":"True. Running terraform fmt without any flags will check the formatting of the Terraform configuration files in the current directory, and it will update the files to conform to the standard formatting rules defined by Terraform. However, it will not change the contents of the files. If you want to modify the contents of the files to match the formatting rules, you can run terraform fmt -write=true.","upvote_count":"3","timestamp":"1697443080.0","poster":"BennaniHaythem","comment_id":"871578"},{"timestamp":"1696794240.0","content":"Selected Answer: A\nYes, that's correct. Running terraform fmt without any flags in a directory with Terraform configuration files will check the formatting of those files without changing their contents.\n\nterraform fmt is a command that formats your Terraform configuration files according to a set of standard conventions. This makes your code more readable, easier to maintain, and more consistent with best practices.","comment_id":"865000","poster":"Stanislav4907","upvote_count":"2"},{"poster":"Nunyabiznes","content":"Selected Answer: B\nIf you want to check the formatting without modifying the files, you can use the -check flag:\nterraform fmt -check","timestamp":"1696196640.0","comment_id":"858304","upvote_count":"3"},{"comment_id":"810996","timestamp":"1692202680.0","content":"Selected Answer: A\nA. True.\n\nRunning terraform fmt without any flags in a directory with Terraform configuration files will check the formatting of those files without changing their contents. The command will print a list of files that need formatting changes, but it will not actually make any changes to the files. This can be useful for checking if files have been manually edited or if they need to be updated to conform to a new format.\n\nIf you want to apply the formatting changes to the files, you can use the -write flag or the -check flag to check and write the formatting changes at the same time.","poster":"princajen","comments":[{"content":"This is wrong.\n\n$ terraform fmt -h\nRewrites all Terraform configuration files to a canonical format. (...)\n---\nIf you want to check without changing the files, use -write=false or -check","upvote_count":"2","timestamp":"1694872800.0","poster":"David_C_90","comment_id":"841149"}],"upvote_count":"1"},{"timestamp":"1688014920.0","content":"Selected Answer: B\nTested in lab, B is correct.","upvote_count":"3","comment_id":"760707","poster":"InformationOverload"},{"timestamp":"1685393760.0","upvote_count":"1","poster":"sameed","comment_id":"730915","content":"Selected Answer: B\nIt will not only check the content but reformat it if required."},{"comment_id":"689679","upvote_count":"1","timestamp":"1680987900.0","content":"Usage: terraform fmt [options] [target...]\n\nBy default, fmt scans the current directory for configuration files. If you provide a directory for the target argument, then fmt will scan that directory instead. If you provide a file, then fmt will process just that file. If you provide a single dash (-), then fmt will read from standard input (STDIN). It is A","poster":"Bobby1977"},{"upvote_count":"3","poster":"Bobby1977","timestamp":"1680699960.0","comment_id":"686904","content":"It should be A"},{"poster":"Jd1233","upvote_count":"4","comment_id":"673514","content":"Selected Answer: A\nThis should be A - The terraform fmt command is used to rewrite Terraform configuration files to a canonical format and style. https://www.terraform.io/cli/commands/fmt","timestamp":"1679254800.0","comments":[{"poster":"DevoteamAnalytix","timestamp":"1701009120.0","comment_id":"907351","upvote_count":"1","content":"So it IS CHANGING, so \"without changing\" is false, so the answer is \"FALSE\" => B"}]},{"poster":"keiffo2","comment_id":"661159","content":"\"terraform fmt -check\" will not write the proposed formatting changes to the config file","timestamp":"1678109100.0","upvote_count":"3"}],"url":"https://www.examtopics.com/discussions/hashicorp/view/79475-exam-terraform-associate-topic-1-question-172-discussion/","topic":"1","question_text":"Running terraform fmt without any flags in a directory with Terraform configuration files will check the formatting of those files without changing their contents.","timestamp":"2022-09-02 18:16:00","answer":"B","choices":{"A":"True","B":"False"}},{"id":"DTqXpKjc3fJSGmaRnTWn","answers_community":["A (73%)","B (27%)"],"question_images":[],"question_id":83,"discussion":[{"poster":"DevoteamAnalytix","timestamp":"1685104680.0","content":"Selected Answer: A\nhttps://developer.hashicorp.com/terraform/cli/commands/init#child-module-installation\n\"During init, the configuration is searched for module blocks, and the source code for referenced modules is retrieved from the locations given in their source arguments.\"","comment_id":"907354","upvote_count":"8"},{"comment_id":"1280451","content":"Selected Answer: B\nlocal modules, everyone. for local modules the source code is not cached or retrieved in any capacity, only the path","poster":"RealPro111","timestamp":"1725808860.0","upvote_count":"1"},{"comment_id":"1199514","content":"Selected Answer: B\nterraform init initializes a Terraform working directory by downloading any necessary plugins and modules specified in the configuration files. It doesn't retrieve the source code for all referenced modules directly. Instead, it initializes the modules based on the module configurations and retrieves their source code when Terraform needs to apply changes or perform other operations.","timestamp":"1713685200.0","poster":"ARBAR","upvote_count":"1"},{"upvote_count":"2","timestamp":"1709937300.0","content":"B. False\nTerraform init does not automatically retrieve the source code for all referenced modules.\n\nHere's a breakdown of what terraform init actually does:\n\nInitializes the Terraform working directory.\nDownloads and installs required providers.\nSets up the necessary infrastructure for working with Terraform.\nTo retrieve module source code, you'd use terraform get or a separate module download mechanism like Git or HTTP. The source argument within your Terraform configuration specifies the location of the module's source code, which terraform init then uses to download the code during the installation process.","poster":"Ajit18","comment_id":"1169136"},{"poster":"Ganesh","timestamp":"1707149580.0","upvote_count":"2","content":"B. False\n\nterraform init does a lot of setup work, including initializing the backend, installing providers that are used in the configuration, and preparing the working directory for other commands. However, its role in handling modules is specific to initializing modules by downloading their source code if they are not already present locally and are referenced from remote sources. It doesn't retrieve the source code for modules that are already initialized or if the modules are defined locally (in the same repository and not requiring a download). So, while it does prepare modules for use, saying it retrieves the source code for \"all\" referenced modules might be misleading if interpreted to mean it re-downloads or updates modules already initialized without the -upgrade flag.","comment_id":"1141265"},{"upvote_count":"2","timestamp":"1684679460.0","content":"Selected Answer: B\nB. False\n\nThe statement is false. The terraform init command does not automatically retrieve the source code for all referenced modules in Terraform configuration. Instead, terraform init is used to initialize a Terraform working directory by downloading and installing the required providers and setting up the necessary infrastructure to work with Terraform.\n\nThe source code of the modules should be present locally in the working directory or in a remote repository specified in the Terraform configuration. To retrieve the modules, you need to use the terraform get command or set up a module download mechanism like Git or HTTP.","poster":"piezaS","comment_id":"903329"},{"upvote_count":"2","poster":"Zeppoonstream","comment_id":"782249","timestamp":"1674219780.0","content":"Selected Answer: A\nA. True. Terraform init retrieves the source code for all referenced modules. When Terraform init is run, it will automatically download the source code for any modules referenced in the configuration files. This ensures that the correct version of the module is available for use when Terraform applies changes to the infrastructure. The source code is then cached locally so that it can be used in future runs without having to re-download it. It's important to notice that this command also initializes the backend and sets the backend configuration if specified."},{"timestamp":"1672297440.0","comment_id":"760710","upvote_count":"1","content":"Selected Answer: A\nYes, the terraform init command retrieves the source code for all referenced modules in a Terraform configuration. It does not download the source code for any unreferenced modules or plugins.","poster":"InformationOverload"},{"comment_id":"689904","poster":"yogishrb2020","content":"Selected Answer: A\nhttps://www.terraform.io/cli/commands/init","timestamp":"1665289260.0","upvote_count":"2"},{"timestamp":"1664273220.0","comments":[{"timestamp":"1666877460.0","poster":"itsVespucci","upvote_count":"2","comment_id":"705594","content":"it will still retrieve it but would not cache it\ntf docs: During init, the configuration is searched for module blocks, and the source code for referenced modules is retrieved from the locations given in their source arguments."}],"upvote_count":"1","comment_id":"680610","content":"Selected Answer: B\nIf the referenced module is a local module then Terra-form init does not retrieve the module or its source","poster":"RVivek"},{"timestamp":"1663724880.0","content":"https://www.terraform.io/language/modules/sources\nTerraform uses this during the module installation step of terraform init to download the source code to a directory on local disk so that other Terraform commands can use it. It is A","comment_id":"674686","upvote_count":"4","poster":"omodara"},{"comment_id":"674639","poster":"lordogre16","content":"Selected Answer: A\nDuring init, the configuration is searched for module blocks, and the source code for referenced modules is retrieved from the locations given in their source arguments.\nhttps://www.terraform.io/cli/commands/init","timestamp":"1663720800.0","upvote_count":"2"},{"comments":[{"content":"https://www.terraform.io/language/modules/sources\nModule source codes also","timestamp":"1664273100.0","upvote_count":"2","comment_id":"680608","poster":"RVivek"}],"content":"Selected Answer: B\nThat's False. Init is just for installing the providers source code, not the modules.","poster":"A_A_AB","comment_id":"673884","timestamp":"1663657320.0","upvote_count":"1"},{"upvote_count":"1","content":"Selected Answer: A\nTerraform installs providers, initialises source code & modules etc at this stage","timestamp":"1662525720.0","poster":"depal_dhir","comment_id":"661993"}],"answer_description":"","topic":"1","answer":"A","exam_id":169,"timestamp":"2022-09-07 06:42:00","answer_images":[],"url":"https://www.examtopics.com/discussions/hashicorp/view/80805-exam-terraform-associate-topic-1-question-173-discussion/","answer_ET":"A","choices":{"A":"True","B":"False"},"unix_timestamp":1662525720,"isMC":true,"question_text":"terraform init retrieves the source code for all referenced modules."},{"id":"WNB1kkET91Jdswoj6R3s","answer_images":[],"answer_ET":"B","url":"https://www.examtopics.com/discussions/hashicorp/view/80596-exam-terraform-associate-topic-1-question-174-discussion/","answer_description":"","answer":"B","question_images":[],"unix_timestamp":1662464160,"exam_id":169,"question_id":84,"isMC":true,"choices":{"D":"Terraform will remove the virtual machine from the state file, but the resource will still exist","C":"Terraform will error","A":"Nothing","B":"Terraform will destroy the virtual machine"},"question_text":"You have a Terraform configuration that defines a single virtual machine with no references to it. You have run terraform apply to create the resource, and then removed the resource definition from your Terraform configuration file.\nWhat will happen when you run terraform apply in the working directory again?","timestamp":"2022-09-06 13:36:00","discussion":[{"poster":"chessmaster5000","content":"Selected Answer: B\nWhen you remove a resource definition from your Terraform configuration and then run terraform apply, Terraform will see that the resource exists in the state file but is no longer defined in the configuration.\nTerraform interprets this as a signal that the resource should no longer exist and will plan to destroy it to match the current configuration.\nSo, when you run terraform apply:\n-It will show a plan to destroy the VM.\n-Once you confirm, it will delete the VM from the cloud provider and remove it from the state file.\nThis behavior ensures that the actual infrastructure matches what’s defined in your .tf files.","comment_id":"1401714","upvote_count":"1","timestamp":"1742595720.0"},{"poster":"Nick_001","comment_id":"830995","content":"Selected Answer: B\ntested in lab. When reference to resource is removed in config file the next \"terraform apply\" will destroy the resource. Below is the output from cli\n# aws_instance.name will be destroyed\n # (because aws_instance.name is not in configuration)","upvote_count":"3","timestamp":"1725632880.0"},{"comment_id":"682152","upvote_count":"2","poster":"dokaedu","content":"The question is saying removing resource definition of the resource, NOT removing the resource (VM)","timestamp":"1711670580.0"},{"upvote_count":"2","comments":[{"timestamp":"1712682960.0","upvote_count":"3","comment_id":"690382","content":"definition not description","poster":"dnscloud02"}],"comment_id":"682150","timestamp":"1711670400.0","content":"The question is saying removing the description of the resource, NOT removing the resource (VM)","poster":"dokaedu"},{"timestamp":"1709793840.0","content":"Selected Answer: B\nThis will destroy the VM","comment_id":"661997","upvote_count":"4","poster":"depal_dhir"},{"comment_id":"661167","poster":"keiffo2","upvote_count":"4","content":"If you remove the resource from your config file and the resource is in your state file, terraform will apply the configuration in the config file - which is to delete the resource","timestamp":"1709732160.0"}],"answers_community":["B (100%)"],"topic":"1"},{"id":"3rQBrJjQMa39oPeaklFF","question_id":85,"answer":"D","timestamp":"2022-09-06 13:37:00","discussion":[{"poster":"Bere","upvote_count":"3","comment_id":"1131924","content":"Selected Answer: D\n1. Code example:\nresource \"aws_instance\" \"example\" {\n ami = \"ami-123456\"\n instance_type = \"t2.micro\"\n}\n\nresource \"aws_instance\" \"example\" {\n ami = \"ami-654321\"\n instance_type = \"t2.micro\"\n}\n\n2. terraform validate\n\n3. Terraform will report an error indicating that a resource with the same name is declared more than once.","timestamp":"1721923740.0"},{"upvote_count":"1","timestamp":"1699481700.0","poster":"kiran15789","comment_id":"892496","comments":[{"timestamp":"1701009960.0","poster":"DevoteamAnalytix","content":"PS C:\\****\\etl\\tf> terraform validate\n│ Error: Duplicate resource \"aws_s3_bucket\" configuration\n│\n│ on etl.tf line 14:\n│ 14: resource \"aws_s3_bucket\" \"s3_etl\" {\n│\n│ A aws_s3_bucket resource named \"s3_etl\" was already declared at etl.tf:9,1-34. Resource names must be unique per type in each module.\n\n=> Just tested it - si it is D","comment_id":"907361","upvote_count":"1"}],"content":"Selected Answer: A\nThe terraform validate command checks the syntax and validates the configuration files in a Terraform module. It does not check for configuration consistency errors like differences between local and remote state or outdated module versions.\n\nTherefore, option D, declaring a resource identifier more than once, is not a valid configuration consistency error that terraform validate would report."},{"upvote_count":"2","content":"Selected Answer: D\nD. Declaring a resource identifier more than once.\n\nTerraform validate is a command that checks the syntax and structure of the Terraform configuration files. It reports any configuration consistency errors it finds before attempting to create or modify any resources. The command checks for a variety of errors, including syntax errors, type errors, and missing required arguments. However, it does not check for differences between local and remote state, or whether a Terraform module is the latest version.\n\nThe only option that describes an error that Terraform validate checks for is D. Declaring a resource identifier more than once. This error occurs when the same resource identifier is declared multiple times in the same configuration file, which can lead to conflicts and unexpected behavior. Terraform validate checks for this error and reports it if it is found in the configuration files.","timestamp":"1696075620.0","poster":"camps","comment_id":"857028"},{"timestamp":"1678171560.0","poster":"depal_dhir","comment_id":"661998","upvote_count":"3","content":"Selected Answer: D\nTerraform validate looks for syntax errors"},{"content":"validate will look for syntax errors \"Declaring a resource identifier more than once\" is a syntax error - so Answer D","upvote_count":"4","poster":"keiffo2","timestamp":"1678109820.0","comment_id":"661170"}],"answer_description":"","topic":"1","choices":{"D":"Declaring a resource identifier more than once","C":"Terraform module isn't the latest version","A":"A mix of spaces and tabs in configuration files","B":"Differences between local and remote state"},"exam_id":169,"url":"https://www.examtopics.com/discussions/hashicorp/view/80597-exam-terraform-associate-topic-1-question-175-discussion/","answer_ET":"D","answer_images":[],"question_text":"Which configuration consistency errors does terraform validate report?","isMC":true,"question_images":[],"answers_community":["D (89%)","11%"],"unix_timestamp":1662464220}],"exam":{"name":"Terraform Associate","id":169,"lastUpdated":"12 Apr 2025","provider":"Hashicorp","numberOfQuestions":347,"isBeta":false,"isMCOnly":false,"isImplemented":true},"currentPage":17},"__N_SSP":true}