{"pageProps":{"questions":[{"id":"WDMTD8aDYIpME7LXfxrn","answers_community":["AC (100%)"],"topic":"1","answer":"AC","exam_id":169,"question_id":61,"answer_description":"","discussion":[{"poster":"RVivek","comment_id":"680254","content":"Selected Answer: AC\nB -- Plan out put not needed\nD- It refreses by default\nE- you can target a resource","timestamp":"1711504080.0","upvote_count":"5"},{"content":"Selected Answer: AC\nA. It only operates on infrastructure defined in the current working directory or workspace.\n\nC. Depending on provider specification, Terraform may need to destroy and recreate your infrastructure resources.\n\nThe terraform apply command in Terraform is used to create or modify infrastructure resources according to the Terraform configuration in the current working directory or workspace.","timestamp":"1727698680.0","poster":"camps","upvote_count":"2","comment_id":"857044"},{"timestamp":"1721472780.0","upvote_count":"2","poster":"Zeppoonstream","comment_id":"782239","content":"A. It only operates on infrastructure defined in the current working directory or workspace\nC. Depending on provider specification, Terraform may need to destroy and recreate your infrastructure resources\n\nThe following is true about terraform apply:\n\nA. It only operates on infrastructure defined in the current working directory or workspace. Terraform apply command will only perform changes to the resources defined in the Terraform configuration files in the current working directory or workspace.\n\nC. Depending on provider specification, Terraform may need to destroy and recreate your infrastructure resources: Terraform may need to destroy and recreate some of the resources if the provider requires it to apply changes, this is also known as \"create-before-destroy\" strategy"},{"content":"Selected Answer: AC\nA and C","timestamp":"1714560720.0","poster":"G4Exams","upvote_count":"2","comment_id":"709142"},{"poster":"dani88ge","comment_id":"692342","upvote_count":"2","content":"Selected Answer: AC\nAC, for sure","timestamp":"1712861280.0"},{"poster":"depal_dhir","upvote_count":"2","content":"Selected Answer: AC\nhttps://www.terraform.io/cli/run","comment_id":"661964","timestamp":"1709792160.0"},{"timestamp":"1709729880.0","poster":"keiffo2","comment_id":"661119","content":"I'd go with A and C - as per Answer","upvote_count":"1"}],"isMC":true,"answer_ET":"AC","unix_timestamp":1662461880,"url":"https://www.examtopics.com/discussions/hashicorp/view/80580-exam-terraform-associate-topic-1-question-153-discussion/","timestamp":"2022-09-06 12:58:00","question_images":[],"question_text":"Which of the following is true about terraform apply? (Choose two.)","answer_images":[],"choices":{"C":"Depending on provider specification, Terraform may need to destroy and recreate your infrastructure resources","A":"It only operates on infrastructure defined in the current working directory or workspace","D":"By default, it does not refresh your state file to reflect current infrastructure configuration","E":"You cannot target specific resources for the operation","B":"You must pass the output of a terraform plan command to it"}},{"id":"s2FMrvnf8yloYLSX26yw","answers_community":["C (100%)"],"choices":{"B":"Local modules are sourced from a directory on disk","A":"Local modules are not cached by terraform init command","D":"All of the above (all statements above are incorrect)","C":"Local modules support versions","E":"None of the above (all statements above are correct)"},"url":"https://www.examtopics.com/discussions/hashicorp/view/80158-exam-terraform-associate-topic-1-question-154-discussion/","topic":"1","unix_timestamp":1662329340,"question_text":"Which of the following statements about local modules is incorrect?","answer_ET":"C","answer_description":"","discussion":[{"timestamp":"1677231900.0","poster":"rotimislaw","upvote_count":"7","comment_id":"820310","content":"Why not A? Are local modules cached or not?"},{"poster":"LemonadeSoftware","comment_id":"1071201","comments":[{"timestamp":"1726164300.0","poster":"RealPro111","content":"So it should be A and C together? The information you give is correct but the question asks for incorrect options, and both A and C are wrong so these should be the answer","comment_id":"1282789","upvote_count":"1"}],"content":"The correct answer is C. \"Local modules support versions\" is incorrect.\n\nA. This statement is incorrect. Local modules are cached by the terraform init command. When you run terraform init, Terraform downloads and installs the modules specified in the configuration, including local modules, and caches them in the .terraform directory.\n\nB. This statement is correct. Local modules are sourced from a directory on disk. You can specify the path to the directory containing your local module in your Terraform configuration.\n\nC. This statement is incorrect. Local modules do not support versions in the same way remote modules hosted on version control systems (e.g., Git) do. Local modules are typically referenced by a relative or absolute path, and there is no versioning mechanism built into Terraform for local modules.\n\nD. This cannot be the correct answer because Statement B is correct.\n\nE. This cannot be the correct answer because Statement C is incorrect.\n\nSo, the correct answer is C.","upvote_count":"6","timestamp":"1700034780.0"},{"poster":"wota","content":"Selected Answer: C\nA -- > Local modules are not cached by Terraform because they are already stored locally and accessed directly by Terraform.","comment_id":"1496025","timestamp":"1743809040.0","upvote_count":"1"},{"timestamp":"1680343020.0","comment_id":"857796","poster":"camps","upvote_count":"1","content":"Selected Answer: C\nC. Local modules support versions.\n\nLocal modules are sourced from a directory on disk and are typically used to organize and reuse Terraform code within a project. However, local modules do not support versions. This means that if you make changes to a local module, those changes will be reflected in all resources that use that module, regardless of when those resources were created."},{"poster":"dinesh198728","upvote_count":"3","timestamp":"1662803700.0","content":"Selected Answer: C\nVersion constraints are supported only for modules installed from a module registry, such as the public Terraform Registry or Terraform Cloud's private module registry. Other module sources can provide their own versioning mechanisms within the source string itself, or might not support versions at all. In particular, modules sourced from local file paths do not support version; since they're loaded from the same source repository, they always share the same version as their caller.","comment_id":"665286"},{"content":"Selected Answer: C\nhttps://www.terraform.io/language/modules/syntax","upvote_count":"2","poster":"depal_dhir","timestamp":"1662524220.0","comment_id":"661965"},{"timestamp":"1662329340.0","poster":"Hizumi","content":"Answer is C.\nIn particular, modules sourced from local file paths do not support version; since they're loaded from the same source repository, they always share the same version as their caller.\nReference: https://www.terraform.io/language/modules/syntax","comment_id":"659584","upvote_count":"4"}],"exam_id":169,"question_id":62,"question_images":[],"answer":"C","timestamp":"2022-09-05 00:09:00","isMC":true,"answer_images":[]},{"id":"ykbh9zhuWwufXrMrAwo2","answer_description":"","url":"https://www.examtopics.com/discussions/hashicorp/view/79460-exam-terraform-associate-topic-1-question-155-discussion/","question_images":[],"answers_community":["CE (100%)"],"question_text":"Which of the following is true about Terraform's implementation of infrastructure as code? (Choose two.)","discussion":[{"content":"Selected Answer: CE\nA- It soupports hundresds of providers\nB- You can have version number on your files\nD-- manual provisioning defeats the very purpose of IaC","comment_id":"680261","poster":"RVivek","timestamp":"1711504860.0","upvote_count":"10"},{"upvote_count":"3","content":"Selected Answer: CE\nC. You can version your infrastructure configuration.\n\nE. It allows you to automate infrastructure provisioning.\n\nTerraform's implementation of infrastructure as code has the following characteristics:\n\nOption C is true - you can version your infrastructure configuration using version control systems like Git. Terraform supports multiple version control backends such as Git, Subversion, and Mercurial, and allows users to manage multiple versions of infrastructure code in the same repository.\n\nOption E is true - Terraform allows you to automate infrastructure provisioning. Terraform uses configuration files to describe the desired state of infrastructure, and then automatically provisions and configures the infrastructure to match that state.","timestamp":"1727698740.0","comment_id":"857046","poster":"camps"},{"timestamp":"1726968840.0","poster":"Manguu","comment_id":"846638","upvote_count":"1","content":"Selected Answer: CE\nNo doubt about it"},{"timestamp":"1721472960.0","content":"C. You can version your infrastructure configuration\nE. It allows you to automate infrastructure provisioning\n\nThe following is true about Terraform's implementation of infrastructure as code:\n\nC. You can version your infrastructure configuration: Terraform uses configuration files written in HashiCorp Configuration Language (HCL) to define infrastructure resources. These files can be versioned using a version control system (VCS) such as Git, allowing you to track changes to your infrastructure over time and roll back to previous versions if necessary.\n\nE. It allows you to automate infrastructure provisioning: Terraform's infrastructure as code approach allows you to automate the provisioning of infrastructure resources. By defining the desired state of your infrastructure in code, you can use Terraform to create, modify, and delete resources in an automated and repeatable way.","comment_id":"782241","poster":"Zeppoonstream","upvote_count":"2"},{"upvote_count":"1","content":"Selected Answer: CE\nC and E for sure","comment_id":"760650","poster":"InformationOverload","timestamp":"1719634980.0"},{"comment_id":"660479","upvote_count":"4","timestamp":"1709672880.0","poster":"smling","content":"Selected Answer: CE\nI go for CE."},{"timestamp":"1709414400.0","upvote_count":"3","comment_id":"657756","content":"Selected Answer: CE\nC, E are correct","poster":"zyxphreez"},{"poster":"Burakko","content":"Selected Answer: CE\nIt has to be CE.","comment_id":"657543","upvote_count":"3","timestamp":"1709400000.0"}],"topic":"1","answer_images":[],"timestamp":"2022-09-02 17:20:00","isMC":true,"answer":"CE","unix_timestamp":1662132000,"exam_id":169,"answer_ET":"CE","question_id":63,"choices":{"E":"It allows you to automate infrastructure provisioning","D":"It requires manual configuration of infrastructure resources","C":"You can version your infrastructure configuration","B":"You cannot reuse infrastructure configuration","A":"It is only compatible with AWS infrastructure management"}},{"id":"WrvNyZAkanG0NaevUG31","answer_description":"","topic":"1","isMC":true,"answer_images":[],"exam_id":169,"question_text":"You need to write some Terraform code that adds 42 firewall rules to a security group as shown in the example.\n//IMG//\n\nWhat can you use to avoid writing 42 different nested ingress config blocks by hand?","choices":{"A":"A count loop","C":"A for each block","D":"A dynamic block","B":"A for block"},"question_images":["https://www.examtopics.com/assets/media/exam-media/04279/0008700001.jpg"],"discussion":[{"upvote_count":"9","comment_id":"659591","poster":"Hizumi","content":"Answer is D.\nA dynamic block acts much like a for expression, but produces nested blocks instead of a complex typed value. It iterates over a given complex value, and generates a nested block for each element of that complex value.\nReference: https://www.terraform.io/language/expressions/dynamic-blocks","timestamp":"1677975300.0"},{"comment_id":"1126578","upvote_count":"7","content":"Selected Answer: D\nresource \"aws_security_group\" \"many_rules\" {\n name = \"many_rules\"\n \n dynamic \"ingress\" {\n for_each = var.ingress_rules\n content {\n from_port = ingress.value.from_port\n to_port = ingress.value.to_port\n protocol = ingress.value.protocol\n cidr_blocks = ingress.value.cidr_blocks\n }\n }\n}\n\nvariable \"ingress_rules\" {\n description = \"A list of ingress rules\"\n type = list(object({\n from_port = number\n to_port = number\n protocol = string\n cidr_blocks = list(string)\n }))\n default = [\n {\n from_port = 80\n to_port = 80\n protocol = \"tcp\"\n cidr_blocks = [\"0.0.0.0/0\"]\n },\n # Add 41 more rules here...\n ]\n}","poster":"Bere","timestamp":"1721375460.0"},{"poster":"InformationOverload","timestamp":"1688012640.0","comment_id":"760653","upvote_count":"1","content":"Selected Answer: D\nyep, D is correct."},{"upvote_count":"2","timestamp":"1687369200.0","content":"Selected Answer: D\nSome additional information comparing each of the options: https://awstip.com/terraform-for-vs-for-each-7ff8506a1f94\n\nAnswer is definitely D as the question specifically mentions 'nested config(uration) blocks'","poster":"Rugaroo","comment_id":"752695"},{"content":"Selected Answer: A\nhttps://developer.hashicorp.com/terraform/tutorials/configuration-language/count","comment_id":"724653","poster":"noodles16668","timestamp":"1684780320.0","upvote_count":"1"},{"upvote_count":"3","comment_id":"661966","poster":"depal_dhir","timestamp":"1678170240.0","content":"Selected Answer: D\nhttps://www.terraform.io/language/expressions/dynamic-blocks"}],"answer_ET":"D","question_id":64,"timestamp":"2022-09-05 00:15:00","unix_timestamp":1662329700,"answer":"D","answers_community":["D (93%)","7%"],"url":"https://www.examtopics.com/discussions/hashicorp/view/80162-exam-terraform-associate-topic-1-question-156-discussion/"},{"id":"6gEhaPTGeMWbfFOHqe04","question_id":65,"topic":"1","answer":"B","discussion":[{"timestamp":"1731103860.0","poster":"kiran15789","upvote_count":"1","content":"Selected Answer: A\nThe safest way to inject sensitive values into a Terraform Cloud workspace is to write the value to a file and specify the file with the -var-file flag. Option A is the correct answer.\n\nThis method allows you to store the sensitive value in a file that can be encrypted and stored securely. Terraform Cloud supports encrypted variables, and you can encrypt the file that contains the sensitive value using a tool like SOPS or Vault before uploading it to Terraform Cloud.","comment_id":"892492"},{"content":"Selected Answer: B\nB. Set a value for the variable in the UI and check the \"Sensitive\" check box.\n\nWhen working with Terraform Cloud workspaces, the safest way to inject sensitive values into a Terraform Cloud workspace is to set a value for the variable in the UI and check the \"Sensitive\" check box. This will ensure that the value is stored securely and not visible in plain text in the Terraform Cloud UI or API.\n\nOption A, writing the value to a file and specifying the file with the -var-file flag, may be less secure because the file could potentially be accessed by unauthorized users.\n\nOption C, editing the state file directly just before running terraform apply, is not a best practice and could result in data loss or corruption.\n\nOption D, setting the variable value on the command line with the -var flag, could result in the sensitive value being stored in plain text in the command history or other logs, which could be accessed by unauthorized users.","timestamp":"1727698440.0","poster":"camps","upvote_count":"4","comment_id":"857037"},{"comment_id":"810970","content":"Selected Answer: B\nB. Set a value for the variable in the UI and check the \"Sensitive\" check box is the safest way to inject sensitive values into a Terraform Cloud workspace. This ensures that the sensitive values are securely stored and encrypted in the workspace, and are not visible in the Terraform logs or state file. Writing the value to a file or setting the variable value on the command line can expose the sensitive data to unauthorized access, and editing the state file directly is not a recommended practice and can potentially corrupt the state.","timestamp":"1723823580.0","upvote_count":"1","poster":"princajen"},{"poster":"wanrltw","content":"https://developer.hashicorp.com/terraform/cloud-docs/workspaces/variables/managing-variables#sensitive-values","upvote_count":"4","comment_id":"741276","timestamp":"1718050740.0"},{"upvote_count":"2","timestamp":"1709792880.0","content":"Selected Answer: B\nhttps://www.terraform.io/cloud-docs/workspaces/variables","poster":"depal_dhir","comment_id":"661972"},{"poster":"Hizumi","timestamp":"1709598180.0","upvote_count":"2","content":"Answer is B.\n-var and -var-file overwrite workspace-specific and variable set variables that have the same key. From the workspace, variable can be added and checked off as being sensitive.\nReference: https://www.terraform.io/cloud-docs/workspaces/variables/managing-variables#loading-variables-from-files\nhttps://www.terraform.io/cloud-docs/workspaces/variables","comment_id":"659595"}],"answer_images":[],"answer_ET":"B","timestamp":"2022-09-05 00:23:00","question_text":"Which of the following is the safest way to inject sensitive values into a Terraform Cloud workspace?","question_images":[],"choices":{"C":"Edit the state file directly just before running terraform apply","A":"Write the value to a file and specify the file with the -var-file flag","D":"Set the variable value on the command line with the -var flag","B":"Set a value for the variable in the UI and check the \"Sensitive\" check box"},"isMC":true,"url":"https://www.examtopics.com/discussions/hashicorp/view/80164-exam-terraform-associate-topic-1-question-157-discussion/","unix_timestamp":1662330180,"answer_description":"","answers_community":["B (88%)","13%"],"exam_id":169}],"exam":{"id":169,"isBeta":false,"isMCOnly":false,"isImplemented":true,"name":"Terraform Associate","numberOfQuestions":347,"lastUpdated":"12 Apr 2025","provider":"Hashicorp"},"currentPage":13},"__N_SSP":true}