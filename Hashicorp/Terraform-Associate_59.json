{"pageProps":{"questions":[{"id":"0Ydj7LXhJyxnpKCpfB95","url":"https://www.examtopics.com/discussions/hashicorp/view/75952-exam-terraform-associate-topic-1-question-48-discussion/","choices":{"B":"The Terraform state file only contains the one new VM. Execute terraform destroy.","C":"Delete the Terraform state file and execute Terraform apply.","D":"Delete the VM using the cloud provider console and terraform apply to apply the changes to the Terraform state file.","A":"The Terraform state file contains all 16 VMs in the team account. Execute terraform destroy and select the newly-created VM."},"discussion":[{"timestamp":"1670215620.0","upvote_count":"25","comment_id":"611660","content":"B. Only resources mentioned in terraform will be applied and reflected in state. Resources manually created in console and/or not defined in code will not be captured by Terraform","poster":"habros"},{"upvote_count":"7","comments":[{"comments":[{"poster":"Jaro3000","timestamp":"1670084940.0","upvote_count":"2","content":"You can destroy a single resource using --target\nBut still B as we assume we have a separate state file with our vm only","comment_id":"611123"}],"comment_id":"607082","timestamp":"1669365480.0","content":"B still. \n\n\" A. The Terraform state file contains all 16 VMs in the team account. Execute terraform destroy and select the newly-created VM. \" ---- what does that meant \"select the newly-created VM\" you can't destroy a single resource, to destroy and recreate a new resource you use terraform taint to mark the resource for deletions and recreation","upvote_count":"4","poster":"wangchung"}],"content":"The question says \" You develop a Terraform configuration containing one VM,\"... would that not mean that a different state file therefore the 15 vms would not be registered","comment_id":"605576","timestamp":"1669135980.0","poster":"wangchung"},{"poster":"zpu8xt","content":"Selected Answer: B\nThis is based on the assumption that the tfstate file is different from the new one.\nThat means the backends are different. Otherwise, init will automatically download the tfstate file containing 15 VMs.","timestamp":"1739834340.0","comment_id":"1358026","upvote_count":"1"},{"poster":"YesPlease","timestamp":"1738345260.0","comment_id":"1349615","content":"Selected Answer: B\n\"Terrform init\" would have created a new state file and have shown the real word infrastructure of the Virtual Private Cloud. The user applied their config file and it would have deleted everything and created the new VM....then the only thing that is left if the VM.....so now they only have to run a destroy to remove the only VM that exists.","upvote_count":"1"},{"poster":"Molly1994","timestamp":"1733409900.0","comment_id":"1224719","content":"B or D ? if you delete the one VM in UI, when you apply, it will refresh the state file, the VM has been deleted.","upvote_count":"1"},{"upvote_count":"2","poster":"vibzr2023","timestamp":"1727461980.0","comments":[{"timestamp":"1727462040.0","comment_id":"1184355","comments":[{"poster":"vibzr2023","content":"D. Delete the VM using the cloud provider console and terraform apply to apply the changes: This option is not advisable because it involves manually deleting a resource outside of Terraform, which can lead to discrepancies between your real infrastructure and Terraform's state. If a resource is manually deleted, Terraform's state file still thinks the resource exists, and running terraform apply would likely result in Terraform trying to \"reconcile\" the state by re-creating the deleted VM, which is not the intended outcome.","upvote_count":"1","comment_id":"1184356","timestamp":"1727462040.0"}],"content":"A. The Terraform state file contains all 16 VMs in the team account. Execute terraform destroy and select the newly-created VM: This option is incorrect because Terraform's state file does not automatically track resources that were not created or imported through Terraform. Since the 15 other VMs in the account were not managed by this Terraform configuration, they will not be in the state file, and terraform destroy will not affect them.\nC. Delete the Terraform state file and execute Terraform apply: This approach is not recommended. Deleting the state file removes Terraform's knowledge of the resources it manages, but does not actually delete those resources from the cloud provider. Running terraform apply afterwards would attempt to create the resources anew based on the","poster":"vibzr2023","upvote_count":"2"}],"content":"B. The Terraform state file only contains the one new VM. Execute terraform destroy: This is the correct approach. When you create resources with Terraform, it tracks those resources in a state file. Since you've only created one VM with Terraform, only that VM is tracked in the state file. Running terraform destroy will remove all resources tracked in the state file, which in this case, is just the one VM you've created.","comment_id":"1184354"},{"timestamp":"1711689420.0","content":"Selected Answer: B\nB, destroy the created instance","comment_id":"1020378","upvote_count":"1","poster":"gofavad926"},{"poster":"Ni33","timestamp":"1699497120.0","upvote_count":"2","comment_id":"892586","content":"Selected Answer: B\nB is the correct answer. Terraform only maintains desired state and not actual state of the infrastructure in the account."},{"upvote_count":"1","timestamp":"1696099620.0","content":"B is the answer","poster":"Power123","comment_id":"856098"},{"upvote_count":"3","timestamp":"1688824200.0","poster":"oab720","comment_id":"769605","content":"Selected Answer: B\nDon’t worry, you won’t delete prod instances"},{"poster":"FarziWaliMarzi","timestamp":"1687475040.0","comment_id":"753782","content":"mostly hypothetically assumed answers, not solid concrete answer here? I somehow feel that its a very poorly framed question.","upvote_count":"1"},{"content":"You created a Terraform configuration containing 1 VM... You didn't modify the existing Terraform configuration. Hence, only the config you created would be deleted","comment_id":"749564","poster":"Network_1","timestamp":"1687150740.0","upvote_count":"1"},{"comment_id":"681786","timestamp":"1680013260.0","content":"The single Vm can be deleted using -target option in terraform destroy. In this case, I am assuming that the 15 VM's are created using TF.","poster":"pmzone","upvote_count":"1"},{"content":"Selected Answer: B\nDefinitely B","upvote_count":"3","comments":[{"poster":"therealquan","comment_id":"642054","timestamp":"1675458600.0","content":"the other existing VMs need to be imported to be affected by the terraform destroy","upvote_count":"3"}],"comment_id":"642053","poster":"therealquan","timestamp":"1675458420.0"},{"content":"Selected Answer: B\nSince the other machines are not in Terraform yet, it won't touch them","timestamp":"1674034140.0","comment_id":"632909","upvote_count":"2","poster":"yuvifose"},{"timestamp":"1673621520.0","content":"because its shared ac\nSo A is correct","comment_id":"630907","upvote_count":"1","poster":"Ahmad_Terraform"},{"poster":"Eltooth","timestamp":"1672167960.0","upvote_count":"2","content":"Selected Answer: B\nB is correct answer.","comment_id":"623412"},{"poster":"VANSI","comment_id":"622475","timestamp":"1672056360.0","content":"Selected Answer: B\nB easy","upvote_count":"4"},{"comment_id":"622066","timestamp":"1671966900.0","upvote_count":"2","content":"Selected Answer: B\nIs B for sure. the state file does not contain information about anything else that you might have on the cloud provider","poster":"Empel"},{"content":"You develop a Terraform configuration containing one VM, perform terraform apply, and see that your VM was created successfully.\n\nread the question carefully \"Terraform configuration containing one VM, perform terraform apply\" so only one VM is in state file.\n\nB should be correct","poster":"Zam88","timestamp":"1671753000.0","upvote_count":"3","comment_id":"620654"},{"upvote_count":"3","timestamp":"1671552600.0","poster":"HDDH","comment_id":"619325","content":"Selected Answer: B\nFor sure"},{"content":"Selected Answer: B\nI also think its B","upvote_count":"3","timestamp":"1671494460.0","poster":"Zam88","comment_id":"618864"},{"upvote_count":"3","timestamp":"1671466380.0","poster":"Cedhulk","comment_id":"618722","content":"Selected Answer: B\nimo B because it wasn't mentioned that the 15 vm were created by terraform. So, it's not in the conf. You have to import before if you want your conf update"},{"content":"i think b","upvote_count":"2","comment_id":"612195","timestamp":"1670313480.0","poster":"stalk98"},{"upvote_count":"1","timestamp":"1669221960.0","content":"Selected Answer: A\nIt didn't mention whether it's using a different workspace or even whether the configuration was overwritten or a separate one. It should be A","poster":"biscuithammer","comment_id":"606158"},{"poster":"Maaran07","comments":[{"timestamp":"1669365300.0","upvote_count":"4","comment_id":"607079","poster":"wangchung","content":"Its tricky as the question doesn't explicity say these 15 vm resources were created by TF"},{"poster":"Maaran07","content":"But Answer A also raising concerns saying run terraform destroy then select VM which is not possible ! wondering !! some insight might help to better understanding","upvote_count":"1","comment_id":"604421","timestamp":"1668955860.0"}],"content":"Selected Answer: A\nBecause it is shared account they already have 15 VM is running, hence state file might having those VM details. if it is different workspace i agree with answer but this scenario would be A.","timestamp":"1668955740.0","upvote_count":"3","comment_id":"604419"}],"answer_description":"","unix_timestamp":1653050940,"isMC":true,"question_images":[],"question_id":291,"answer_ET":"B","topic":"1","answer_images":[],"answer":"B","question_text":"You have never used Terraform before and would like to test it out using a shared team account for a cloud provider. The shared team account already contains\n15 virtual machines (VM). You develop a Terraform configuration containing one VM, perform terraform apply, and see that your VM was created successfully.\nWhat should you do to delete the newly-created VM with Terraform?","answers_community":["B (88%)","12%"],"exam_id":169,"timestamp":"2022-05-20 14:49:00"},{"id":"jCOgLji3Dd3axTpgxo0S","discussion":[{"content":"Selected Answer: A\ndev for sure","upvote_count":"16","poster":"tipzzz","timestamp":"1666694160.0","comment_id":"591574"},{"comments":[{"timestamp":"1727462400.0","poster":"vibzr2023","content":"\"test\" is the name of the resource group in Azure, while \"dev\" is the Terraform identifier used to reference the resource group within your Terraform code.","upvote_count":"7","comment_id":"1184368"}],"upvote_count":"13","poster":"Chuddysambo","content":"the keyword here is \"assigned by terraform\", the correct answer is B","timestamp":"1702317000.0","comment_id":"920821"},{"poster":"YesPlease","comment_id":"1349620","timestamp":"1738345980.0","content":"Selected Answer: A\nAnswer: DEV\n\nA resource block declares a resource of a specific type (\"azurerm_resource_group\") with a specific local name (\"DEV\"). Terraform uses the name when referring to the resource in the same module, but it has no meaning outside that module's scope.","upvote_count":"1"},{"content":"azurerm_resource_group","comment_id":"1138979","poster":"mattuyghur","upvote_count":"1","timestamp":"1722647580.0"},{"comment_id":"1138975","content":"Selected Answer: A\nA is the correct answer.\n- azurerm_resource_group is the resource type\n- web is the name of the defined resource","upvote_count":"4","timestamp":"1722646200.0","poster":"hoangphan"},{"comments":[{"timestamp":"1721633040.0","content":"Chat-GTP:\n\nWhy is A not the answer?\n\nApologies for the confusion. You are correct, and I appreciate your clarification. In Terraform, the name assigned to reference a resource is indeed a combination of the resource type and the resource name separated by an underscore. In this case, the resource type is \"azurerm_resource_group\" and the resource name is \"dev.\" Therefore, both A and B could be considered correct:\n\nA. dev\nB. azurerm_resource_group\n\nWhen referencing this resource in other parts of your Terraform configuration, you could use either \"dev\" or \"azurerm_resource_group.dev\" to refer to this specific resource.","comment_id":"1128474","poster":"Alandt","upvote_count":"1"}],"comment_id":"1128473","poster":"Alandt","upvote_count":"1","content":"Selected Answer: B\nIn Terraform, the name assigned to reference a resource is a combination of the resource type and the resource name separated by an underscore. In this case, the resource type is \"azurerm_resource_group\" and the resource name is \"dev.\" Therefore, the correct answer is:\n\nB. azurerm_resource_group\n\nWhen referencing this resource in other parts of your Terraform configuration, you would use \"azurerm_resource_group.dev\" to refer to this specific resource.","timestamp":"1721632980.0"},{"content":"Selected Answer: B\nThe keyword here is \"assigned by terraform\". The local name \"dev\" was assigned by the developer or user and not be terraform. However, the name assigned by terraform is \"option B\" = \"azurerm_resource_group\"","timestamp":"1719603660.0","upvote_count":"1","comment_id":"1108119","poster":"gold4otas"},{"timestamp":"1714667340.0","upvote_count":"1","poster":"Stargazer11","comment_id":"1060776","content":"Answer A.\nA typical resource identifier format in Terraform is: <PROVIDER>_<TYPE>.<NAME>\n\n<PROVIDER> is the name of the provider for the resource (e.g., \"aws\" for AWS resources).\n<TYPE> is the resource type (e.g., \"instance\" for an AWS EC2 instance).\n<NAME> is an optional name assigned to the resource instance (e.g., \"my_instance\")."},{"comment_id":"1059854","content":"Selected Answer: B\n\"assigned by terraform', not user","upvote_count":"1","poster":"saotayo","timestamp":"1714569540.0"},{"upvote_count":"1","timestamp":"1711689540.0","poster":"gofavad926","comment_id":"1020380","content":"Selected Answer: A\nA, dev"},{"upvote_count":"2","poster":"AWS_cert2023","content":"A is the answer.\nhttps://developer.hashicorp.com/terraform/language/resources/syntax","comment_id":"919261","comments":[{"poster":"Sergiuss95","content":"Yes, this is correct:\n\nIn the following example, the aws_instance resource type is named web. The resource type and name must be unique within a module because they serve as an identifier for a given resource.\n\nresource \"aws_instance\" \"web\" {\n ami = \"ami-a1b2c3d4\"\n instance_type = \"t2.micro\"\n}\nSO:\nresource \"resource_type\" \"resource_name\" {\n # Configuration settings for the resource\n attribute1 = value1\n attribute2 = value2\n # ...\n}","comment_id":"1339849","timestamp":"1736761200.0","upvote_count":"1"}],"timestamp":"1702129860.0"},{"timestamp":"1701847800.0","content":"Selected Answer: A\nQuestion asks what the NAME is assigned to REFERENCE this resource in your Terraform config. \n\nResource block consists of a resource type and a reference name hence the answer is A: dev","poster":"Beast_Hollow","comment_id":"915923","upvote_count":"3"},{"upvote_count":"2","content":"Selected Answer: A\nA is the correct answer.","timestamp":"1699497180.0","comment_id":"892587","poster":"Ni33"},{"upvote_count":"1","comment_id":"890083","content":"Selected Answer: D\nD. for sure","timestamp":"1699200120.0","poster":"karendavtyan"},{"upvote_count":"4","comment_id":"869513","poster":"Rezi","content":"B for sure. \n\nazure_resource_group is the hard-coded name assigned by terraform while \"dev\" was provided by the user. Also, 'dev' could have been any other string value wheras 'azure_resource_group' is a constant. That's how terraform recognizes that resource.","timestamp":"1697209680.0"},{"poster":"Power123","content":"Answer is A - dev","timestamp":"1696099800.0","comment_id":"856102","upvote_count":"1"},{"comment_id":"857176","content":"The answer is B, The azure_resource_group is the name given by terraform. Dev is a managed name...basically what you are calling this instance","timestamp":"1696083660.0","poster":"Midas_Tepes","upvote_count":"1"},{"comments":[{"upvote_count":"1","timestamp":"1695382020.0","comment_id":"847099","content":"I reviewed some learning material and the correct answer is A.","poster":"Swissmali"}],"content":"Isn`t that noticable that the name assigned by terraform is B. We determine the rest. (dev or test). The key word is assigned by terraform","poster":"Swissmali","comment_id":"845606","timestamp":"1695273480.0","upvote_count":"1"},{"comment_id":"809505","content":"Selected Answer: A\nexample:\nA resource block declares a resource of a given type (\"aws_instance\") with a given local name (\"web\"). The name is used to refer to this resource from elsewhere in the same Terraform module, but has no significance outside that module's scope.\n\nThe resource type and name together serve as an identifier for a given resource and so must be unique within a module.","timestamp":"1692095940.0","poster":"sahara99","upvote_count":"2"},{"upvote_count":"2","comment_id":"802738","timestamp":"1691540280.0","poster":"col2511kol","content":"Selected Answer: A\nresource \"resource_type\" \"resource_name\" {\n # resource-specific configuration\n}\nThe question is asking the name, right?\n\"Dev\" is name in this case"},{"comment_id":"794675","timestamp":"1690835460.0","poster":"Arrash","content":"Selected Answer: B\nits obviously B, what phrase you use to reference this resource in another resource? \nexample:\nname = azurerm_resource_group.dev.test.name\nso the refrence name is azurerm_resource_group and the rest is metadata","upvote_count":"3"},{"upvote_count":"2","poster":"najslejdi","content":"Selected Answer: A\nI am so disappointed. So many incorrect answers :-( \nA is correct","comment_id":"652140","timestamp":"1677408480.0"},{"timestamp":"1675755900.0","content":"Selected Answer: A\nFFS it should be A","poster":"Tomcrui1234589","upvote_count":"2","comment_id":"643605"},{"poster":"Ahmad_Terraform","timestamp":"1673621640.0","upvote_count":"2","comment_id":"630909","content":"dev\nA. is correct"},{"timestamp":"1673034060.0","content":"Selected Answer: A\nA is correct answer : dev.","comment_id":"628029","upvote_count":"1","poster":"Eltooth"},{"upvote_count":"3","comment_id":"623104","content":"dev A Correct","poster":"Ahmad_Terraform","timestamp":"1672129920.0"},{"upvote_count":"3","poster":"cloudbusting","content":"dev is tha answer","timestamp":"1668786300.0","comment_id":"603317"},{"content":"Selected Answer: A\n\"dev\" ... answer A","comment_id":"601053","poster":"ItaloVinodi","timestamp":"1668337260.0","upvote_count":"4"},{"poster":"temp111","comment_id":"597628","content":"\"dev\"... Answer is A","upvote_count":"2","timestamp":"1667728800.0"},{"content":"Selected Answer: A\nFor Sure A","upvote_count":"4","poster":"vitasac","comment_id":"594382","timestamp":"1667038200.0"},{"comment_id":"592766","poster":"Kowser","timestamp":"1666836480.0","content":"Answer is A","upvote_count":"3"}],"question_id":292,"exam_id":169,"answers_community":["A (85%)","Other"],"unix_timestamp":1650882960,"choices":{"B":"azurerm_resource_group","A":"dev","D":"test","C":"azurerm"},"timestamp":"2022-04-25 12:36:00","question_images":["https://www.examtopics.com/assets/media/exam-media/04279/0002800001.png"],"answer":"A","isMC":true,"answer_ET":"A","question_text":"What is the name assigned by Terraform to reference this resource?\n//IMG//","url":"https://www.examtopics.com/discussions/hashicorp/view/74438-exam-terraform-associate-topic-1-question-49-discussion/","topic":"1","answer_images":[],"answer_description":""},{"id":"yecw6cU7BklImltfoHaN","unix_timestamp":1652674380,"choices":{"A":"True","B":"False"},"answer_description":"","answer":"B","isMC":true,"timestamp":"2022-05-16 06:13:00","answers_community":["B (69%)","A (31%)"],"question_images":["https://www.examtopics.com/assets/media/exam-media/04279/0000400001.png"],"question_id":293,"answer_ET":"B","question_text":"A provider configuration block is required in every Terraform configuration.\nExample:\n//IMG//","topic":"1","exam_id":169,"discussion":[{"upvote_count":"47","timestamp":"1660651740.0","comments":[{"content":"Still need atleast 1 provider in the terraform configuration-If I am deploying to Azure, I can skip the AWS provider.\nBut without the provider block containing details like authentication, how will the deployment actually happen?","upvote_count":"7","timestamp":"1678799040.0","poster":"gargaditya","comment_id":"838852","comments":[{"upvote_count":"1","comment_id":"903922","content":"AZ CLI can be used as an authentication source.","timestamp":"1684750860.0","comments":[{"poster":"Sekir","comment_id":"1060183","timestamp":"1698889380.0","content":"This question is basically asking \"is this formatting correct\", in which case it is.","upvote_count":"1"}],"poster":"marcin3dm"}]}],"content":"Selected Answer: B\nIt's B. From the official documentation:\n\nUnlike many other objects in the Terraform language, a provider block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured.","comment_id":"647637","poster":"pabrojo"},{"content":"Selected Answer: A\nvote A","upvote_count":"36","timestamp":"1652674380.0","comment_id":"602375","poster":"softarts"},{"poster":"karamkb","content":"Selected Answer: B\nA provider block is not required for all Terraform configurations – it is only required when you need to interact with an external system (e.g., AWS, Azure, Google Cloud).\nIf your Terraform configuration only uses local resources (like terraform local-exec provisioner or null_resource), then you do not need a provider block.\nHowever, in most real-world Terraform projects, a provider is needed because Terraform is designed to manage infrastructure on external platforms.\n\nExample Where No Provider is Needed\nhcl\nCopy\nEdit\nresource \"null_resource\" \"example\" {\n provisioner \"local-exec\" {\n command = \"echo Hello, Terraform!\"\n }\n}\nThis configuration does not require a provider because it does not interact with any external infrastructure.\n\nFalse. A provider block is only required when using a provider to manage infrastructure. However, most Terraform configurations do require it.","comment_id":"1352872","upvote_count":"1","timestamp":"1738911960.0"},{"upvote_count":"1","comment_id":"1319773","timestamp":"1732893540.0","poster":"DataEngDP","content":"Selected Answer: B\nIt refers to a BLOCK so this {} that is not mandatory."},{"content":"Selected Answer: B\nA provider configuration block is not required in every Terraform configuration. In some cases, Terraform can automatically discover providers, or the provider configuration can be inherited from other modules. Additionally, if the provider has been set up globally or within shared modules, it's possible to use the resources without explicitly declaring the provider block in every configuration file.","comment_id":"1294295","poster":"erif","timestamp":"1728307800.0","upvote_count":"1"},{"comment_id":"943885","content":"Selected Answer: B\nI can see the confusion here. https://developer.hashicorp.com/terraform/language/providers/configuration says \"all Terraform configurations must declare which providers they require so that Terraform can install and use them\", which makes people think the answer is A/True.\nThe question says \"A provider configuration block is required\" (emphasis on BLOCK). The above link also says \" a provider block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured.\", which confirms that the answer is B/FALSE, a provider BLOCK is not required, Terraform assumes a default one for you. \nSo a provider is required, a provider BLOCK is not","upvote_count":"5","timestamp":"1727168940.0","poster":"foreverlearner"},{"comment_id":"964764","content":"Selected Answer: B\nHere is an example without using the provider:\n\nterraform {\n required_version = \">= 0.13\"\n}\n\nresource \"null_resource\" \"example_provisioner\" {\n provisioner \"local-exec\" {\n command = \"echo 'Hello, Terraform!' > example.txt\"\n }\n}\n\nIn this example, we are using a null_resource with a local-exec provisioner to run a simple shell command that creates a file named \"example.txt\" with the text \"Hello, Terraform!\".\n\nSince this configuration doesn't involve any cloud provider resources or external backends, there is no need to include a provider configuration block. Terraform will execute the local-exec provisioner using the local machine's shell without requiring any cloud provider credentials or settings.","poster":"Bere","timestamp":"1727168940.0","upvote_count":"6"},{"upvote_count":"1","poster":"samimshaikh","comment_id":"1108300","timestamp":"1727168940.0","content":"Selected Answer: B\nFalse. A provider configuration block is not required in every Terraform configuration. It is only required when you are using a Terraform provider to interact with a specific infrastructure platform or service.\n\nA provider configuration block typically includes details such as the provider's name, version, and any required authentication or connection information. If you're not using any provider in your Terraform configuration, you may not need a provider configuration block.\n\nHere's an example of a provider configuration block for AWS:\n\nprovider \"aws\" {\n region = \"us-west-2\"\n access_key = \"your-access-key\"\n secret_key = \"your-secret-key\"\n}\n\n\nThis block specifies the AWS provider, sets the region, and provides access and secret keys for authentication. If you're not working with AWS or any other provider, you can have a Terraform configuration without a provider block."},{"content":"vote for B. False\nA provider configuration block is not required in every Terraform configuration. \nProvider configuration blocks are only required when you are using a particular provider to interact with a specific type of infrastructure resource. \nIf your configuration does not interact with any resources provided by external providers, then you do not need to include a provider configuration block. :)","timestamp":"1720745820.0","comment_id":"1246397","poster":"hrajkuma","upvote_count":"2"},{"content":"Selected Answer: B\nUnlike many other objects in the Terraform language, a provider block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured.\n\nhttps://developer.hashicorp.com/terraform/language/providers/configuration","upvote_count":"1","poster":"brundabanm","comment_id":"1227828","timestamp":"1718018640.0"},{"poster":"Molly1994","content":"the answer is false. Terraform requires provider. but it does not require specifically to define a provider block {}. Terraform could use the default providers. so the answer is B false.","upvote_count":"1","timestamp":"1717584540.0","comment_id":"1224664"},{"poster":"liuyomz","comment_id":"1200816","upvote_count":"2","content":"Selected Answer: B\nB. i got it wrong but its on docs","timestamp":"1713889020.0"},{"timestamp":"1711987380.0","content":"Each Terraform module must declare which providers it requires, so that Terraform can install and use them. Provider requirements are declared in a required_providers block.\n\nA provider requirement consists of a local name, a source location, and a version constraint:","upvote_count":"1","poster":"Bedmed","comment_id":"1187543"},{"comments":[{"timestamp":"1711483140.0","upvote_count":"2","comment_id":"1183568","content":"Saying the Selected Answer:B\nWhen You Need an Explicit Provider Block:\nExample: In scenarios where you need to configure specific settings for a provider, like credentials, region, or aliases for managing resources in multiple regions or with different accounts, you will need an explicit provider block.\n\n# Example with an explicit provider block\nprovider \"aws\" {\n region = \"us-west-2\"\n access_key = \"my-access-key\"\n secret_key = \"my-secret-key\"\n}\n\nresource \"aws_instance\" \"example\" {\n ami = \"ami-0c55b159cbfafe1f0\"\n instance_type = \"t2.micro\"\n}\nIn this example, the AWS provider is explicitly configured with a specific region and credentials. This is necessary if you're not relying on the default credential chain or if you want to set parameters that differ from the defaults.","poster":"vibzr2023"}],"content":"If your Terraform configuration only includes resources from a single provider and doesn't require any special configuration for that provider, you might not need an explicit provider block. Terraform can automatically download and use the latest version of the required provider based on the resource types used.\n# Example without an explicit provider block\nresource \"aws_instance\" \"example\" {\n ami = \"ami-0c55b159cbfafe1f0\"\n instance_type = \"t2.micro\"\n}\nIn this example, Terraform can infer that the AWS provider is needed because of the aws_instance resource. It will use the default configuration for the AWS provider, assuming credentials and region are configured through environment variables or shared credentials files.","upvote_count":"2","timestamp":"1711483020.0","comment_id":"1183566","poster":"vibzr2023"},{"poster":"6957dbd","comment_id":"1170316","upvote_count":"2","timestamp":"1710074220.0","content":"Selected Answer: A\nhttps://developer.hashicorp.com/terraform/language/providers/configuration\n\nAdditionally, all Terraform configurations must declare which providers they require so that Terraform can install and use them. The Provider Requirements page documents how to declare providers so Terraform can install them."},{"comment_id":"1140819","content":"Selected Answer: B\nFalse. A provider configuration block is not required in every Terraform configuration. Provider configuration blocks are only required when you are using a particular provider to interact with a specific type of infrastructure resource. If your configuration does not interact with any resources provided by external providers, then you do not need to include a provider configuration block.","upvote_count":"2","timestamp":"1707122880.0","poster":"AWSCurt"},{"content":"Selected Answer: B\nFalse.\n\nA provider configuration block is not required in every Terraform configuration. It depends on the specifics of your configuration and the resources you are managing.\n\nIn Terraform, provider configuration blocks are used to specify the details of the infrastructure provider you want to use, such as AWS, Azure, Google Cloud, etc. If you are managing resources that don't require a specific provider, or if your configuration relies on provider-agnostic resources, you may not need a provider configuration block.","upvote_count":"1","comment_id":"1127258","timestamp":"1705753680.0","poster":"MukeshRattan"},{"comment_id":"1117679","upvote_count":"1","content":"if example is given as provider \"provider_name\" {...} then it should be A answer else B. I will go with A","poster":"vipulchoubisa","timestamp":"1704817740.0"},{"poster":"TigerInTheCloud","upvote_count":"1","timestamp":"1702932120.0","comment_id":"1100032","content":"Selected Answer: B\nthere is a simple valid configuration without the provider BLOCK.\n$ cat main.tf\ndata \"aws_region\" \"current\" {}\n\noutput \"region_name\" {\n value = data.aws_region.current.name\n}"},{"upvote_count":"1","poster":"Spandrop","timestamp":"1702726980.0","comment_id":"1098116","content":"Selected Answer: B\nA Terraform configuration is a complete document in the Terraform language that tells Terraform how to manage a given collection of infrastructure. A configuration can consist of multiple files and directories.\nhttps://developer.hashicorp.com/terraform/language\n\nYou don't need 1 provider block to EVERY terraform configuration, you must have at least 1, but not in every like the question mention"},{"content":"Vote B:","upvote_count":"1","poster":"umavaja","timestamp":"1702349040.0","comment_id":"1094031"},{"comment_id":"1085112","timestamp":"1701423720.0","content":"Selected Answer: B\nLocal provider does not need such a block","upvote_count":"1","poster":"bryant12138"},{"timestamp":"1700327460.0","poster":"vortegon","upvote_count":"2","comment_id":"1074164","content":"B\nhttps://developer.hashicorp.com/terraform/language/providers/configuration\n\nUnlike many other objects in the Terraform language, a provider block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured."},{"upvote_count":"1","poster":"terraformiaas","content":"Selected Answer: B\nIt's B","timestamp":"1699606620.0","comment_id":"1067089"},{"content":"A\nregion is needed for any infrastructure before provisioning, Terraform can't select it for you\nHowever the Terraform { required_providers { }} is optional","timestamp":"1699350060.0","poster":"MiiExamT","upvote_count":"1","comment_id":"1064680"},{"timestamp":"1698430860.0","comment_id":"1055781","poster":"ealpuche","upvote_count":"2","content":"Selected Answer: B\nA provider configuration block is not required in every Terraform configuration. However, it is essential in most practical cases where resources from any provider (e.g., AWS, Azure, GCP) are managed. Terraform uses the provider configuration block to establish the settings required to interact with a specific provider's resources."},{"upvote_count":"1","comments":[{"comment_id":"1044864","poster":"Tyler2023","content":"Changing my answer, it should be B\nUnlike many other objects in the Terraform language, a provider block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured.\nhttps://developer.hashicorp.com/terraform/language/providers/configuration","upvote_count":"1","timestamp":"1697452740.0"}],"timestamp":"1697452380.0","comment_id":"1044861","content":"Answer is A based on this https://developer.hashicorp.com/terraform/language/providers/configuration\nProviders allow Terraform to interact with cloud providers, SaaS providers, and other APIs.\n\nSome providers require you to configure them with endpoint URLs, cloud regions, or other settings before Terraform can use them. This page documents how to configure settings for providers.\n\nAdditionally, all Terraform configurations must declare which providers they require so that Terraform can install and use them. The Provider Requirements page documents how to declare providers so Terraform can install them.","poster":"Tyler2023"},{"upvote_count":"1","content":"Selected Answer: B\nB for all the reasons commented","poster":"gofavad926","timestamp":"1695929520.0","comment_id":"1020192"},{"timestamp":"1695882240.0","upvote_count":"1","comment_id":"1019483","poster":"otakuinside","content":"https://developer.hashicorp.com/terraform/language/providers/requirements\n[quote]Each Terraform module must declare which providers it requires, so that Terraform can install and use them[/quote]"},{"poster":"arnabsinha4u","comment_id":"1010571","upvote_count":"1","content":"Selected Answer: B\nB\nhttps://developer.hashicorp.com/terraform/language/providers/configuration#provider-configuration-1","timestamp":"1695039660.0"},{"timestamp":"1694502120.0","content":"Hello, The answer should be B. if you creating the S3 bucket. you dont want to create the provider block. so, provider block is not necessary.","upvote_count":"1","poster":"selvaraj133ece","comment_id":"1005484"},{"poster":"DANDA9989","comment_id":"1005226","timestamp":"1694473080.0","upvote_count":"2","content":"No, a provider configuration block is not required in every Terraform configuration. However, it is required if you want to use a provider to create or manage resources.\n\nA provider configuration block specifies the settings that Terraform needs to use the provider. This can include things like the provider's endpoint URL, the cloud region, and the credentials that Terraform will use to authenticate with the provider.\n\nIf you do not specify a provider configuration block, Terraform will use the default provider configuration. The default provider configuration is defined in the provider's documentation.\n\nIn some cases, the default provider configuration may not be sufficient. For example, if you are using a provider in a region that is not supported by the default configuration, you will need to specify a provider configuration block."},{"comment_id":"993209","upvote_count":"1","timestamp":"1693322760.0","content":"I would go for B. Explanation:\nThere are scenarios where you might not need a provider configuration block. For instance:\n\nData-Only Configuration: If you're only using Terraform to query and retrieve data from an existing infrastructure (using data sources) without making any changes, you might not need a provider configuration block.\n\nLocal Resources: In some cases, you might define only local resources that don't require external providers. For example, creating a local file or generating random values.\n\nModules: If you're using Terraform modules that already include provider configurations, you might not need to define them at the root configuration level.","poster":"ledjo","comments":[{"timestamp":"1695444480.0","comment_id":"1014655","upvote_count":"2","poster":"maze_","content":"Although I agree with the answer B, this is a bit of a problematic example, since quite often `data` sources retrieve data from sources that *require* authentication (e.g. `data.aws_vpc.existing`)."}]},{"timestamp":"1691629500.0","comment_id":"977139","content":"Selected Answer: B\nChatgpt says so","poster":"brax404","upvote_count":"1"},{"content":"B,\n\n **Local-Only State:**\n - If your Terraform configuration is used for purely local resources or data sources that don't interact with any cloud or external service, you may not need a provider configuration block.\n - In such cases, you might use Terraform for data transformation, local computations, or template rendering without managing any cloud infrastructure.","poster":"Ashutosh_96","upvote_count":"1","comment_id":"966015","timestamp":"1690599960.0"},{"upvote_count":"1","timestamp":"1690550100.0","poster":"talron","content":"It's B. I just created a resource with no provider specified and it worked.","comment_id":"965583"},{"poster":"Jayanth","upvote_count":"1","timestamp":"1690532580.0","content":"B. False","comment_id":"965387"},{"timestamp":"1690211640.0","content":"Selected Answer: B\nprovider block may be omitted if its contents would otherwise be empty","comment_id":"961747","poster":"praph","upvote_count":"1"},{"timestamp":"1690122480.0","upvote_count":"2","poster":"Busi57","comment_id":"960506","content":"Selected Answer: B\nI vote B"},{"content":"Vote B. Unlike many other objects in the Terraform language, a provider block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured.","upvote_count":"1","comment_id":"950078","timestamp":"1689185520.0","poster":"VSMu"},{"comment_id":"929045","content":"IN the current version of terraform, It automatically detects and downloads the provider (if an empty config is required).","timestamp":"1687321920.0","upvote_count":"6","poster":"abhi6199"},{"timestamp":"1686982800.0","upvote_count":"2","comment_id":"925798","content":"Selected Answer: A\nhttps://developer.hashicorp.com/terraform/language/providers/configuration\nAdditionally, all Terraform configurations must declare which providers they require so that Terraform can install and use them.","poster":"bakari1991"},{"content":"Vote B","comment_id":"918449","poster":"Mandeeps468","timestamp":"1686240120.0","upvote_count":"1"},{"content":"I'm going for B","timestamp":"1686075900.0","upvote_count":"1","poster":"March2023","comment_id":"916542"},{"poster":"Philtin","upvote_count":"1","content":"Additionally, all Terraform configurations must declare which providers they require so that Terraform can install and use them. The Provider Requirements page documents how to declare providers so Terraform can install them.\" https://developer.hashicorp.com/terraform/language/providers/configuration","comment_id":"915762","timestamp":"1686005460.0"},{"comment_id":"912443","upvote_count":"1","content":"Selected Answer: A\nProviders allow Terraform to interact with cloud providers, SaaS providers, and other APIs.\n\nSome providers require you to configure them with endpoint URLs, cloud regions, or other settings before Terraform can use them. This page documents how to configure settings for providers.\n\nAdditionally, all Terraform configurations must declare which providers they require so that Terraform can install and use them. The Provider Requirements page documents how to declare providers so Terraform can install them.\nhttps://developer.hashicorp.com/terraform/language/providers/configuration#provider-configuration","timestamp":"1685667480.0","poster":"SIAMIANJI"},{"comment_id":"894514","comments":[{"poster":"SSOUNDAR","timestamp":"1687253940.0","comment_id":"928317","content":"I think you forgot to see the Provider \"Block\" as mentioned. No need to declare provider block in our configuration file.","upvote_count":"1"}],"poster":"FawadK","content":"Selected Answer: A\nIt's clearly written here. \nAll Terraform configurations must declare which providers they require so that Terraform can install and use them.\n\nSource:- https://developer.hashicorp.com/terraform/language/providers/configuration","timestamp":"1683769860.0","upvote_count":"1"},{"upvote_count":"2","content":"Additionally, all Terraform configurations must declare which providers they require so that Terraform can install and use them. The Provider Requirements page documents how to declare providers so Terraform can install them. https://developer.hashicorp.com/terraform/language/providers/configuration#provider-configuration","comment_id":"880576","timestamp":"1682436000.0","poster":"coord"},{"content":"Selected Answer: B\nB is correct here","poster":"Faaizz","timestamp":"1680606540.0","upvote_count":"1","comment_id":"860924"},{"upvote_count":"2","comment_id":"859075","timestamp":"1680453420.0","poster":"dhez46","content":"Selected Answer: B\nNo need to use the provider block everytime. The providers can be declared in the Terraform block."},{"upvote_count":"2","comment_id":"857237","poster":"camps","content":"Selected Answer: B\nB. False\n\nA provider configuration block is only required for those resources that need to be managed by a provider. If a configuration does not reference any provider resources, then a provider configuration block is not required. However, if any resources are defined that require a provider, then a provider configuration block must be included to define which provider should be used for the resources.","timestamp":"1680274740.0"},{"timestamp":"1680006660.0","poster":"Red10","content":"Vote B, \ni was able to run the Init, plan, apply and destroy without the provider block, with AWS, The code i ran was to provision a VPC, IGW and Security Group.","comment_id":"853231","upvote_count":"1"},{"comment_id":"851458","poster":"Atila50","content":"Selected Answer: A\nEach Terraform module must declare which providers it requires, so that Terraform can install and use them. Provider requirements are declared in a required_providers block. The required_providers block must be nested inside the top-level terraform block (which can also contain other settings).","timestamp":"1679861760.0","upvote_count":"1"},{"comment_id":"840276","upvote_count":"1","content":"Selected Answer: A\nit's A","timestamp":"1678910880.0","poster":"Rybitska"},{"upvote_count":"1","comment_id":"838851","poster":"gargaditya","content":"I dont get what is the use of using terraform if there are 0 provider blocks-you are literally not authenticating into a service,what is being deployed then?","timestamp":"1678798920.0"},{"poster":"mansvy","content":"Selected Answer: A\nWe need provider block if say we are using aws, given that provider has some mandatory fields, we can keep them removed. Example for AWS - we write provider like this provider \"aws\" {\n region = \"us-west-2\"\n}\nHere if keep this block out, terraform console expect us to provide mandatory region while running..","timestamp":"1678615860.0","comment_id":"836893","upvote_count":"1"},{"content":"all Terraform configurations must declare which providers they require so that Terraform can install and use them.\nhttps://developer.hashicorp.com/terraform/language/providers/configuration","comment_id":"825257","upvote_count":"4","poster":"r1ck","timestamp":"1677617220.0"},{"upvote_count":"1","content":"its terraform config, not module config!","poster":"r1ck","timestamp":"1677328500.0","comment_id":"821473"},{"timestamp":"1676198640.0","upvote_count":"2","comment_id":"806218","content":"Selected Answer: A\nTrue. A provider configuration block is required in every Terraform configuration. It specifies the provider to be used, and provides the necessary connection information and credentials. The provider is responsible for creating and managing resources in the specified infrastructure, such as AWS, Google Cloud, or Microsoft Azure. The provider configuration block is one of the first blocks in a Terraform configuration file and is used to set up the connection to the desired infrastructure provider.","poster":"nharaz"},{"upvote_count":"2","timestamp":"1675087740.0","poster":"SatenderRathee","comment_id":"792901","content":"Selected Answer: B\nIt is optional so correct answer is B."},{"comments":[{"timestamp":"1678799100.0","content":"If empty,you skip.\nBut overall still need 1 provider relevant to your config and resources to be deployed.\n\nIf I deploy to Azure Cloud,I skip specifying AWS provider.","comment_id":"838854","poster":"gargaditya","upvote_count":"1"}],"poster":"kennynelcon","content":"Selected Answer: B\nUnlike many other objects in the Terraform language, a provider block may be omitted if its contents would otherwise be empty.\n\nhttps://developer.hashicorp.com/terraform/language/providers/configuration","comment_id":"766589","timestamp":"1672920180.0","upvote_count":"2"},{"timestamp":"1672381080.0","comment_id":"761716","poster":"InformationOverload","upvote_count":"3","content":"Selected Answer: B\nIf you are not using any resources that require a provider, you do not need to include a provider configuration block in your Terraform configuration. I go with B"},{"upvote_count":"2","comment_id":"761072","content":"Selected Answer: B\nVote B, not necessary to define provide. e.g. local built-in provider","timestamp":"1672321320.0","poster":"BaburTurk","comments":[{"poster":"gargaditya","comment_id":"838858","upvote_count":"1","content":"Guess you meant Local PROVISIONERS not providers.\n'Provisioners' are used to execute scripts on a local or remote machine as part of resource creation or destruction.\nWithout creating a resource, what would be the point of running a script?\n\nAnd creating resource implies use of relevant provider.","timestamp":"1678799220.0"}]},{"content":"I understand that Provider Requirements (required_providers) is mandatory:\nhttps://developer.hashicorp.com/terraform/language/providers/requirements#requiring-providers\nEach Terraform module must declare which providers it requires, so that Terraform can install and use them. Provider requirements are declared in a “required_providers” block.\n\nHowever Provider Configuration (provider) is not mandatory:\nhttps://developer.hashicorp.com/terraform/language/providers/configuration#provider-configuration-1\nUnlike many other objects in the Terraform language, a “provider” block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured.","timestamp":"1671454500.0","comment_id":"749829","poster":"Bere","upvote_count":"2"},{"comment_id":"741890","content":"Selected Answer: B\nIt's B. From the official documentation:\n\nUnlike many other objects in the Terraform language, a provider block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured.","poster":"pfilourenco","upvote_count":"2","timestamp":"1670776260.0"},{"poster":"adouban","content":"Selected Answer: B\nVote B, not necessary to define provide. e.g. local built-in provider","timestamp":"1670559840.0","comment_id":"739774","upvote_count":"2"},{"timestamp":"1670329800.0","comment_id":"736799","content":"B is correct\nBuilt-in Provider\nMost providers are distributed separately in the form of plug-ins, but there is currently one provider built into the main Terraform process, that is the terraform_remote_state data source. Since the Provider is built-in, it does not need to be declared in terraform when using it required_providers. The source address of this built-in Provider is terraform.io/builtin/terraform.\n\nhttps://blog.devgenius.io/terraform-provider-aa57ade59eec\n\nThis main.tf configuration doesn't work because I haven't created anything in terraform cloud, but terraform locally is working as if I had declared a provider, but I have not :\n\ndata \"terraform_remote_state\" \"vpc\" {\n backend = \"remote\"\n\n config = {\n organization = \"hashicorp\"\n workspaces = {\n name = \"vpc-prod\"\n }\n }\n}","poster":"secdaddy","upvote_count":"1"},{"comment_id":"734757","poster":"pfilourenco","timestamp":"1670111820.0","upvote_count":"1","content":"Selected Answer: A\nvote A"},{"timestamp":"1669449720.0","upvote_count":"3","poster":"denismaggior8","comment_id":"727385","content":"Selected Answer: B\nIt can be omitted"},{"content":"Selected Answer: A\ntried in multiple configs with aws provider, init works wothout provider configuration but plan does not.\nError: Invalid provider configuration\n│\n│ Provider \"registry.terraform.io/hashicorp/aws\" requires explicit configuration. Add a provider block to the root module and configure the provider's required arguments as described in the provider documentation.","timestamp":"1665736620.0","comment_id":"694603","poster":"alifie","upvote_count":"1"},{"timestamp":"1665603300.0","comments":[{"timestamp":"1666291800.0","upvote_count":"1","poster":"niccsm","content":"provider requirements (specified in the `terraform` block) are not the same as provider blocks","comment_id":"700213"}],"comment_id":"693347","upvote_count":"1","content":"The documentation is confusing:\nhttps://www.terraform.io/language/providers/configuration\n-----\nAdditionally, all Terraform configurations must declare which providers they require so that Terraform can install and use them. The Provider Requirements page documents how to declare providers so Terraform can install them.\n-----\nUnlike many other objects in the Terraform language, a provider block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured.\n-----","poster":"Bere"},{"content":"Selected Answer: B\nYou an run a blank .tf file as well.","comment_id":"686955","timestamp":"1664978760.0","upvote_count":"1","poster":"pmzone"},{"content":"Selected Answer: B\nhas to be false","upvote_count":"1","poster":"udibie","comment_id":"685409","timestamp":"1664793420.0"},{"content":"Selected Answer: B\nThis is B","poster":"methamode","comment_id":"681286","upvote_count":"1","timestamp":"1664319780.0"},{"poster":"faltu1985","content":"Selected Answer: B\nIt is not required","upvote_count":"1","comment_id":"679436","timestamp":"1664170440.0"},{"comment_id":"677046","upvote_count":"1","poster":"PBSH56","content":"Selected Answer: B\nI go to with option B\nif I create a block \nresource \"google_storage_bucket\" \"static-site\" {\n name = \"image-store.com\"\n location = \"EU\"\n force_destroy = true\n}\nthen run terraform init then automatically find and install the associated provider with resource block.","timestamp":"1663931700.0"},{"content":"I believe \"required providers\" block is required not \"provider\"","comment_id":"674626","poster":"WorkHardBeProud","upvote_count":"1","timestamp":"1663719720.0"},{"poster":"Andreaw","upvote_count":"1","content":"Selected Answer: B\nhttps://www.terraform.io/language/providers/configuration","comment_id":"672095","timestamp":"1663487340.0"},{"upvote_count":"2","content":"Selected Answer: B\nB is correct, it is not neccesary to declare a provider block, Terraform can download plugins from a resource block or from Terraform block.","comment_id":"657913","timestamp":"1662163140.0","poster":"empperador"},{"comments":[{"comments":[{"poster":"GHOST1985","comment_id":"719110","upvote_count":"1","timestamp":"1668544620.0","content":"Github for example"}],"timestamp":"1665158160.0","upvote_count":"1","content":"what if the provider not existing in the registry?","comment_id":"688779","poster":"yogishrb2020"}],"comment_id":"655031","poster":"RVivek","content":"Documentation says \"Terraform configurations must declare which providers they require so that Terraform can install and use them\"\nHowever for many providers available in Terraform Registry, based on the resourcse bloaks we define teraafom automatically installs provider pluggins. Hence both answers are correct.","upvote_count":"2","timestamp":"1661945520.0"},{"upvote_count":"1","comment_id":"653307","comments":[{"poster":"kilowd","comments":[{"comment_id":"653834","upvote_count":"1","poster":"kilowd","timestamp":"1661836620.0","content":"Please ignore previous answer..After digging further the answer is NO.\nTerraform selects a provider based on the resource type name For example, the resource type google_compute_instance is associated automatically with the default configuration for the provider named google."}],"upvote_count":"1","timestamp":"1661754120.0","comment_id":"653316","content":"What u can ignore is the terraform block:\nterrafform {\n required_providers {\n azurerm = {}\n }\n}"},{"content":"confirmed\nmain.tf\nresource google_compute_instance \"gci\" { \n}\n% terraform init\nInitializing the backend...\nInitializing provider plugins...\n- Finding latest version of hashicorp/google...","upvote_count":"2","timestamp":"1670330100.0","comment_id":"736806","poster":"secdaddy"}],"timestamp":"1661752740.0","content":"YES ..Terraform needs to know what provider we are working with e.g aws , azure e.tc","poster":"kilowd"},{"comment_id":"651905","timestamp":"1661450400.0","poster":"bukake","content":"Selected Answer: A\nA because terraform force you to always set a provider","upvote_count":"1"},{"poster":"DeeOne17","comment_id":"649934","upvote_count":"2","timestamp":"1661115840.0","content":"Selected Answer: A\nhttps://www.terraform.io/language/providers/configuration\n\"Additionally, all Terraform configurations must declare which providers they require so that Terraform can install and use them. The Provider Requirements page documents how to declare providers so Terraform can install them."},{"poster":"geekneek","comment_id":"647356","content":"Voted A","timestamp":"1660595640.0","upvote_count":"1"},{"comment_id":"644747","content":"Selected Answer: B\nYes blank file does executes simply because it does not have anything to do and hence does not need a provider","upvote_count":"1","poster":"donathon","timestamp":"1660097460.0"},{"content":"also https://www.terraform.io/language/providers/requirements","timestamp":"1659100680.0","upvote_count":"2","poster":"Raji82","comment_id":"639237"},{"comment_id":"639235","poster":"Raji82","timestamp":"1659100440.0","content":"Selected Answer: B\nhttps://www.terraform.io/language/providers/configuration","upvote_count":"1"},{"comment_id":"638046","upvote_count":"2","content":"Selected Answer: B\nYou can run terraform without a provider, it depends on what you are doing, as already mentionned \"null\" doesn't require a provider to be configured","timestamp":"1658921220.0","poster":"Arnaud92"},{"timestamp":"1657598820.0","upvote_count":"1","content":"Selected Answer: B\nyou can omit it","poster":"robin1337","comment_id":"630279"},{"timestamp":"1657464720.0","poster":"svsilence","upvote_count":"1","comment_id":"629596","content":"correct anwser should be B."},{"upvote_count":"2","comment_id":"626457","content":"should be B.\nUnlike many other objects in the Terraform language, a provider block may be omitted if its contents would otherwise be empty. Terraform assumes an empty default configuration for any provider that is not explicitly configured.","poster":"flaviu888","timestamp":"1656832260.0"},{"upvote_count":"3","content":"A - is correct answer. Ref: https://www.terraform.io/language/providers/configuration \n\" all Terraform configurations must declare which providers they require so that Terraform can install and use them\"","poster":"cjig","timestamp":"1656565860.0","comment_id":"625033"},{"timestamp":"1656430800.0","upvote_count":"2","content":"Selected Answer: A\nIf you read the github discussion that's linked in the question, it's abundantly clear from the comments from HashiCorp employees that they want you using a provider block at all times.","poster":"Sproket","comments":[{"poster":"ptR95","content":"they want you to use it at all times but it's not a must to have it","comment_id":"666030","timestamp":"1662892800.0","upvote_count":"2"}],"comment_id":"624058"},{"content":"Selected Answer: B\nB is correct","poster":"rfd","upvote_count":"2","timestamp":"1656342300.0","comment_id":"623360"},{"content":"Selected Answer: A\nA is correct answer.","comments":[{"timestamp":"1656603900.0","poster":"Eltooth","content":"Change of mind - B","upvote_count":"1","comment_id":"625342"}],"upvote_count":"2","poster":"Eltooth","timestamp":"1656237660.0","comment_id":"622469"},{"poster":"ivanenko","upvote_count":"4","content":"B (false): null provider does not require initialization; one can sefely write a configuration with null_resources without any provider blocks","timestamp":"1656233700.0","comment_id":"622429"},{"content":"As simple as creating an empty folder and doing the Terraform flow: init-plan-appy. No error at all. \nCorrect answer: B","poster":"mifune","timestamp":"1656138660.0","comment_id":"621991","upvote_count":"3"},{"poster":"Ahmad_Terraform","timestamp":"1655889060.0","comment_id":"620268","content":"agreed doesn't work without provider","upvote_count":"4"},{"poster":"Zam88","upvote_count":"2","content":"I have test in the lab with out terraform Provider and it works. \ncorrect answer is B","timestamp":"1655666040.0","comment_id":"618821","comments":[{"timestamp":"1656787980.0","poster":"Oskar_Madin","comments":[{"content":"AWS provider block requires you to configure it with region where you want to deploy resources so you have to specify a provider block. However, if no configuration is needed and provider block is going to be empty then you can leave out provider.\n\nB is correct !!","comment_id":"638769","upvote_count":"1","poster":"CHRIS12722222","timestamp":"1659021120.0"}],"comment_id":"626277","content":"ridiculous how did you tested and what lab used, you should get Error: error configuring Terraform AWS Provider: error validating provider credentials: error calling sts:GetCallerIdentity: operation error STS: GetCallerIdentity, https response error StatusCode: 403, RequestID\nhow do you tell terraform where provision and how authenticate?","upvote_count":"2"}]},{"comment_id":"618725","content":"Selected Answer: B\nvote B","timestamp":"1655648820.0","upvote_count":"2","poster":"Cedhulk"},{"poster":"amrith501","timestamp":"1655304540.0","upvote_count":"3","content":"Selected Answer: B\n*Every terraform* configuration is the key here\nA provider is not mandatory for EVRY configuration","comment_id":"616803"},{"content":"Selected Answer: B\nCreate an empty main.tf and ran init and plan both works","timestamp":"1654868700.0","poster":"Aayush_","comment_id":"614571","upvote_count":"2"},{"upvote_count":"1","content":"Just tested, terraform never works without provider block.","poster":"Chickooo","timestamp":"1654462620.0","comment_id":"612025"},{"comment_id":"611594","content":"Selected Answer: B\nAnswer is B","upvote_count":"2","poster":"elvancedonzy","timestamp":"1654381680.0"},{"content":"B - False. You don't have to specify a provider block since Terraform is smart enough to download the right provider based on the specified resources.","poster":"petliura","upvote_count":"3","timestamp":"1653498240.0","comment_id":"607324"},{"timestamp":"1653309480.0","comment_id":"606070","content":"Selected Answer: B\nshould be B.","poster":"biscuithammer","upvote_count":"2"},{"comment_id":"605954","content":"It's B, empty provider block can be omitted.","timestamp":"1653298980.0","poster":"FCN","upvote_count":"4"}],"url":"https://www.examtopics.com/discussions/hashicorp/view/75674-exam-terraform-associate-topic-1-question-5-discussion/","answer_images":[]},{"id":"KnAVrw2kYXtKbUXgf3hk","choices":{"B":"False","A":"True"},"isMC":true,"answer":"B","question_text":"Setting the TF_LOG environment variable to DEBUG causes debug messages to be logged into syslog.","url":"https://www.examtopics.com/discussions/hashicorp/view/74899-exam-terraform-associate-topic-1-question-50-discussion/","topic":"1","answers_community":["B (84%)","A (16%)"],"discussion":[{"upvote_count":"68","comment_id":"624077","content":"please stop writing or suggestions if you don't know the answer or are not sure!","timestamp":"1672251600.0","poster":"Oskar_Madin"},{"poster":"esandips","comments":[{"timestamp":"1673321940.0","poster":"nhatne","comment_id":"629401","content":"B is correct because \nTF_LOG_PATH IS NOT REQUIRED, in the docs, they do not mention HAVE TO SET TF_LOG_PATH, it is optional, \ntherefore without TF_LOG_PATH will cause detailed logs to appear on stderr.","upvote_count":"5"},{"upvote_count":"4","comment_id":"600616","content":"Incorrect. A is the correct answer. TF_LOG_PATH just enables persistent logging to be appended to a specific file. \nFrom the docs:\nTo persist logged output you can set TF_LOG_PATH in order to force the log to always be appended to a specific file when logging is enabled.\n\nhttps://www.terraform.io/internals/debugging","poster":"scepticemia","timestamp":"1668264600.0"},{"comment_id":"603047","upvote_count":"2","poster":"bigboi23","content":"No.\nA is correct. \nTo persist logged output you can set TF_LOG_PATH in order to force the log to always be appended to a specific file when logging is enabled. Note that even when TF_LOG_PATH is set, TF_LOG must be set in order for any logging to be enabled.","timestamp":"1668729060.0"}],"timestamp":"1667046420.0","upvote_count":"23","content":"B\nTF_LOG_PATH needs to be set as well","comment_id":"594448"},{"upvote_count":"1","content":"Selected Answer: B\nThe correct answer is:\n\nB. False\n\nExplanation:\nSetting the TF_LOG environment variable to DEBUG enables detailed debugging messages in Terraform, but these messages are printed to standard error (stderr), not to syslog.\n\nTerraform does not automatically log messages to syslog. If you want to capture Terraform logs in syslog, you would need to manually redirect the output, for example:\n\nsh\nCopy\nEdit\nTF_LOG=DEBUG terraform apply 2>&1 | tee /var/log/terraform.log\nAlternatively, you can configure external logging mechanisms to capture Terraform's debug output if needed.","comment_id":"1395488","timestamp":"1741918500.0","poster":"anirudhgunda"},{"content":"Selected Answer: B\nB. False.\n\nSetting the TF_LOG environment variable to \"DEBUG\" does not cause debug messages to be logged into syslog. It actually causes the Terraform command-line tool to emit detailed debug output to the console (standard error output, specifically).","poster":"starkonbullet","upvote_count":"6","comment_id":"1212885","timestamp":"1731853740.0"},{"upvote_count":"1","poster":"kingfighers","content":"B\nTerraform has detailed logs that you can enable by setting the TF_LOG environment variable to any value. Enabling this setting causes detailed logs to appear on stderr.\nhttps://developer.hashicorp.com/terraform/internals/debugging","timestamp":"1727852340.0","comment_id":"1187897"},{"comment_id":"1184372","content":"B is correct\nSetting the TF_LOG environment variable to DEBUG does indeed enable detailed debug messages from Terraform, but these messages are not automatically logged to syslog. By default, when TF_LOG is set, Terraform logs messages to stderr. To direct these logs to a file or another logging destination like syslog, you would need to manually redirect the output or use additional tools or settings specific to your operating system or environment.\n\nFor example, in a Unix-like environment, you could redirect the Terraform command's stderr to a file or to syslog using command-line redirection or tools like logger. But this is not something Terraform does automatically just by setting TF_LOG to DEBUG.\n\nTo log Terraform's output to a file, you might run a command like:\nTF_LOG=DEBUG terraform apply 2>terraform-debug.log","upvote_count":"2","timestamp":"1727462940.0","poster":"vibzr2023"},{"content":"Selected Answer: B\nB. False\n\nSetting the TF_LOG environment variable to DEBUG does not automatically log debug messages into syslog. Instead, it causes Terraform to print debug messages to the standard error (stderr) output. If you want to capture or redirect these debug messages, you need to handle the stderr output accordingly, such as redirecting it to a file or using other logging mechanisms.","timestamp":"1722290100.0","comment_id":"1135372","upvote_count":"8","poster":"Siva_7282"},{"upvote_count":"1","timestamp":"1722219420.0","poster":"SauravAmuze","comment_id":"1134648","content":"Terraform has detailed logs that you can enable by setting the TF_LOG environment variable to any value. Enabling this setting causes detailed logs to appear on 'stderr' .There is no mention of 'syslog' in the manual. So the answer is B (False)"},{"content":"B. False\nSetting the TF_LOG environment variable to DEBUG in Terraform does not cause debug messages to be logged into syslog. The TF_LOG environment variable is used to control the logging level of Terraform itself, not the system's syslog service. When TF_LOG is set to DEBUG, Terraform will output detailed debug messages to the standard error output (stderr) or the log file specified in the Terraform configuration.","poster":"DianaPopal","upvote_count":"3","comment_id":"1107326","timestamp":"1719533940.0"},{"timestamp":"1714481520.0","poster":"MisterR0B0T","upvote_count":"8","content":"The answer is False. Setting the TF_LOG environment variable to DEBUG causes debug messages to be logged to the standard error stream (stderr). It does not log messages to syslog.\n\nSyslog is a standard logging system that is used by many Unix-like operating systems to collect and store system log messages. Syslog messages are typically stored in a file called /var/log/syslog. Terraform does not log messages to syslog by default.\n\nTo log Terraform messages to syslog, you can use a third-party logging tool, such as Logstash or Fluentd. These tools can be configured to collect logs from stderr and send them to syslog.\n\nHere is an example of how to use Logstash to send Terraform logs to syslog:\n\ninput {\n stdin {\n type => \"plain\"\n filter => {\n remove_field => [\"message.level\"]\n add_field => { \"message.level\" => \"debug\" }\n }\n }\n}\n\noutput {\n syslog {\n host => \"localhost\"\n }\n}","comment_id":"1058953"},{"upvote_count":"2","comment_id":"1020382","timestamp":"1711689720.0","poster":"gofavad926","content":"Selected Answer: A\nA, it appears in stderr. As documentation says: \"Terraform has detailed logs that you can enable by setting the TF_LOG environment variable to any value. Enabling this setting causes detailed logs to appear on stderr.\""},{"comment_id":"998406","poster":"Halimb","timestamp":"1709550780.0","content":"Selected Answer: B\nhttps://developer.hashicorp.com/terraform/cli/config/environment-variables\nQuote \"Enables detailed logs to appear on stderr which is useful for debugging.\"\n\nBy default, regardless of the log level, Terraform writes its log output to the standard error (stderr) stream. This behavior is useful for capturing log messages in the terminal or console where you are running Terraform commands, allowing you to see any warnings or errors in real-time.\n\nIf you wish to redirect the log output to a file or another destination, you can use standard shell redirection as shown in my previous response. This allows you to save the log information for later analysis or to separate it from the terminal output.","upvote_count":"3"},{"poster":"Spandrop","timestamp":"1709233200.0","content":"Correct answer is B\n\n\"Terraform has detailed logs that you can enable by setting the TF_LOG environment variable to any value. Enabling this setting causes detailed logs to appear on stderr.\"\n\nThere is nothing to do with syslog\n\nhttps://developer.hashicorp.com/terraform/internals/debugging","upvote_count":"2","comment_id":"995316"},{"timestamp":"1708968720.0","poster":"debabrata6983","content":"Selected Answer: B\nB is the right answer and stop confusing people","upvote_count":"1","comment_id":"990918"},{"poster":"AWS_cert2023","content":"Enabling this setting causes detailed logs to appear on stderr.\nUses TF_LOG_PATH to change the path of log info.","upvote_count":"1","comment_id":"919284","timestamp":"1702131000.0"},{"poster":"nirosha1","comment_id":"882793","content":"Selected Answer: A\nTerraform has detailed logs that you can enable by setting the TF_LOG environment variable to any value. Enabling this setting causes detailed logs to appear on stderr. https://developer.hashicorp.com/terraform/internals/debugging","upvote_count":"2","timestamp":"1698422520.0"},{"timestamp":"1696703940.0","comment_id":"864166","upvote_count":"8","poster":"AzRNoob","content":"FALSE\n\nSetting the TF_LOG environment variable to DEBUG causes debug messages to be logged to standard error (stderr) output, not to syslog."},{"upvote_count":"4","comment_id":"857211","poster":"camps","timestamp":"1696084860.0","content":"Selected Answer: B\nB. False.\n\nSetting the TF_LOG environment variable to DEBUG causes debug messages to be logged to the console, not to syslog. The TF_LOG environment variable is used to control the level of logging in Terraform. When set to DEBUG, Terraform will log detailed debug messages to the console, which can be useful for troubleshooting issues."},{"comment_id":"845282","upvote_count":"2","content":"Selected Answer: B\nSetting the TF_LOG environment variable to DEBUG causes debug messages to be logged to standard error (stderr), not syslog. By default, Terraform logs only warnings and errors to stderr, but by setting the TF_LOG environment variable, you can also log info and debug messages. The available log levels are TRACE, DEBUG, INFO, WARN, and ERROR.","poster":"Nunyabiznes","timestamp":"1695240420.0"},{"poster":"David_C_90","content":"Selected Answer: B\nTerraform has detailed logs that you can enable by setting the TF_LOG environment variable to any value. Enabling this setting causes detailed logs to appear on stderr.\n\nhttps://developer.hashicorp.com/terraform/internals/debugging","timestamp":"1694789340.0","upvote_count":"1","comment_id":"840079"},{"timestamp":"1694465880.0","content":"Selected Answer: B\nSetting the TF_LOG environment variable to DEBUG causes debug messages to be logged into standard error (stderr), not syslog.\n\nBy default, Terraform logs only errors and above (e.g., warnings, errors, and critical messages) to stderr. However, you can increase the verbosity of the logs by setting the TF_LOG environment variable to a specific log level, such as TRACE, DEBUG, INFO, or WARN. When the log level is set to DEBUG, Terraform will log additional debugging information to stderr, which can be useful for troubleshooting and diagnosing issues.","upvote_count":"2","comment_id":"836591","poster":"SilentMilli"},{"content":"Selected Answer: B\nChatGPT says B, good enough for me!","upvote_count":"3","timestamp":"1694380740.0","comment_id":"835525","poster":"styro"},{"comment_id":"830077","timestamp":"1693923720.0","content":"debug messages to be logged into syslog. !!!! no sure the answer is B false","poster":"jojom19980","upvote_count":"1"},{"timestamp":"1692004920.0","comment_id":"808307","poster":"itbrpl","content":"C'mon guys!! TF_LOG controls only the log level that will be displayed on the screen.. \n\nTF_LOG_PATH will not send logs to a syslog it will send to a file... isn't it? when I think about syslog I am thinking about a syslog server... but anyway....","upvote_count":"1"},{"comment_id":"802743","upvote_count":"1","content":"Selected Answer: A\nTerraform provides the options to enable detailed logging/debugging with the help of the TF_LOG environment variable.\nIt provides the option to set TF_LOG to various different log levels: TRACE, DEBUG, INFO, WARN or ERROR.\n\nTRACE: Very detailed verbosity, shows every step taken by Terraform, and produces enormous outputs with internal logs.\nDEBUG: describes what happens internally in a more concise way compared to TRACE.\nERROR: shows errors that prevent Terraform from continuing.\nWARN: logs warnings, which may indicate misconfiguration or mistakes, but are not critical to the execution.\nINFO: shows general, high-level messages about the execution process.\nTo persist the generated logs you need to set the TF_LOG_PATH environment variable in order to force the log to always be appended to a specific file when logging is enabled.","timestamp":"1691541120.0","poster":"col2511kol"},{"upvote_count":"3","poster":"RVivek","timestamp":"1679546100.0","content":"Selected Answer: B\nTF_LOG will enable log and send that to stderr (by default it iscreen) not to any syslog server. \nTF_LOG_PARH can be set to redirect logs to a specific file","comment_id":"676700"},{"poster":"Pinky0289","comment_id":"671032","content":"The answer should be B. False. \nSetting TF_LOG variable to any env var ( TRACE, DEBUG, INFO, WARN, and Error) just causes it to display logs to stderr. In order to persist the log, TF_LOG_PATH needs to be set.","upvote_count":"1","timestamp":"1678997880.0"},{"upvote_count":"1","timestamp":"1678894920.0","content":"Its B. \nIf TF_LOG_PATH is empty (which is by default) the debug logs are directed to STDOUT ( terminal)","poster":"lightbrd","comment_id":"669981"},{"poster":"Ahmad_Terraform","content":"B is correct","upvote_count":"1","timestamp":"1673623200.0","comment_id":"630919"},{"upvote_count":"1","content":"Selected Answer: B\nB is correct answer. \n\nUse TF_LOG_PATH to specify a file path where the log output file should be written. If you do not specify a log path, Terraform writes the specified log output to stderr.\n\"Stderr, also known as standard error, is the default file descriptor where a process can write error messages.\n\nIn Unix-like operating systems, such as Linux, macOS X, and BSD, stderr is defined by the POSIX standard. Its default file descriptor number is 2.\n\nIn the terminal, standard error defaults to the user's screen.\"\n\nhttps://www.computerhope.com/jargon/s/stderr.htm#:~:text=Stderr%2C%20also%20known%20as%20standard,defaults%20to%20the%20user's%20screen.","comment_id":"628034","poster":"Eltooth","timestamp":"1673034480.0"},{"comment_id":"623944","content":"B false","upvote_count":"2","poster":"Zam88","timestamp":"1672235700.0"},{"poster":"Eltooth","comment_id":"623424","timestamp":"1672169460.0","content":"Selected Answer: A\nA is correct answer. True.\n\n\"Terraform has detailed logs which can be enabled by setting the TF_LOG environment variable to any value. This will cause detailed logs to appear on stderr.\"\n\n\"To persist logged output you can set TF_LOG_PATH in order to force the log to always be appended to a specific file when logging is enabled. Note that even when TF_LOG_PATH is set, TF_LOG must be set in order for any logging to be enabled.\" \n\nhttps://www.terraform.io/internals/debugging\n\n\"Logging is off for all subsystems by default. To enable logging for a Terraform run, set one or more logging environment variables to either JSON format or a verbosity level.\"\n\"Use TF_LOG_PATH to specify a file path where the log output file should be written. If you do not specify a log path, Terraform writes the specified log output to stderr.\"\n\nTerraform can automatically create the output file at TF_LOG_PATH if it does not already exist. If the file does exist, Terraform adds new log output onto the end of the file without truncating the file contents.\"\nhttps://www.terraform.io/plugin/log/managing#enable-logging","comments":[{"timestamp":"1673034420.0","content":"stderr outputs to screen. Answer should be B. \n\nhttps://www.computerhope.com/jargon/s/stderr.htm#:~:text=Stderr%2C%20also%20known%20as%20standard,defaults%20to%20the%20user's%20screen.","upvote_count":"1","poster":"Eltooth","comment_id":"628032"}],"upvote_count":"2"},{"comment_id":"620594","upvote_count":"2","poster":"Zam88","content":"How do you get Terraform logs?\nTerraform has detailed logs which can be enabled by setting the TF_LOG environment variable to any value. This will cause detailed logs to appear on stderr. You can set TF_LOG to one of the log levels TRACE , DEBUG , INFO , WARN or ERROR to change the verbosity of the logs.\n\nB","timestamp":"1671746280.0"},{"poster":"bp339","upvote_count":"3","comment_id":"611629","timestamp":"1670206500.0","content":"Selected Answer: B\nTerraform has detailed logs which can be enabled by setting the TF_LOG environment variable to any value. This will cause detailed logs to appear on stderr.\n\nhttps://www.terraform.io/internals/debugging"},{"timestamp":"1669742760.0","upvote_count":"7","poster":"abconline","comments":[{"poster":"kilowd","content":"Agree with @abcoline:\nIf TF_LOG_PATH is not set, output is sent to standard output and error in the terminal. If the environment variable is set, Terraform will append logs from each run to the specified file.","upvote_count":"1","comment_id":"653977","timestamp":"1677585300.0"}],"content":"it should be false as it wont write to syslog but will just display on screen","comment_id":"608817"},{"comment_id":"607881","upvote_count":"5","poster":"pj2001","timestamp":"1669526160.0","content":"B, TF_LOG setting would send logs to stderr / console / terminal, not syslog"}],"answer_ET":"B","unix_timestamp":1651235220,"question_images":[],"answer_description":"","exam_id":169,"question_id":294,"timestamp":"2022-04-29 14:27:00","answer_images":[]},{"id":"4yatZvpN7k46ncBpWWcj","unix_timestamp":1655613420,"exam_id":169,"answer_images":[],"answers_community":["A (100%)"],"choices":{"D":"The datasource block","C":"The provider block","A":"The terraform block","B":"The resource block"},"question_images":[],"topic":"1","answer_ET":"A","question_id":295,"timestamp":"2022-06-19 06:37:00","isMC":true,"answer_description":"","discussion":[{"content":"Selected Answer: A\nA is correct answer. \n\"To configure a backend, add a nested backend block within the top-level terraform block. The following example configures the remote backend.\"\n\nhttps://www.terraform.io/language/settings/backends/configuration\nhttps://www.terraform.io/language/settings/backends/configuration#using-a-backend-block","upvote_count":"8","poster":"Eltooth","comment_id":"623425","timestamp":"1687887300.0"},{"upvote_count":"1","comment_id":"990919","content":"Selected Answer: A\nA is Correct Answer","poster":"debabrata6983","timestamp":"1724686380.0"},{"upvote_count":"4","comment_id":"974553","timestamp":"1723024380.0","content":"Selected Answer: A\nterraform {\n backend \"remote\" {\n hostname = \"app.terraform.io\"\n organization = \"YourOrganization\"\n\n workspaces {\n name = \"your_workspace\"\n }\n }\n}","poster":"Bere"},{"comment_id":"972354","upvote_count":"1","content":"terraform {\n backend \"consul\" {\n address = \"demo.consul.io\"\n scheme = \"https\"\n path = \"example_app/terraform_state\"\n }\n}","timestamp":"1722793380.0","poster":"arunrkaushik"},{"timestamp":"1715214900.0","content":"Selected Answer: A\nA for sure.","poster":"Ni33","upvote_count":"1","comment_id":"892589"},{"timestamp":"1711832340.0","upvote_count":"1","comment_id":"856111","poster":"Power123","content":"A is the correct ans"},{"upvote_count":"1","poster":"oab720","content":"Selected Answer: A\nTested in labs - terraform block","timestamp":"1704729300.0","comment_id":"769608"},{"upvote_count":"2","timestamp":"1687150620.0","content":"A. The terraform block","comment_id":"618524","poster":"Zam88"},{"comment_id":"618520","poster":"CHRIS12722222","upvote_count":"1","timestamp":"1687149420.0","content":"terraform block"}],"question_text":"Where in your Terraform configuration do you specify a state backend?","answer":"A","url":"https://www.examtopics.com/discussions/hashicorp/view/76913-exam-terraform-associate-topic-1-question-51-discussion/"}],"exam":{"provider":"Hashicorp","isImplemented":true,"name":"Terraform Associate","isMCOnly":false,"lastUpdated":"12 Apr 2025","isBeta":false,"id":169,"numberOfQuestions":347},"currentPage":59},"__N_SSP":true}