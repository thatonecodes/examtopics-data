{"pageProps":{"questions":[{"id":"zzMitftifZxd52K04gqp","answer_images":[],"answer_description":"","answers_community":["D (85%)","C (15%)"],"timestamp":"2022-04-30 11:49:00","question_text":"You have a simple Terraform configuration containing one virtual machine (VM) in a cloud provider. You run terraform apply and the VM is created successfully.\nWhat will happen if you delete the VM using the cloud provider console, and run terraform apply again without changing any Terraform code?","answer":"D","answer_ET":"D","exam_id":169,"topic":"1","unix_timestamp":1651312140,"isMC":true,"question_id":321,"discussion":[{"timestamp":"1667480220.0","content":"Selected Answer: D\nfor sure response D","comment_id":"596328","upvote_count":"18","poster":"vitasac"},{"upvote_count":"6","timestamp":"1714551120.0","content":"I tried this, \nI created the storage account first by running terraform apply\nThen I manually deleted the storage account through azure portal\nThen reran the terraform apply\n- It refresh the state, which detects that the storage account was gone\n- Then it re-creates storage account with the same name but without the data from previous instance","poster":"Tyler2023","comment_id":"1059553"},{"upvote_count":"1","comment_id":"1342146","poster":"Asif_draxi","timestamp":"1737119940.0","content":"Selected Answer: D\nThe correct answer is **D. Terraform will recreate the VM**.\n\nWhen you delete the VM manually via the cloud provider's console, the actual infrastructure no longer exists, but Terraform's state file still has a record of the VM. When you run `terraform apply` again, Terraform detects that the VM is missing from the actual infrastructure and will attempt to recreate it to match the configuration defined in the Terraform code."},{"timestamp":"1732626360.0","content":"The people who answered C are just doomed to fail this exam. This is such a basic foundational knowledge and it's the very core of Terraform and you can't even get this simple one right? This is such a freebie question.","upvote_count":"3","poster":"chaoscreater","comment_id":"1218945"},{"upvote_count":"2","comment_id":"1185315","content":"D. Terraform will recreate the VM\n\nWhen you delete a resource like a VM directly through the cloud provider's console (outside of Terraform), the Terraform state file still believes the resource exists, as it's unaware of any changes made outside its management. The next time you run terraform apply, Terraform compares the desired state (defined in your Terraform configuration) with the actual state (as recorded in the state file and observed in the cloud environment).\n\nSince the actual VM no longer exists but your Terraform configuration still defines it, Terraform detects this discrepancy and takes action to reconcile the difference by creating a new VM to match the desired state defined in your Terraform configuration. Terraform's goal is always to make the real-world infrastructure match the configuration.","timestamp":"1727594820.0","poster":"vibzr2023"},{"poster":"gofavad926","timestamp":"1711691280.0","comment_id":"1020408","content":"Selected Answer: D\nD, the instance will be recreated","upvote_count":"1"},{"upvote_count":"1","timestamp":"1709553180.0","comment_id":"998447","content":"Selected Answer: D\nD. Stop messing around.\n\nThis behavior applies to any resource created and managed by Terraform, not just virtual machines, e.g. simple resources like resource groups in Azure (like I've tested with) or any other cloud provider's resources.","poster":"Halimb"},{"content":"answer is D","poster":"Bluemoon22","timestamp":"1698360660.0","comment_id":"882066","upvote_count":"1"},{"comment_id":"867552","upvote_count":"3","timestamp":"1697046480.0","poster":"lucasbg","content":"Selected Answer: C\nit`s C for sure. Since the VM was deleted using the cloud web/console, the tfstate will still contain the VM information there, hence nothing will be done. This is drift, and the steps here will be to run terraform -apply | plan -refresh-only, the tfsate will update that the VM was removed and then you will run apply again.","comments":[{"content":"Correct answer is D as terraform apply implicitly runs terraform refresh before applying the changes which will clear the data of VM from the state file and plan will show to create a new VM.","comment_id":"874536","poster":"Mridul31792","timestamp":"1697714580.0","upvote_count":"2"}]},{"upvote_count":"1","timestamp":"1696021500.0","comment_id":"856272","content":"D is correct","poster":"Power123"},{"comment_id":"766486","upvote_count":"4","content":"Correct answer is D. Terraform will recreate the VM.\n\nIn Terraform, the state file is used to store the current state of your infrastructure. When you run terraform apply, Terraform compares the state of your infrastructure as defined in the configuration files with the state recorded in the state file, and then makes any necessary changes to bring the infrastructure into compliance with the configuration.","timestamp":"1688543460.0","poster":"robertninho"},{"timestamp":"1687445100.0","content":"Definitely the answer is D","poster":"vadeemkaa","upvote_count":"1","comment_id":"753488"},{"content":"Selected Answer: D\nA refresh will be made before apply, therefore terraform will detect the VM is missing, and will update state accordingly. \nThen, it will create a new one to match configuration","timestamp":"1687180500.0","poster":"chimons","comment_id":"749968","upvote_count":"5"},{"upvote_count":"3","content":"Selected Answer: D\nI have tested this on my lab on oracle cloud, \n1- created a VM using TF\n2- Deleted VM manually \n3- on Terraform apply, attempted to recreate the instance\n\nD is the correct answer","poster":"adouban","comment_id":"742469","timestamp":"1686544680.0"},{"upvote_count":"1","comment_id":"737736","poster":"Raghav_123","timestamp":"1686126600.0","content":"The ans is C"},{"poster":"secdaddy","comment_id":"736918","content":"Not sure how you can get C\nI just did this :\n1. created a VM on AWS using terraform apply\n2. used the AWS console to delete the VM\n3. ran terraform apply again without changing any Terraform code\nResult : terraform recreated the VM (D)","timestamp":"1686056100.0","upvote_count":"3"},{"upvote_count":"2","timestamp":"1684513800.0","poster":"GHOST1985","comment_id":"722169","content":"Selected Answer: C\nOf course C \nWhen you delete from the console you don't remove the VM from the state file so in the next plan or apply terrafom will not apply any changes because from based on the state file the VM is already created."},{"content":"it should be D","timestamp":"1682808000.0","poster":"Fatoch","comment_id":"707529","upvote_count":"1"},{"timestamp":"1681035480.0","comment_id":"690057","upvote_count":"1","content":"Selected Answer: C\nIf you change any thing, like tags, tf apply recreate resource, if you don’t change and try apply again, nothing happen. So answer is here: “run terraform apply again without changing any Terraform code”.\n\nLetter C, I tested too.","poster":"ccieman2016"},{"poster":"yogishrb2020","upvote_count":"1","timestamp":"1680918240.0","comment_id":"688976","content":"when VM deleted from console. there is disconnect from Terraform to Actual infrastructure. how will it recreate ?"},{"comment_id":"671115","timestamp":"1679007120.0","content":"I created a VM using terraform config file, and deleted it on the aws console. After issuing terraform apply again, below is the output. \n<<Apply complete! Resources: 0 added, 0 changed, 0 destroyed.>>\nAnswer is option C.\n\nSo, the answer is C.","upvote_count":"5","poster":"Pinky0289","comments":[{"upvote_count":"2","poster":"alexik96","timestamp":"1680626040.0","comment_id":"686319","content":"me too. I tested that"}]},{"poster":"Oskar_Madin","upvote_count":"1","content":"Another question, it doesn’t say that you enter yes in prompt or run apply with -auto-approve so it will prompt enter a value then you'll see Plan: 1 to add, 0 changed. however, here is the same You run terraform apply and the VM is created successfully.","timestamp":"1672764840.0","comment_id":"626604"},{"comments":[{"upvote_count":"1","comment_id":"688975","timestamp":"1680918120.0","poster":"yogishrb2020","content":"S3 creation created globally. not region specific like VM."}],"timestamp":"1672385280.0","poster":"Ahmad_Terraform","content":"D is correct , it will recreate the resource, i deleted S3 bucket from the console and then tried terraform apply , and it simply recreated the S3 bucket in AWS.","comment_id":"625038","upvote_count":"1"},{"timestamp":"1672253880.0","content":"Selected Answer: D\nD is the correct answer.","upvote_count":"2","poster":"Eltooth","comment_id":"624098"},{"upvote_count":"3","timestamp":"1670316360.0","content":"i tested is C","comments":[{"content":"That's impossible unless you alter the terraform.tfstate too","upvote_count":"1","timestamp":"1671968520.0","poster":"mifune","comment_id":"622077"},{"content":"pls it should be option D","upvote_count":"1","comment_id":"618582","timestamp":"1671443220.0","poster":"CHRIS12722222"}],"comment_id":"612220","poster":"stalk98"},{"poster":"bigboi23","timestamp":"1668734040.0","comment_id":"603070","upvote_count":"4","comments":[{"upvote_count":"1","timestamp":"1675551000.0","comment_id":"642593","poster":"MofD","content":"might be examtopics way to get people to buy the contributor access and to participate in discussions"}],"content":"Selected Answer: D\nOffcourse it will be: D\nAre these answers selected randomly or what?"},{"comment_id":"600393","poster":"Sunrayk","upvote_count":"3","timestamp":"1668221640.0","content":"Correct answer is D"},{"content":"The answer is D","poster":"Ipergorta","upvote_count":"6","timestamp":"1667130540.0","comment_id":"594939"}],"question_images":[],"choices":{"B":"Terraform will report an error","C":"Terraform will not make any changes","A":"Terraform will remove the VM from state file","D":"Terraform will recreate the VM"},"url":"https://www.examtopics.com/discussions/hashicorp/view/74965-exam-terraform-associate-topic-1-question-75-discussion/"},{"id":"AvDXJfpZV7UBHGhHo88A","isMC":true,"discussion":[{"upvote_count":"32","poster":"zyxphreez","comments":[{"content":"Authentication outside of Terraform is more secure than environment variables. Your environment variables can still refer to a file or the definition of your variables inside terraform. So I would go for C.","timestamp":"1706031900.0","comment_id":"1129838","upvote_count":"3","poster":"Alandt"},{"upvote_count":"1","content":"I will select C. In option A, any debugging will still disclose data.","comment_id":"934536","timestamp":"1687788240.0","comments":[{"comment_id":"1003070","timestamp":"1694251500.0","poster":"Gomjaba","upvote_count":"1","content":"I presume they are hinting at vault here."}],"poster":"deepeshukla"}],"content":"Selected Answer: A\nDefinitely is: A\nhttps://www.terraform.io/language/settings/backends/configuration#credentials-and-sensitive-data\nWarning: We recommend using environment variables to supply credentials and other sensitive data. If you use -backend-config or hardcode these values directly in your configuration, Terraform will include these values in both the .terraform subdirectory and in plan files. This can leak sensitive credentials.","timestamp":"1661303700.0","comment_id":"651045"},{"upvote_count":"18","content":"Selected Answer: C\nI will go for option C. Whenever possible, it is best to authenticate outside of terraform to keep secrets out of state file","comments":[{"content":"I agree with this.","comment_id":"1131794","upvote_count":"1","poster":"Alandt","timestamp":"1706195940.0"}],"comment_id":"639211","timestamp":"1659098880.0","poster":"CHRIS12722222"},{"timestamp":"1741373160.0","poster":"KG8","content":"Selected Answer: A\nhttps://developer.hashicorp.com/terraform/language/backend\n\nWarning: We recommend using environment variables to supply credentials and other sensitive data. If you use -backend-config or hardcode these values directly in your configuration, Terraform will include these values in both the .terraform subdirectory and in plan files. This can leak sensitive credentials.","upvote_count":"1","comment_id":"1366353"},{"timestamp":"1737120180.0","poster":"Asif_draxi","content":"Selected Answer: A\nThe correct answer is **A. Defined in Environment variables**.\n\nEnvironment variables are considered the most secure place to store secrets for connecting to a Terraform remote backend because:\n\n- They keep sensitive information out of source control (such as in `.tf` files or other configuration files).\n- Secrets stored in environment variables can be managed securely by the operating system or deployment environment and can be encrypted or otherwise protected.\n\nStoring secrets inside the backend block (option B) or in a connection configuration outside Terraform (option C) can expose them to version control or make them less secure. Therefore, it's best practice to use environment variables for storing sensitive credentials securely.","upvote_count":"1","comment_id":"1342148"},{"comment_id":"1333456","upvote_count":"1","content":"Selected Answer: A\nThe correct answer is: A. Defined in Environment variables\n\nExplanation:\nWhen storing secrets for connecting to a Terraform remote backend, environment variables are the most secure option. Here's why:\n\nEnvironment Variables:\nSecure: Environment variables can be securely managed outside of Terraform configuration files and are not checked into version control.\nFlexibility: You can use tools like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault to inject secrets as environment variables dynamically.\nCommon Practice: Many services (e.g., AWS, Azure, Google Cloud) support using environment variables for storing sensitive credentials like access keys, secret keys, and tokens.","poster":"suri_surendra","timestamp":"1735468200.0"},{"poster":"Dimedrol1","upvote_count":"1","timestamp":"1730227680.0","comment_id":"1304652","content":"I've answered D - \"None of the above\", because the most secure way is e.g. Azure Key Vault, when working with Azure, of course.\nIn this case - we're not revealing any of the secrets values.\nTerraform can refer them via \"data\" operators.\n(and, yes, this approach is not a \"connection configuration\")"},{"poster":"Algol","content":"Selected Answer: A\nThe most secure option for storing secrets when connecting to a Terraform remote backend is A. Defined in environment variables. This approach keeps sensitive information, such as API keys or access tokens, out of your version-controlled configuration files. Defining secrets in environment variables reduces the risk of accidental exposure or leakage through your Terraform configuration. Using external secret management tools (like HashiCorp Vault) to manage environment variables can further enhance security.","timestamp":"1726135740.0","comment_id":"1282571","upvote_count":"1"},{"comment_id":"1255973","upvote_count":"2","timestamp":"1722049800.0","content":"Question is which one is MOST secure. Environment variable is not secure. You type env command from the host and easily view the secret value.","poster":"premnick"},{"comment_id":"1228482","timestamp":"1718113680.0","poster":"SureNot","content":"Selected Answer: C\nLet's imagine use AWS S3 bas a backend. Credentials to S3 Bucket are stored in ~/.aws/credentials file - Outside of terraform, most secure way.","upvote_count":"2"},{"timestamp":"1717596120.0","upvote_count":"1","poster":"Molly1994","content":"C vault as example","comment_id":"1224764"},{"poster":"deepakpamban","timestamp":"1714808400.0","upvote_count":"2","content":"Option C","comment_id":"1206382"},{"comment_id":"1198775","upvote_count":"4","timestamp":"1713545520.0","content":"Selected Answer: C\nC. Defined in a connection configuration outside of Terraform (Most Secure)\n\nThis is the most secure option. Here, you store your secrets in a separate dedicated location outside of your Terraform configuration. There are several ways to achieve this:\n\nSecret Management Tools: Utilize tools like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault to store and manage your secrets securely. These tools offer access control and encryption mechanisms.\nEncrypted Files: Store secrets in an encrypted file outside your Terraform configuration directory. Terraform can access these secrets during execution by referencing the decrypted content of the file.","poster":"Venki_dev"},{"upvote_count":"2","poster":"kingfighers","comment_id":"1188434","timestamp":"1712112540.0","content":"choose A: \n\nwhen we use vault, we still need to download it into a file,here is official doc:\n\n- **File**: A configuration file may be specified via the `init` command line. To specify a file, use the `-backend-config=PATH` option when running `terraform init`. If the file contains secrets it may be kept in a secure data store, such as [Vault](https://www.vaultproject.io/), in which case it must be downloaded to the local disk before running Terraform.\n\nhttps://developer.hashicorp.com/terraform/language/settings/backends/configuration#credentials-and-sensitive-data"},{"upvote_count":"1","timestamp":"1711942800.0","comment_id":"1187163","poster":"aksliveswithaws","content":"Selected Answer: A\nhttps://developer.hashicorp.com/terraform/language/settings/backends/configuration#credentials-and-sensitive-data:~:text=and%20apply%20steps.-,backend%20types,-The%20block%20label"},{"content":"Selected Answer: C\nAuthentication outside of Terraform is more secure than environment variables. Like using terraform vault or cloud","upvote_count":"1","poster":"AntonyPeter7","comment_id":"1164838","timestamp":"1709475720.0"},{"comment_id":"1159926","poster":"Kaname93","timestamp":"1708964520.0","content":"Selected Answer: A\nFrom the documentation :\nWarning: We recommend using environment variables to supply credentials and other sensitive data. If you use -backend-config or hardcode these values directly in your configuration, Terraform will include these values in both the .terraform subdirectory and in plan files. This can leak sensitive credentials.\n\nSo it's A","upvote_count":"1"},{"comment_id":"1129842","timestamp":"1706031960.0","poster":"Alandt","upvote_count":"1","content":"Selected Answer: C\nDefinitely C. Authentication outside of Terraform is the most secure way."},{"comment_id":"1125559","poster":"enook","timestamp":"1705555980.0","content":"Selected Answer: C\nChat GPT: The most secure option for storing secrets for connecting to a Terraform remote backend is typically:\n\nC. Defined in a connection configuration outside of Terraform\n\nStoring sensitive information, such as authentication credentials, outside of the Terraform configuration helps enhance security by preventing accidental exposure or leakage of sensitive data. Using external tools or configuration management systems to manage secrets can provide additional layers of security and access control. It is generally not recommended to store sensitive information directly within the Terraform configuration (option B) to minimize the risk of inadvertent exposure. Additionally, environment variables (option A) can be a good practice for storing secrets securely, but they need to be managed carefully to avoid unintended exposure.","upvote_count":"2"},{"upvote_count":"1","poster":"parag09","timestamp":"1704969660.0","comment_id":"1119613","content":"Selected Answer: A\nThe most secure place to store secrets for connecting to a Terraform remote backend is typically defined in environment variables."},{"timestamp":"1704821940.0","comment_id":"1117721","upvote_count":"1","content":"Warning: We recommend using environment variables to supply credentials and other sensitive data. If you use -backend-config or hardcode these values directly in your configuration, Terraform will include these values in both the .terraform subdirectory and in plan files. This can leak sensitive credentials.\nANSWER SHOULD BE \"A\"","poster":"vipulchoubisa"},{"timestamp":"1703844180.0","comment_id":"1108560","upvote_count":"3","poster":"samimshaikh","content":"Selected Answer: C\nC. Defined in a connection configuration outside of Terraform\n\nThe most secure option for storing secrets for connecting to a Terraform remote backend is to define them in a connection configuration outside of Terraform. This involves using external configuration files or secure credential management tools.\n\nOption A (defined in environment variables) is also a good practice for sensitive information, but it might be less secure than an external configuration file if, for example, there is a risk of exposing environment variables.\n\nOption B (inside the backend block within the Terraform configuration) is generally not recommended for storing sensitive information like secrets because Terraform configuration files may be versioned and shared, posing a security risk.\n\nTherefore, when dealing with sensitive information, it's a good practice to use external and secure methods for configuration, such as a separate configuration file or a secure credential management tool."},{"timestamp":"1703088300.0","poster":"[Removed]","upvote_count":"1","comment_id":"1101722","content":"Selected Answer: D\nIt seems to be D"},{"content":"Selected Answer: A\nhttps://developer.hashicorp.com/terraform/language/settings/backends/configuration\nWarning: We recommend using environment variables to supply credentials and other sensitive data. If you use -backend-config or hardcode these values directly in your configuration, Terraform will include these values in both the .terraform subdirectory and in plan files. This can leak sensitive credentials.","comment_id":"1100059","poster":"TigerInTheCloud","timestamp":"1702935660.0","upvote_count":"1"},{"timestamp":"1701035340.0","comment_id":"1081042","content":"It is C","upvote_count":"1","poster":"[Removed]"},{"timestamp":"1700584200.0","poster":"Ramdi1","upvote_count":"2","comment_id":"1076450","content":"Selected Answer: A\nThis extract is taken from another course on Udemy with explanation \n\nThe only method list above that will not result in the username/password being written to the state file is environment variables. All of the other options will result in the provider's credentials in the state file.\n\nTerraform runs will receive the full text of sensitive variables, and might print the value in logs and state files if the configuration pipes the value through to an output or a resource parameter. Additionally, Sentinel mocks downloaded from runs will contain the sensitive values of Terraform (but not environment) variables. Take care when writing your configurations to avoid unnecessary credential disclosure. Whenever possible, use environment variables since these cannot end up in state files or in Sentinel mocks. (Environment variables can end up in log files if TF_LOG is set to TRACE.)"},{"comment_id":"1045270","content":"Badly formed question, but I would go with C.","upvote_count":"3","poster":"satamex","timestamp":"1697491200.0"},{"timestamp":"1695959460.0","comment_id":"1020411","upvote_count":"4","poster":"gofavad926","content":"Selected Answer: C\nC. Defined in a connection configuration outside of Terraform\nThe most secure place to store secrets for connecting to a Terraform remote backend is typically outside of the Terraform configuration, and it's often done in a separate connection configuration or configuration file. This helps in keeping sensitive information, such as access keys or authentication tokens, separate from the main Terraform configuration."},{"timestamp":"1695722940.0","comment_id":"1017604","poster":"dn_mohammed_data","content":"Selected Answer: A\nA is correct","upvote_count":"1"},{"comment_id":"995359","content":"I would go with A\n\n(external) connection configuration could be several things like a JSON FILE (which is not secure at all) and also includes the environment variables.\n\nThe way that it was wrote, connection configuration, is to much a generic statement.","upvote_count":"1","poster":"Spandrop","timestamp":"1693503420.0"},{"comment_id":"990231","poster":"BaburTurk","upvote_count":"3","timestamp":"1692981660.0","content":"Selected Answer: C\nhe answer is C. Defined in a connection configuration outside of Terraform.\n\nSecrets should never be stored in the Terraform configuration file itself, as this file is often checked into version control. This means that anyone with access to the code could also access the secrets.\n\nThe best practice is to define secrets in a separate connection configuration file, which is then referenced by the Terraform configuration file. This connection configuration file can be stored in a secure location, such as a password manager or a secrets management service.\n\nStoring secrets in environment variables is also a good option, as environment variables are not stored in the Terraform configuration file. However, it is important to make sure that the environment variables are only accessible to trusted users.\n\nStoring secrets in the backend block within the Terraform configuration is not recommended, as this makes the secrets more accessible to unauthorized users."},{"comment_id":"982574","timestamp":"1692190680.0","poster":"Bere","upvote_count":"2","content":"Selected Answer: A\nAnswer: A. Defined in Environment variables\nStoring secrets in environment variables is a common best practice. Environment variables keep the secrets out of the code and state files.\n\nC. Defined in a connection configuration outside of Terraform: This method can be ambiguous. Depending on the mechanism, it might be secure, but without specifics, it's hard to definitively say it's the \"most secure.\""},{"poster":"SairamObili","comment_id":"981223","content":"you should authenticate outside of terraform first, example if you are running the pieplines giving access to specific account using an SPN in Azure and the next option would be environmental variables\noption C","upvote_count":"1","timestamp":"1692066000.0"},{"timestamp":"1688011620.0","comment_id":"937466","upvote_count":"2","poster":"[Removed]","content":"Selected Answer: C\nAns A is also a possible choice. However, the recommended will be using HashiCorp Vault.\nhttps://developer.hashicorp.com/well-architected-framework/security/security-sensitive-data"},{"upvote_count":"1","timestamp":"1687790760.0","content":"Correct Answer is C.\nA would be the second option if the question is asking to select TWO answers","comment_id":"934569","poster":"Jlee7"},{"upvote_count":"1","timestamp":"1686514680.0","comment_id":"920959","poster":"March2023","content":"Selected Answer: A\ngoing with A"},{"content":"Selected Answer: C\nAnswer: C","upvote_count":"2","comment_id":"905572","poster":"raf123123","timestamp":"1684911360.0"},{"content":"Selected Answer: C\nC is the most secure way","comment_id":"901139","poster":"sdm13168","timestamp":"1684409640.0","upvote_count":"2"},{"poster":"icecoolcat","upvote_count":"1","comment_id":"896436","timestamp":"1683959880.0","content":"It is C. A is the second most secure way."},{"timestamp":"1683627540.0","upvote_count":"2","content":"Selected Answer: C\nC is the correct option","comment_id":"892975","poster":"Ni33"},{"timestamp":"1683477780.0","content":"Selected Answer: C\nBy storing secrets outside of the Terraform configuration and providing them through a separate, secure channel, you can help ensure that sensitive data remains secure and is not accidentally exposed or shared with others.","poster":"kiran15789","upvote_count":"2","comment_id":"891562"},{"poster":"sylvergorilla","content":"Selected Answer: C\nStoring secrets for connecting to a Terraform remote backend in a password manager or a secure key-value store such as HashiCorp Vault is considered best practice. Avoid storing secrets in plain text files or environment variables.","upvote_count":"2","timestamp":"1681429920.0","comment_id":"869834"},{"content":"Selected Answer: D\nStoring secrets in environment variables is a common practice, but it may not always be the most secure option. Environment variables can be accessed by any application running on the same machine or system, which could potentially compromise the security of the secrets.\n\nThe best option for storing secrets for connecting to a Terraform remote backend is to use a dedicated password manager or secret management tool, such as HashiCorp Vault or AWS Secrets Manager. These tools provide additional security features such as encryption, access controls, and audit logs, and are specifically designed for securely storing and managing secrets.\n\nTherefore, the correct answer is D. None of the above options are the most secure place to store secrets for connecting to a Terraform remote backend.","poster":"Stanislav4907","timestamp":"1680876840.0","upvote_count":"1","comment_id":"863969"},{"comment_id":"858026","upvote_count":"2","timestamp":"1680360480.0","content":"C. I think most people got confused by the term connection configuration. It refers to the configuration settings that can be initiated in the cloud CLI outside Terraform, like aws CLI. It is definitely more secure than the environment variables which is available to everyone. The CLI needs login to be accessed and storing the secrets as config values in it adds a new layer of security.","poster":"Yazn"},{"upvote_count":"1","content":"Selected Answer: C\nC. Defined in a connection configuration outside of Terraform.\n\nIt is important to store secrets securely when connecting to a Terraform remote backend. A remote backend is a way to store Terraform state in a central location, which allows for collaboration and ensures consistency between runs. Terraform supports multiple remote backend types, including Amazon S3, Azure Blob Storage, and HashiCorp Consul.","comment_id":"857187","poster":"camps","timestamp":"1680272820.0"},{"upvote_count":"1","timestamp":"1679678640.0","content":"Selected Answer: A\nThe most secure place to store secrets for connecting to a Terraform remote backend among the given options is:\n\nA. Defined in Environment variables\n\nStoring secrets in environment variables is more secure than putting them directly in the Terraform configuration, as it prevents sensitive data from being accidentally committed to a version control system. Environment variables are not stored in the Terraform code, and they can be set securely at runtime, making it more difficult for unauthorized users to access the secrets.\n\nHowever, an even more secure solution would be to use a secrets management system like HashiCorp Vault or AWS Secrets Manager to store sensitive data. This allows you to centralize your secret management, enforce access control, and provide an audit trail for secret access.","comment_id":"849487","poster":"Nunyabiznes"},{"content":"ChatGPT said it is C","poster":"iulitruli","comment_id":"825236","upvote_count":"1","timestamp":"1677615420.0"},{"upvote_count":"2","content":"Selected Answer: C\nThe most secure place to store secrets for connecting to a Terraform remote backend is option C, defined in a connection configuration outside of Terraform.\n\nIt is generally not recommended to store secrets or sensitive information in the Terraform configuration or environment variables as they can be easily exposed or accidentally checked into version control.\n\nInstead, a more secure option is to store secrets in an external configuration file or secure credential storage service, and reference it in your Terraform configuration. This can include using tools like HashiCorp Vault or AWS Secrets Manager to manage and retrieve secrets at runtime.\n\nTherefore, option C, defined in a connection configuration outside of Terraform, is the most secure option for storing secrets for connecting to a Terraform remote backend.","timestamp":"1676535600.0","comment_id":"810428","poster":"crickmeister"},{"timestamp":"1675704960.0","content":"Selected Answer: A\nreally I dont understand the question. In AWS is not necessary to configure secrets for remote backend connection in backend block. In this case A is correct , set AWS_ACCESS and secret as Environment Variable a run terraform plan","comment_id":"800004","upvote_count":"1","poster":"agmesas"},{"content":"Storing secrets, such as access keys for a Terraform remote backend, in environment variables or within the Terraform configuration file can make them vulnerable to exposure through processes such as version control or system backups. A more secure option would be to use a secure secrets management solution, such as Hashicorp Vault, and retrieve the secrets dynamically at runtime. Another option would be to use a connection configuration outside of Terraform with proper access controls and encryption.","poster":"TechHero","upvote_count":"1","comment_id":"780265","timestamp":"1674063600.0"},{"content":"A or C ?","comment_id":"707531","poster":"Fatoch","upvote_count":"4","comments":[{"poster":"ARJUNKMUKUNDAN","timestamp":"1679468040.0","upvote_count":"1","content":"A will be the correct answer.","comment_id":"846750"}],"timestamp":"1667083380.0"},{"upvote_count":"2","timestamp":"1665193560.0","comment_id":"688977","poster":"yogishrb2020","content":"Connection configuration only for login details."},{"content":"Selected Answer: A\nA -- This is possible under workspace configuration on Terraform Cloud or enterprise\nB-- Including the crdential on the code is not secured\nC - Configuring it outside terraform on Terraform Cloud or enterprise. Not sure how to do that\nD. -- The question says Which of these options and A is the option","timestamp":"1663935060.0","comment_id":"677096","poster":"RVivek","upvote_count":"1"},{"comment_id":"663556","content":"Selected Answer: A\nConnection block is for provisioners.","timestamp":"1662636720.0","poster":"Chokies","upvote_count":"3"},{"comment_id":"642238","poster":"kcw6","content":"Selected Answer: C\nI think it is C because it is for \"Terraform remote backend\" and I am sure of how to apply the environment variables to it.","timestamp":"1659600060.0","upvote_count":"3"},{"timestamp":"1658845320.0","upvote_count":"1","comment_id":"637462","poster":"Aws2222","content":"D.\nhttps://www.terraform.io/language/state/sensitive-data"},{"timestamp":"1656435600.0","content":"Selected Answer: A\nD would be most secure by using 3rd party keyvault tools and .var calls from within code.\nHowever A is best option to pass an secret/password using the -var switch.","comment_id":"624100","poster":"Eltooth","upvote_count":"2"},{"content":"A is correct","poster":"Zam88","comment_id":"618679","timestamp":"1655640720.0","upvote_count":"3"}],"answer_description":"","answers_community":["C (50%)","A (48%)","2%"],"question_images":[],"answer_images":[],"answer":"C","url":"https://www.examtopics.com/discussions/hashicorp/view/76919-exam-terraform-associate-topic-1-question-76-discussion/","answer_ET":"C","topic":"1","question_text":"Which of these options is the most secure place to store secrets foe connecting to a Terraform remote backend?","exam_id":169,"unix_timestamp":1655640720,"question_id":322,"timestamp":"2022-06-19 14:12:00","choices":{"D":"None of above","C":"Defined in a connection configuration outside of Terraform","A":"Defined in Environment variables","B":"Inside the backend block within the Terraform configuration"}},{"id":"07PpO2bnCvuizIYYDFad","question_id":323,"unix_timestamp":1651233360,"timestamp":"2022-04-29 13:56:00","discussion":[{"upvote_count":"13","comment_id":"969250","comments":[{"poster":"ray320x","comment_id":"1221602","content":"With the removal of support for Artifactory in Terraform v1.3 and Git never being a supported backend, both options B and C would not work. However, Git has never been a supported backend for Terraform state files, making it the primary correct answer.\n\nThe correct answer is:\nC. Git","upvote_count":"8","timestamp":"1717074780.0"},{"poster":"Tyler2023","timestamp":"1698834780.0","comment_id":"1059583","upvote_count":"2","content":"Thanks for this, as I question why artifactory"}],"timestamp":"1690911240.0","content":"Selected Answer: B\nNote: We removed the artifactory, etcd, etcdv3, manta, and swift backends in Terraform v1.3. Information about their behavior in older versions is still available in the Terraform v1.2 documentation. For migration paths from these removed backends, refer to Upgrading to Terraform v1.3.\nhttps://developer.hashicorp.com/terraform/language/settings/backends/configuration#available-backends","poster":"Reet"},{"poster":"nez15","upvote_count":"8","content":"Selected Answer: C\nhttps://www.terraform.io/cdktf/concepts/remote-backends","timestamp":"1651233420.0","comment_id":"594427"},{"content":"Selected Answer: C\nIt is explicit that we do not store the state files in the Version Control Systems, so Git will be the answer.","upvote_count":"1","timestamp":"1741373340.0","poster":"KG8","comment_id":"1366355"},{"poster":"Aakashj","timestamp":"1736618880.0","upvote_count":"2","comment_id":"1339251","content":"Selected Answer: C\nGit is where we do not store state files"},{"upvote_count":"1","poster":"muammer32","content":"Selected Answer: C\nGit is the only option that does not work as a remote backend for storing Terraform state files. The other options (Amazon S3, Artifactory, and Terraform Cloud) are valid backends for remote state storage.","timestamp":"1734089580.0","comment_id":"1326099"},{"upvote_count":"1","timestamp":"1726135800.0","comment_id":"1282573","content":"Selected Answer: C\nThe backend that would not work for storing Terraform state files is C. Git. Git is not designed to handle the dynamic state file that Terraform requires for tracking infrastructure. Terraform needs backends that support locking and consistent state management, such as A. Amazon S3, B. Artifactory, or D. Terraform Cloud, which are suitable for remote state storage and ensure safe concurrent access to the state file.","poster":"Algol"},{"content":"B\nNote: We removed the artifactory, etcd, etcdv3, manta, and swift backends in Terraform v1.3. Information about their behavior in older versions is still available in the Terraform v1.2 documentation. For migration paths from these removed backends, refer to Upgrading to Terraform v1.3.","poster":"Absence379","comment_id":"1166327","timestamp":"1709629980.0","upvote_count":"1"},{"poster":"KLIERKO","comment_id":"1020702","upvote_count":"1","content":"Selected Answer: C\nThe anwer is C stop kliering","timestamp":"1695986340.0"},{"comment_id":"1020417","timestamp":"1695959640.0","content":"Selected Answer: C\nC. git is not supported","poster":"gofavad926","upvote_count":"1"},{"timestamp":"1692286860.0","poster":"Bere","comment_id":"983776","content":"Selected Answer: C\nSupported backends:\nhttps://developer.hashicorp.com/terraform/cdktf/concepts/remote-backends#supported-backends\n\nGit is not a supported backend for Terraform state. While it's possible to store state files in Git, doing so is not recommended because state files can contain sensitive information, and it's not designed for concurrent state management.","upvote_count":"3"},{"comment_id":"977477","timestamp":"1691660520.0","content":"Selected Answer: B\nhttps://developer.hashicorp.com/terraform/language/settings/backends/configuration#available-backends","poster":"Tlakmini","upvote_count":"2"},{"timestamp":"1690966320.0","poster":"sumnear","upvote_count":"1","comment_id":"969955","content":"Selected Answer: C\nC is the answer"},{"comments":[{"comment_id":"1188440","content":"git is not official support now, check the doc: https://developer.hashicorp.com/terraform/language/settings/backends/local","timestamp":"1712113080.0","poster":"kingfighers","upvote_count":"1"}],"upvote_count":"2","comment_id":"958764","poster":"wheelan","timestamp":"1689961380.0","content":"Selected Answer: B\nAnswer is B. I am using Git as a backend.\n\nArtifactory is no longer a valid backend.\nhttps://developer.hashicorp.com/terraform/language/settings/backends/configuration#available-backends"},{"content":"answer : B","comment_id":"870267","timestamp":"1681484340.0","upvote_count":"1","poster":"cedry87"},{"content":"Selected Answer: C\nC. Git.\n\nGit is not a suitable remote backend for Terraform. While it is possible to store Terraform state files in Git, it is not recommended because Git is not designed to manage state files and does not provide the necessary locking mechanisms to prevent concurrent access.","poster":"camps","comment_id":"857188","timestamp":"1680272880.0","upvote_count":"2"},{"comments":[{"comment_id":"985744","timestamp":"1692531540.0","upvote_count":"12","poster":"kapara","content":"I believe the administrator is aware of the solution. However, if they merely provide us with answers without encouraging exploration, individuals might resort to memorizing the responses. This could potentially lead to a situation where the company detects and takes action against the website for distributing exam dumps. It's essential for learning and growth that we understand concepts thoroughly through exploration rather than relying solely on pre-supplied answers."}],"content":"If Everyone knows, that the answer is C why didn't the admin fix it yet?","poster":"ArnaldoW","comment_id":"855464","timestamp":"1680163200.0","upvote_count":"7"},{"comment_id":"753491","timestamp":"1671727680.0","content":"Answer C - Git cannot be used as a backend","upvote_count":"1","poster":"vadeemkaa"},{"content":"Why is answer showing A as the correct answer. C is the answer for sure","poster":"Stiffler1","timestamp":"1671157980.0","upvote_count":"2","comment_id":"746711"},{"upvote_count":"1","content":"Answer is C - Git is not supported to do the remote backend operation","timestamp":"1670992920.0","poster":"vikramvlr","comment_id":"744717"},{"timestamp":"1667145960.0","comment_id":"707901","upvote_count":"1","content":"\"C\" for sure.","poster":"karapet"},{"comment_id":"680983","timestamp":"1664298780.0","content":"Selected Answer: C\nhttps://developer.hashicorp.com/terraform/cdktf/concepts/remote-backends","poster":"eduvar4","upvote_count":"2"},{"upvote_count":"2","poster":"Turak64","comments":[{"upvote_count":"2","timestamp":"1663942200.0","content":"Gitlab utilizes the generic http backend feature to provide state remote backend service","comment_id":"677230","poster":"RVivek"}],"content":"You can store a remote backend in Gitlab - https://docs.gitlab.com/ee/user/infrastructure/iac/terraform_state.html","timestamp":"1661519760.0","comment_id":"652233"},{"poster":"Eltooth","timestamp":"1656435780.0","content":"Selected Answer: C\nC is correct answer : Git\n\nhttps://www.terraform.io/cdktf/concepts/remote-backends","upvote_count":"4","comment_id":"624102"},{"timestamp":"1654777800.0","comment_id":"613982","upvote_count":"3","poster":"rfd","content":"Selected Answer: C\nC for sure, all other options are suitable for use as a TF backend"},{"content":"Selected Answer: C\nC is the Answer","poster":"bp339","upvote_count":"3","comment_id":"611529","timestamp":"1654366920.0"},{"comment_id":"596329","poster":"vitasac","content":"For sure C","timestamp":"1651575420.0","upvote_count":"3"},{"comment_id":"594426","upvote_count":"4","poster":"nez15","timestamp":"1651233360.0","content":"Answer is C. Git\n\nhttps://www.terraform.io/cdktf/concepts/remote-backends"}],"url":"https://www.examtopics.com/discussions/hashicorp/view/74893-exam-terraform-associate-topic-1-question-77-discussion/","answer_ET":"C","question_text":"Your DevOps team is currently using the local backend for your Terraform configuration. You would like to move to a remote backend to begin storing the state file in a central location.\nWhich of the following backends would not work?","isMC":true,"answers_community":["C (66%)","B (34%)"],"answer":"C","topic":"1","question_images":[],"choices":{"D":"Terraform Cloud","C":"Git","A":"Amazon S3","B":"Artifactory"},"answer_images":[],"answer_description":"","exam_id":169},{"id":"6NejOUDIjWEgEkvMl5bQ","discussion":[{"upvote_count":"7","comment_id":"624106","timestamp":"1687971840.0","poster":"Eltooth","content":"Selected Answer: D\nD is correct answer : local\n\n\"By default, Terraform implicitly uses a backend called local to store state as a local file on disk. Every other backend stores state in a remote service of some kind, which allows multiple people to access it. Accessing state in a remote service generally requires some kind of access credentials, since state data contains extremely sensitive information.\"\n\nhttps://www.terraform.io/language/settings/backends"},{"upvote_count":"1","timestamp":"1735431840.0","content":"Selected Answer: D\nThe answer is definitely D - Local and its filename is terraform.tfstate","poster":"Pavan6516","comment_id":"1333233"},{"content":"Selected Answer: D\nAnswer is : D","poster":"shehreen","upvote_count":"1","comment_id":"955126","timestamp":"1721289420.0"},{"content":"Answer is D- local","timestamp":"1711840320.0","upvote_count":"1","comment_id":"856278","poster":"Power123"},{"poster":"SilentMilli","timestamp":"1710202920.0","upvote_count":"3","content":"Selected Answer: D\nThe default backend used by the Terraform CLI is the local backend. This means that the state file is stored on the local file system in a file named \"terraform.tfstate\".","comment_id":"836619"},{"content":"Answer D. By default in Local backend","comment_id":"753492","upvote_count":"1","poster":"vadeemkaa","timestamp":"1703263740.0"},{"comment_id":"631345","content":"D. Local","upvote_count":"3","timestamp":"1689336480.0","poster":"Ahmad_Terraform"},{"content":"By default, Terraform uses a backend called local, which stores state as a local file on disk. You can also configure one of the built-in backends listed in the documentation sidebar.\n\nD correct","upvote_count":"4","comment_id":"618683","timestamp":"1687177080.0","poster":"Zam88"}],"topic":"1","answer":"D","answer_ET":"D","choices":{"C":"Remote","D":"Local","B":"Consul","A":"Terraform Cloud"},"question_id":324,"answer_images":[],"timestamp":"2022-06-19 14:18:00","answers_community":["D (100%)"],"exam_id":169,"url":"https://www.examtopics.com/discussions/hashicorp/view/76921-exam-terraform-associate-topic-1-question-78-discussion/","isMC":true,"question_images":[],"answer_description":"","unix_timestamp":1655641080,"question_text":"Which backend does the Terraform CLI use by default?"},{"id":"o1ptQ8adxbiFCBUroNkq","question_id":325,"question_images":[],"choices":{"A":"On disk in the /tmp directory","D":"They are not cached","B":"In memory","C":"On disk in the .terraform sub-directory"},"topic":"1","isMC":true,"answer":"C","answer_description":"","timestamp":"2022-06-12 11:54:00","answers_community":["C (100%)"],"answer_ET":"C","unix_timestamp":1655027640,"exam_id":169,"url":"https://www.examtopics.com/discussions/hashicorp/view/76740-exam-terraform-associate-topic-1-question-79-discussion/","answer_images":[],"discussion":[{"timestamp":"1672255740.0","comment_id":"624123","poster":"Eltooth","upvote_count":"12","content":"Selected Answer: C\nC is correct answer : hidden terraform directory\n\n\"A hidden .terraform directory, which Terraform uses to manage cached provider plugins and modules, record which workspace is currently active, and record the last known backend configuration in case it needs to migrate state on the next run. This directory is automatically managed by Terraform, and is created during initialization.\"\n\nhttps://www.terraform.io/cli/init"},{"content":"Selected Answer: C\non disk for sure for sure","comment_id":"615249","upvote_count":"5","comments":[{"comment_id":"628053","content":"On disk in the .terraform sub-directory - just to clarify.","poster":"Eltooth","upvote_count":"1","timestamp":"1673035920.0"}],"timestamp":"1670846040.0","poster":"amrith501"},{"upvote_count":"1","timestamp":"1721478720.0","comment_id":"1127326","poster":"shefulacertificari","content":"Answer - C. It's stored in the .terraform directory."},{"timestamp":"1699532400.0","upvote_count":"1","poster":"Ni33","comment_id":"892981","content":"Selected Answer: C\nC is the correct option"},{"content":"Answer is C","upvote_count":"1","poster":"Power123","comment_id":"856279","timestamp":"1696021980.0"},{"comment_id":"753493","content":"Answer C. On disk in the .terraform sub-directory","poster":"vadeemkaa","timestamp":"1687445400.0","upvote_count":"1"},{"upvote_count":"1","content":"Selected Answer: C\nhttps://developer.hashicorp.com/terraform/language/modules/sources","poster":"eduvar4","timestamp":"1679936820.0","comment_id":"680973"},{"poster":"Ahmad_Terraform","comment_id":"631347","content":"C. On disk in the .terraform sub-directory","timestamp":"1673705340.0","upvote_count":"1"}],"question_text":"When you initialize Terraform, where does it cache modules from the public Terraform Module Registry?"}],"exam":{"numberOfQuestions":347,"provider":"Hashicorp","name":"Terraform Associate","lastUpdated":"12 Apr 2025","isImplemented":true,"isBeta":false,"id":169,"isMCOnly":false},"currentPage":65},"__N_SSP":true}