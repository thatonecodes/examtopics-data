{"pageProps":{"questions":[{"id":"lJUNmKMClVgeUwPM4ETi","question_text":"How would you reference the \"name\" value of the second instance of this fictitious resource?\n//IMG//","question_id":301,"exam_id":169,"choices":{"A":"element(aws_instance.web, 2)","D":"aws_instance.web[2].name","E":"aws_instance.web.*.name","B":"aws_instance.web[1].name","C":"aws_instance.web[1]"},"answers_community":["B (97%)","2%"],"topic":"1","url":"https://www.examtopics.com/discussions/hashicorp/view/74961-exam-terraform-associate-topic-1-question-57-discussion/","question_images":["https://www.examtopics.com/assets/media/exam-media/04279/0003200001.png"],"unix_timestamp":1651305360,"answer_ET":"B","answer_images":[],"isMC":true,"timestamp":"2022-04-30 09:56:00","answer_description":"","discussion":[{"content":"Dear ALL, tested in Lab and Answer is : B","upvote_count":"28","comment_id":"613607","timestamp":"1654745220.0","poster":"franksoul"},{"timestamp":"1652825640.0","poster":"bigboi23","content":"Selected Answer: B\nB!!!!!!!!","upvote_count":"15","comment_id":"603056"},{"timestamp":"1722871320.0","upvote_count":"1","comment_id":"1261098","poster":"nmnm22","content":"why is it index number AND name, though? i would have thought that specifying the index number is enough"},{"content":"To reference the \"name\" value of the second instance of the fictitious resource \"aws_instance\" named \"server\", you can use the element index notation in Terraform. The element index notation allows you to access elements in a list or collection by their index.\n\nGiven that the index in Terraform starts from 0, the second instance has an index of 1. Therefore, to reference the \"name\" value of the second instance = B","timestamp":"1714449180.0","upvote_count":"4","poster":"nhaastrup","comment_id":"1204308"},{"poster":"kingfighers","upvote_count":"2","timestamp":"1712061540.0","content":"A. element(aws_instance.web, 2)\nis correct if we want to access the 3rd one, but there is no \"the third one\"","comment_id":"1188039"},{"content":"Selected Answer: B\nbecause the index starts from 0 so second instance name will be at 1","timestamp":"1703839560.0","poster":"samimshaikh","comment_id":"1108499","upvote_count":"4"},{"content":"Selected Answer: B\nB for sure","timestamp":"1695958260.0","comment_id":"1020389","upvote_count":"1","poster":"gofavad926"},{"timestamp":"1693064460.0","upvote_count":"3","poster":"debabrata6983","content":"Selected Answer: B\nThis is the very basics of terraform resource referencing","comment_id":"990925"},{"content":"Selected Answer: B\nExample:\nresource \"aws_instance\" \"web\" {\n count = 2\n name = \"terraform-${count.index}\"\n}\n\noutput \"second_instance_name\" {\n value = aws_instance.web[1].name\n}","timestamp":"1691410440.0","comment_id":"974678","upvote_count":"8","poster":"Bere"},{"upvote_count":"5","content":"The answer is B, aws_instance.web[1].name","comment_id":"879042","timestamp":"1682313300.0","poster":"Bluemoon22"},{"upvote_count":"2","content":"B is correct","poster":"Power123","timestamp":"1680204060.0","comment_id":"856135"},{"comment_id":"854504","poster":"thor7","upvote_count":"1","content":"Selected Answer: B\nB is a correct answer, checked.","timestamp":"1680098940.0"},{"upvote_count":"9","timestamp":"1679350920.0","content":"Selected Answer: B\nThe count.index starts from 0. Therefore, the second instance would have an index of 1. In that case, the correct answer would be B. aws_instance.web[1].name.","comment_id":"845294","poster":"Nunyabiznes"},{"poster":"Ell89","content":"Selected Answer: B\nits B - people who answer incorrectly with such conviction and belief are dangerous.","comment_id":"836750","timestamp":"1678602180.0","upvote_count":"4"},{"upvote_count":"1","timestamp":"1673193780.0","content":"Selected Answer: B\nTried and tested, definitely B","comment_id":"769610","poster":"oab720"},{"upvote_count":"1","timestamp":"1672192740.0","comment_id":"759264","poster":"Bebins","content":"The output of A won't return the name of the 2nd instance. So here the answer is \"B\""},{"poster":"adouban","content":"Selected Answer: B\nB is the correct answer","comment_id":"739830","timestamp":"1670565600.0","upvote_count":"1"},{"poster":"asudhin","comment_id":"685214","timestamp":"1664773680.0","upvote_count":"1","content":"Selected Answer: B\nIt is B"},{"content":"Selected Answer: B\nB is the right fromat","upvote_count":"1","poster":"RVivek","timestamp":"1664371200.0","comment_id":"681736"},{"timestamp":"1664300520.0","upvote_count":"1","poster":"legendary7","comment_id":"681015","content":"B is the correct answer no doubt."},{"content":"Selected Answer: B\nB, aws_instance.web[1].name","timestamp":"1660107780.0","upvote_count":"2","poster":"kopper2019","comment_id":"644786"},{"comment_id":"642209","poster":"kcw6","content":"B is correct.\n\n\nresource \"aws_iam_user\" \"lb\" {\n name = \"terraform-${count.index}\" \n count = 2\n path = \"/system/\"\n}\n\noutput \"testing\" {\n value = aws_iam_user.lb[1].name\n}\n===== output ======\nPlan: 2 to add, 0 to change, 0 to destroy.\n\nChanges to Outputs:\n + testing = \"terraform-1\"","upvote_count":"7","timestamp":"1659596820.0"},{"comment_id":"627576","content":"Selected Answer: B\nB - aws_instance.web[1].name !!!\n\nIndex starts at 0 so the second instance would be 1 - the link below confirms this:\n\nhttps://www.terraform.io/language/meta-arguments/count#referring-to-instances","timestamp":"1657047420.0","upvote_count":"4","poster":"Daniel2020"},{"poster":"Eltooth","upvote_count":"1","timestamp":"1656392940.0","content":"Selected Answer: B\nB is correct answer.","comment_id":"623742"},{"timestamp":"1654664340.0","content":"B from doc","poster":"stalk98","upvote_count":"2","comment_id":"613073"},{"timestamp":"1654235820.0","comment_id":"610947","comments":[{"timestamp":"1655617080.0","content":"Option A is wrong because the element (list, index) is zero-based, so if at all we should use this function, the index ought to be 1, not 2 \n\nhttps://www.terraform.io/language/functions/element","poster":"CHRIS12722222","comment_id":"618536","upvote_count":"3"},{"upvote_count":"3","poster":"rfd","content":"Don't understand why you are suggesting A. Surely there will be two ec2 instances created here, you can just get the name property for those instances using B. \nThe code terraform-${count.index} has no bearing on execution of the loop or anything to do with list's indexes.","comment_id":"619634","timestamp":"1655792820.0"}],"upvote_count":"1","content":"Selected Answer: A\nThey are two values of the name. \nname = terraform-1\nname = terraform-2\n\nThe index is not assigned to the key (name) but to the value (terraform-$(count.index). Remember this is not a list assigned to a variable, don't reference it as a list.\n\nSo you can't call the resource by specifying the index directly onto the key like name[1] simply because the the index is assigned to a part of the value which is a string not a list.\n\nThe only way I think is to use the element function to call the resource after which specify the index number as an argument to the function - element(resource, index)","poster":"cytron"},{"comment_id":"602785","upvote_count":"4","content":"Answer is option B .Index starts at 0 , so name[1] is equivalent to second resource . SO this should be the answer","poster":"Sathya22","timestamp":"1652762520.0"},{"comment_id":"601268","poster":"rogerxavier","timestamp":"1652461260.0","content":"It is correct, really is letter A, following the offcial answer above:\n\nelement(list, index) - Returns a single element from a list at the given index. If the index is greater than the number of elements, this function will wrap using a standard mod algorithm. This function only works on flat lists. Examples:\n\nelement(aws_subnet.foo.*.id, count.index)\nelement(var.list_of_strings, 2)","upvote_count":"2"},{"poster":"JoG1221","timestamp":"1651929420.0","content":"B..it is","comment_id":"598123","upvote_count":"5"},{"timestamp":"1651824780.0","content":"it must be B.","upvote_count":"4","poster":"temp111","comment_id":"597635"},{"content":"B for sure","timestamp":"1651730340.0","poster":"Ipergorta","upvote_count":"5","comment_id":"597139"},{"comment_id":"596324","timestamp":"1651574820.0","upvote_count":"1","comments":[{"comments":[{"comment_id":"599417","upvote_count":"2","content":"Yes your're right","poster":"vitasac","timestamp":"1652162520.0"}],"timestamp":"1651751460.0","comment_id":"597285","upvote_count":"1","poster":"smyndlo","content":"Index start with [0], so the second instance will be aws_instance.web[1].\nAnswer is B"}],"poster":"vitasac","content":"Selected Answer: D\nD for sure"},{"content":"I vote for B also. There is no reference to \"name\" in A","poster":"Jedi","upvote_count":"4","comment_id":"595737","timestamp":"1651441800.0"},{"upvote_count":"2","poster":"Ipergorta","comment_id":"594912","timestamp":"1651305360.0","content":"Why no B?"}],"answer":"B"},{"id":"bmafIPPm4WimXjAMFJEu","unix_timestamp":1655012700,"answers_community":["D (48%)","B (44%)","6%"],"question_text":"A Terraform provider is not responsible for:","answer":"D","choices":{"A":"Understanding API interactions with some service","C":"Exposing resources and data sources based on an API","B":"Provisioning infrastructure in multiple clouds","D":"Managing actions to take based on resource differences"},"exam_id":169,"discussion":[{"comment_id":"615166","timestamp":"1655012700.0","upvote_count":"21","poster":"amrith501","content":"Selected Answer: B\nThe answer should be B\nA terraform can only provision resouce in one Cloud not multiple cloud","comments":[{"content":"No, it can provision in multiple clouds:\nprovider \"aws\" {\n region = \"us-west-2\"\n}\n\nprovider \"azurerm\" {\n features {}\n}\n\nresource \"aws_instance\" \"example\" {\n ami = \"ami-0c55b159cbfafe1f0\"\n instance_type = \"t2.micro\"\n}\n\nresource \"azurerm_resource_group\" \"example\" {\n name = \"example\"\n location = \"East US\"\n}","comment_id":"861600","timestamp":"1680651180.0","upvote_count":"7","poster":"Nunyabiznes","comments":[{"timestamp":"1683837660.0","content":"those are 2 providers, each provider can only deploy resources in one cloud.. several providers, in multicloud.. so \"A Terraform provider\" can only provision in one Cloud... B!","comment_id":"895405","poster":"jerikoo","upvote_count":"27"}]}]},{"content":"Selected Answer: D\nI'm not a native English speaker, but I think that in the context of the question, \"A Terraform provider\" is referring to the concept of providers in Terraform as a whole, not a specific individual provider.\n\nI would go with D\n\n\"Terraform providers are a plugin for Terraform that makes a collection of related resources available. A provider plugin is responsible for understanding API interactions and exposing resources. Providers generally are IaaS (like AWS, GCP, Microsoft Azure, OpenStack), PaaS (like Heroku), or SaaS services (like Terraform Cloud, DNSimple, CloudFlare).\n\nHowever, the management of actions based on resource differences (i.e., what to create, update, or delete) is handled by Terraform's core engine, not by the providers. The providers simply inform Terraform's core about what resources they can manage and how to manage them.\"","upvote_count":"10","comment_id":"1098241","timestamp":"1702737120.0","poster":"Spandrop"},{"poster":"sultaz","content":"Selected Answer: B\nWhile Terraform itself supports managing infrastructure across multiple clouds, individual providers are designed to focus on a single API or domain (e.g., AWS, Azure). They do not inherently provision infrastructure across multiple clouds; this is achieved by combining multiple providers in a Terraform configuration.","timestamp":"1740322920.0","comment_id":"1360528","upvote_count":"1"},{"comment_id":"1349626","upvote_count":"1","content":"Selected Answer: B\nAnswer B\n\nPoorly worded question, but a single Terraform provider is designed to work with only one specific cloud platform. For example, you can not ask AWS to create an infrastructure on Azure and vice versa.","timestamp":"1738347060.0","poster":"YesPlease"},{"poster":"d759fb3","comment_id":"1347974","timestamp":"1738076880.0","upvote_count":"1","content":"Selected Answer: B\nIt should be B. Multiple Clouds (NOT a Provider Responsibility):\n\n# Use multiple providers for multiple clouds\nprovider \"aws\" {\n region = \"us-west-2\"\n}\nprovider \"azurerm\" {\n features {}\n}\n\nManaging Resource Differences (IS a Provider Responsibility):\n# Provider handles:\n# - Detecting changes\n# - Planning updates\n# - Applying changes\n\nresource \"aws_instance\" \"example\" {\n instance_type = \"t2.micro\" # Provider detects if this changes\n tags = {\n Name = \"example\" # Provider manages tag updates\n }\n}"},{"content":"Selected Answer: D\nTerraform itself is responsible for comparing the desired configuration (in .tf files) with the current state (in the .tfstate file) and determining the appropriate actions (create, update, delete) to achieve the desired state. Providers execute those actions once Terraform decides what needs to be done, but they are not responsible for managing those actions based on resource differences. Terraform itself handles the planning and state comparison logic. Therefore, this is the correct answer as something a provider is not responsible for.","timestamp":"1737206100.0","poster":"cerepx","upvote_count":"1","comment_id":"1342520"},{"timestamp":"1735583820.0","upvote_count":"1","poster":"rraabbbind","content":"Selected Answer: B\nA terraform can only provision resouce in one Cloud not multiple cloud","comment_id":"1334332"},{"poster":"suri_surendra","content":"Selected Answer: D\nThe correct answer is: D. Managing actions to take based on resource differences\n\nExplanation:\nIn Terraform, providers are responsible for interacting with APIs, provisioning resources, and exposing resources and data sources. However, the task of managing actions based on resource differences (such as determining what actions to take when the desired state differs from the current state) is handled by Terraform itself during the plan and apply phases, not by the provider.","upvote_count":"2","timestamp":"1735467360.0","comment_id":"1333451"},{"content":"Selected Answer: D\nThe correct answer is D. Managing actions to take based on resource differences.\nHowever, managing actions to take based on resource differences is the responsibility of Terraform Core, not the provider. Terraform Core is responsible for:\n\n- Determining the desired state of the infrastructure based on the configuration\n- Comparing the desired state to the current state of the infrastructure\n- Determining the actions needed to reconcile any differences between the desired and current states\n\nSo, while providers are responsible for interacting with external services and managing resources, Terraform Core is responsible for managing the overall provisioning process and determining the actions needed to achieve the desired state.","timestamp":"1735377240.0","upvote_count":"2","comment_id":"1332884","poster":"pyxgzm"},{"upvote_count":"2","comment_id":"1332340","poster":"Greysi","content":"Selected Answer: D\nA resource provider may provision to multiple clouds. you can write your own resource provider which covers multiple clouds.\nIt's not part of resource provider to managing actions based on differences between existing resource and configuration. Resource provider will only execute actions. Managing actions and triggering resource provider to execute this action is part of terraform itself.","timestamp":"1735293540.0"},{"upvote_count":"1","poster":"shant_haghverdian","content":"Selected Answer: B\neach provider is dedicated to its related infrastructure, you cant provision azure resources using was provider","timestamp":"1734360000.0","comment_id":"1327429"},{"comment_id":"1326090","upvote_count":"1","content":"Selected Answer: D\nThe provider's role is focused on API interactions, provisioning infrastructure, and exposing resources. Managing actions based on resource differences is handled by Terraform’s core logic during the terraform plan and terraform apply processes, not by the provider itself. Thus, D is the correct answer.","poster":"muammer32","timestamp":"1734087960.0"},{"upvote_count":"1","timestamp":"1729257660.0","comment_id":"1299690","poster":"khvan84","content":"B. Provisioning infrastructure in multiple clouds: Providers enable provisioning across different cloud platforms, so this is also a responsibility of the provider ￼."},{"comment_id":"1284032","content":"The answer is B\nTricky question a provider can only provision resources in one cloud platform, you will need multiple providers to provision in multiple cloud.","upvote_count":"1","timestamp":"1726393620.0","poster":"a45e482"},{"poster":"Algol","timestamp":"1726134720.0","content":"Answer is B:\nprovisioning infrastructure in multiple clouds is not the direct responsibility of a single provider; each provider typically manages one cloud or service platform.","upvote_count":"1","comment_id":"1282566"},{"content":"Selected Answer: B\none provider will deploy to a single cloud provider not to many.","timestamp":"1724138820.0","poster":"bora4motion","comment_id":"1269251","upvote_count":"1"},{"comment_id":"1266159","content":"Selected Answer: B\nThe answer should be B","upvote_count":"1","timestamp":"1723691580.0","poster":"JHkdigital"},{"poster":"Molly1994","content":"the answer is definitely D","upvote_count":"1","comment_id":"1224740","timestamp":"1717594140.0"},{"poster":"chaoscreater","timestamp":"1716720240.0","content":"Selected Answer: D\nAgree with D","comment_id":"1218931","upvote_count":"2"},{"comments":[{"upvote_count":"1","timestamp":"1720642440.0","content":"yes me too think in same way.. I vote for D","comment_id":"1245728","poster":"090200f"}],"timestamp":"1711575300.0","content":"D is correct.\nI don't know so many votes for B which is pretty basic that terraform can handle multiple providers not providers themselves","upvote_count":"2","comment_id":"1184399","poster":"vibzr2023"},{"upvote_count":"7","timestamp":"1706382840.0","poster":"Alandt","comment_id":"1133610","content":"Selected Answer: D\nD: the management of actions based on resource differences is handled by Terraform itself, not the provider. The provider simply informs Terraform about the current state of the resource and how to create, update, or delete it."},{"poster":"samimshaikh","timestamp":"1703839800.0","comment_id":"1108505","upvote_count":"7","content":"Selected Answer: D\nD. \n\nManaging actions to take based on resource differences: This is not a primary responsibility of a Terraform provider. Instead, Terraform itself handles this by comparing the desired state (defined in Terraform configurations) with the current state of the infrastructure and determining the necessary actions to achieve the desired state"},{"upvote_count":"5","poster":"TigerInTheCloud","content":"Selected Answer: D\nB: you can write a provider to work on multiple clouds.\nD: is terraform core's work.","comment_id":"1100049","timestamp":"1702934760.0"},{"upvote_count":"1","poster":"ghostGuiggs","comment_id":"1060388","timestamp":"1698913320.0","content":"Selected Answer: B\nB is the answer"},{"poster":"ealpuche","content":"D. Managing actions to take based on resource differences.\n\nTerraform providers primarily focus on understanding API interactions with specific services, provisioning infrastructure, exposing resources and data sources based on an API, and maintaining the state of resources. However, managing actions based on resource differences is typically handled by Terraform's core functionality, specifically the terraform plan and terraform apply commands, which determine the changes needed to achieve the desired state and then apply those changes based on the execution plan. Providers interact with the target services but do not manage the core Terraform plan and apply process.","timestamp":"1697501460.0","upvote_count":"3","comment_id":"1045399"},{"content":"Selected Answer: B\nGPT answer: B. Provisioning infrastructure in multiple clouds\n\nTerraform providers are responsible for understanding API interactions with some service, exposing resources and data sources based on an API, and managing actions to take based on resource differences. However, Terraform providers are not responsible for provisioning infrastructure in multiple clouds. This is because Terraform is a cloud-agnostic tool, and each cloud provider has its own unique set of APIs and resources.","poster":"gofavad926","comment_id":"1020393","timestamp":"1695958380.0","upvote_count":"2"},{"poster":"aanataliya","comment_id":"1001350","content":"Selected Answer: B\nTo some people confusion is between B and D. Let me try to clarify. \n1. One who rejects B because of one specific provider \"megaport\". Technically, multi cloud deployment feature is provided by megaport and not by a provider. Quesition is not talking about specific provider. A provider(single provider) cannot mean \"megaport\" provider. it supposed to be true for any other single provider. so B cannot be rejected.\nRef: https://registry.terraform.io/providers/megaport/megaport/latest/docs/guides/example_multicloud_aws_azure\n2. D cannot be answer. As per terraform, providers are plugins. Terraform make a plan for desired state and communicate with plugin(provider) to make change. so it is responsibility of provider.\nRef: https://developer.hashicorp.com/terraform/plugin/how-terraform-works","timestamp":"1694076660.0","upvote_count":"2"},{"timestamp":"1692978840.0","content":"Selected Answer: B\nA Terraform provider is responsible for interacting with a specific API or service to manage resources and infrastructure. It abstracts the API interactions and exposes resources and data sources to be managed through Terraform configurations. It also handles managing actions based on resource differences (such as creating, updating, or deleting resources). However, it is not responsible for provisioning infrastructure in multiple clouds. This is usually handled by different providers, each tailored to a specific cloud or service.","comment_id":"990189","poster":"BaburTurk","upvote_count":"2"},{"comment_id":"972796","timestamp":"1691222940.0","content":"B. Provisioning infrastructure in multiple clouds.","upvote_count":"2","poster":"modarov"},{"poster":"LunarPhobia","timestamp":"1690315320.0","content":"B because a Terraform provider is for single cloud. You'll need several providers to have multiple clouds. Also a Terraform provider is much more than just for cloud use","upvote_count":"1","comment_id":"963089"},{"content":"Selected Answer: D\nA Terraform provider is responsible for understanding API interactions with a specific service, provisioning infrastructure in a specific cloud, and exposing resources and data sources based on an API. However, managing actions to take based on resource differences is the responsibility of Terraform's core engine, not the provider itself. The core engine compares the desired state declared in the Terraform configuration with the current state stored in the Terraform state file and determines the actions needed to achieve the desired state, such as creating, updating, or deleting resources.\n\nSo, the answer is D. Managing actions to take based on resource differences.","poster":"saskuachmukaz","timestamp":"1688878500.0","upvote_count":"4","comment_id":"946886"},{"timestamp":"1686851640.0","poster":"Foram31","content":"D as this is not provider's responsibility","comment_id":"924455","upvote_count":"1"},{"timestamp":"1684000260.0","comment_id":"896963","content":"Option B seems to defeat the main objective of Terraform's existence which is cloud agnostic. Answer should be D","poster":"JJ4u","upvote_count":"3"},{"poster":"Schillman","upvote_count":"7","content":"Selected Answer: C\nTerraform providers are responsible for understanding API interactions with a service, exposing resources and data sources based on that service's API, and managing actions to take based on resource differences. However, they are not responsible for provisioning infrastructure in multiple clouds. That is the role of Terraform itself, which is the infrastructure-as-code tool used to manage infrastructure across multiple cloud platforms. Thank you for bringing this to my attention.","timestamp":"1683718860.0","comment_id":"893867"},{"poster":"Ni33","timestamp":"1683594480.0","comment_id":"892600","upvote_count":"1","content":"Selected Answer: D\nD is the correct answer. Terraform provider block download and install required provider libraries. Resource block and its configuration help identify differences in the resource states."},{"content":"Selected Answer: D\nBetween B and D, terraform is cloud agnostic. So should be D.","upvote_count":"1","comment_id":"887466","timestamp":"1683036300.0","poster":"Radeeka","comments":[{"poster":"kylehodgetts","content":"The question states \"terraform provider\" not simply \"terraform\". Answer is B","timestamp":"1683702900.0","upvote_count":"3","comments":[{"timestamp":"1683837780.0","upvote_count":"2","poster":"jerikoo","content":"indeed it says \"A terraform provider\" and one Terraform provider can only provide in one Cloud, several providers in several clouds/multicloud,\n Answer is B.","comment_id":"895406"}],"comment_id":"893700"}]},{"timestamp":"1681415280.0","upvote_count":"3","content":"Selected Answer: B\nAnswer B is the correct answer because Terraform providers are responsible for managing resources within a single cloud provider. Using Terraform, you can provision infrastructure such as virtual machines, storage, and networking components within a single cloud provider. However, it is not responsible for provisioning infrastructure in multiple clouds. Instead, you would need to use multiple Terraform configurations, one for each cloud provider.","comment_id":"869721","poster":"sylvergorilla"},{"upvote_count":"1","poster":"camps","content":"Selected Answer: B\nB. Provisioning infrastructure in multiple clouds.\n\nA Terraform provider is a plugin that understands API interactions with a particular service and exposes resources and data sources based on that API. It is responsible for managing the lifecycle of those resources, including creating, modifying, and deleting them.","timestamp":"1680273300.0","comment_id":"857202"},{"upvote_count":"2","comment_id":"845295","timestamp":"1679351040.0","poster":"Nunyabiznes","content":"Selected Answer: B\nB. Provisioning infrastructure in multiple clouds.\n\nA Terraform provider is responsible for understanding API interactions with a particular service, exposing resources and data sources based on an API, and managing actions to take based on resource differences. However, it is not responsible for provisioning infrastructure in multiple clouds."},{"upvote_count":"1","content":"Selected Answer: D\nTerraform is Cloud-agnostic. I think D is the answer","timestamp":"1678974420.0","comment_id":"841002","poster":"Ahmed_Elmelegy"},{"upvote_count":"1","timestamp":"1676466960.0","poster":"sahara99","content":"Selected Answer: D\nYou can specify multiple providers and provision multiple resources at the same time. My understanding is that individuals are responsible for managing the actions and not terraform, however the question is not very clear!","comment_id":"809566"},{"timestamp":"1675702200.0","content":"with a Terraform provider (without 's') you can only manage a single cloud (in different regions..) but deploying terraform configuration files in multiple clouds, you must set one provider by deployment. Definitely yo can not manage multiple cloud from the same configuration file (which has set a only one provider)","upvote_count":"1","comment_id":"799974","poster":"agmesas"},{"comment_id":"780445","upvote_count":"1","poster":"Only5","content":"Answer should be D, \nwe can use megaport for multi cloud\nhttps://registry.terraform.io/providers/megaport/megaport/latest/docs/guides/example_multicloud_aws_azure","timestamp":"1674077940.0"},{"upvote_count":"1","content":"Selected Answer: D\nbased on my understanding of this question, I am responsible of Managing actions to change some resources, but Terraform Provider is responsible of prov. inf. by using the API.\n\nMy answer is D, but to be fair, the question is not clear enough to be in the exam...","timestamp":"1671998340.0","comment_id":"755977","poster":"AShahine21"},{"content":"Selected Answer: B\n\"A\" Terraform provider is responsible for \"A\" Cloud.\n\"Multiple\" Terraform providers can be responsible for \"Multiple\" Clouds.","poster":"FarziWaliMarzi","comments":[{"content":"You are the only one that got this right on this page - thank you.","upvote_count":"1","timestamp":"1681146960.0","comment_id":"866468","poster":"KingsGambit"}],"upvote_count":"2","timestamp":"1671759120.0","comment_id":"753792"},{"timestamp":"1671461100.0","upvote_count":"1","poster":"chimons","content":"Selected Answer: B\nA Terraform provider is responsible for understanding API interactions with some service and exposing resources and data sources based on that API. It is also responsible for managing actions to take based on resource differences.\n\nTherefore, the correct answer is option B, provisioning infrastructure in multiple clouds.\n\nOption A, understanding API interactions with some service, is incorrect because a Terraform provider is responsible for this.\n\nOption C, exposing resources and data sources based on an API, is incorrect because a Terraform provider is responsible for this.\n\nOption D, managing actions to take based on resource differences, is incorrect because a Terraform provider is responsible for this.","comment_id":"749929"},{"timestamp":"1669740720.0","upvote_count":"1","content":"Selected Answer: D\nMulti provider option is available, so it should be D","poster":"sejar","comment_id":"730637"},{"content":"Selected Answer: D\nIt is D","timestamp":"1669049760.0","upvote_count":"1","poster":"danieeerll","comment_id":"723765"},{"comment_id":"700846","poster":"maddy90","upvote_count":"1","timestamp":"1666354860.0","content":"answer is D"},{"content":"Answer is C","timestamp":"1666338840.0","upvote_count":"1","comment_id":"700636","poster":"john_doe_1999"},{"timestamp":"1664917980.0","comment_id":"686434","content":"ya D is correct","upvote_count":"2","poster":"Bobby1977"},{"poster":"tf_user","timestamp":"1663274460.0","content":"Selected Answer: D\nD is the correct","comment_id":"670298","upvote_count":"3"},{"poster":"Fati_2022","comment_id":"665734","upvote_count":"3","timestamp":"1662856860.0","content":"\"The fact that Terraform is not tied to a specific infrastructure or cloud provider makes it a powerful tool in multi-provider deployments. You are able to manage all resources using the same set of configuration files, sharing variables or defining dependencies between resources across providers\""},{"content":"D is the correct answer","comment_id":"665731","upvote_count":"4","timestamp":"1662856620.0","poster":"Fati_2022"},{"upvote_count":"3","comment_id":"663553","content":"D is right answer its says the provider is not responsible for . \n\nProvider is responsible for below Providers\nProviders are a logical abstraction of an upstream API. They are responsible for understanding API interactions and exposing resources. and also multiple clouds","timestamp":"1662636600.0","poster":"GopinathM"},{"poster":"zyxphreez","content":"Selected Answer: A\nIm not completely sure if the answer is A or D, the question is about the provider IS NOT responsible...... and definitely the provider IS responsible to provision Infrastructure in multiple cloud providers.\n\n\"Terraform uses providers to provision resources, which describe one or more infrastructure objects like virtual networks and compute instances. Each provider on the Terraform Registry has documentation detailing available resources and their configuration options.\"\nhttps://www.terraform.io/cdktf/concepts/providers","upvote_count":"2","comment_id":"650988","timestamp":"1661289780.0"},{"comment_id":"628040","timestamp":"1657130040.0","content":"Selected Answer: B\nB is correct answer.","poster":"Eltooth","upvote_count":"1"},{"comment_id":"626109","content":"Selected Answer: B\nB is right","poster":"saryu","timestamp":"1656757920.0","upvote_count":"2"},{"poster":"Zam88","timestamp":"1655677440.0","comment_id":"618869","content":"answer is B","upvote_count":"10"},{"upvote_count":"2","comment_id":"615188","timestamp":"1655018160.0","content":"Selected Answer: B\nhttps://www.terraform.io/language/providers","poster":"bicycle"}],"isMC":true,"answer_images":[],"question_images":[],"question_id":302,"url":"https://www.examtopics.com/discussions/hashicorp/view/76736-exam-terraform-associate-topic-1-question-58-discussion/","topic":"1","answer_description":"","answer_ET":"D","timestamp":"2022-06-12 07:45:00"},{"id":"Tlo6lYand1ukO14IDtbd","question_text":"Terraform provisioners can be added to any resource block.","isMC":true,"answer_ET":"A","answer":"A","question_images":[],"answer_description":"","answers_community":["A (85%)","B (15%)"],"url":"https://www.examtopics.com/discussions/hashicorp/view/75723-exam-terraform-associate-topic-1-question-59-discussion/","answer_images":[],"discussion":[{"timestamp":"1678282440.0","poster":"GopinathM","content":"A is correct \nhttps://www.terraform.io/language/resources/provisioners/syntax\nresource \"aws_instance\" \"web\" {\n # ...\n\n provisioner \"local-exec\" {\n command = \"echo The server's IP address is ${self.private_ip}\"\n }\n}","comment_id":"663559","upvote_count":"16"},{"upvote_count":"10","content":"Selected Answer: A\nthe key of this question is \"could you use a local-exec provisioner in any type of resource?\", yes, because the execution of this provisioner is on my local so we couldnuse local-exec in any resource type because it is independent of the type of resource. Answer is A \"true\"","timestamp":"1691334240.0","comment_id":"799982","poster":"agmesas"},{"comment_id":"1333453","timestamp":"1735467480.0","content":"Selected Answer: B\nThe correct answer is: B. False\n\nExplanation:\nTerraform provisioners are not automatically supported in all resource blocks. They are designed to be used with specific types of resources, primarily those that involve remote execution or configuration (such as virtual machines or instances). However, not every resource type is compatible with provisioners.","upvote_count":"1","poster":"suri_surendra"},{"content":"Selected Answer: A\nA. True\n\nTerraform provisioners can be added to any resource block. Provisioners are used to execute scripts or commands on a local or remote machine as part of resource creation or destruction. They are defined within a resource block and allow you to perform actions such as initializing, configuring, or setting up resources after they have been created.","comment_id":"1108506","timestamp":"1719643860.0","poster":"samimshaikh","upvote_count":"2"},{"comment_id":"1018517","upvote_count":"3","timestamp":"1711526700.0","content":"answer should be \"B\"\n\nCan you add a provisioner to below resource block ?\n\n==============================\nresource \"azurerm_network_interface\" \"Nic-1\" \n==============================","comments":[{"content":"resource \"azurerm_network_interface\" \"Nic-1\" {\n # ...\n\n provisioner \"local-exec\" {\n command = \"echo 'Network interface created'\"\n }\n}","upvote_count":"4","timestamp":"1724247360.0","comment_id":"1155649","poster":"ilmi70"}],"poster":"Pradh"},{"timestamp":"1708969440.0","content":"Selected Answer: A\nPlease stop confusing people. Basics of Provisioner block : always bind with resource block","comment_id":"990926","upvote_count":"7","poster":"debabrata6983"},{"timestamp":"1707318840.0","upvote_count":"4","comment_id":"974727","poster":"Bere","content":"Selected Answer: A\nSince the local-exec provisioner executes on the machine running Terraform and not on the resource itself, it can indeed be added to any resource block. The actions taken by the local-exec provisioner are not dependent on the type of resource, so it's possible to use this provisioner with any resource in Terraform."},{"upvote_count":"2","content":"The answer is False. Terraform provisioners can only be added to resource blocks that support them","poster":"modarov","comment_id":"972797","timestamp":"1707127740.0"},{"upvote_count":"3","content":"The new exam doesn't ask about provisioners anymore","timestamp":"1706220180.0","comment_id":"963090","poster":"LunarPhobia"},{"upvote_count":"1","timestamp":"1705072440.0","poster":"Ha_Baruh_Architect13","comment_id":"949822","content":"The correct answer is B. False.\n\nTerraform provisioners are not added to resource blocks directly. Instead, provisioners are added as separate blocks within a resource block. Provisioners are used to execute scripts or commands on a resource after it has been created or updated. They are defined outside of the resource block and are associated with the resource using the \"provisioner\" keyword followed by the specific provisioner type CHATGPT"},{"poster":"Jlee7","comments":[{"comment_id":"944203","poster":"joyboy23","content":"But what about the local-exec ?","upvote_count":"1","timestamp":"1704508920.0"}],"comment_id":"933792","timestamp":"1703533260.0","content":"The answer is False.\n\nTerraform provisioners can only be added to resource blocks that support them. For example, the AWS provider supports the remote-exec provisioner, but the Azure provider does not.","upvote_count":"1"},{"comment_id":"892603","timestamp":"1699499520.0","poster":"Ni33","upvote_count":"2","content":"Selected Answer: A\nAAAAAAAA"},{"content":"The answer is A","comment_id":"879044","timestamp":"1698124620.0","poster":"Bluemoon22","upvote_count":"2"},{"content":"Selected Answer: A\nYes, Terraform provisioners can be added to any resource block. Provisioners are used to execute scripts or commands on a resource after it has been created or updated.","comment_id":"869724","poster":"sylvergorilla","upvote_count":"3","timestamp":"1697226600.0"},{"poster":"Power123","comment_id":"856162","content":"A is correct","upvote_count":"1","timestamp":"1696102800.0"},{"poster":"Nunyabiznes","content":"Selected Answer: A\nProvisioners can be added to any resource block in Terraform configuration, but it is not recommended to use them for configuration management as it goes against the declarative approach of Terraform. Provisioners should only be used as a last resort when no other Terraform resource types are available to handle a specific task.","comment_id":"845298","upvote_count":"3","timestamp":"1695241500.0"},{"comment_id":"790796","timestamp":"1690554060.0","poster":"Tanacet","content":"Selected Answer: A\nProvisioner is an arbitrary command executed by the terraform when a resource is created/destroyed. It is not related to a resource itself. The creation/destruction of a resource is just a trigger.","upvote_count":"3"},{"content":"Selected Answer: A\nOption A is common sense","comment_id":"753793","upvote_count":"1","timestamp":"1687476900.0","poster":"FarziWaliMarzi"},{"upvote_count":"2","comment_id":"753212","content":"If you are certain that provisioners are the best way to solve your problem after considering the advice in the sections above, you can add a provisioner block inside the resource block of a compute instance.","timestamp":"1687425180.0","poster":"azurearch"},{"timestamp":"1687179300.0","upvote_count":"2","poster":"chimons","content":"Selected Answer: A\nTrue. Terraform provisioners can be added to any resource block in a Terraform configuration file.\n\nProvisioners allow you to perform additional configuration tasks on a resource after it has been created. For example, you might use a provisioner to install software on an EC2 instance or run a script on a newly created VM.\n\nTo add a provisioner to a resource block, you can use the provisioner block within the resource block. You can add multiple provisioners to a single resource block if necessary.\n\nHere is an example of adding a provisioner to an EC2 instance resource:\n\nCopy code\nresource \"aws_instance\" \"example\" {\n ami = \"ami-123456\"\n instance_type = \"t2.micro\"\n\n provisioner \"remote-exec\" {\n inline = [\n \"sudo apt-get update\",\n \"sudo apt-get install -y nginx\",\n ]\n }\n}\nIn this example, the provisioner will run the apt-get update and apt-get install commands on the EC2 instance after it has been created.\n\nSo, option A, true, is the correct answer. Option B, false, is incorrect.","comment_id":"749937"},{"upvote_count":"1","comment_id":"707612","content":"It should be A. 90%. The only problem is the word \"can\" because the provisioner MUST or always be inside the resource block... that disturbs a bit but I still say A.","timestamp":"1682823720.0","poster":"G4Exams"},{"upvote_count":"4","comment_id":"698373","poster":"elnurgu","timestamp":"1681837320.0","content":"Selected Answer: A\nI can add local-exec to any resource block such as aws_s3, aws_eip and etc.,\nSo, answer is A"},{"upvote_count":"1","timestamp":"1680658800.0","comment_id":"686509","content":"Selected Answer: A\ndefinitely A","poster":"kshdiuashduahsduas"},{"timestamp":"1680642900.0","content":"A is correct","upvote_count":"1","comment_id":"686435","poster":"Bobby1977"},{"content":"A: I can add a local-exec to any resource block","upvote_count":"2","timestamp":"1680537840.0","comment_id":"685645","poster":"alexik96"},{"timestamp":"1680456060.0","comment_id":"684969","poster":"udibie","upvote_count":"1","content":"Selected Answer: A\nA is correct"},{"timestamp":"1680354660.0","content":"Selected Answer: A\nA is correct","upvote_count":"1","comment_id":"684223","poster":"daaww"},{"upvote_count":"1","poster":"faltu1985","content":"Selected Answer: A\nI think ans is A","comment_id":"679499","timestamp":"1679815380.0"},{"poster":"Fati_2022","upvote_count":"1","content":"A\nhttps://www.phillipsj.net/posts/introduction-to-terraform-provisioners/ \nAs you continue learning about Terraform, you will start hearing about provisioners. Terraform provisioners can be created on any resource and provide a way to execute actions on local or remote machines.","comment_id":"663043","timestamp":"1678248600.0"},{"timestamp":"1676542920.0","poster":"tbhtp","content":"Selected Answer: A\nA is right: You definitively CAN add the \"local-exec\" provisioner to any resource, as this executes the command on the local system where the tf runs.\nSee the doc example with the \"null_resource\" for local-exec.\nPlease note that people maybe voted B because \"remote-exec\" is the only provisioner they know.\n \nhttps://www.terraform.io/language/resources/provisioners/local-exec","comment_id":"647537","upvote_count":"1"},{"content":"Literally just tried it in an S3 resource. lol almost like they put out a false question list to weed people out. \n\nError: Unsupported block type\n on main.tf line 20, in module \"s3_bucket\":\n 20: provisioner \"local-exec\" {\nBlocks of type \"provisioner\" are not expected here.","timestamp":"1673562180.0","comments":[{"upvote_count":"1","poster":"19kilo","timestamp":"1673563080.0","comment_id":"630681","content":"Never mind, forgot that I was using a module. Seemed to validate and plan ok with an S3 resource while also having a provisioner. Has to be a trick question. The documentation states \"you can add a provisioner block inside the resource block of a compute instance.\" They call out compute instance, but it appears to work on non-compute resource blocks. ¯\\_(ツ)_/¯ I'm calling it true from my testing. However, the apply did fail due to what was in the provisioner.\nhttps://www.terraform.io/language/resources/provisioners/syntax#how-to-use-provisioners"}],"upvote_count":"1","poster":"19kilo","comment_id":"630676"},{"comment_id":"625659","upvote_count":"2","poster":"lucitama","timestamp":"1672570500.0","content":"If you are certain that provisioners are the best way to solve your problem after considering the advice in the sections above, you can add a provisioner block inside the resource block of a compute instance.\n\nB is correct"},{"comments":[{"timestamp":"1676543040.0","content":"B is certainly false: The question is about provisioners not providers.","comment_id":"647540","upvote_count":"1","poster":"tbhtp"}],"poster":"Eltooth","upvote_count":"2","content":"Selected Answer: B\nB is correct answer. False.\nhttps://www.terraform.io/language/providers/requirements#requiring-providers","comment_id":"623755","timestamp":"1672214520.0"},{"comment_id":"623552","comments":[{"timestamp":"1674825420.0","comment_id":"638037","upvote_count":"3","content":"This statement is incorrect. Local exec provisioners can execute in any resource block. I think you are referrring to remote-exec provisioners which need to be in resource block of compute instances","poster":"CHRIS12722222"}],"upvote_count":"2","content":"how we can execute scripts for example in such resource \"aws_security_group\" even its resource? Provisioners are used to execute scripts on a local or remote machine as part of resource creation or destruction. so answer is False.","timestamp":"1672193100.0","poster":"Oskar_Madin"},{"poster":"Zam88","timestamp":"1671496080.0","content":"If you are certain that provisioners are the best way to solve your problem after considering the advice in the sections above, you can add a provisioner block inside the resource block of a compute instance.\n\nabove from the doc \n\nB is correct","comment_id":"618870","upvote_count":"1"},{"comment_id":"610949","upvote_count":"2","poster":"cytron","content":"Selected Answer: B\nIts a B. You can't add a provisioned to the Terraform block in example.","timestamp":"1670054400.0","comments":[{"content":"They ask about resource blocks. Terraform block is not a resource block.","comments":[{"comment_id":"622069","poster":"mifune","timestamp":"1671967620.0","upvote_count":"1","content":"You are right, but, within all \"resource\" blocks, not all of them can address a provisioner, for example, an aws_eip"}],"poster":"Jaro3000","upvote_count":"3","timestamp":"1670767560.0","comment_id":"614965"}]},{"comment_id":"608158","upvote_count":"2","timestamp":"1669577520.0","content":"Can you not add \"local-exec\" provisioner to any resource block? I pick A","poster":"pj2001"},{"upvote_count":"1","comment_id":"603633","content":"Answer is false (B)","timestamp":"1668844440.0","poster":"SabgKrish"},{"poster":"bigboi23","comments":[{"content":"This statement is wrong. Local exec provisioners can be added to resource blocks that are not virtual machines or compute instances","poster":"CHRIS12722222","timestamp":"1674824940.0","comment_id":"638030","upvote_count":"2"},{"comment_id":"614967","timestamp":"1670767620.0","upvote_count":"2","poster":"Jaro3000","content":"Yeah, looks like B\n\"Provisioners can be used to model specific actions on the local machine or on a remote machine in order to prepare servers or other infrastructure objects for service\""}],"content":"Selected Answer: B\nProvisioners can only be added to virtual machines and other compute resources","timestamp":"1668730800.0","comment_id":"603057","upvote_count":"3"}],"topic":"1","timestamp":"2022-05-18 00:20:00","question_id":303,"choices":{"A":"True","B":"False"},"unix_timestamp":1652826000,"exam_id":169},{"id":"o6Uoi5U1GViYJrCkzOZa","timestamp":"2022-05-20 16:47:00","exam_id":169,"question_images":[],"question_id":304,"discussion":[{"timestamp":"1668060840.0","poster":"alirasouli","upvote_count":"38","comment_id":"714961","content":"As discussed, the `taint` command used to be the right choice; however, it is deprecated. The right answer is:\nterraform apply -replace=\"null_resource.run_script\"\n\nReference:\nhttps://developer.hashicorp.com/terraform/cli/commands/taint"},{"comments":[{"comment_id":"808684","poster":"Pietjeplukgeluk","upvote_count":"3","timestamp":"1676399760.0","content":"Not so sure, read Arrash his comment below. If a provisioner fails, it would be marked as tained by default without any user interaction required. This only leaves the apply as a required step...."}],"comment_id":"624062","timestamp":"1656431460.0","content":"Selected Answer: A\nYou are all correct that taint has been deprecated and replaced with -replace. But neither D nor any other option here uses the -replace command. Therefore option A is the only valid option given these choices.","upvote_count":"18","poster":"Sproket"},{"comment_id":"1400156","upvote_count":"1","content":"Selected Answer: B\nnull_resource - there is nothing getting tracked in the state file, so nothing to taint. Only way to re-run is to apply!","poster":"sam700","timestamp":"1742304000.0"},{"comment_id":"1364139","timestamp":"1740952920.0","upvote_count":"1","poster":"eLJoudi","content":"Selected Answer: A\nAs discussed, the `taint` command used to be the right choice; however, it is deprecated. The right answer is:\nterraform apply -replace=\"null_resource.run_script\""},{"poster":"YesPlease","comment_id":"1349578","upvote_count":"1","content":"Selected Answer: D\n\"taint\" is deprecated, so this is WRONG\n\n\"validate\" does not have any options to target files and checks all config files for syntax, so this is WRONG\n\nSo that leaves APPLY and PLAN....the question is asking which will you run *FIRST*. Terraform BEST-PRACTICES always wants you to run PLAN before APPLY so that you know exactly what changes will happen and this ensures that you understand and approve the intended changes.","timestamp":"1738337700.0"},{"content":"Selected Answer: A\nAs the resource is already present in the state file, so terraform will display message No changes. Your infrastructure matches the configuration.\n\nBut with taint options, terraform will recreate the resource in next apply as shown below.\n\nterraform taint null_resource.run_script\nResource instance null_resource.run_script has been marked as tainted.\n# terraform apply\nnull_resource.run_script: Refreshing state... [id=1726701550426365360]\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following\nsymbols:\n-/+ destroy and then create replacement\n\nTerraform will perform the following actions:\n\n # null_resource.run_script is tainted, so must be replaced\n-/+ resource \"null_resource\" \"run_script\" {\n ~ id = \"1726701550426365360\" -> (known after apply)\n }\n\nPlan: 1 to add, 0 to change, 1 to destroy.\n\nHence option A is correct","upvote_count":"1","comment_id":"1342441","poster":"palashpal","timestamp":"1737185100.0"},{"comments":[{"timestamp":"1732627320.0","comment_id":"1318075","content":"Hi @Nunyabiznes.... You are right, The correct answer is A. But I would like to clarify the reason as to why Option B wont work. Terraform apply will get executed, But no changes will be made, as they were already run. As we need to rerun the script taint/replace has to be used. Kindly let me know if my understanding is correct","upvote_count":"1","poster":"prabdarq"}],"poster":"Nunyabiznes","timestamp":"1727169060.0","upvote_count":"3","content":"The correct answer is A. terraform taint null_resource.run_script. This command marks the null resource as tainted, which means that Terraform considers the resource to be out-of-date and will recreate it during the next terraform apply run. When Terraform recreates the null resource, it will also rerun the local-exec provisioner.\n\nOption B, terraform apply -target=null_resource.run_script, would work, but it is overkill because it would apply all the resources in the configuration, not just the null resource with the local-exec provisioner.\n\nOption C, terraform validate null_resource.run_script, only checks the syntax of the configuration, and does not affect the state of the resource.\n\nOption D, terraform plan -target=null_resource.run_script, generates a plan for applying changes to the configuration, but does not apply those changes, so it would not rerun the local-exec provisioner.","comment_id":"843287"},{"upvote_count":"2","comment_id":"964800","poster":"Bere","content":"Selected Answer: A\n1) Create main.tf:\nterraform {\n required_version = \">= 0.13\"\n}\n\nresource \"null_resource\" \"run_script\" {\n provisioner \"local-exec\" {\n command = \"echo 'Hello, Terraform!' > example.txt\"\n }\n}\n\n2) terraform init\n3) terraform apply\n4) Modify the content of the example.txt file manually or delete it.\n5) terraform taint null_resource.run_script\n6) terraform apply\nThe local-exec provisioner should now run again, and the example.txt file will be recreated with the content specified in the command of the local-exec provisioner block.\n\nAs described here:\nhttps://developer.hashicorp.com/terraform/cli/commands/taint\nThis command is deprecated. For Terraform v0.15.2 and later, we recommend using the -replace option with terraform apply instead\n\nBut there is no option that uses the -replace command, so option A as described in my step 5 is the only valid option.","timestamp":"1727169060.0"},{"timestamp":"1724059560.0","comment_id":"1268553","poster":"reynaldiekoz","content":"Selected Answer: A\nim sureee","upvote_count":"1"},{"poster":"hrajkuma","upvote_count":"1","content":"it is option -> A for sure","comment_id":"1246398","timestamp":"1720746000.0"},{"content":"Warning: This command is deprecated. For Terraform v0.15.2 and later, we recommend using the -replace option with terraform apply instead, So { $ terraform apply -replace=\"aws_instance.example[0]\" } but there is no like this apply -replace option in the mentioned options so answer is A : terraform taint ..........","poster":"090200f","upvote_count":"1","timestamp":"1720440660.0","comment_id":"1244323"},{"content":"thats right","poster":"enklau","comment_id":"1244002","timestamp":"1720384680.0","upvote_count":"1"},{"timestamp":"1695929700.0","content":"Selected Answer: A\nA. However taint command is deprecated now and we should use terraform apply -destroy","comment_id":"1020193","poster":"gofavad926","upvote_count":"2"},{"upvote_count":"2","comment_id":"993219","timestamp":"1693323480.0","poster":"ledjo","content":"Selected Answer: A\nterraform apply -replace is missing here, therefore the only valid answer, even if deprecated as a command, is the first one A."},{"upvote_count":"3","comment_id":"988220","timestamp":"1692789300.0","poster":"BaburTurk","content":"Selected Answer: B\nB. terraform apply -target=null_resource.run_script\n\nRunning the terraform apply -target=null_resource.run_script command will specifically target the null_resource.run_script resource and execute its provisioner again. This is useful when you want to rerun the local-exec provisioner without affecting other resources."},{"content":"A. terraform taint null_resource.run_script","timestamp":"1690532640.0","upvote_count":"1","poster":"Jayanth","comment_id":"965388"},{"poster":"Busi57","content":"Selected Answer: A\nI think A","comment_id":"960510","upvote_count":"1","timestamp":"1690122900.0"},{"upvote_count":"1","comment_id":"941164","timestamp":"1688323320.0","poster":"nebulabc","comments":[{"content":"So, B is correct.","upvote_count":"1","timestamp":"1688323320.0","comment_id":"941165","poster":"nebulabc"}],"content":"To rerun the script defined in the local-exec provisioner of a null resource called null_resource.run_script, you can use the terraform apply command with the -target flag to specifically target the null resource.\nThis command instructs Terraform to only apply changes to the specified target resource, which in this case is the null_resource.run_script. It will re-run the local-exec provisioner associated with that null resource."},{"upvote_count":"2","poster":"Ni33","content":"Selected Answer: A\nA is correct","timestamp":"1683556320.0","comment_id":"892253"},{"upvote_count":"2","comment_id":"865752","timestamp":"1681067400.0","comments":[{"content":"you dont need to taint to re run script in local-exec provisioner with null resource.\nreference: https://jhooq.com/terraform-null-resource/","comment_id":"994983","upvote_count":"1","poster":"aanataliya","timestamp":"1693475340.0"}],"poster":"FarziWaliMarzi","content":"Selected Answer: A\nI think point to note is \"you realize that you need to rerun the script\". It is NOT talking about failure. So marking it taint is the only right option, so that on next run, it can be deleted and recreated."},{"poster":"Power123","timestamp":"1679975700.0","comment_id":"852740","content":"terraform apply -replace=\"null_resource.run_script\"\nAns: A","upvote_count":"1"},{"comments":[{"content":"(2/3)=\nThis is my understanding:\nBy default, provisioners that fail will also cause the Terraform apply itself to fail. The 'on_failure' setting can be used to change this. The allowed values are:\n\n• continue - Ignore the error and continue with creation or destruction.\n-This also means if there are multiple commands clubbed [ using & in Windows or ; in Linux] \n( in the inline or command argument) or multiple provisioners following, they will execute. \n\n-Also, other following terraform resources(based on computed dependencies) will continue to get created/destroyed.\n\n• fail - Raise an error and stop applying OR destroying (the default behaviour). \n\n>If this is a creation provisioner, taint the resource.\n>Destroy provisioners are run before the resource is destroyed. If they fail, Terraform will error and rerun the provisioners again on the next terraform apply. Due to this behavior, care should be taken for destroy provisioners to be safe to run multiple times.","upvote_count":"1","timestamp":"1727169060.0","poster":"gargaditya","comments":[{"content":"(3/3)\n-This also means if there are multiple commands clubbed [ using & in Windows or ; in Linux] \n( in the inline or command argument) or multiple provisioners following, they will NOT execute. \n-Also, other following terraform resources(based on computed dependencies) will NOT get created/destroyed\n==\nWith no specific input on 'on_failure', the default action is 'fail'-ie either taint the resource(creation time provisioner) or AUTOMATIC re-run of provisioner block(destroy time provisioner).\nIn both cases, simple 'terraform apply'(with target flag perhaps) is sufficient to re run the script.","timestamp":"1678821600.0","comment_id":"839181","upvote_count":"1","poster":"gargaditya"}],"comment_id":"839179"}],"poster":"gargaditya","content":"(1/3)\nAnswer should be B.\nThe first thing to realise is that the question is testing failure behaviour of provisioners.\nHence the need of re-running the script.","timestamp":"1678821480.0","comment_id":"839178","upvote_count":"1"},{"upvote_count":"4","comments":[{"content":"When it's already tainted by default what's the point in using taint command again, the next step is to apply that particular resource so B","upvote_count":"1","comment_id":"850833","timestamp":"1679819400.0","poster":"sagunala5"}],"content":"Selected Answer: A\nhttps://developer.hashicorp.com/terraform/language/resources/provisioners/syntax\n###\nBy default, provisioners run when the resource they are defined within is created. Creation-time provisioners are only run during creation, not during updating or any other lifecycle. They are meant as a means to perform bootstrapping of a system.\n\nIf a creation-time provisioner fails, the resource is marked as tainted. A tainted resource will be planned for destruction and recreation upon the next terraform apply. Terraform does this because a failed provisioner can leave a resource in a semi-configured state. Because Terraform cannot reason about what the provisioner does, the only way to ensure proper creation of a resource is to recreate it. This is tainting.\n###","timestamp":"1675188060.0","poster":"Arrash","comment_id":"794479"},{"comment_id":"787507","upvote_count":"1","timestamp":"1674642720.0","poster":"eivindw","content":"B is correct"},{"content":"Selected Answer: A\ncorrect answer was A\nnow is \n terraform apply -replace=\"null_resource.run_script\"\n\nReference:\nhttps://developer.hashicorp.com/terraform/cli/commands/tain","upvote_count":"1","poster":"BaburTurk","timestamp":"1672333620.0","comment_id":"761292"},{"timestamp":"1670879580.0","comment_id":"743344","content":"Selected Answer: B\nI think B is the right answer, as per documentation taint is not the recommended way to do things , it is - terraform apply -replace <target>","comments":[{"upvote_count":"1","timestamp":"1677463560.0","comment_id":"823115","content":"im thinking the same either after read the documentation .\n\nhttps://developer.hashicorp.com/terraform/cli/commands/taint","poster":"Nzudin"}],"upvote_count":"3","poster":"capt2101akash"},{"poster":"joeri_jung","timestamp":"1670691120.0","comment_id":"741119","content":"B should be correct for Version 002 the new exam isn't in place yet but version 003 will have this as correct answer https://developer.hashicorp.com/terraform/cli/commands/taint","upvote_count":"2"},{"upvote_count":"6","poster":"arapin","comments":[{"upvote_count":"1","content":"Remember the question is what is the very FIRST command you would run. Terraform apply would probably be the 3rd or 4th command you execute after running a plan, validate, etc. but on a degraded resource, Hashicorp's docs state that Terraform will need a way to identify it as such before taking any further action, which is what terraform taint (now the terraform command --replace flag) does.","comment_id":"797153","poster":"compgeek718","timestamp":"1675438140.0"}],"timestamp":"1663827360.0","comment_id":"675779","content":"Selected Answer: B\nI believe the answer is B. Terraform apply -target\n\nTerraform does not keep track of what the provisioners do. So if we run a script via local-exec, terraform has no idea what the script does, nor can it track it's changes. That is the exact reason why terraform says that provisioners are the last resort.\n\nRunning taint (A), would not delete the resources created via the script, but it would mark the null_resource.script for deletion and wait for the next run.\n\nRunning terraform apply -target(B) would re-run the script."},{"timestamp":"1663222260.0","upvote_count":"2","content":"Selected Answer: A\nD is not correct . Because D will just apply null resource script again, however since there is no change in the script it will not run again. We have to taint and then run target . taint is depricated now. \"replace\" should be used instead of taint","comment_id":"669522","poster":"RVivek"},{"poster":"svsilence","upvote_count":"5","comment_id":"629597","content":"HashiCorp deprecated the terraform taint command in v0.15.2. If you want to force replacement of an object even though there are no configuration changes, use the terraform plan or terraform apply command with the -replace option instead. If you are using an older version of Terraform, continue using the terraform taint command.","timestamp":"1657464900.0"},{"poster":"nhatne","content":"Selected Answer: A\nA is correct","upvote_count":"3","timestamp":"1657415880.0","comment_id":"629397"},{"poster":"Ahmad_Terraform","upvote_count":"2","content":"taint basically force destroy and recreate resource, so here A seems correct","timestamp":"1655891280.0","comment_id":"620306"},{"comment_id":"618824","upvote_count":"1","timestamp":"1655666580.0","content":"I think A is the best option for this question But if you check doc \nWarning: This command is deprecated. For Terraform v0.15.2 and later, we recommend using the -replace option with terraform apply instead (details below).\n\nD is also close enough \nBut i think it should be A correct","poster":"Zam88"},{"poster":"subhala","upvote_count":"4","comment_id":"617828","timestamp":"1655486160.0","content":"I tested this, A is correct."},{"upvote_count":"3","poster":"Cedhulk","content":"Selected Answer: A\nit's A","comment_id":"617581","timestamp":"1655449440.0"},{"poster":"AzureGurl","comment_id":"615246","content":"For these given option the answer is A. I have tested it.","timestamp":"1655026920.0","upvote_count":"4"},{"poster":"javibadillo","timestamp":"1653396300.0","comments":[{"poster":"rfd","content":"There is no reference of version in question.","timestamp":"1657285980.0","upvote_count":"1","comment_id":"628782"},{"poster":"Sproket","comment_id":"624063","content":"Correct, taint has been replaced with -replace. But answer D doesn't include -replace so why would we choose it?","upvote_count":"1","timestamp":"1656431580.0"}],"comment_id":"606710","upvote_count":"4","content":"Selected Answer: D\nThis command is deprecated(Taint). For Terraform v0.15.2 and later, we recommend using the -replace option with terraform apply instead (details below)."},{"comment_id":"606673","upvote_count":"2","content":"should be B","timestamp":"1653392880.0","comments":[{"comment_id":"610529","content":"No you need to taint first your null resource for TF to local exec again. TF does it automatically in case of failure.","upvote_count":"2","timestamp":"1654163100.0","comments":[{"timestamp":"1678821960.0","content":"Exactly,TF does it automatically, the question says you realise you need to run script again indicating failure.\nTaint happens automatically(for creation time provisioner) and hence simple terraform apply(with optional target flag) will re-run the provisioner.","comment_id":"839189","poster":"gargaditya","upvote_count":"1"}],"poster":"d0ug7979"}],"poster":"eboost"},{"content":"https://www.terraform.io/cli/commands/taint","upvote_count":"2","poster":"bp339","timestamp":"1653058020.0","comment_id":"604494"}],"isMC":true,"unix_timestamp":1653058020,"url":"https://www.examtopics.com/discussions/hashicorp/view/75954-exam-terraform-associate-topic-1-question-6-discussion/","answer":"A","answers_community":["A (71%)","B (21%)","8%"],"answer_images":[],"choices":{"D":"terraform plan -target=null_resource.run_script","C":"terraform validate null_resource.run_script","A":"terraform taint null_resource.run_script","B":"terraform apply -target=null_resource.run_script"},"topic":"1","answer_description":"","answer_ET":"A","question_text":"You run a local-exec provisioner in a null resource called null_resource.run_script and realize that you need to rerun the script.\nWhich of the following commands would you use first?"},{"id":"4ozw5fTLJJgL0lkziEKv","isMC":true,"discussion":[{"poster":"camps","comment_id":"857203","upvote_count":"6","content":"Selected Answer: C\nC. State file drift.\n\nThe terraform refresh command is used to reconcile the state Terraform has stored in the state file with the real-world infrastructure. When you run terraform apply, Terraform updates the state file to reflect the current state of the infrastructure it manages. However, if changes are made to the infrastructure outside of Terraform, such as via the web console or API, the state file will become out-of-date and will not accurately reflect the current state of the infrastructure.","timestamp":"1711895760.0"},{"timestamp":"1721876580.0","comment_id":"962282","upvote_count":"4","poster":"LunarPhobia","content":"This command is now deprecated"},{"comment_id":"856164","content":"Answer is C","timestamp":"1711834860.0","poster":"Power123","upvote_count":"1"},{"comment_id":"845300","upvote_count":"3","timestamp":"1710973620.0","poster":"Nunyabiznes","content":"Selected Answer: C\nTerraform refresh is intended to detect state file drift. It updates the Terraform state file with the real-world state of the resources being managed, which allows Terraform to detect any changes that might have been made outside of Terraform. This is useful when the state file is out of sync with the actual resources in the cloud provider, which can happen if someone manually modifies a resource outside of Terraform. By running terraform refresh, Terraform can identify those differences and update the state file to reflect the real-world state of the resources being managed."},{"timestamp":"1702998000.0","content":"Selected Answer: C\nC. State file drift\n\nterraform refresh is a command in the Terraform infrastructure as code tool that is used to update the state file with the current real-world infrastructure. It compares the resources described in the state file to the actual resources in the infrastructure and updates the state file to match the infrastructure. One of the things that terraform refresh is intended to detect is state file drift, which is a difference between the infrastructure and the resources described in the state file.","upvote_count":"1","poster":"chimons","comment_id":"749942"},{"content":"Selected Answer: C\nC is correct","upvote_count":"4","comment_id":"625660","timestamp":"1688201760.0","poster":"lucitama"},{"comment_id":"623758","timestamp":"1687932420.0","poster":"Eltooth","content":"Selected Answer: C\nC is the closet correct answer, however this command is no longer in use. \n\n\"The terraform refresh command reads the current settings from all managed remote objects and updates the Terraform state to match.\n\nWarning: This command is deprecated, because its default behavior is unsafe if you have misconfigured credentials for any of your providers. See below for more information and recommended alternatives.\"\n\nhttps://www.terraform.io/cli/commands/refresh","upvote_count":"3"},{"comment_id":"615631","timestamp":"1686634800.0","content":"Selected Answer: C\nState file drift for sure","upvote_count":"4","poster":"amrith501"}],"answer_description":"","topic":"1","question_text":"What is terraform refresh intended to detect?","answer_images":[],"timestamp":"2022-06-13 07:40:00","choices":{"A":"Terraform configuration code changes","C":"State file drift","B":"Empty state files","D":"Corrupt state files"},"question_images":[],"url":"https://www.examtopics.com/discussions/hashicorp/view/76752-exam-terraform-associate-topic-1-question-60-discussion/","exam_id":169,"unix_timestamp":1655098800,"answer":"C","answers_community":["C (100%)"],"question_id":305,"answer_ET":"C"}],"exam":{"isImplemented":true,"id":169,"isMCOnly":false,"provider":"Hashicorp","lastUpdated":"12 Apr 2025","isBeta":false,"name":"Terraform Associate","numberOfQuestions":347},"currentPage":61},"__N_SSP":true}