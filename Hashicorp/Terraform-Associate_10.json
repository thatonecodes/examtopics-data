{"pageProps":{"questions":[{"id":"7sDUhQkxCiNiSavx8s0y","answer_images":[],"answers_community":["A (56%)","B (41%)","2%"],"question_text":"If you manually destroy infrastructure, what is the best practice reflecting this change in Terraform?","topic":"1","answer_ET":"A","answer_description":"","choices":{"A":"Run terraform refresh","C":"Manually update the state fire","B":"It will happen automatically","D":"Run terraform import"},"exam_id":169,"unix_timestamp":1650803940,"isMC":true,"question_id":46,"question_images":[],"discussion":[{"timestamp":"1651090320.0","comment_id":"593384","upvote_count":"35","poster":"tf181","content":"How could change reflect in terraform without doing anything? \nI think A is right answer. any thoughts?"},{"upvote_count":"12","content":"Wouldn't it be A?","timestamp":"1651090980.0","comment_id":"593388","poster":"G__"},{"content":"Selected Answer: A\n\"Manually destroying infrastructure\" means you changed infrastructure outside of Terraform.\nWhat is the best practice reflecting this change in your* Terraform configuration*?\nCorrect Anwser is [A] : Run terraform refresh\n\n(Answer B is wrong: Because a manual change in remote infrastructure is not automatically parsed into your Terraform configuration)","upvote_count":"1","comment_id":"1364143","timestamp":"1740953820.0","poster":"eLJoudi"},{"comment_id":"1341798","poster":"d759fb3","content":"Selected Answer: A\nWhen infrastructure is manually destroyed (outside of Terraform):\nüîÑ Terraform's state file becomes out of sync with reality\n\nüéØ terraform refresh updates the state file to match the real infrastructure\nüìù No changes are made to your infrastructure, only to the state file\n\nWhy it's not \"C\":\n- Dangerous practice\n- Easy to corrupt state file\n- Can cause inconsistencies\n- Not recommended","timestamp":"1737053760.0","upvote_count":"1"},{"content":"Selected Answer: A\nMost probably A","comment_id":"1341002","upvote_count":"1","timestamp":"1736947740.0","poster":"didistars13"},{"comment_id":"1311975","poster":"Labman32","content":"A. is correct\n\nbut now as a best practice the correct way should be running terraform apply with the -refresh-only, this way you will get a prompt when it compares and see's that the deleted infrastructure is missing and will show you during your plan.","upvote_count":"1","timestamp":"1731590940.0"},{"timestamp":"1728307260.0","poster":"erif","upvote_count":"1","content":"Selected Answer: C\nThe best practice when infrastructure is manually destroyed is to manually update the state file (option C). This means the need to update Terraform's state file to reflect that the resource has been destroyed outside of Terraform.\n\nSpecifically:\n\nYou can use the terraform state rm command to remove the resource from the state file, as it no longer exists.\nAlternatively, you could manually edit the state file, but this is risky and generally not recommended.\nOther options like terraform refresh will only update the state based on the existing infrastructure, but if the resource was destroyed outside of Terraform, it will still appear in the state file unless manually removed.","comment_id":"1294287"},{"comment_id":"1290185","upvote_count":"1","timestamp":"1727456160.0","poster":"nss373","content":"Answer is C. We have to manually remove the the resource from state file."},{"comment_id":"1159498","timestamp":"1727169540.0","poster":"akkam89","upvote_count":"2","content":"Selected Answer: B\n```The terraform refresh command reads the current settings from all managed remote objects and updates the Terraform state to match.\n\nWarning: This command is deprecated, because its default behavior is unsafe if you have misconfigured credentials for any of your providers. See below for more information and recommended alternatives.```"},{"upvote_count":"2","content":"Selected Answer: B\n\"The Terraform refresh command reads the current settings from all managed remote objects and updates the Terraform state to match.\"\nWarning: This command is deprecated because its default behaviour is unsafe if you have misconfigured credentials for any of your providers. See below for more information and recommended alternatives.\n\nThis won't modify your real remote objects, but it will modify the Terraform state.\n\n\"You shouldn't typically need to use this command, because Terraform automatically performs the same refreshing actions as a part of creating a plan in both the Terraform plan and Terraform apply commands. This command is here primarily for backward compatibility, but we don't recommend using it because it provides no opportunity to review the effects of the operation before updating the state.\"\nLink:https://developer.hashicorp.com/terraform/cli/commands/refresh","timestamp":"1727169540.0","comment_id":"1169003","poster":"ravk2321"},{"content":"Selected Answer: A\nterraform refresh is used to reconcile the Terraform state with the real-world infrastructure. If you manually destroy infrastructure, the Terraform state will still show that the resource exists. Running terraform refresh updates the state to reflect the current state of the infrastructure, marking resources that were manually destroyed as no longer existing.\nB. It will happen automatically: No, Terraform does not automatically update its state when infrastructure is changed outside of Terraform. You need to run a command like terraform refresh.","comment_id":"1287881","poster":"fasaleAkshay","timestamp":"1727025060.0","upvote_count":"1"},{"upvote_count":"1","content":"Selected Answer: B\nhe terraform refresh command : You shouldn't typically need to use this command, because Terraform automatically performs the same refreshing actions as a part of creating a plan in both the terraform plan and terraform apply commands.","comment_id":"1283102","timestamp":"1726222860.0","poster":"Mattt"},{"content":"Selected Answer: A\nI'd say it's A but the question is weird and I got tricked. By manually I thought it'd be \"terraform destroy\" but it seems like manually mean go into the cloud and delete stuff, therefore you need to refresh the file.","poster":"bora4motion","upvote_count":"1","comment_id":"1269240","timestamp":"1724137440.0"},{"poster":"enklau","content":"A is correct, but now as a best practice the correct way should be running terraform apply with the -refresh-only flag","timestamp":"1721318340.0","comment_id":"1250542","upvote_count":"1"},{"poster":"callmegio","timestamp":"1718610720.0","content":"A is the correct answer.\n\nTerraform says\n\nWarning: This command is deprecated, because its default behavior is unsafe if you have misconfigured credentials for any of your providers. \n\nYou shouldn't typically need to use this command, because Terraform automatically performs the same refreshing actions as a part of creating a plan in both the terraform plan and terraform apply commands.","upvote_count":"1","comment_id":"1231817"},{"content":"Selected Answer: A\nThe command had been deprecated already. Use -refresh-only option along with terraform plan or terraform apply for the same operation.","poster":"starkonbullet","timestamp":"1715942160.0","comment_id":"1212842","upvote_count":"1"},{"comment_id":"1206222","timestamp":"1714756200.0","upvote_count":"1","content":"terraform refresh is not depricated. Answer is A","poster":"deepakpamban"}],"url":"https://www.examtopics.com/discussions/hashicorp/view/74312-exam-terraform-associate-topic-1-question-14-discussion/","answer":"A","timestamp":"2022-04-24 14:39:00"},{"id":"pd3xD3X8qh6muai1QTaD","discussion":[{"comment_id":"661023","timestamp":"1709722560.0","upvote_count":"10","content":"terraform state is a representation of your infrastructure, not of your config file, so variables wouldn't be stored in state. FALSE","poster":"keiffo2"},{"timestamp":"1727699520.0","comment_id":"857065","upvote_count":"7","content":"Selected Answer: B\nB. False.\n\nTerraform variable names are not saved in the state file. The state file contains information about the resources that Terraform manages, such as their current state and metadata. Variables are used in your Terraform configuration to parameterize your code and make it more reusable, but they are not saved in the state file. Instead, variable values are provided at runtime, either by passing them on the command line, through environment variables, or by using default values defined in your configuration.","poster":"camps"},{"timestamp":"1727809380.0","upvote_count":"1","poster":"Nunyabiznes","content":"Selected Answer: B\nB. False. Terraform variable names are not saved in the state file. The state file contains the actual values of the resources that were created or modified by Terraform.","comment_id":"858219"},{"content":"Selected Answer: B\nI checked in my lab. variable name is not stored in state file","timestamp":"1711467180.0","upvote_count":"3","poster":"RVivek","comment_id":"679789"},{"upvote_count":"1","timestamp":"1710879360.0","comment_id":"673545","content":"Selected Answer: B\nI choose B! For sure.","poster":"dani88ge"},{"upvote_count":"2","timestamp":"1709790840.0","content":"Selected Answer: B\nTerraform stores information about your infrastructure in a state file. This state file keeps track of resources created by your configuration and maps them to real-world resources.\n\nhttps://learn.hashicorp.com/tutorials/terraform/state-cli","comment_id":"661948","poster":"depal_dhir"}],"topic":"1","answer_images":[],"unix_timestamp":1662454560,"choices":{"B":"False","A":"True"},"question_id":47,"answers_community":["B (100%)"],"answer":"B","question_text":"Terraform variable names are saved in the state file.","answer_ET":"B","question_images":[],"isMC":true,"answer_description":"","url":"https://www.examtopics.com/discussions/hashicorp/view/80558-exam-terraform-associate-topic-1-question-140-discussion/","timestamp":"2022-09-06 10:56:00","exam_id":169},{"id":"bSGT1nYkVAmWfed7WiW7","exam_id":169,"answer_ET":"B","isMC":true,"timestamp":"2022-09-01 21:56:00","url":"https://www.examtopics.com/discussions/hashicorp/view/79171-exam-terraform-associate-topic-1-question-141-discussion/","choices":{"A":"True","B":"False"},"discussion":[{"timestamp":"1709330160.0","poster":"Burakko","content":"Selected Answer: B\n\"Terraform Cloud is a commercial SaaS product developed by HashiCorp. Many of its features are free for small teams, including remote state storage, remote runs, and VCS connections. We also offer paid plans for larger teams that include additional collaboration and governance features.\"","comment_id":"656639","upvote_count":"9"},{"comment_id":"858218","content":"Selected Answer: B\nB. False. Terraform variable names are not saved in the state file. The state file contains the actual values of the resources that were created or modified by Terraform.","timestamp":"1727809320.0","poster":"Nunyabiznes","upvote_count":"1"},{"poster":"odisor","comment_id":"727877","content":"is free up to 5 active users","upvote_count":"3","timestamp":"1716764340.0"},{"comments":[{"upvote_count":"1","content":"Not exactly, the free version of Terraform Cloud includes Terraform teams and basic governance features, such as role-based access control (RBAC), policy as code with Sentinel, and audit logs. However, more advanced features like SSO and custom policy checks require a paid subscription.","timestamp":"1727814840.0","comment_id":"858279","poster":"Nunyabiznes"}],"upvote_count":"1","content":"Free tier is available, however team and governance features are not availavel","comment_id":"679791","timestamp":"1711467180.0","poster":"RVivek"},{"poster":"depal_dhir","comment_id":"661950","timestamp":"1709790900.0","content":"Selected Answer: B\nMany of Terraform Cloud features are free for small teams, including remote state storage, remote runs, and VCS connections.","upvote_count":"2"},{"poster":"keiffo2","upvote_count":"1","timestamp":"1709722680.0","comment_id":"661025","content":"terraform cloud has a free option - false.\n\nPaid for options are \"team and goverance\" and \"Business\""}],"topic":"1","answer":"B","answer_images":[],"answers_community":["B (100%)"],"question_id":48,"unix_timestamp":1662062160,"question_text":"Terraform Cloud is available only as a paid offering from HashiCorp.","question_images":[],"answer_description":""},{"id":"hES3MbLMXKOmrJUlRi5G","unix_timestamp":1662431940,"answer_images":[],"answer_description":"","question_id":49,"choices":{"B":"Running terraform destroy from the correct directory and then typing \"yes\" when prompted in the CLI","A":"Using the destroy command with auto-approve","D":"Delete the state file and run terraform apply","C":"Passing --destroy at the end of a plan request"},"url":"https://www.examtopics.com/discussions/hashicorp/view/80479-exam-terraform-associate-topic-1-question-142-discussion/","discussion":[{"timestamp":"1680497820.0","poster":"lizzard812","content":"The real exam gives options either apply -destroy or delete state file + plan, so obviously plan does not destroy anything, so I went with this. The examtopics question here is misspelled. So you won‚Äôt be confused that much on real exam.","upvote_count":"18","comment_id":"859539"},{"content":"I'd go with D.\n\nThe `terraform plan -destroy` command will only show what is going to be destroyed (it‚Äôs only a plan).\n\nHowever, removing the state file has nothing to do with `terraform destroy` at all - it would only make Terraform forget about its objects while they continue to exist in the remote system.","poster":"wanrltw","comment_id":"740948","timestamp":"1670673720.0","upvote_count":"15"},{"timestamp":"1738111860.0","poster":"57ee09c","upvote_count":"1","content":"Selected Answer: C\nNo, you cannot pass --destroy at the end of a terraform plan request to execute terraform destroy. The correct approach is to use the -destroy flag within the terraform plan command and then apply it separately.","comment_id":"1348265"},{"content":"Selected Answer: D\nAbsolutely D","upvote_count":"2","comment_id":"1268259","poster":"JHkdigital","timestamp":"1724023620.0"},{"timestamp":"1721314440.0","comment_id":"1250484","content":"option D is correct answer","poster":"090200f","upvote_count":"1"},{"upvote_count":"1","timestamp":"1720074840.0","poster":"Daminaij","comment_id":"1241881","content":"Plan don‚Äôt destroy anything"},{"comment_id":"1234856","timestamp":"1718998920.0","content":"Selected Answer: C\nexecute plan doesn't trigger destroy","upvote_count":"1","poster":"dzhang344"},{"poster":"Mouszie","content":"will go for D","upvote_count":"1","comment_id":"1221545","timestamp":"1717069140.0"},{"timestamp":"1716877200.0","content":"\"is not a way to do \" - ill take A.. you shouldn't do destroy without being sure what you are destroying..","poster":"Edward2021","comment_id":"1220028","upvote_count":"1"},{"comment_id":"1197353","poster":"SilentH","upvote_count":"1","content":"Selected Answer: C\nBecause there is no double-dash destroy (hoping this isn‚Äôt a typo)","timestamp":"1713373320.0"},{"upvote_count":"2","content":"Selected Answer: D\nDestroy mode: creates a plan whose goal is to destroy all remote objects that currently exist, leaving an empty Terraform state. It is the same as running terraform destroy. Destroy mode can be useful for situations like transient development environments, where the managed objects cease to be useful once the development task is complete.\n\nActivate destroy mode using the -destroy command line option.","comment_id":"1178150","poster":"Ryan1002","timestamp":"1710929160.0"},{"timestamp":"1708781100.0","upvote_count":"2","content":"I tested in a lab. When you run \"terraform plan -destroy\" it just shows which resource will be destroyed but didnt destroy anything. If you want to destroy you should run \"terraform destroy\". But interestingly When you delete state file and run \"terraform apply\" command it creates a new resources not destroy. It seems two options are correct. C and D.","poster":"recep38","comment_id":"1157957"},{"poster":"vipulchoubisa","upvote_count":"1","content":"delete state file is never suggested by terraform so simple, answer is D.","comment_id":"1116418","timestamp":"1704691380.0"},{"timestamp":"1703859600.0","upvote_count":"1","poster":"samimshaikh","content":"Selected Answer: C\nAnswer is C\n\n because there is no such command to trigger a destroy \"terrafrom destroy --destroy\"\n\nA & B are way to trigger a destroy.\n\nD: will not suite because in the question it has mentioned that \"way of triggering a destroy\" instead of \"way of destroy\"","comment_id":"1108765"},{"comment_id":"922470","content":"Selected Answer: D\nim going with D","timestamp":"1686683280.0","poster":"March2023","upvote_count":"2"},{"timestamp":"1684370160.0","upvote_count":"2","comment_id":"900622","poster":"sdm13168","content":"Selected Answer: D\nD, if you delete the state file, then run terraform apply, terraform will try to create the whole infrastructure but get error."},{"comment_id":"893410","upvote_count":"1","timestamp":"1683663060.0","content":"Selected Answer: D\nD makes more sense than C. Correct answer should be D","poster":"FawadK"},{"upvote_count":"2","content":"Selected Answer: D\nD.\nC: Wrong. \"Destroy mode: creates a plan whose goal is to destroy all remote objects that currently exist, leaving an empty Terraform state. It is the same as running terraform destroy.\"\nhttps://developer.hashicorp.com/terraform/cli/commands/plan#planning-modes","comment_id":"889172","timestamp":"1683178740.0","poster":"zanhsieh"},{"poster":"camps","content":"Selected Answer: C\nC. Passing --destroy at the end of a plan request.\n\nThe terraform destroy command is used to destroy the infrastructure resources created by Terraform according to the current configuration. \n\nOption D is incorrect because deleting the state file and running terraform apply will not trigger terraform destroy. Running terraform apply with no changes to the Terraform configuration will have no effect on the existing infrastructure resources, and will not destroy them. If you delete the state file and then run terraform apply, Terraform will not know about any existing infrastructure resources, and will attempt to create new resources according to the current configuration. This may lead to unexpected results and is not a recommended approach to managing infrastructure with Terraform.","timestamp":"1680265440.0","comment_id":"857052","upvote_count":"2"},{"upvote_count":"1","poster":"SilentMilli","comment_id":"849616","timestamp":"1679691960.0","content":"Selected Answer: D\nterraform apply is a command that creates or updates resources as described in the Terraform configuration. Deleting the state file and running terraform apply will cause Terraform to create resources that are missing, rather than destroying them."},{"poster":"Manguu","timestamp":"1679454240.0","upvote_count":"1","comment_id":"846624","content":"Selected Answer: D\nD. This will not trigger a destroy, your old resources are no longer managed by TF"},{"comment_id":"810929","timestamp":"1676566200.0","content":"D. Delete the state file and run terraform apply is not a way to trigger terraform destroy.\n\nThe other options listed are valid ways to trigger the terraform destroy command:\n\nA. Using the terraform destroy command with the auto-approve option: terraform destroy -auto-approve\nB. Running terraform destroy from the correct directory and then typing \"yes\" when prompted in the CLI: terraform destroy followed by typing \"yes\"\nC. Passing --destroy at the end of a plan request: terraform plan --destroy\n\nHowever, deleting the state file and running terraform apply is not a correct way to trigger terraform destroy. terraform apply is used to create or update infrastructure resources, whereas terraform destroy is used to destroy resources. If the state file is deleted and terraform apply is run, it will create resources instead of destroying them.","upvote_count":"2","poster":"pyro7"},{"upvote_count":"1","timestamp":"1675980180.0","comment_id":"803717","poster":"Arrash","content":"Usage: terraform destroy [options]\nThis command is just a convenience alias for the following command:\nterraform apply -destroy"},{"poster":"agmesas","comment_id":"801137","content":"A y B are correct. C is not a way to run a destroy because it only show the plan. D is not related with a destroy so D is true too. C is the correct answer","upvote_count":"2","timestamp":"1675787940.0"},{"poster":"Abuu","content":"Selected Answer: D\nDeleting the state file and running terraform apply would not trigger a destroy command, as it would instead be creating new resources.","timestamp":"1675641900.0","upvote_count":"1","comment_id":"799273"},{"content":"Selected Answer: D\nDeleting the state file and running terraform apply does not trigger a terraform destroy operation. Terraform uses the state file to track the resources that it manages, and if the state file is deleted, Terraform will not have any knowledge of the existing resources. Running terraform apply after deleting the state file will simply result in Terraform creating new resources, rather than destroying existing ones. In contrast, the other options listed are actual ways to trigger a terraform destroy operation, either by specifying the destroy command with auto-approve, running the destroy command and manually confirming the action in the CLI, or passing the --destroy flag to a plan request.","timestamp":"1675006680.0","upvote_count":"1","comment_id":"791781","poster":"colombrican"},{"upvote_count":"1","timestamp":"1674575640.0","content":"Selected Answer: D\nD for sure","comment_id":"786668","poster":"yair319732"},{"upvote_count":"2","comment_id":"782735","timestamp":"1674244500.0","content":"ChatGPT said, D, so thats what I'm going with","poster":"sandorh"},{"content":"Selected Answer: C\nTested in my lab\nterraform plan -destroy only displays the plan and not destroy\nD is wrong. If you delete the statefile and run terraform apply then terraform creates a new VM and the old EC2 instance can no longer be managed using terraform","poster":"Nirms","upvote_count":"3","timestamp":"1674224940.0","comment_id":"782351"},{"upvote_count":"1","comment_id":"771837","content":"strange question, but D is wrong sense, so I go with C","timestamp":"1673387940.0","poster":"resnef"},{"timestamp":"1670670780.0","upvote_count":"3","poster":"alirasouli","comment_id":"740906","content":"Selected Answer: D\nThe question is about \"a way to trigger terraform destroy\", not applying \"destroy\" necessarily. Deleting the state file is a profoundly wrong way to do anything. After deleting the state file, terraform has no idea about any existing, altered or destroyed resources. So option D is the correct answer."},{"timestamp":"1669825800.0","comment_id":"731739","poster":"bwahdi","upvote_count":"2","content":"answer is D no hesitation"},{"comment_id":"725418","upvote_count":"3","timestamp":"1669242360.0","content":"Selected Answer: D\nThe command of \"terraform plan -destroy\" just show the destroy plan but it can be one of the first commands of the way to delete the infraestructure. This way ends obviously with \"terraform destroy\". \n\nSome of the responses are wrong about removing terraform.tfstate: every data about deployed infrastructure will be deleted, and the terraform apply will not delete the previous infrastructure because Terraform has not idea about what is deployed.\n\nAnswer is D: you cannot delete the deployed infrastructure by terraform.tfstate removal.","poster":"danieeerll"},{"timestamp":"1666591680.0","poster":"Anderson01","upvote_count":"1","comment_id":"702733","content":"terraform plan -destroy just show \"plan\" for which resource will \"destroy\"?"},{"comment_id":"684985","upvote_count":"3","poster":"udibie","timestamp":"1664732820.0","content":"Selected Answer: C\nplan -destroy will not trigger destroy"},{"upvote_count":"3","content":"Selected Answer: C\nTested in my lab\nterraform plan -destroy only displaays the plan and not destroy \nD is wrong. If you delete the statefile and run terraform apply then terraform creates a new VM and the old EC2 instace can no longer be managed using tearrform","poster":"RVivek","timestamp":"1664416320.0","comment_id":"682262"},{"comment_id":"664294","content":"Selected Answer: C\nplan -destroy is not a valid command, delete state file will cause to re-created same as destroy but build again.","poster":"shopkitty","timestamp":"1662704400.0","comments":[{"comment_id":"664295","poster":"shopkitty","upvote_count":"1","timestamp":"1662704520.0","content":"sorry please remove my comment"}],"upvote_count":"3"},{"comments":[{"timestamp":"1662626760.0","upvote_count":"2","content":"Activate destroy mode using the -destroy command line option. NOT --destroy","comment_id":"663388","poster":"[Removed]"}],"comment_id":"663386","upvote_count":"1","content":"Destroy mode: creates a plan whose goal is to destroy all remote objects that currently exist, leaving an empty Terraform state. It is the same as running terraform destroy. \nhttps://www.terraform.io/cli/commands/plan","poster":"[Removed]","timestamp":"1662626700.0"},{"timestamp":"1662523140.0","poster":"depal_dhir","upvote_count":"2","comment_id":"661954","content":"Selected Answer: D\nIf you delete the state file and then run terraform apply, Terraform will go and re-generate the state file"},{"poster":"keiffo2","comment_id":"661026","upvote_count":"1","content":"I think C - plan will never do any thing but, er, plan","timestamp":"1662454740.0"},{"comment_id":"660724","poster":"donathon","upvote_count":"3","timestamp":"1662431940.0","content":"Selected Answer: C\nRunning plan with -destroy does not destroy anything. While you delete the state fil and run an apply, it will remove the current infrastructure which is effectively a destroy."}],"timestamp":"2022-09-06 04:39:00","exam_id":169,"question_images":[],"answer_ET":"D","topic":"1","isMC":true,"question_text":"Which of the following is not a way to trigger terraform destroy?","answer":"D","answers_community":["D (53%)","C (47%)"]},{"id":"XhERdgS7TJpf3qyCEs8F","discussion":[{"content":"Selected Answer: C\nC. Public cloud console configuration workflows.\n\nPublic cloud console configuration workflows are not an advantage of using infrastructure as code operations, but are instead a separate method of managing cloud infrastructure. Infrastructure as code is focused on defining and managing infrastructure resources through code, using tools like Terraform or CloudFormation.\n\nOption A, self-service infrastructure deployment, allows developers and operations teams to provision resources on-demand, without having to request manual intervention from infrastructure teams.\n\nOption B, troubleshoot via a Linux diff command, allows teams to identify changes made to infrastructure configurations over time, and compare the differences between different versions of the code.\n\nOption D, modify a count parameter to scale resources, allows teams to easily scale resources up or down, without having to manually provision or deprovision resources.\n\nOption E, API driven workflows, allows teams to integrate infrastructure management with other automation tools and processes, and build custom workflows to meet their specific needs.","comments":[{"upvote_count":"18","timestamp":"1696192920.0","comments":[{"comment_id":"1109058","timestamp":"1719685080.0","upvote_count":"1","content":"Exactly! ChatGPT for sure.","poster":"gold4otas"}],"content":"I smell chat-GPT","poster":"Nunyabiznes","comment_id":"858282"}],"timestamp":"1696076700.0","upvote_count":"10","poster":"camps","comment_id":"857054"},{"content":"C. Public cloud console configuration workflows: Using console-based configuration in a public cloud does not align with the principles of IaC. IaC promotes defining infrastructure through code rather than using graphical interfaces.","comment_id":"1138835","timestamp":"1722622740.0","upvote_count":"1","poster":"NashP"},{"poster":"David_C_90","upvote_count":"4","comment_id":"835045","content":"Selected Answer: C\nAnswer is C\n\nRegarding B, since infrastructure is defined as code (files) we can use the diff command to check for differences","timestamp":"1694346060.0"},{"timestamp":"1691820480.0","upvote_count":"4","poster":"Pietjeplukgeluk","comment_id":"806090","content":"C looks to me most correct anser. B is strange to, not sure why this is not also wrong, but C looks best anyway."},{"content":"it is C\nPublic cloud console configuration workflows - typically involve manual steps\ntherefore nothing to do with IaC , certainly not being an advantage of IaC","timestamp":"1691242860.0","poster":"jackn","comment_id":"798949","upvote_count":"4"},{"content":"Selected Answer: C\nAdvantages of using infrastructure as code operations include:\n\nSelf-service infrastructure deployment\nTroubleshooting via a Linux diff command\nAPI driven workflows\nModifying a count parameter to scale resources\nThe use of a public cloud console configuration workflow is not an advantage of using infrastructure as code operations.","upvote_count":"4","timestamp":"1691179020.0","comment_id":"798390","poster":"lezgino"},{"content":"Selected Answer: B\nThis is a Linux shell command and has nothing to do with IaC","timestamp":"1678168920.0","poster":"depal_dhir","upvote_count":"3","comments":[{"upvote_count":"1","comment_id":"873308","content":"it has everything to do with IaC, because you cannot diff the management console UI, but you can easily diff the terraform files, therefore an advantage to use the IaC","timestamp":"1697608560.0","poster":"tycho"}],"comment_id":"661955"},{"content":"Selected Answer: B\nB is correct since terraform is used to deploy the infrastructure, not to troubleshoot it","upvote_count":"2","poster":"0ptimus","comment_id":"661807","timestamp":"1678158840.0"}],"answer_description":"","choices":{"B":"Troubleshoot via a Linux diff command","E":"API driven workflows","D":"Modify a count parameter to scale resources","C":"Public cloud console configuration workflows","A":"Self-service infrastructure deployment"},"question_images":[],"isMC":true,"topic":"1","answer_images":[],"question_id":50,"question_text":"Which of the following is not an advantage of using infrastructure as code operations?","unix_timestamp":1662513240,"url":"https://www.examtopics.com/discussions/hashicorp/view/80774-exam-terraform-associate-topic-1-question-143-discussion/","answer":"C","exam_id":169,"timestamp":"2022-09-07 03:14:00","answer_ET":"C","answers_community":["C (74%)","B (26%)"]}],"exam":{"lastUpdated":"12 Apr 2025","numberOfQuestions":347,"id":169,"isMCOnly":false,"name":"Terraform Associate","isImplemented":true,"provider":"Hashicorp","isBeta":false},"currentPage":10},"__N_SSP":true}