{"pageProps":{"questions":[{"id":"EbjFiTvf1lHgepcMz1J5","answer_images":[],"answer_description":"","choices":{"D":"Use of @Qualifier and @Autowired annotations together on a field.","C":"Use of @Qualifier annotation only with setter methods (@Autowired is optional for setters).","A":"Use of @Qualifier annotation on the class and @Autowired annotation either on a field or setter methods.","E":"Use of @Qualifier annotation only on a field (@Autowired is optional for fields).","B":"Use of @Qualifier and @Autowired annotations together with setter methods."},"timestamp":"2023-12-20 09:15:00","unix_timestamp":1703060100,"discussion":[{"poster":"vance04real","upvote_count":"1","timestamp":"1738131540.0","content":"Selected Answer: BD\nA is incorrect because the @Qualifier annotation is not used on the class level to resolve autowiring conflicts. It is used on fields, setter methods, or constructor parameters to specify which bean to inject.\nC is incorrect because the @Autowired annotation is not optional for setter methods if you want Spring to perform dependency injection. The @Qualifier annotation must be used in conjunction with @Autowired to resolve conflicts. \nE is incorrect because the @Autowired annotation is not optional for fields if you want Spring to perform dependency injection.The @Qualifier annotation must be used in conjunction with @Autowired to resolve conflicts.\n\nTherefore B and D are correct.","comment_id":"1348395"},{"timestamp":"1728748140.0","comment_id":"1296578","content":"Selected Answer: BD\nB and D are correct","poster":"Uteman","upvote_count":"2"},{"poster":"2211094","comment_id":"1243039","content":"AB is correct","timestamp":"1720209780.0","upvote_count":"1"},{"poster":"Glothan","upvote_count":"4","timestamp":"1703060100.0","comment_id":"1101371","content":"Selected Answer: AD\nOption A is correct. You can use the @Qualifier annotation along with @Autowired either on a field or setter methods to specify which bean should be injected when multiple beans of the same type are available.\nOption B is incorrect. Using @Qualifier and @Autowired together with setter methods is not a common or recommended practice."}],"answers_community":["AD (57%)","BD (43%)"],"answer":"AD","isMC":true,"answer_ET":"AD","question_text":"Which two mechanisms of autowiring a dependency when multiple beans match the dependency's type are correct? (Choose two.)","question_id":71,"question_images":[],"exam_id":252,"topic":"1","url":"https://www.examtopics.com/discussions/vmware/view/129065-exam-2v0-7222-topic-1-question-81-discussion/"},{"id":"SFGEKWTI2ZBFZxFtcRFT","timestamp":"2024-08-13 18:49:00","isMC":true,"exam_id":252,"answer":"BC","topic":"1","answer_images":[],"unix_timestamp":1723567740,"question_id":72,"question_text":"Which two annotations are meta-annotations on the @SpringBootApplication composed annotation? (Choose two.)","choices":{"A":"@Configuration","B":"@ComponentScan","D":"@SpringApplication","E":"@AutoConfiguration","C":"@SpringBootConfiguration"},"answer_ET":"AB","answer_description":"","discussion":[{"timestamp":"1733971560.0","comments":[{"content":"@interface SpringBootApplication is annotated with @SpringBootConfiguration, @EnableAutoConfiguration, and @ComponentScan.\n@interface SpringBootConfiguration is annotated with @Configuration, so this annotation is also included, but not directly","comment_id":"1327211","poster":"quakquak3","timestamp":"1734336720.0","upvote_count":"1"}],"poster":"Peit","comment_id":"1325368","content":"Selected Answer: BC\nBC. https://docs.spring.io/spring-boot/api/java/org/springframework/boot/autoconfigure/SpringBootApplication.html","upvote_count":"2"},{"poster":"Evoila_TrainingMaterial","content":"Selected Answer: AB\nA. @Configuration This annotation indicates that the class has @Bean definition methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime.\nB. @ComponentScan This annotation configures component scanning directives for use with @Configuration classes. Provides support parallel with Spring XML's context:component-scan element.","comment_id":"1265251","upvote_count":"1","comments":[{"comment_id":"1327212","timestamp":"1734336840.0","content":"@Configuration is only indirectly included via @SpringBootConfiguration","poster":"quakquak3","upvote_count":"1"}],"timestamp":"1723567740.0"}],"answers_community":["BC (67%)","AB (33%)"],"url":"https://www.examtopics.com/discussions/vmware/view/145675-exam-2v0-7222-topic-1-question-82-discussion/","question_images":[]},{"id":"3OTNMFFPqqaIIg7zVq6o","question_id":73,"question_images":[],"answer_description":"","choices":{"E":"The ApplicationContext maintains singleton beans that are instantiated by the Spring runtime.","C":"The ApplicationContext can be created in a test environment, web application, and in a standalone application.","A":"The ApplicationContext is the root interface for accessing the Spring container.","B":"The ApplicationContext lazy initializes beans by default.","D":"The ApplicationContext does not include all functionality of the BeanFactory."},"unix_timestamp":1703060160,"exam_id":252,"answers_community":["CE (67%)","AC (33%)"],"timestamp":"2023-12-20 09:16:00","question_text":"Which two statements describe the ApplicationContext correctly? (Choose two.)","answer_images":[],"topic":"1","discussion":[{"comment_id":"1232878","upvote_count":"1","timestamp":"1718804880.0","content":"CE is correct answer.","poster":"2211094"},{"content":"Selected Answer: CE\nA. Incorrect - The ApplicationContext is not the root interface for accessing the Spring container. The root interface is BeanFactory. ApplicationContext is a subinterface of BeanFactory and provides additional functionalities.\n\nB. Incorrect - The ApplicationContext eagerly initializes beans by default. If you want lazy initialization, you need to explicitly configure it.\n\nC. Correct - The ApplicationContext can indeed be created in various environments, including test environments, web applications, and standalone applications. Different implementations of ApplicationContext are available for different use cases.\n\nD. Incorrect - The ApplicationContext includes all the functionality of the BeanFactory and provides additional features. It is a more feature-rich container compared to BeanFactory.\n\nE. Correct - The ApplicationContext does maintain singleton beans that are instantiated by the Spring runtime. Singleton scope is the default scope for beans in the ApplicationContext.","upvote_count":"4","timestamp":"1706380740.0","comment_id":"1133581","poster":"50513d6","comments":[{"timestamp":"1723568160.0","comment_id":"1265254","content":"While it's true that the ApplicationContext does manage singleton beans, it does not instantiate them. The developer is responsible for defining the instantiation logic. Furthermore, singleton scope is just one of the several scopes provided by Spring (prototype, request, session, application, websocket).","poster":"Evoila_TrainingMaterial","upvote_count":"1"}]},{"timestamp":"1703060160.0","content":"Selected Answer: AC\nOption A is correct. The ApplicationContext is the root interface for accessing the Spring IoC container. It provides the functionality of the BeanFactory and adds additional features like event propagation, AOP integration, and more.\nOption E is incorrect. While the ApplicationContext can manage singleton beans, it also supports other bean scopes like prototype, request, and session. The maintenance of singleton beans does not exclusively define the ApplicationContext.","comments":[{"comments":[{"timestamp":"1734338520.0","upvote_count":"1","comment_id":"1327226","content":"Exactly, the Javadoc of BeanFactory https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html says \"The root interface for accessing a Spring bean container.\" while the ApplicationContext is \"Central interface to provide configuration for an application.\" (https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html)","poster":"quakquak3"},{"comment_id":"1265255","timestamp":"1723568220.0","upvote_count":"1","content":"A and C\n-> While it's true that the ApplicationContext does manage singleton beans, it does not instantiate them. The developer is responsible for defining the instantiation logic. Furthermore, singleton scope is just one of the several scopes provided by Spring (prototype, request, session, application, websocket).","poster":"Evoila_TrainingMaterial"}],"content":"So ApplicationContext is not the root interface, BeanFactory is. \n\nC and E is correct imo","poster":"50513d6","timestamp":"1706380680.0","comment_id":"1133580","upvote_count":"2"}],"comment_id":"1101372","poster":"Glothan","upvote_count":"2"}],"isMC":true,"answer_ET":"CE","answer":"CE","url":"https://www.examtopics.com/discussions/vmware/view/129066-exam-2v0-7222-topic-1-question-84-discussion/"},{"id":"1qM2tBIsFfUeE2Sb8J9L","answer_ET":"BD","isMC":true,"choices":{"D":"PropertySourcesPlaceholderConfigurer implements BeanFactoryPostProcessor and is used to read property values from the Spring Environment.","A":"Allows for the transformation of Spring bean definitions after the beans have been instantiated.","B":"Allows for the transformation of Spring bean definitions before the beans are instantiated.","C":"Creates proxies for the Spring beans that require an extra behavior like transaction management.","E":"Detects annotations such as @PostConstruct and @PreDestroy and then invokes appropriate behavior."},"answer_images":[],"answer_description":"","answer":"BD","url":"https://www.examtopics.com/discussions/vmware/view/134003-exam-2v0-7222-topic-1-question-88-discussion/","question_id":74,"exam_id":252,"topic":"1","question_images":[],"question_text":"Which two statements about BeanFactoryPostProcessors are true? (Choose two.)","unix_timestamp":1708077000,"timestamp":"2024-02-16 10:50:00","discussion":[{"poster":"james2033","upvote_count":"3","content":"Selected Answer: BD\n(1) BeanFactoryPostProcessor (Spring Framework 6.1.3 API). https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/config/BeanFactoryPostProcessor.html.\n(2) Spring BeanPostProcessor | Baeldung. https://www.baeldung.com/spring-beanpostprocessor.\n(3) BeanFactoryPostProcessor - Spring | Home. https://docs.spring.io/spring-framework/docs/3.0.x/javadoc-api/org/springframework/beans/factory/config/BeanFactoryPostProcessor.html.\n(4) BeanFactoryPostProcessor (Spring Framework API 2.5). https://docs.spring.io/spring-framework/docs/2.5.x/javadoc-api/org/springframework/beans/factory/config/BeanFactoryPostProcessor.html.\n(5) Spring BeanPostProcessor Example - HowToDoInJava. https://howtodoinjava.com/spring-core/spring-bean-post-processors/","comment_id":"1151872","timestamp":"1723794600.0"}],"answers_community":["BD (100%)"]},{"id":"yrn1g4G3XPqFii4LbD1W","exam_id":252,"answer_description":"","choices":{"E":"@ConfigurationProperties supports relaxed binding of properties, but not property binding through SpEL.","B":"@Value supports relaxed binding of properties, but not property binding through SpEL.","D":"@ConfigurationProperties only bind properties from .properties files, not from .yml files.","C":"@ConfigurationProperties is preferable over @Value when type-safety during property binding is a concern.","A":"@Value must be used for environment variables, as @ConfigurationProperties cannot access the environment."},"answers_community":["CE (100%)"],"answer_ET":"CE","answer":"CE","timestamp":"2024-02-09 15:43:00","question_text":"Which two statements are correct regarding the differences between @ConfigurationProperties and @Value? (Choose two.)","question_images":[],"topic":"1","unix_timestamp":1707489780,"url":"https://www.examtopics.com/discussions/vmware/view/133456-exam-2v0-7222-topic-1-question-89-discussion/","question_id":75,"discussion":[{"content":"Selected Answer: CE\nSee https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.external-config.typesafe-configuration-properties.vs-value-annotation\n\nhttps://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.external-config.typesafe-configuration-properties.relaxed-binding","poster":"james2033","timestamp":"1723207380.0","upvote_count":"3","comment_id":"1145558"}],"isMC":true,"answer_images":[]}],"exam":{"isBeta":false,"name":"2V0-72.22","id":252,"numberOfQuestions":77,"lastUpdated":"12 Apr 2025","isImplemented":true,"provider":"Vmware","isMCOnly":true},"currentPage":15},"__N_SSP":true}