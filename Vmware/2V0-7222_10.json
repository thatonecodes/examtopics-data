{"pageProps":{"questions":[{"id":"3l8xrpUqpMwwpp3YRjcf","isMC":true,"answer_description":"","question_id":46,"question_text":"Which two statements are correct regarding the Health Indicator status? (Choose two.)","answer":"CD","question_images":[],"timestamp":"2023-03-27 16:58:00","url":"https://www.examtopics.com/discussions/vmware/view/104096-exam-2v0-7222-topic-1-question-50-discussion/","choices":{"A":"The last status in a sorted list of HealthIndicators is used to derive the final system health.","B":"The status with the least severity is used as the top-level status.","E":"The severity order cannot be changed due to security reasons.","D":"The built-in status values are DOWN, OUT_OF_SERVICE, UNKNOWN, and UP in decreasing order of severity.","C":"Custom status values can be created."},"answers_community":["CD (100%)"],"topic":"1","unix_timestamp":1679929080,"exam_id":252,"answer_images":[],"discussion":[{"poster":"2211094","comment_id":"1231240","upvote_count":"1","content":"BC is the correct answer.","timestamp":"1718521800.0"},{"poster":"saJAva","content":"Selected Answer: CD\ncorrect","upvote_count":"3","timestamp":"1718058000.0","comment_id":"1228154"},{"comment_id":"852205","poster":"rhuanca","upvote_count":"2","comments":[{"timestamp":"1679929680.0","content":"well... second though , seems B is not correct because it is talking about least severity and application takes the highest severity result . So C and D are fine.","comment_id":"852210","poster":"rhuanca","upvote_count":"1"}],"content":"I believe is B and C , \n\nD. is correct but order for the status not sure The built-in status values are DOWN, OUT_OF_SERVICE, UNKNOWN, and UP. DOWN is the most severe status","timestamp":"1679929080.0"}],"answer_ET":"CD"},{"id":"ruD0alSYrdGtJU7KDdpY","answer":"AD","question_images":[],"isMC":true,"question_text":"What two options are auto-configured Spring Boot Actuator HealthIndicators? (Choose two.)","exam_id":252,"choices":{"A":"DataSourceHealthIndicator","C":"DynamoDBHealthIndicator","B":"GoogleCloudDataStoreHealthIndicator","D":"RabbitHealthIndicator","E":"OktaHealthIndicator"},"answers_community":["AD (100%)"],"topic":"1","unix_timestamp":1690895340,"timestamp":"2023-08-01 15:09:00","answer_ET":"AD","discussion":[{"poster":"james2033","upvote_count":"4","comment_id":"969086","timestamp":"1722517740.0","content":"Selected Answer: AD\n(A) https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.html\n\n(D) https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/actuate/amqp/RabbitHealthIndicator.html"}],"question_id":47,"answer_description":"","url":"https://www.examtopics.com/discussions/vmware/view/116986-exam-2v0-7222-topic-1-question-51-discussion/","answer_images":[]},{"id":"wTXUquSETihUiLN7cH8i","isMC":true,"answer_description":"","question_id":48,"question_text":"Which two annotations indicate that the transaction for a transactional test method should be committed after the test method has completed? (Choose two.)","question_images":[],"answer":"BC","timestamp":"2023-08-28 11:33:00","choices":{"C":"@Commit","B":"@Rollback(false)","D":"@Sql(alwaysCommit=true)","A":"@SqlMergeMode(false)","E":"@Transactional(commit=true)"},"url":"https://www.examtopics.com/discussions/vmware/view/119218-exam-2v0-7222-topic-1-question-52-discussion/","answers_community":["BC (43%)","C (29%)","B (29%)"],"topic":"1","unix_timestamp":1693215180,"exam_id":252,"answer_images":[],"discussion":[{"poster":"2211094","upvote_count":"1","content":"The correct answer is BC","comment_id":"1231243","timestamp":"1718522340.0"},{"upvote_count":"3","poster":"saJAva","comment_id":"1228155","content":"Selected Answer: BC\ncorrect","timestamp":"1718058120.0"},{"comment_id":"1164205","timestamp":"1709395740.0","upvote_count":"2","content":"Selected Answer: B\nThe B answer is correct.\n\nhttps://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/annotation/Rollback.html","poster":"asaladino75"},{"timestamp":"1706682120.0","content":"Selected Answer: C\n@SpringJUnitConfig\n@Transactional(transactionManager = \"txMgr\")\n@Commit\nclass FictitiousTransactionalTest {\n\nhttps://docs.spring.io/spring-framework/reference/testing/testcontext-framework/tx.html#testcontext-tx-annotation-demo","upvote_count":"2","poster":"james2033","comment_id":"1136448"}],"answer_ET":"BC"},{"id":"r0W4lQTryBJsfmvpEeuk","exam_id":252,"answer_ET":"CD","answer":"CD","url":"https://www.examtopics.com/discussions/vmware/view/102440-exam-2v0-7222-topic-1-question-53-discussion/","question_text":"Which two statements are correct regarding Spring Boot 2.x Actuator Metrics? (Choose two.)","timestamp":"2023-03-12 19:59:00","choices":{"C":"Timer measures both the number of timed events and the total time of all events timed.","B":"The metrics endpoint /actuator/metrics is exposed over HTTP by default.","A":"An external monitoring system must be used with Actuator.","E":"A metric must be created with one or more tags.","D":"Custom metrics can be measured using Meter primitives such as Counter, Gauge, Timer, and DistributionSummary."},"discussion":[{"timestamp":"1718788620.0","poster":"hakash","upvote_count":"2","content":"Selected Answer: BD\nB. The metrics endpoint /actuator/metrics is exposed over HTTP by default: The Actuator Metrics endpoint is exposed by default, and it provides information about various metrics related to the application's performance and behavior. It can be accessed over HTTP at the /actuator/metrics path.\n\nD. Custom metrics can be measured using Meter primitives such as Counter, Gauge, Timer, and DistributionSummary: Spring Boot Actuator Metrics allows you to define and measure custom metrics using various Meter primitives. These primitives include Counter (counting occurrences), Gauge (providing a current value), Timer (measuring the time taken for a task), and DistributionSummary (collecting and summarizing distribution statistics).","comment_id":"1100555"},{"content":"C & D are the correct ones.","timestamp":"1712643180.0","upvote_count":"4","poster":"nesreenmhd123","comment_id":"1028539"},{"comment_id":"970017","content":"Selected Answer: CD\nI think C and D are the best answer","upvote_count":"4","poster":"Tolo01","timestamp":"1706875380.0"},{"upvote_count":"1","comment_id":"852330","poster":"rhuanca","timestamp":"1695835920.0","content":"B and D \n\nAn external monitoring system is not required to be used with Spring Boot 2.x Actuator Metrics. Spring Boot Actuator includes an embedded monitoring system , the metrics over HTTP and JMX so A is not right."}],"unix_timestamp":1678647540,"isMC":true,"answer_images":[],"question_images":[],"answer_description":"","topic":"1","question_id":49,"answers_community":["CD (67%)","BD (33%)"]},{"id":"m18OMxSrdmsUHtdlNOPy","answers_community":["CE (44%)","E (22%)","11%","Other"],"isMC":true,"timestamp":"2023-08-02 12:16:00","url":"https://www.examtopics.com/discussions/vmware/view/117094-exam-2v0-7222-topic-1-question-54-discussion/","topic":"1","answer_ET":"CD","discussion":[{"poster":"quakquak3","content":"Selected Answer: CE\n@SpringBootTest methods are not transactional by default. This is the case for @DataJpaTest.\n\nThe ApplicationContext is not recreated for each @SpringBootTest, only if a differently configured context is needed or the context has been removed because of @DirtiesContext annotation.\n\nIf no configuration is specified, then @SpringBootTest searches for @SpringBootConfiguration (see https://docs.spring.io/spring-boot/api/java/org/springframework/boot/test/context/SpringBootTest.html#classes() ) and there must only be one class annotated with @SpringBootConfiguration (see https://docs.spring.io/spring-boot/api/java/org/springframework/boot/SpringBootConfiguration.html )","comment_id":"1326120","upvote_count":"2","timestamp":"1734094200.0"},{"timestamp":"1734055860.0","upvote_count":"2","content":"Selected Answer: CE\n@SpringBootTest loads the application context, but does not automatically recreate it for each test method.","poster":"Peit","comment_id":"1325963"},{"content":"D I mean, B is correct","poster":"Uteman","upvote_count":"1","timestamp":"1728115680.0","comment_id":"1293392"},{"comment_id":"1293390","upvote_count":"1","poster":"Uteman","content":"B - is not entirely true, Test methods annotated with @SpringBootTest do not recreate the ApplicationContext for each test method. Instead, the ApplicationContext is created once per test class, and it is cached and shared across multiple test methods in the same class (or even across different test classes), unless specifically instructed otherwise.","timestamp":"1728115560.0"},{"content":"Selected Answer: BC\nThe correct answers are:\nB. Test methods in a @SpringBootTest class are transactional by default. C. @SpringBootTest is typically used for integration testing.\nExplanation:\nB. Test methods in a @SpringBootTest class are transactional by default. This means that any changes to the database made by a test method will be rolled back by default.\nC. @SpringBootTest is typically used for integration testing. It provides a full Spring ApplicationContext, including all of the infrastructure beans, as well as your application's beans. It is also capable of starting a web server, making it ideal for testing web applications, and testing a broad range of application components.","poster":"Evoila_TrainingMaterial","timestamp":"1723024800.0","upvote_count":"1","comments":[{"timestamp":"1738108980.0","content":"Test methods in a @SpringBootTest class are transactional by default.\n\nThis is incorrect. Test methods in a @SpringBootTest class are not transactional by default. If you want transactional behavior, you need to explicitly annotate the test class or method with @Transactional.","comment_id":"1348243","poster":"vance04real","upvote_count":"1"}],"comment_id":"1262024"},{"upvote_count":"1","poster":"2211094","timestamp":"1718523060.0","comment_id":"1231246","content":"BC is correct answer."},{"content":"Selected Answer: E\nI think the E answere is correct.\n\nsee https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html\n\nthe @SpringBootTest is not applicable at method level.","upvote_count":"2","timestamp":"1709397780.0","comment_id":"1164218","poster":"asaladino75"},{"comment_id":"1101374","timestamp":"1703060400.0","poster":"Glothan","upvote_count":"1","content":"Selected Answer: CD\nA is wrong: there is no @TestApplicationContext annotation in Spring Testing."},{"timestamp":"1690971360.0","comment_id":"970030","poster":"Tolo01","comments":[{"upvote_count":"1","timestamp":"1696832760.0","comment_id":"1028543","poster":"nesreenmhd123","content":"There is no @TestApplicationContext annotation in Spring Testing."}],"upvote_count":"1","content":"Selected Answer: AC\nI think A and C are the best answer"}],"exam_id":252,"question_id":50,"answer_description":"","question_text":"Which two statements are true regarding Spring Boot Testing? (Choose two.)","answer_images":[],"answer":"CE","question_images":[],"unix_timestamp":1690971360,"choices":{"D":"Test methods annotated with @SpringBootTest will recreate the ApplicationContext.","A":"@TestApplicationContext is used to define additional beans or customizations for a test.","E":"@SpringBootTest without any configuration classes expects there is only one class annotated with @SpringBootConfiguration in the application.","B":"Test methods in a @SpringBootTest class are transactional by default.","C":"@SpringBootTest is typically used for integration testing."}}],"exam":{"lastUpdated":"12 Apr 2025","isBeta":false,"isMCOnly":true,"name":"2V0-72.22","numberOfQuestions":77,"id":252,"provider":"Vmware","isImplemented":true},"currentPage":10},"__N_SSP":true}