{"pageProps":{"questions":[{"id":"62vwnQmDagt8IEDqpEF6","unix_timestamp":1669988040,"answer_description":"","answer_images":[],"question_images":[],"answers_community":["D (63%)","C (38%)"],"exam_id":8,"choices":{"C":"Create two hierarchical firewall policies per department's folder with two rules in each: a high-priority rule that matches traffic from the private CIDRs assigned to the respective VPC and sets the action to allow, and another lower-priority rule that blocks traffic from any other source.","D":"Create two hierarchical firewall policies per department's folder with two rules in each: a high-priority rule that matches traffic from the private CIDRs assigned to the respective VPC and sets the action to goto_next, and another lower-priority rule that blocks traffic from any other source.","B":"Create a VPC firewall rule in each VPC to block traffic from any source, with priority 1000.","A":"Create a VPC firewall rule in each VPC to block traffic from any source, with priority 0."},"question_text":"Your company has defined a resource hierarchy that includes a parent folder with subfolders for each department. Each department defines their respective project and VPC in the assigned folder and has the appropriate permissions to create Google Cloud firewall rules. The VPCs should not allow traffic to flow between them. You need to block all traffic from any source, including other VPCs, and delegate only the intra-VPC firewall rules to the respective departments. What should you do?","question_id":16,"url":"https://www.examtopics.com/discussions/google/view/89787-exam-professional-cloud-network-engineer-topic-1-question/","topic":"1","isMC":true,"discussion":[{"timestamp":"1686178260.0","content":"Selected Answer: D\ngoto_next is better option.","comment_id":"738490","poster":"redgoose6810","upvote_count":"7"},{"poster":"playpacman","content":"Reading it twice, I guess D is correct as \"delegate only the intra-VPC firewall rules to the respective departments\" matches the \"goto_next\" parameter and departments are in charge of the flow of traffic within the own VPC","upvote_count":"6","comment_id":"735724","timestamp":"1685942220.0"},{"timestamp":"1742224320.0","comment_id":"1399689","upvote_count":"1","content":"Selected Answer: D\nD is the correct answer","poster":"1f01b87"},{"content":"Selected Answer: C\nUsing goto_next in the high-priority rule would simply pass the traffic to the next rule, which would then block it. This is functionally the same as having a single \"deny all\" rule","comments":[{"timestamp":"1735877700.0","upvote_count":"1","comment_id":"1335883","poster":"ian_gcpca","content":"changing my answer to D:\n\nThe goto_next action in hierarchical firewall policies provides a powerful mechanism for delegating firewall rule evaluation while maintaining a centralized security posture. This is particularly useful in scenarios where you need to balance organizational security policies with departmental autonomy."}],"poster":"ian_gcpca","upvote_count":"1","timestamp":"1735877580.0","comment_id":"1335882"},{"timestamp":"1724603280.0","comment_id":"1159016","upvote_count":"1","content":"Answer is D:\nhttps://cloud.google.com/firewall/docs/firewall-policies\n\n\"Hierarchical firewall policy rules have a new goto_next action that you can use to delegate connection evaluation to lower levels of the hierarchy\"\n\nThe use lower level firewall rules for Intra-VPC traffic","poster":"desertlotus1211"},{"content":"Selected Answer: C\nWhile both approaches aim to allow intra-VPC communication and block inter-VPC traffic, Option C directly allows traffic within the VPCs and then blocks any other traffic explicitly, providing a more straightforward and precise policy. Option D uses \"goto_next,\" potentially requiring an additional rule to specifically block unwanted traffic, adding complexity to the policy. Therefore, Option C is a clearer and more straightforward approach for this scenario.","timestamp":"1715950020.0","upvote_count":"2","poster":"Kyle1776","comment_id":"1073399"},{"content":"Selected Answer: D\nOption D as it will allow intra VPC firewall rules to be in place.","poster":"rglearn","comment_id":"965562","timestamp":"1706451360.0","upvote_count":"2"},{"comment_id":"845150","upvote_count":"1","content":"Selected Answer: D\nAccording to Google Cloud documentation, hierarchical firewall policies let you create and enforce a consistent firewall policy across your organization. You can assign hierarchical firewall policies to the organization as a whole or to individual folders. These policies contain rules that can explicitly deny or allow connections, as do Virtual Private Cloud (VPC) firewall rules. In addition, hierarchical firewall policy rules can delegate evaluation to lower-level policies or VPC network firewall rules with a goto_next action.\n\nTherefore, the correct answer is D. Create two hierarchical firewall policies per department’s folder with two rules in each: a high-priority rule that matches traffic from the private CIDRs assigned to the respective VPC and sets the action to goto_next, and another lower-priority rule that blocks traffic from any other source.","poster":"Ben756","timestamp":"1695227580.0"},{"content":"Selected Answer: C\nThe correct answer is C.\n\nOption A and B are incorrect because they only create firewall rules to block traffic from any source, but do not delegate intra-VPC firewall rules to the respective departments.\n\nOption D is also incorrect because the \"goto_next\" action would not be appropriate for a blocking rule. The correct action for a blocking rule is \"deny\".\n\nOption C is the correct approach. It involves creating two hierarchical firewall policies per department's folder, each with two rules. The first high-priority rule matches traffic from the private CIDRs assigned to the respective VPC and sets the action to allow. The second lower-priority rule blocks traffic from any other source. This approach allows departments to control the intra-VPC firewall rules while blocking traffic between VPCs.","timestamp":"1694960520.0","poster":"Ben756","comments":[{"content":"It seems that we need to \"delegate only the intra-VPC firewall rules to the respective departments\" that why I go to D","timestamp":"1701259740.0","upvote_count":"1","comment_id":"909269","poster":"Laryoul"}],"comment_id":"842122","upvote_count":"2"},{"upvote_count":"2","poster":"pk349","timestamp":"1689342600.0","comment_id":"775648","content":"• D. Create two hierarchical firewall policies per department's folder with two rules in each: a high-priority rule that matches traffic from the private CIDRs assigned to the respective VPC and sets the action ***** to goto_next, and another lower-priority rule that blocks traffic from any other source.\nHierarchical firewall policies let you create and enforce a consistent firewall policy across your organization. You can assign hierarchical firewall policies to the organization as a whole or to individual folders. These policies contain rules that can explicitly deny or allow connections, as do Virtual Private Cloud (VPC) firewall rules. In addition, hierarchical firewall policy rules can delegate evaluation to lower-level policies or VPC network firewall rules with a goto_next ***** action."},{"upvote_count":"2","content":"D is right \nHierarchical firewall policy rules have a new goto_next action that you can use to delegate connection evaluation to lower levels of the hierarchy.","poster":"AzureDP900","comment_id":"742272","timestamp":"1686525060.0"},{"comment_id":"741244","poster":"pfilourenco","content":"Selected Answer: D\nCorrect answer - D\n\nHierarchical firewall policy rules have a new goto_next action that you can use to delegate connection evaluation to lower levels of the hierarchy.\n\nhttps://cloud.google.com/vpc/docs/firewall-policies#:~:text=Hierarchical%20firewall%20policy%20rules%20have%20a%20new%20goto_next%20action%20that%20you%20can%20use%20to%20delegate%20connection%20evaluation%20to%20lower%20levels%20of%20the%20hierarchy.","timestamp":"1686424920.0","upvote_count":"4"},{"timestamp":"1686318960.0","comment_id":"740239","upvote_count":"1","poster":"jitu028","content":"Correct answer - D\n\nHierarchical firewall policy rules have a new goto_next action that you can use to delegate connection evaluation to lower levels of the hierarchy.\n\nhttps://cloud.google.com/vpc/docs/firewall-policies#:~:text=Hierarchical%20firewall%20policy%20rules%20have%20a%20new%20goto_next%20action%20that%20you%20can%20use%20to%20delegate%20connection%20evaluation%20to%20lower%20levels%20of%20the%20hierarchy."},{"comments":[],"upvote_count":"1","comment_id":"734705","content":"Selected Answer: C\nIt's C:\nhttps://cloud.google.com/vpc/docs/firewall-policies","poster":"pfilourenco","timestamp":"1685821200.0"},{"content":"Selected Answer: C\nControlling policy level folder is with Firewall Policy, so, A and B was wrong. \n\nBetween C and D, I prefer C. \n\nThere isn't action next_to like D said. \n\nCorrect is C","comments":[],"poster":"ccieman2016","timestamp":"1685780520.0","upvote_count":"3","comment_id":"734333"},{"comments":[{"timestamp":"1685705880.0","content":"source https://cloud.google.com/vpc/docs/firewall-policies\nwe have department, only c cover this","poster":"nosense","upvote_count":"2","comment_id":"733760"}],"upvote_count":"2","poster":"nosense","content":"in my opinion c is correct in this case","timestamp":"1685705640.0","comment_id":"733757"}],"timestamp":"2022-12-02 14:34:00","answer":"D","answer_ET":"D"},{"id":"kk2oismNHW5tgQIjdyTz","isMC":true,"question_images":[],"exam_id":8,"topic":"1","unix_timestamp":1669856760,"answer_description":"","answer_ET":"B","answer":"B","answers_community":["B (100%)"],"choices":{"C":"Monitor the Resource Manager audit logs inside the perimeter.","B":"Modify the existing VPC Service Controls policy to include the new project in dry run mode.","D":"Enable VPC Flow Logs inside the third project, and monitor the logs for negative impact.","A":"Enable Firewall Rules Logging inside the third project."},"answer_images":[],"question_id":17,"url":"https://www.examtopics.com/discussions/google/view/89478-exam-professional-cloud-network-engineer-topic-1-question/","question_text":"You have two Google Cloud projects in a perimeter to prevent data exfiltration. You need to move a third project inside the perimeter; however, the move could negatively impact the existing environment. You need to validate the impact of the change. What should you do?","timestamp":"2022-12-01 02:06:00","discussion":[{"content":"Selected Answer: B\nLooks like b\nhttps://cloud.google.com/vpc-service-controls/docs/dry-run-mode","upvote_count":"7","poster":"nosense","comment_id":"732843","timestamp":"1685630160.0"},{"poster":"ZODOGAM","upvote_count":"1","content":"It's B","comment_id":"1187620","timestamp":"1727808300.0"},{"upvote_count":"3","timestamp":"1689342600.0","comment_id":"775649","content":"• B. Modify the existing VPC ***** Service Controls policy to include the new project in dry run mode.\nDry run mode for Service Perimeters\nWhen using VPC Service Controls, it can be difficult to determine the impact to your environment when a service perimeter is created or modified. With dry run mode, you can better understand the impact of enabling VPC Service Controls and changes to perimeters in existing environments.\nIn dry run mode, requests that violate the perimeter policy are not denied, only logged. Dry run mode is used to test perimeter configuration and to monitor usage of services without preventing access to resources. Common use cases include:\n• Determining the impact that changes to existing service ***** perimeters will have.\n• Previewing the impact that new service perimeters will have.","poster":"pk349"},{"comment_id":"740242","timestamp":"1686319140.0","poster":"jitu028","upvote_count":"2","content":"Correct answer - B\n\nhttps://cloud.google.com/vpc-service-controls/docs/dry-run-mode#:~:text=With%20dry%20run%20mode%2C%20you%20can%20better%20understand%20the%20impact%20of%20enabling%20VPC%20Service%20Controls%20and%20changes%20to%20perimeters%20in%20existing%20environments."},{"comment_id":"732131","content":"B is right answer \n\nn dry run mode, requests that violate the perimeter policy are not denied, only logged. Dry run mode is used to test perimeter configuration and to monitor usage of services without preventing access to resources. Common use cases include:\n\nDetermining the impact that changes to existing service perimeters will have.\n\nPreviewing the impact that new service perimeters will have.\n\nMonitoring requests to protected services that originate from outside a service perimeter. For example, seeing where requests to a given service are coming from, or to identify unexpected service usage in your organization.\n\nIn your development environments, creating an analogous perimeter architecture to your production environment. This allows you to identify and mitigate any issues that will be caused by your service perimeters before pushing changes to your production environment.\n\nService perimeters can exist using dry run mode exclusively. You can also have service perimeters that use a hybrid of enforced and dry run modes.\nhttps://cloud.google.com/vpc-service-controls/docs/dry-run-mode","poster":"AzureDP900","upvote_count":"4","timestamp":"1685574360.0"}]},{"id":"HjmieLQtCEPJuhUG752E","choices":{"B":"Configure the Resource Manager constraint constraints/compute.restrictVpnPeerIPs to use an allowList consisting of only the 203.0.113.1/32 address.","A":"Configure a firewall rule accepting 203.0.113.1/32, and set a target tag equal to VPN_GATEWAY_1.","C":"Configure a Google Cloud Armor security policy, and create a policy rule to allow 203.0.113.1/32.","D":"Configure an access control list on the peer VPN gateway to deny all traffic except 203.0.113.1/32, and attach it to the primary external interface."},"discussion":[{"content":"https://cloud.google.com/resource-manager/docs/organization-policy/org-policy-constraints\nThis list constraint defines the set of valid IP-v4 addresses that can be configured as VPN peer IPs. By default, any IP can be a VPN peer IP for a VPC network. The allowed/denied list of IP addresses must be specified as valid IP-v4 addresses in the form: IP_V4_ADDRESS.\nconstraints/compute.restrictVpnPeerIPs","upvote_count":"1","comment_id":"916708","timestamp":"1733535300.0","poster":"desertlotus1211"},{"upvote_count":"1","comment_id":"775651","timestamp":"1720965060.0","poster":"pk349","content":"• B. Configure the Resource Manager constraint constraints/compute.restrictVpnPeerIPs ***** to use an allowList consisting of only the 203.0.113.1/32 address.\nHA-VPN is IPSec VPN solution to enable secure connectivity between your on-premise network to your Google Cloud Virtual Private Cloud (VPC) network through an IPSec VPN connection with 99.99% service availability at GA. HA-VPN is a regional per VPC VPN solution.\nConsider the following as you plan a migration to HA VPN:\n• Your peer VPN device or service must support the Border Gateway Protocol (BGP). If it does not, you cannot use HA VPN."},{"comment_id":"740245","upvote_count":"2","timestamp":"1717941900.0","content":"Correct answer - B \n\nTo ensure that your VPN gateway is protected, use the org policy constraint named constraints/compute.restrictVpnPeerIPs. This constraint will limit the public IPs that are allowed to initiate IPSec sessions with your VPN gateway.\n\nhttps://cloud.google.com/blog/topics/developers-practitioners/limiting-public-ips-google-cloud#:~:text=For%20VPNs%2C%20a,VPN%20gateway.","poster":"jitu028"},{"upvote_count":"4","timestamp":"1717403460.0","comments":[{"timestamp":"1718147760.0","upvote_count":"2","poster":"AzureDP900","comment_id":"742277","content":"Yes, It should be part of security. I agree with B is right.\n\nFor VPNs, a VPN gateway requires a public IP address for you to connect your on-premises environment to Google Cloud. To ensure that your VPN gateway is protected, use the org policy constraint named constraints/compute.restrictVpnPeerIPs. This constraint will limit the public IPs that are allowed to initiate IPSec sessions with your VPN gateway."}],"comment_id":"734339","content":"Selected Answer: B\nI think this question in security scope exam. \n\nB is correct. \n\nhttps://cloud.google.com/blog/topics/developers-practitioners/limiting-public-ips-google-cloud","poster":"ccieman2016"},{"content":"Selected Answer: B\nb is right \nTo control the list of peer IP addresses that users can specify when creating Cloud VPN tunnels, use the Resource Manager constraint constraints/compute.restrictVpnPeerIPs.","poster":"nosense","comment_id":"733776","upvote_count":"3","timestamp":"1717328820.0"}],"isMC":true,"answer":"B","unix_timestamp":1669988820,"exam_id":8,"topic":"1","answer_description":"","question_images":[],"url":"https://www.examtopics.com/discussions/google/view/89790-exam-professional-cloud-network-engineer-topic-1-question/","answers_community":["B (100%)"],"question_text":"You are configuring an HA VPN connection between your Virtual Private Cloud (VPC) and on-premises network. The VPN gateway is named VPN_GATEWAY_1. You need to restrict VPN tunnels created in the project to only connect to your on-premises VPN public IP address: 203.0.113.1/32. What should you do?","answer_images":[],"question_id":18,"answer_ET":"B","timestamp":"2022-12-02 14:47:00"},{"id":"EjAlbU8fd8Yc3ZUwDu3m","exam_id":8,"isMC":true,"question_id":19,"choices":{"A":"1. Create an A record for private.googleapis.com using the 199.36.153.8/30 address range.\n2. Create a CNAME record for *.googleapis.com that points to the A record.\n3. Configure your on-premises routers to use the Cloud VPN tunnel as the next hop for the addresses you used in the A record.\n4. Remove the default internet gateway from the VPC where your Cloud VPN tunnel terminates.","B":"1. Create an A record for restricted.googleapis.com using the 199.36.153.4/30 address range.\n2. Create a CNAME record for *.googleapis.com that points to the A record.\n3. Configure your on-premises routers to use the Cloud VPN tunnel as the next hop for the addresses you used in the A record.\n4. Configure your on-premises firewalls to allow traffic to the restricted.googleapis.com addresses.","C":"1. Create an A record for restricted.googleapis.com using the 199.36.153.4/30 address range.\n2. Create a CNAME record for *.googleapis.com that points to the A record.\n3. Configure your on-premises routers to use the Cloud VPN tunnel as the next hop for the addresses you used in the A record.\n4. Remove the default internet gateway from the VPC where your Cloud VPN tunnel terminates.","D":"1. Create an A record for private.googleapis.com using the 199.36.153.8/30 address range.\n2. Create a CNAME record for *.googleapis.com that points to the A record.\n3. Configure your on-premises routers to use the Cloud VPN tunnel as the next hop for the addresses you used in the A record.\n4. Configure your on-premises firewalls to allow traffic to the private.googleapis.com addresses."},"discussion":[{"comment_id":"734708","poster":"pfilourenco","timestamp":"1685821380.0","upvote_count":"5","content":"Selected Answer: B\nB it is."},{"comment_id":"1105179","poster":"xhilmi","content":"Selected Answer: B\nChoose B","timestamp":"1719304440.0","upvote_count":"1"},{"comment_id":"986988","upvote_count":"3","poster":"Thornadoo","timestamp":"1708570740.0","content":"Selected Answer: B\nA and D are eliminated as restricted.googleapis.com is the right URL (not private.googleapis.com)\n\nBetween B and C, removing the default gateway at VPC does not help as this relates to on-premise. Instead opening a direct access to the API external IP address would enable the servers to access the API directly."},{"comment_id":"975626","content":"Selected Answer: B\nhttps://cloud.google.com/vpc-service-controls/docs/set-up-private-connectivity#configure-firewall","poster":"didek1986","upvote_count":"1","timestamp":"1707400620.0"},{"upvote_count":"1","comments":[{"comment_id":"754754","timestamp":"1687584360.0","content":"This commentary should move to the question below.","upvote_count":"3","poster":"flyhighman"}],"content":"Selected Answer: D\nI was posting a big explanation here but the website has failed and I am very lazy to write it again, so now I'll write the sort version. The correct Answer is D.\n\nEvery GKE node reserves a CIDR network for it based in the pods per node number (I suppose that for routing purposes using iptables). To calculate it, just multiply the pods per node number * 2 and select the upper closer CIDR. 8 * 2 = 16, which fits into a /28 CIDR which has exactly 16 addresses. A 10 nodes cluster will require then 160 addresses which only fits in a /24 CIDR and above, so the only answer that match is the D. The other CIDR calculation match, even the services one. It uses a /22 CIDR and like it doesn't requires to reserve the network and broadcast addresses, it match the 1024 requirement.\n\nBest regards","poster":"samuelmorher","comment_id":"752803","timestamp":"1687377960.0"},{"content":"B is right answer","timestamp":"1686526020.0","upvote_count":"2","comment_id":"742283","poster":"AzureDP900"},{"upvote_count":"3","comments":[{"timestamp":"1685781780.0","upvote_count":"5","content":"Agree, B is correct. \n\nhttps://cloud.google.com/vpc-service-controls/docs/set-up-private-connectivity","comment_id":"734349","poster":"ccieman2016"}],"content":"B it is, as we need to allow traffic on the firewall on-prem. As well, we have to use restricted due to compatibility","comment_id":"733690","timestamp":"1685699280.0","poster":"playpacman"}],"topic":"1","question_images":[],"timestamp":"2022-12-02 12:48:00","answer_ET":"B","url":"https://www.examtopics.com/discussions/google/view/89779-exam-professional-cloud-network-engineer-topic-1-question/","answer_description":"","answer":"B","answer_images":[],"question_text":"Your company has recently installed a Cloud VPN tunnel between your on-premises data center and your Google Cloud Virtual Private Cloud (VPC). You need to configure access to the Cloud Functions API for your on-premises servers. The configuration must meet the following requirements:\n\n• Certain data must stay in the project where it is stored and not be exfiltrated to other projects.\n• Traffic from servers in your data center with RFC 1918 addresses do not use the internet to access Google Cloud APIs.\n• All DNS resolution must be done on-premises.\n• The solution should only provide access to APIs that are compatible with VPC Service Controls.\n\nWhat should you do?","answers_community":["B (91%)","9%"],"unix_timestamp":1669981680},{"id":"LCfPazSm0obtGJBKmjvz","answer_ET":"D","question_id":20,"unix_timestamp":1669914360,"url":"https://www.examtopics.com/discussions/google/view/89604-exam-professional-cloud-network-engineer-topic-1-question/","answer":"D","timestamp":"2022-12-01 18:06:00","answer_images":[],"discussion":[{"poster":"al_zo","content":"/22 has only 1022 usable IP addresses, looks like B is the correct answer.","comments":[{"comments":[{"poster":"crg63","comments":[{"poster":"pbrvgl","content":"Secondary subnets are subject to the same limitations of primary subnets. A /22 would not suffice in this case even for secondary subnets, must be /21.","comments":[{"poster":"Positron75","content":"They are not subject to that limitation. Source: https://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips#cluster_sizing_secondary_range_svcs\n\nNote how the table for services on secondary IP range says /22 allows for the full 1024 services. Meanwhile if you scroll up to the primary range for nodes, it says a /22 would only allow for 1020 or 1019 nodes, because primary ranges do have that constraint.\n\nD is the only possible answer, also because /24 is the smallest possible pod range (/25 and /28 not possible), mentioned in the same documentation page.","comment_id":"1231804","timestamp":"1718608140.0","upvote_count":"3"}],"comment_id":"1075067","timestamp":"1700445840.0","upvote_count":"1"}],"comment_id":"1040857","content":"secondary subnets can use all available space /22 = 1024. Answer is D.","upvote_count":"1","timestamp":"1697040360.0"}],"upvote_count":"8","comment_id":"734354","poster":"ccieman2016","timestamp":"1670064420.0","content":"yes, we need pay attention, was required 1024 valid address, cann't be A. Correct is B"},{"timestamp":"1693377840.0","comment_id":"993773","upvote_count":"1","content":"Agree with your answer","poster":"nqthien041292"}],"comment_id":"732874","timestamp":"1669914360.0","upvote_count":"15"},{"comments":[{"content":"Not correct. IP Address for Services:\n\n/22 => 2^10 = 1024, but NOT ALL 1024 IPs are avaiables, there are some IPs reserved for GCP:\n\n0.0: Network address.\n0.1: Reserved by AWS for the VPC router.\n0.2: Reserved by AWS. The IP address of the DNS server is the base of the VPC network range plus two. ...\n0.3: Reserved by AWS for future use.\n0.255: Network broadcast address.\n\nB correct answer (/21 address space for Services)","poster":"jorgesoma","timestamp":"1709277240.0","comments":[{"upvote_count":"1","content":"I'm sorry. Correct Anwser D, as exposed by Thornadoo.","poster":"jorgesoma","timestamp":"1709277360.0","comment_id":"1163290"}],"comment_id":"1163289","upvote_count":"1"}],"comment_id":"788270","content":"Selected Answer: D\nVote for D\n\n10 nodes = /28 can max 12 nodes\n8 Pods per node = 80 Pods = /24 max 110 Pods\n1024 services = /22 max 1024 services\n\nsource: https://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips","poster":"jfwahab","timestamp":"1674696660.0","upvote_count":"12"},{"poster":"RKS_2021","content":"Selected Answer: B\nB is correct ans, as we need 1024 Service IP, which is can not be covered with /22 subnet, we need 2 more IPs, so we need to go with /21","timestamp":"1737871860.0","comment_id":"1346816","upvote_count":"1","comments":[{"poster":"RKS_2021","content":"Correction, D is correct, as for secondary /24 is mininum.","comment_id":"1363391","upvote_count":"1","timestamp":"1740805860.0"}]},{"poster":"Lucox","timestamp":"1736708700.0","comment_id":"1339647","upvote_count":"1","content":"Selected Answer: B\nBetween A and B.\nA is wrong because we can not use all the 1024 addresses, so we need a /21thats why B is correct"},{"comment_id":"1205964","poster":"hamish88","upvote_count":"2","content":"The correct answer should be D:\nWhen we have 10 nodes, we need 14 IP addresses, the first 2 and the last 2 IP addresses will be reserved, so /28 which gives 12 IP addresses.\nhttps://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips#cluster_sizing_primary_range\nThen we should choose /24 since the smallest possible subnet range is /24 when the secondary range assignment method is user-managed:\nhttps://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips#cluster_sizing_secondary_range_pods\nFinally, Since we can use the whole range of secondary IP addresses, /22 will be enough as it provides 1024 IP addresses for our services. \nhttps://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips#cluster_sizing_secondary_range_svcs","timestamp":"1714719840.0"},{"content":"I would tend to agree with Answer D. However it say 'Pads' versus 'Pods'. Is this a typo on the exam? If it is NOT a typo, then Answer D is wrong.","comment_id":"1179226","poster":"desertlotus1211","timestamp":"1711025040.0","upvote_count":"1"},{"comment_id":"991031","poster":"Thornadoo","timestamp":"1693081620.0","comments":[{"comment_id":"1163294","upvote_count":"1","content":"Agree with you!","poster":"jorgesoma","timestamp":"1709277840.0"},{"poster":"desertlotus1211","comments":[{"content":"The question does not specify, but it's irrelevant anyway, since the smallest range for GKE-managed is even larger at /21. The answers all mention pod ranges of /24 or smaller already. If anything, that's even more reason for D to be the correct answer - both /25 and /28 are not possible ranges for pods.","timestamp":"1718607780.0","comment_id":"1231799","upvote_count":"1","poster":"Positron75"},{"comment_id":"1159027","content":"Answer is A","upvote_count":"1","timestamp":"1708886760.0","comments":[{"content":"In addition Answer D say 'Pads' not 'Pods' so it's wrong already. I wonder if the exam question show it like that. Dead giveaway for a wrong answer!","upvote_count":"1","comment_id":"1159031","comments":[{"upvote_count":"2","content":"It should be a typo, they don't want to examine our English skills","comment_id":"1205966","poster":"hamish88","timestamp":"1714719960.0"}],"timestamp":"1708887120.0","poster":"desertlotus1211"}],"poster":"desertlotus1211"}],"comment_id":"1159026","timestamp":"1708886700.0","upvote_count":"1","content":"It says /24 is the is the smallest possible Pod for user-managed... we're using GKE, not user-managed. ;)"}],"upvote_count":"10","content":"Selected Answer: D\nThis is a tricky question. Keep in mind that Nodes use Primary IP ranges whereas Pods and Services use Secondary ranges. For secondary, as you can use all of the IP addresses unlike the Primary where 4 x IPs are reserved. E.g. Max hosts in /24 for Node is 252 vs. 256 for pods and services. If we gather the above logic:\n\n1) 10 nodes = /28\n2) 80 pods = /24 (Reason is /24 is the smallest possible Pod)\n3) 1024 services = /22 (Can use all of 1024 IPs)\n\nhttps://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips#cluster_sizing_secondary_range_pods"},{"poster":"ananta93","upvote_count":"4","comment_id":"990968","timestamp":"1693070520.0","content":"Selected Answer: D\n10 nodes = /28 (14 maximum usable IP address)\n8 Pods per node = 80 Pods. But Number of IP addresses=16*10=160 = /24 (254 maximum usable IP address). Please refer: https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr\n1024 services = /21 (2046 maximum usable IP address) (/22 is not applicable as 1022 maximum usable IP address). \nhttps://www.subnet-calculator.com/cidr.php\nBut none of the above options are fully correct. So, I will go for D"},{"upvote_count":"1","timestamp":"1692474720.0","content":"Selected Answer: A\nA , as /22 is 2^10-2 = 2046 services","poster":"gcpengineer","comment_id":"985414"},{"content":"Selected Answer: B\n21 is musi be so B","upvote_count":"1","comment_id":"975720","timestamp":"1691501280.0","comments":[{"poster":"didek1986","content":"Sorry D as per: https://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips#cluster_sizing_secondary_range_svcs","timestamp":"1691502300.0","comment_id":"975737","upvote_count":"1"}],"poster":"didek1986"},{"timestamp":"1680384060.0","upvote_count":"2","content":"B is correct. Remember 1024 is the total IP in the mask /22. But the free IP to use is 1022. because of 2 more IPs, the correct is /21.","comment_id":"858295","poster":"Xubaca"},{"timestamp":"1680235380.0","content":"Selected Answer: A\nOption B specifies a /21 secondary IP range for Services, which is larger than necessary for the number of services stated in the question.\n\nOption C specifies a /28 secondary IP range for Pods, which is smaller than the minimum IP range required for Pods specified by GKE.\n\nOption D specifies a /24 secondary IP range for Pods, which violates the maximum number of Pods per node stated in the question.","comment_id":"856581","upvote_count":"2","poster":"Komal697"},{"poster":"afeedik","comment_id":"855763","content":"Selected Answer: B\nvote for B, below the explanation:\nmax node is 10 = /28\nmax pod is 80 = /25\nmax service 1024 = /21, can't use /22 because only 1022 usable ip.","timestamp":"1680180420.0","upvote_count":"3"},{"timestamp":"1679898540.0","poster":"GeorgS","content":"Actually it must be D, as the minimum POD IP-Range is /24. This eliminates all other possibilities, right?\nSource: https://cloud.google.com/kubernetes-engine/docs/concepts/alias-ips?hl=de#cluster_sizing_secondary_range_pods","comments":[],"upvote_count":"3","comment_id":"851797"},{"content":"Selected Answer: A\nConfigure a /28 primary IP address range for the node IP addresses. This will allow up to 16 nodes in your cluster (14 usable plus 2 reserved). For example: 10.0.0.0/28\nConfigure a /25 secondary IP range for the Pods. This will allow up to 128 Pods per node (126 usable plus 2 reserved). For example: 10.0.1.0/25\nConfigure a /22 secondary IP range for the Services. This will allow up to 1024 Services in your cluster (1022 usable plus 2 reserved). For example: 10.0.4.0/22\nTherefore, the correct answer is A.","timestamp":"1679338560.0","comment_id":"845162","upvote_count":"1","poster":"Ben756"},{"timestamp":"1679084100.0","upvote_count":"1","poster":"Ben756","comment_id":"842273","content":"Selected Answer: A\nA. Configure a /28 primary IP address range for the node IP addresses. This gives you 16 possible IP addresses, which is enough for your nodes. Configure a /25 secondary IP range for the Pods. This gives you 128 possible IP addresses, which is enough for your Pods. Configure a /22 secondary IP range for the Services. This gives you 1024 possible IP addresses, which is enough for your services."},{"content":"Selected Answer: D\n8 pod per node = 16 ips per node * 10 nodes = 160 ips > /24","comment_id":"797918","upvote_count":"4","timestamp":"1675512600.0","poster":"kim_dh","comments":[{"timestamp":"1675512720.0","comment_id":"797920","content":"Plus seconday ranges don't have reserved ips so we are fine with a 1024 = /22","poster":"kim_dh","upvote_count":"2"}]},{"upvote_count":"1","content":"Ooh. Dat question, really make me confused. For this question not working \" math and typical subnet\". For example with typical math /28 mask provide 14 ip. But for primary configuration for node, only 12... After researching a lot of documents. I can write some notes:\n\"Similarly, if you set the default maximum Pods to 8 and the cluster's secondary IP address range for Pods to /21, Kubernetes assigns a /28 CIDR range to nodes. This allows a maximum of 2(28-21) = 27 = 128 nodes on the cluster.\"\nsource: https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr#configuring_maximum_pods_per_node\nfor secondary \"There are no reserved IP addresses in the secondary IP ranges.\"\nsource: https://cloud.google.com/vpc/docs/subnets#reserved_ip_addresses_in_every_subnet\nthen decide for yourself which option is correct","poster":"nosense","timestamp":"1671709380.0","comment_id":"753242"},{"upvote_count":"3","content":"Selected Answer: B\nAll the correct Maths responds to B","timestamp":"1671136200.0","comment_id":"746482","poster":"Rightsaidfred"},{"comments":[{"timestamp":"1671550980.0","upvote_count":"1","content":"changed to A, \nbecause for secondary \"There are no reserved IP addresses in the secondary IP ranges.\"","comment_id":"751141","poster":"nosense"}],"poster":"nosense","upvote_count":"1","content":"Selected Answer: C\nVote for C\nIn my Opinion best answer it's\nC is full cover our case\n10 nodes /28 ( 16-2 =14 hosts)\nthis link good provide how much need IP in pods per node \nhttps://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr#cidr_ranges_for_clusters\nMaximum Pods per Node = 8 \nCIDR Range per Node =/28 \nNumber of IP addresses = 16\nso for pods need /28. Only C have this\nand /21 give for us 1024 ip for services","comment_id":"745193","timestamp":"1671030180.0"},{"comments":[{"timestamp":"1670848860.0","comment_id":"742787","content":"very strange explanation","upvote_count":"2","poster":"nosense"},{"comment_id":"752782","poster":"samuelmorher","timestamp":"1671658560.0","comments":[{"content":"Even with CIDR, there are still two addresses that are reserved in each subnet - the network address and the broadcast address. The network address is the first address in the subnet and is used to identify the subnet itself. The broadcast address is the last address in the subnet and is used to send a message to all hosts in the subnet.\n\nAnswer is B. This is kind of a trick question.","poster":"mity99","upvote_count":"1","timestamp":"1677880980.0","comment_id":"828446"}],"upvote_count":"4","content":"If I am not wrong, the services CIDR doesn't requires network or broadcast addresses, so the 1024 addresses are fully free and the right answer is the D."}],"timestamp":"1670497920.0","poster":"pfilourenco","upvote_count":"6","comment_id":"738938","content":"Selected Answer: D\nB is not correct since we have 8 pods per node(10 nodes), that means we will need 10x /28 (https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr#cidr_ranges_for_clusters), only a /24 can handle that.\nBut, on D we have /22 for services, but we need 1024 that means we need a /21, and a /22 can only have 1022 IP's available...\nSo, there is no correct answer.\nOn B you will can only have 8 nodes, on D you can only have 1022 services (I will go for D)"},{"poster":"ccieman2016","timestamp":"1670255820.0","upvote_count":"4","content":"Selected Answer: B\nB is correct.","comment_id":"736072"},{"comment_id":"734121","upvote_count":"5","poster":"AzureDP900","comments":[{"comment_id":"752773","content":"8 pods per node means that 16 addresses will be reserved per node, so you will need at least 160 addresses, which requires a /24 CIDR. That makes the D option the only correct.\nhttps://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr","upvote_count":"4","poster":"samuelmorher","timestamp":"1671658140.0"}],"content":"B. Configure a /28 primary IP address range for the node IP addresses. Configure a /25 secondary IP range for the Pods. Configure a /21 secondary IP range for the Services.\n\nB is perfect answer \n10 nodes /28 ( 16-2 =14 hosts)\n80 pods /25 (128-2=126 hosts)\n1024 /21 2048 2046\n\nhttps://www.aelius.com/njh/subnet_sheet.html\n1024 services ..","timestamp":"1670024700.0"}],"question_images":[],"isMC":true,"question_text":"You need to configure a Google Kubernetes Engine (GKE) cluster. The initial deployment should have 5 nodes with the potential to scale to 10 nodes. The maximum number of Pods per node is 8. The number of services could grow from 100 to up to 1024. How should you design the IP schema to optimally meet this requirement?","topic":"1","answer_description":"","exam_id":8,"choices":{"B":"Configure a /28 primary IP address range for the node IP addresses. Configure a /25 secondary IP range for the Pods. Configure a /21 secondary IP range for the Services.","C":"Configure a /28 primary IP address range for the node IP addresses. Configure a /28 secondary IP range for the Pods. Configure a /21 secondary IP range for the Services.","D":"Configure a /28 primary IP address range for the node IP addresses. Configure a /24 secondary IP range for the Pads. Configure a /22 secondary IP range for the Services.","A":"Configure a /28 primary IP address range for the node IP addresses. Configure a /25 secondary IP range for the Pods. Configure a /22 secondary IP range for the Services."},"answers_community":["D (65%)","B (24%)","9%"]}],"exam":{"isImplemented":true,"provider":"Google","id":8,"isBeta":false,"lastUpdated":"11 Apr 2025","name":"Professional Cloud Network Engineer","numberOfQuestions":228,"isMCOnly":true},"currentPage":4},"__N_SSP":true}