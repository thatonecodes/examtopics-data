{"pageProps":{"questions":[{"id":"fN2YgxlUG8gyKevh7Mu9","isMC":true,"choices":{"C":"Use the Cloud Data Loss Prevention API and Dataflow to detect and remove sensitive fields from the data in Cloud Storage. Write the filtered data in BigQuery.","D":"Use Dataflow and Cloud KMS to encrypt sensitive fields and write the encrypted data in BigQuery. Share the encryption key by following the principle of least privilege.","A":"Use Dataflow and the Cloud Data Loss Prevention API to mask sensitive data. Write the processed data in BigQuery.","B":"Use customer-managed encryption keys (CMEK) to directly encrypt the data in Cloud Storage. Use federated queries from BigQuery. Share the encryption key by following the principle of least privilege."},"topic":"1","question_id":231,"answer_images":[],"exam_id":11,"answer_ET":"A","answer":"A","timestamp":"2024-01-04 13:21:00","discussion":[{"comments":[{"comment_id":"1147786","comments":[{"poster":"ML6","content":"Data in Cloud Storage is encrypted by default.","comment_id":"1153841","timestamp":"1724056620.0","upvote_count":"2"}],"timestamp":"1723420800.0","content":"why not d ?","upvote_count":"2","poster":"dungct"}],"comment_id":"1115169","upvote_count":"13","content":"Selected Answer: A\n- Prioritizes Data Privacy: It protects sensitive information by masking it, reducing the risk of exposure in case of unauthorized access or accidental leaks.\n- Reduces Data Sensitivity: Masking renders sensitive data unusable for attackers, even if they gain access to it.\n- Preserves Data Utility: Masked data can still be used for consumer analyses, as patterns and relationships are often preserved, allowing meaningful insights to be derived.","poster":"raaad","timestamp":"1720261860.0"},{"comments":[{"comment_id":"1411747","timestamp":"1743263640.0","poster":"desertlotus1211","content":"For data privacy, removing data through a DLP (Data Loss Prevention) system is generally considered better than masking, as it permanently eliminates sensitive information, whereas masking only conceals it, potentially leaving traces or vulnerabilities","upvote_count":"1"}],"comment_id":"1411746","timestamp":"1743263520.0","upvote_count":"1","content":"Selected Answer: C\nIf I had to choose...\n\nI choose C or A... A can still leave partial sensitive data available.","poster":"desertlotus1211"},{"poster":"AlizCert","timestamp":"1733418240.0","upvote_count":"3","comment_id":"1224788","content":"Selected Answer: A\nWhat made me decide on A instead of C was the \"The data will be used to create consumer analyses\" sentence. Having all the PIIs completely redacted from the records, we were unable to distinguish between the individual customers."},{"upvote_count":"1","poster":"Matt_108","comment_id":"1121877","content":"Selected Answer: A\nOption A, agree with raaad explanation","timestamp":"1720882440.0"},{"timestamp":"1720088460.0","upvote_count":"2","poster":"scaenruy","content":"Selected Answer: A\nA. Use Dataflow and the Cloud Data Loss Prevention API to mask sensitive data. Write the processed data in BigQuery.","comment_id":"1113664"}],"unix_timestamp":1704370860,"question_images":[],"question_text":"You are preparing an organization-wide dataset. You need to preprocess customer data stored in a restricted bucket in Cloud Storage. The data will be used to create consumer analyses. You need to comply with data privacy requirements.\n\nWhat should you do?","answer_description":"","url":"https://www.examtopics.com/discussions/google/view/130321-exam-professional-data-engineer-topic-1-question-306/","answers_community":["A (95%)","5%"]},{"id":"frwsDLVWOZ2TVmFOmjLk","question_images":[],"unix_timestamp":1704370380,"discussion":[{"content":"Selected Answer: C\n- Using the Cloud SQL Auth proxy is a recommended method for secure connections, especially when dealing with dynamic IP addresses. \n- The Auth proxy provides secure access to your Cloud SQL instance without the need for Authorized Networks or managing IP addresses. \n- It works by encapsulating database traffic and forwarding it through a secure tunnel, using Google's IAM for authentication.\n- Leaving the Authorized Networks empty means you're not allowing any direct connections based on IP addresses, relying entirely on the Auth proxy for secure connectivity. This is a secure and flexible solution, especially for applications with dynamic IPs.","timestamp":"1720711260.0","upvote_count":"10","comments":[{"upvote_count":"1","content":"In question \"You want to use Cloud SQL public IP\", how this could be if \"Leaving the Authorized Networks empty means you're not allowing any direct connections based on IP addresses\" ?","timestamp":"1742130840.0","comment_id":"1399241","poster":"FreshMind"}],"poster":"raaad","comment_id":"1120004"},{"content":"Selected Answer: C\nOption C","poster":"JyoGCP","timestamp":"1724316780.0","upvote_count":"1","comment_id":"1156312"},{"timestamp":"1721309460.0","poster":"Pukapuiz","content":"Selected Answer: C\nThe Cloud SQL Auth Proxy is a Cloud SQL connector that provides secure access to your instances without a need for Authorized networks or for configuring SSL.\nhttps://cloud.google.com/sql/docs/mysql/sql-proxy","comment_id":"1126002","upvote_count":"3"},{"poster":"Matt_108","content":"Selected Answer: C\nalways use Cloud SQL Auth proxy if possible","timestamp":"1720789020.0","upvote_count":"1","comment_id":"1120864"},{"content":"https://stackoverflow.com/questions/27759356/how-to-authorize-my-dynamic-ip-network-address-in-google-cloud-sql\nhttps://stackoverflow.com/questions/24749810/how-to-make-a-google-cloud-sql-instance-accessible-for-any-ip-address","comment_id":"1119723","comments":[{"poster":"JyoGCP","timestamp":"1724316720.0","comment_id":"1156311","content":"Links also say not to go with option D.\n0.0.0.0/0 which includes all possible IP Addresses is not recommended for security reasons. You have to keep access as restricted as possible.","upvote_count":"4"}],"timestamp":"1720694280.0","poster":"Sofiia98","upvote_count":"4"},{"comments":[{"content":"Save your shxx answer in your dxxb head.","upvote_count":"1","timestamp":"1728782820.0","poster":"BennyXu","comment_id":"1194601"}],"poster":"Sofiia98","upvote_count":"1","timestamp":"1720694220.0","comment_id":"1119721","content":"Selected Answer: D\nAs for me, after reading documentation, option D looks appropriate"},{"upvote_count":"1","poster":"scaenruy","comment_id":"1113655","content":"Selected Answer: C\nC. Leave the Authorized Network empty. Use Cloud SQL Auth proxy on all applications.","timestamp":"1720087980.0"}],"exam_id":11,"answer":"C","url":"https://www.examtopics.com/discussions/google/view/130320-exam-professional-data-engineer-topic-1-question-307/","timestamp":"2024-01-04 13:13:00","topic":"1","answer_images":[],"question_text":"You need to connect multiple applications with dynamic public IP addresses to a Cloud SQL instance. You configured users with strong passwords and enforced the SSL connection to your Cloud SQL instance. You want to use Cloud SQL public IP and ensure that you have secured connections. What should you do?","isMC":true,"choices":{"D":"Add CIDR 0.0.0.0/0 network to Authorized Network. Use Cloud SQL Auth proxy on all applications.","A":"Add CIDR 0.0.0.0/0 network to Authorized Network. Use Identity and Access Management (IAM) to add users.","C":"Leave the Authorized Network empty. Use Cloud SQL Auth proxy on all applications.","B":"Add all application networks to Authorized Network and regularly update them."},"answer_ET":"C","answers_community":["C (94%)","6%"],"question_id":232,"answer_description":""},{"id":"dRSNrVBMJWurI2RrD67X","answer_description":"","timestamp":"2024-01-04 13:05:00","url":"https://www.examtopics.com/discussions/google/view/130319-exam-professional-data-engineer-topic-1-question-308/","unix_timestamp":1704369900,"question_id":233,"answer":"C","question_text":"You are migrating a large number of files from a public HTTPS endpoint to Cloud Storage. The files are protected from unauthorized access using signed URLs. You created a TSV file that contains the list of object URLs and started a transfer job by using Storage Transfer Service. You notice that the job has run for a long time and eventually failed. Checking the logs of the transfer job reveals that the job was running fine until one point, and then it failed due to HTTP 403 errors on the remaining files. You verified that there were no changes to the source system. You need to fix the problem to resume the migration process. What should you do?","question_images":[],"discussion":[{"timestamp":"1704476100.0","upvote_count":"7","poster":"raaad","content":"Selected Answer: C\n- It addresses the likely issue: that the signed URLs have expired or are otherwise invalid. By creating a new TSV file with freshly generated signed URLs (with a longer validity period), you're ensuring that the Storage Transfer Service has valid authorization to access the files.\n- Splitting the TSV file and running parallel jobs might help in managing the workload more efficiently and overcoming any limitations related to the number of files or transfer speed.","comment_id":"1114705"},{"poster":"srivastavas08","upvote_count":"6","content":"C. Create a new TSV file for the remaining files by generating signed URLs with a longer validity period. Split the TSV file into multiple smaller files and submit them as separate Storage Transfer Service jobs in parallel.\n\nHere's why:\n\nHTTP 403 errors: These errors indicate unauthorized access, but since you verified the source system and signed URLs, the issue likely lies with expired signed URLs. Renewing the URLs with a longer validity period prevents this issue for the remaining files.\nSeparate jobs: Splitting the file into smaller chunks and submitting them as separate jobs improves parallelism and potentially speeds up the transfer process.\nAvoid manual intervention: Options A and D require manual intervention and complex setups, which are less efficient and might introduce risks.\nLonger validity: While option B addresses expired URLs, splitting the file offers additional benefits for faster migration.","comment_id":"1146367","timestamp":"1707576120.0"},{"poster":"Pime13","comment_id":"1337076","upvote_count":"1","content":"Selected Answer: C\nC. Create a new TSV file for the remaining files by generating signed URLs with a longer validity period. Split the TSV file into multiple smaller files and submit them as separate Storage Transfer Service jobs in parallel.\n\nThe HTTP 403 errors likely occurred because the signed URLs expired before the transfer could complete. By generating new signed URLs with a longer validity period, you can ensure that the URLs remain valid for the duration of the transfer. Splitting the TSV file into smaller files and submitting them as separate jobs can help manage the load and reduce the risk of timeouts or other issues","timestamp":"1736159880.0"},{"poster":"iooj","content":"Selected Answer: C\ngot this one on the exam, aug 2024, passed","comment_id":"1260547","upvote_count":"2","timestamp":"1722755580.0"},{"upvote_count":"3","timestamp":"1705164600.0","comment_id":"1121871","content":"Selected Answer: C\nOption C - agree with Raaad","poster":"Matt_108"},{"poster":"scaenruy","upvote_count":"2","comment_id":"1113646","content":"Selected Answer: C\nC. Create a new TSV file for the remaining files by generating signed URLs with a longer validity period. Split the TSV file into multiple smaller files and submit them as separate Storage Transfer Service jobs in parallel.","timestamp":"1704369900.0"}],"topic":"1","choices":{"B":"Renew the TLS certificate of the HTTPS endpoint. Remove the completed files from the TSV file and rerun the Storage Transfer Service job.","C":"Create a new TSV file for the remaining files by generating signed URLs with a longer validity period. Split the TSV file into multiple smaller files and submit them as separate Storage Transfer Service jobs in parallel.","D":"Update the file checksums in the TSV file from using MD5 to SHA256. Remove the completed files from the TSV file and rerun the Storage Transfer Service job.","A":"Set up Cloud Storage FUSE, and mount the Cloud Storage bucket on a Compute Engine instance. Remove the completed files from the TSV file. Use a shell script to iterate through the TSV file and download the remaining URLs to the FUSE mount point."},"answers_community":["C (100%)"],"answer_ET":"C","isMC":true,"answer_images":[],"exam_id":11},{"id":"GPnCBz3ZgSp3Ux44ZrmF","answer_ET":"B","exam_id":11,"timestamp":"2024-01-26 00:30:00","topic":"1","question_id":234,"unix_timestamp":1706225400,"answer_description":"","question_images":[],"url":"https://www.examtopics.com/discussions/google/view/132182-exam-professional-data-engineer-topic-1-question-309/","isMC":true,"answer":"B","answers_community":["B (90%)","5%"],"question_text":"You work for an airline and you need to store weather data in a BigQuery table. Weather data will be used as input to a machine learning model. The model only uses the last 30 days of weather data. You want to avoid storing unnecessary data and minimize costs. What should you do?","discussion":[{"content":"Selected Answer: B\nPartitioned based on weather date, with partition expiration set","poster":"AllenChen123","upvote_count":"6","timestamp":"1706225400.0","comment_id":"1132144"},{"comment_id":"1260548","upvote_count":"6","poster":"iooj","timestamp":"1722755640.0","content":"Selected Answer: B\ngot this one on the exam, aug 2024, passed"},{"upvote_count":"1","comment_id":"1411748","timestamp":"1743263880.0","content":"Selected Answer: C\nPartitioning by ingestion time is simpler and sufficient if data retention is based on load time, not the data’s internal timestamp","poster":"desertlotus1211"},{"upvote_count":"1","content":"Selected Answer: B\nB\n\nBQ partitioning with partition expiration of 30 days allows you to only filter for the last 30 days and delete days that are beyond 30 days.","comment_id":"1346522","timestamp":"1737818460.0","poster":"juliorevk"},{"timestamp":"1711398180.0","poster":"d11379b","comment_id":"1182766","upvote_count":"3","content":"https://cloud.google.com/bigquery/docs/partitioned-tables\nHere it mentions “ For TIMESTAMP and DATETIME columns, the partitions can have either hourly, daily, monthly, or yearly granularity.l\nSo you should not calculate the amount of partitions on second granularity"},{"upvote_count":"1","comments":[{"comment_id":"1173049","upvote_count":"1","timestamp":"1710384720.0","content":"This is a good point","poster":"ce9e395","comments":[{"upvote_count":"6","timestamp":"1713167340.0","poster":"joao_01","comment_id":"1195885","content":"It's not a good point. The granularity goes to DAYs, not SECONDs. So, the right answer is B."}]}],"content":"Selected Answer: D\nSkeptical about Option B as maximum partitions in a BQ table is 4000.Since Datetime value is a timestamp it will have more than 4000 values in a duration for 30 days (30*24*60*60 = 259,200 ). So Option D is right imo","poster":"chambg","comment_id":"1168621","timestamp":"1709883360.0"},{"upvote_count":"1","timestamp":"1708600440.0","content":"Selected Answer: B\nOption B","poster":"JyoGCP","comment_id":"1156320"},{"comment_id":"1138512","content":"Selected Answer: B\nWe need the last 30 days, we don't care about ingestion time","upvote_count":"4","timestamp":"1706876580.0","poster":"Sofiia98"}],"answer_images":[],"choices":{"B":"Create a BigQuery table partitioned by datetime value of the weather date. Set up partition expiration to 30 days.","A":"Create a BigQuery table where each record has an ingestion timestamp. Run a scheduled query to delete all the rows with an ingestion timestamp older than 30 days.","D":"Create a BigQuery table with a datetime column for the day the weather data refers to. Run a scheduled query to delete rows with a datetime value older than 30 days.","C":"Create a BigQuery table partitioned by ingestion time. Set up partition expiration to 30 days."}},{"id":"lVC8rgYTap6DAagBMgA0","url":"https://www.examtopics.com/discussions/google/view/17051-exam-professional-data-engineer-topic-1-question-31/","discussion":[{"upvote_count":"80","timestamp":"1595745480.0","content":"Correct Option : A\nExplanation:-This option is correct as the key requirement is not to lose\nthe data, the Dataflow pipeline can be stopped using the Drain option.\nDrain options would cause Dataflow to stop any new processing, but would\nalso allow the existing processing to complete","comments":[{"comment_id":"494419","timestamp":"1638714480.0","upvote_count":"33","content":"To all the New Guys Here. Please don't get confused with all the people's fight over here. Just google the question and you will get the correct ans in many website. Still I recommend to refer this website for question. for this Particular problem ans is A. Reason is here --> https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#python\nhave time to read the full page when to use Update using Json mapping and when to use Drain. (you will have question following for Drain option though).\nThumb rule is this,\n# If any major change to windowing transformation (like completely changing window fn from fixed to sliding) in Beam/Dataflow/you want to stop pipeline but want inflight data --> use Drain option.\n# For all other use cases and Minor changing to windowing fn (like just changing window time of sliding window) --> Use Update with Json mapping.\n\nIn this case it is Code change to new version. so, Update with Json mapping. Simple as that.\n\nAll the Best Guys.","poster":"BigQuery","comments":[{"timestamp":"1638768180.0","upvote_count":"6","comments":[{"content":"Its clearly mentioned in the question that pipeline in compatible, if it is so you can not update with JSON mapping. Only way is to stop the pipeline with Drain and replace it with a new one. So the closest answer is A only.","timestamp":"1647884640.0","comment_id":"572405","comments":[{"timestamp":"1665297300.0","comment_id":"689944","content":"JSON Mapping is a way to solve compatibility issues when updating","upvote_count":"1","poster":"maxdataengineer"}],"poster":"anji007","upvote_count":"7"}],"poster":"BigQuery","content":"SORRY I MEANT TO SAY ANS IS 'B'. In this case it is Code change to new version. so, Update with Json mapping.","comment_id":"494916"}]},{"comment_id":"437906","timestamp":"1630589400.0","poster":"sergio6","content":"C and D are incorrect because canceling the old pipeline can cause data loss \nhttps://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline \nA is incorrect because updating pipeline does not include any drain flag\nhttps://cloud.google.com/dataflow/docs/guides/updating-a-pipeline","upvote_count":"7","comments":[{"content":"drain is in the guide ...stopping-a-pipeline. Just ...updating-a-pipeline is not enough to evaluate this question.\n\nthat's why drainnin is not a flag in a pipeline update. it is a process about how to stop a pipeline w/o data loss !\n\ndata in dataflow is in 3 stages. ingestion data, buffered data and in-flight data which is processing by old pipeline.","upvote_count":"2","timestamp":"1643122080.0","poster":"Tanzu","comment_id":"532205"},{"content":"B is correct: Update the current pipeline and provide the transform mapping JSON object.\n Dataflow always performs a compatibility check between the old and new job and without the mapping (necessary as old and new are incompatible) it would give an error and the old job would continue to be executed\nhttps://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#Mapping\nhttps://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#CCheck","comments":[{"poster":"Tanzu","timestamp":"1643122200.0","upvote_count":"2","comments":[{"timestamp":"1665297240.0","poster":"maxdataengineer","content":"B is a way to solve compatibility issues","upvote_count":"2","comment_id":"689943"}],"comment_id":"532208","content":"new pipeline is incompatible means, compatibility check will fail. so you wil not be able to update as new pipeline.\n\nthat's why B cannot be valid answer here in this context."}],"comment_id":"470255","upvote_count":"5","poster":"sergio6","timestamp":"1635601620.0"}]},{"upvote_count":"3","comments":[{"poster":"sergio6","timestamp":"1635601740.0","comment_id":"470257","upvote_count":"2","comments":[{"poster":"Tanzu","comments":[{"poster":"maxdataengineer","comment_id":"689941","upvote_count":"1","timestamp":"1665297180.0","content":"Yes but the compatibility problem will still be there, stopping the pipeline does not solve that"}],"content":"two steps.. 1st drain the job w/ sdk or console. then, update the pipeline. cause it is OK to update a job while in draining","timestamp":"1643122440.0","comment_id":"532211","upvote_count":"2"}],"content":"A is incorrect because updating pipeline does not include any drain flag"},{"timestamp":"1643122860.0","poster":"Tanzu","upvote_count":"6","content":"There are 5 update scenarios in a job in update-a-pipeline context. \na- changing transform name (requires mapping) , adding a new step (no need for mapping)\nb- windowing or triggering (only for minor changes, otherwise don't do that)\nc- coders (don't do that\nd- schema (adding or required to nullable is possible) other scenarios not possible\ne- stateful operations\n\nnone of them are relevant, here. cause there is no specific detail, secondly incompatible w. new pipeline. \n\nand mostly if in compatible only a has a solve. but not for all cases.\nso, drain == no data loss (ingesting, buffered and in-flight data) is the only scenario.","comment_id":"532217"}],"content":"Option C & D are incorrect as Cancel Option will lead to loose the data\nOption B is very Close, since the new Code make pipeline incompatible by providing transform mapping JSON file you can handle this","poster":"VishalB","timestamp":"1595745840.0","comment_id":"143865"},{"comment_id":"689940","timestamp":"1665297120.0","upvote_count":"3","poster":"maxdataengineer","content":"As you said, Drain stops the pipeline but it does not solve the compatibility issue. The pipeline will not be able to be updated which is the core problem of the question.","comments":[{"timestamp":"1668867780.0","content":"You do not want to lose any data when making this update - is the core problem. You are doing it ANYWAY.","upvote_count":"2","comment_id":"722048","poster":"assU2"}]}],"comment_id":"143863","poster":"VishalB"},{"poster":"[Removed]","content":"Correct B - https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#preventing_compatibility_breaks","upvote_count":"24","comment_id":"66267","timestamp":"1584709980.0","comments":[{"timestamp":"1584709980.0","comment_id":"66268","poster":"[Removed]","content":"Changing the pipeline graph without providing a mapping. When you update a job, the Dataflow service attempts to match the transforms in your prior job to the transforms in the replacement job in order to transfer intermediate state data for each step. If you've renamed or removed any steps, you'll need to provide a transform mapping so that Dataflow can match state data accordingly.","comments":[{"comment_id":"75087","poster":"arnabbis4u","upvote_count":"9","content":"The job can be incompatible for reasons other than transformation changes. Since it is clearly mentioned that the change job is incompatible, I think we have to create a new job and D should be correct.","comments":[{"upvote_count":"3","content":"Canceling the job will cause data loss, against the requirement","poster":"sergio6","timestamp":"1635601860.0","comment_id":"470259"}],"timestamp":"1586990460.0"}],"upvote_count":"4"}]},{"content":"Selected Answer: B\nPlease refer the google doc link below,\nhttps://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline#drain","comment_id":"1410161","timestamp":"1742935560.0","poster":"abhaya2608","upvote_count":"1"},{"content":"Selected Answer: D\nCreate a new pipeline that has a new Cloud Pub/Sub subscription and cancel the old pipeline","timestamp":"1742048460.0","poster":"Parandhaman_Margan","comment_id":"1398874","upvote_count":"1"},{"comment_id":"1326167","content":"Selected Answer: D\nD. Create a new pipeline that has a new Cloud Pub/Sub subscription and cancel the old pipeline:\n\nBy creating a new subscription, the new pipeline will consume messages independently of the old pipeline. This ensures no data is lost as messages published to Pub/Sub are delivered to all subscriptions.\nOnce the new pipeline is verified to be running as expected, the old pipeline can be safely canceled.","poster":"dans_puts","timestamp":"1734102180.0","upvote_count":"1"},{"comment_id":"1315389","upvote_count":"1","poster":"Smakyel79","timestamp":"1732120380.0","content":"Why option D is better for this case - In this scenario: the pipeline is incompatible with the old one; running the two pipelines concurrently ensures no data loss and allows for easier debugging of the new pipeline; a new subscription ensures the old pipeline can finish processing its messages while the new pipeline starts fresh"},{"timestamp":"1732119900.0","poster":"Smakyel79","content":"Draining a pipeline stops it in an orderly manner but does not address incompatibility issues. Once the pipeline is drained, no more data is processed, and the new pipeline starts fresh. This can lead to data loss if there are messages in Pub/Sub that the drained pipeline didn't process.","upvote_count":"1","comment_id":"1315379"},{"upvote_count":"2","poster":"philli1011","content":"Option: C\nusing draining will stop the subscription totally while allowing the existing data to complete processing. While the pipeline is stopped, will lose streaming data. The best option is to create a new pipeline that is connected to the same subscription, then we can apply drain to the old pipeline and end it. That way we will capture all the streaming data.","timestamp":"1706268480.0","comment_id":"1132471"},{"content":"Selected Answer: A\nDrain flag: This flag allows the pipeline to finish processing all existing data in the Pub/Sub subscription before shutting down. This ensures no data is lost during the update.\nCurrent pipeline: Updating the current pipeline minimizes disruption and avoids setting up entirely new infrastructure.\nIncompatible changes: Even with incompatible changes, the drain flag ensures existing data is processed correctly.","comment_id":"1098051","upvote_count":"1","poster":"MaxNRG","comments":[{"comment_id":"1098052","poster":"MaxNRG","content":"While other options might work in some cases, they have drawbacks:\n\nB. Transform mapping JSON: This option is mainly for schema changes and doesn't guarantee data completion before shutdown.\nC. New pipeline, same subscription: This risks duplicate processing of data if both pipelines run concurrently.\nD. New pipeline, new subscription: This loses the current pipeline's state and potentially data, making it impractical for incompatible changes.\nTherefore, the most reliable and data-safe approach is to update the current pipeline with the drain flag for seamless transition and data integrity.\n\nRemember, always test updates in a staging environment before deploying to production.","upvote_count":"1","timestamp":"1702721160.0"}],"timestamp":"1702721160.0"},{"poster":"TVH_Data_Engineer","upvote_count":"2","content":"Selected Answer: C\nSame Cloud Pub/Sub Subscription: By using the same Cloud Pub/Sub subscription for the new pipeline, you ensure that no messages are lost during the transition. Pub/Sub manages message delivery, ensuring that unacknowledged messages (those that haven't been processed by your old pipeline) will be available for the new pipeline to process.\n\nCreating a New Pipeline: Since the update makes the new pipeline incompatible with the current version, it's necessary to create a new pipeline. Attempting to update the current pipeline in place (options A and B) would not be feasible due to compatibility issues.\n\nCancel the Old Pipeline: Once the new pipeline is up and running and processing messages, you can safely cancel the old pipeline. This ensures a smooth transition with no data loss.","timestamp":"1702553760.0","comment_id":"1096406"},{"comment_id":"1087725","upvote_count":"1","timestamp":"1701701460.0","poster":"JOKKUNO","content":"In order to make an update to a Google Cloud Dataflow streaming pipeline without losing any data, the recommended approach is:\n\nA. Update the current pipeline and use the drain flag.\n\nExplanation:\n\nThe drain flag is designed to allow the current pipeline to finish processing any remaining data before shutting down. This helps ensure that no data is lost during the update process.\nBy updating the current pipeline and using the drain flag, you allow the pipeline to complete its current processing before the update takes effect, minimizing the risk of data loss.\nThis approach is a safe way to transition from the old version to the new version without interrupting data processing."},{"upvote_count":"1","timestamp":"1700577960.0","comment_id":"1076383","poster":"axantroff","content":"I would vote for A because of the structure of the exam, but there are other options worth considering as well"},{"poster":"RT_G","timestamp":"1699396920.0","upvote_count":"1","content":"Selected Answer: C\nMy answer is C. Chatted with ChatGPT and narrowed down on this option. Let me know your thoughts on this perspective.\nOption C - By using the existing subscription, you can ensure that the data flow remains uninterrupted, and there is no loss of data during the transition from the old pipeline to the new one.\n\nCreating a new pipeline that uses the same Cloud Pub/Sub subscription allows for a seamless transition without any interruptions to the data flow. This approach ensures that the new pipeline can continue to consume data from the same subscription as the old pipeline, thereby maintaining data continuity throughout the update process.","comment_id":"1065203"},{"comment_id":"1064932","poster":"rocky48","content":"Selected Answer: A\nCorrect Option : A\nExplanation:-This option is correct as the key requirement is not to lose\nthe data, the Dataflow pipeline can be stopped using the Drain option.","timestamp":"1699370640.0","upvote_count":"1"},{"upvote_count":"1","comment_id":"1053171","timestamp":"1698181800.0","content":"It should be B\nDrain will stop the existing job only and it does not suffice the updated schema.\nIn order to bring updated schema into effect, updated JSON mapping need to be applied.","poster":"mk_choudhary"},{"timestamp":"1697134980.0","upvote_count":"1","content":"The two cores of this question are: 1- Don't lose data ← Drain, is perfect for this because you process all buffer data and stop reviving messages; normally this message is alive for 7 days of retry, so when you start a new job you will receive all without lose any data. 2- Incompatible new code ← mapping solve some incompatibilities like change name of a ParDO but no a version issue. So launch a new job with the new code, it's the only option.\nSo, option is A.","poster":"Simhamed2015","comment_id":"1042002"},{"comment_id":"1027200","poster":"imran79","timestamp":"1696667400.0","content":"The best choice is D. Create a new pipeline that has a new Cloud Pub/Sub subscription and cancel the old pipeline.","upvote_count":"1"},{"content":"Selected Answer: A\nAnswer is A \n\nhttps://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline#drain","timestamp":"1689678960.0","poster":"Mathew106","comment_id":"955299","upvote_count":"1"},{"poster":"itsmynickname","content":"You don't want to lose data, so drain dude, drain!","timestamp":"1688987220.0","comment_id":"948017","upvote_count":"1"},{"content":"Option C is the correct answer because creating a new pipeline with the same Cloud Pub/Sub subscription and canceling the old pipeline allows for a seamless transition without any data loss. The new pipeline can consume from the same subscription as the old pipeline and continue processing data, while the old pipeline can be safely stopped without impacting data ingestion. This approach ensures continuity of data processing while updating the pipeline code.","upvote_count":"1","comment_id":"879203","timestamp":"1682330280.0","poster":"Oleksandr0501"},{"upvote_count":"1","timestamp":"1681210500.0","poster":"izekc","content":"Selected Answer: A\nA is correct since it is the first step to prevent data loss","comment_id":"867217"},{"upvote_count":"1","poster":"vivek123etl","content":"https://cloud.google.com/blog/products/gcp/managing-streaming-pipelines-in-google-cloud-dataflow-just-got-better","timestamp":"1678449660.0","comment_id":"834932"},{"comment_id":"825585","poster":"mahdiiii","content":"C: \nCreate a new pipeline that has the same Cloud Pub/Sub subscription and cancel the old pipeline.\n\nIf the update to the Cloud Dataflow pipeline will make it incompatible with the current version, it is best to create a new pipeline that has the same Cloud Pub/Sub subscription and then cancel the old pipeline. This approach ensures that you do not lose any data while still being able to perform the necessary update.","timestamp":"1677653280.0","upvote_count":"1"},{"comment_id":"819498","comments":[{"comment_id":"819500","poster":"musumusu","timestamp":"1677174000.0","content":"You can't *update * the pipeline. Please check the docs","upvote_count":"1"}],"timestamp":"1677173940.0","poster":"musumusu","upvote_count":"1","content":"Answer C:\nAccording to latest docs you can update an existing batch pipleine, \nhttps://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#python_1\n\ncreate new one with same subscription. And start getting the data as before and once its ready, remove earlier one. \nI will go with C"},{"poster":"[Removed]","upvote_count":"2","comments":[{"poster":"[Removed]","timestamp":"1676993760.0","content":"This is a tricky question.\n1. Because of incompatibility, you just cannot \"UPDATE\", plus, for update method, there is never a \"DRAIN\" flag. \n2. When you talk about a flag, it is like a parameter attached to the \"UPDATE\" method, it is not the same as stopping the pipeline with Drain method. \n3. Option D is not the best because you will need to reprocess duplicated old data, HOWEVER, you will not LOSE any data. It says must not lose any data, it did not say must not lose \"in-flight\" data.\n4. I see many comments jumped on the \"CANCEL\" word in C&D, but don't forget, although you did not \"DRAIN\", the data will not be lost with new subscription.\n5. In this particular question, I believe general consensus might not be a wise one.","comment_id":"816751","upvote_count":"2"}],"content":"Selected Answer: D\nExplained below.","timestamp":"1676993760.0","comment_id":"816750"},{"poster":"midgoo","upvote_count":"1","comment_id":"816337","timestamp":"1676966520.0","content":"Selected Answer: B\nThere is no such thing as 'drain flag' for update. It is for stopping the pipeline. It could work too but the answer has to be rephrased"},{"content":"Correct Option: A\nBut practically, D can be correct too we will not lose any data here as per requirement, only problem here is to update all connected services to use the new subscription that were getting messages from pub/sub topic. \nOption B: is not good approach as json transform mapping is used for specifying the mapping between input data and output data, which does not address our issue because we an have version issue and it does not ensure that data will not be lost during update.","poster":"hellobot","timestamp":"1676289600.0","comment_id":"807352","upvote_count":"1"},{"poster":"waiebdi","upvote_count":"1","timestamp":"1674640380.0","content":"Selected Answer: A\nDraining is correct","comment_id":"787468"},{"timestamp":"1673328120.0","comment_id":"771077","poster":"ler_mp","content":"Selected Answer: A\nYou do not want to lose any data, so you should drain the pipeline instead of just cancelling it. Since the only option that includes draining the pipeline, the answer should be A.","upvote_count":"1"},{"comment_id":"769001","upvote_count":"1","content":"Selected Answer: B\nUpdate command can only be done if the replacement pipeline is compatible with existing pipeline. the problem state very clear that the replacement pipeline is incompatible, thus Option A is out of choice. \n\nThe problem does say that they dont want to lose any of the processing data, thus provide JSON mapping object to deal with incompatible is correct choice here.","poster":"korntewin","timestamp":"1673139660.0"},{"upvote_count":"1","comment_id":"755895","timestamp":"1671991800.0","poster":"Brillianttyagi","content":"Selected Answer: A\nA - Drain a job. This method applies only to streaming pipelines. Draining a job enables the Dataflow service to finish processing the buffered data while simultaneously ceasing the ingestion of new data. For more information, see Draining a job."},{"comment_id":"752384","timestamp":"1671630540.0","upvote_count":"1","poster":"adelynllllllllll","content":"B is the answer\nWhen transfer forming mapping, the data will be buffered temporarily. it will be transferred to the new job after the update is completed."},{"upvote_count":"2","timestamp":"1671471180.0","content":"Selected Answer: B\nThe answer seems to be B to me. Dataflow automatically performs any compatibility checks when the code is updated. Inflight data processing is also taken care. There could be a small amount of downtime while the new jobs start post the compatibility checks. However this process means that new incoming data may not be applied with the revised transformations. But since the question is about not losing the data, the answer is B","comment_id":"750083","poster":"Krish6488"},{"upvote_count":"1","comment_id":"749947","timestamp":"1671462060.0","poster":"Prakzz","content":"Selected Answer: B\nB is right."},{"timestamp":"1670937780.0","content":"Selected Answer: A\nCorrect Option : A","upvote_count":"1","comment_id":"744063","poster":"Nirca"},{"upvote_count":"2","comment_id":"743497","poster":"DGames","content":"Selected Answer: D\nAnswer - D Why ? after reading all discussion point and then re-read the question again , might I am thinking incorrect, Here is below point are mention in question. \n1 . New Pipeline - means this is not current pipeline where we need to apply drain option. Yes in question it misleading statement mention about data lost.\n2. Option B - Why you need to update current pipeline with JSON, No sense to update.\n3. Option C - Old subscription already in use with current Pipeline.\nSO I will go Option D.","timestamp":"1670897040.0"},{"comment_id":"736915","poster":"odacir","upvote_count":"1","timestamp":"1670338320.0","content":"Selected Answer: A\nThere are two cores in this question.\n1- Don't lose data ← Drain, is perfect for this because you process all buffer data and stop reviving messages; normally this message is alive for 7 days of retry, so when you start a new job you will receive all without lose any data.\n2- Incompatible new code ← mapping solve some incompatibilities like change name of a ParDO but no a version issue. So launch a new job with the new code, it's the only option. \nSo, option is A."},{"poster":"Thasni","upvote_count":"2","comment_id":"723333","timestamp":"1669022160.0","content":"The below two links shows the answer as A. https://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline and https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline"},{"content":"A\n\nhttps://stackoverflow.com/questions/74012067/how-to-update-a-dataflow-incompatible-pipeline-without-loosing-in-data","timestamp":"1668957840.0","poster":"Fabius","comment_id":"722726","upvote_count":"2"},{"comment_id":"714090","poster":"RMK2000","upvote_count":"1","timestamp":"1667937240.0","content":"Selected Answer: A\nhttps://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline"},{"comment_id":"713918","poster":"wan2three","timestamp":"1667920200.0","content":"B should be the answer\nhttps://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#Mapping:~:text=templates%20for%20instructions.-,The%20update%20process%20and%20its%20effects,-When%20you%20update","upvote_count":"1"},{"comment_id":"713061","content":"Selected Answer: B\nAnswer is B: see links and text below from GCP website.\n\nhttps://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#java_3\nPreventing compatibility breaks:\nChanging the pipeline graph without providing a mapping. When you update a job, the Dataflow service attempts to match the transforms in your prior job to the transforms in the replacement job in order to transfer intermediate state data for each step. If you rename or remove any steps, you need to provide a transform mapping so that Dataflow can match state data accordingly.","comments":[{"upvote_count":"2","timestamp":"1667937180.0","content":"Apologies, I take back my vote and comment. The previous answer applies not to this scenraio where Pub/Sub is a source. Answer A makes sense. https://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline","poster":"RMK2000","comment_id":"714089"}],"upvote_count":"1","poster":"RMK2000","timestamp":"1667827200.0"},{"poster":"Troezon","upvote_count":"1","timestamp":"1667713680.0","content":"Correct Option - A\n\nAs per documentation at https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#Mapping\n\nyou can update existing streaming pipeline by passing the --update flag and mapping options.","comment_id":"712165"},{"timestamp":"1666301520.0","poster":"kennyloo","comment_id":"700312","upvote_count":"1","content":"A drained flag is the right option for this case"},{"timestamp":"1666121940.0","upvote_count":"1","comment_id":"698482","content":"Selected Answer: A\nA. For streaming pipelines and to prevent data loss per doc: https://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline#drain:~:text=If%20you%20want%20to%20prevent%20data%20loss","poster":"Hoham"},{"comment_id":"691585","content":"Selected Answer: B\nCan't be C or D (data lost). A can't be because don't exist a drain flag for updating a pipeline.","poster":"devaid","timestamp":"1665445260.0","upvote_count":"1"},{"content":"Selected Answer: B\nAnswer: B. \nOptions C & D are discarded because if you cancel, you losse data. Option A can't be because the update itself won't stop/drain your job, it will save the in-flight data states. According to google, refering to the update function: \"The replacement job will preserve any intermediate state data from the prior job. Note, however, that changing the windowing or triggering strategies will not affect data that's already buffered or already being processed by the pipeline. In-flight data will still be processed by the transforms in your new pipeline. Additional transforms that you add in your replacement pipeline code may or may not take effect, depending on where the records are buffered.\"","comment_id":"688955","poster":"devaid","upvote_count":"1","timestamp":"1665187620.0"},{"content":"Selected Answer: B\nbe is right answer. According to documentation:\nThe replacement job preserves any intermediate state data from the prior job, as well as any buffered data records or metadata currently \"in-flight\" from the prior job. For example, some records in your pipeline might be buffered while waiting for a window to resolve. So since we are not loosing data option A lost in value and therefore B is best!","upvote_count":"1","comment_id":"667237","poster":"Remi2021","timestamp":"1663000920.0"},{"upvote_count":"2","poster":"Dan137","comment_id":"653257","timestamp":"1661742060.0","content":"Selected Answer: A\nAccording to the Cloud SDK: https://cloud.google.com/sdk/gcloud/reference/dataflow/jobs/drain\n\nOnce Drain is triggered, the pipeline will stop accepting new inputs. The input watermark will be advanced to infinity. Elements already in the pipeline will continue to be processed. Drained jobs can safely be cancelled."},{"timestamp":"1661723640.0","poster":"ducc","upvote_count":"1","comment_id":"653173","content":"Selected Answer: A\nVote for A\nAny question with Dataflow that avoiding missing in-flight data => Drain"},{"comment_id":"619241","upvote_count":"1","timestamp":"1655726700.0","poster":"noob_master","content":"Selected Answer: D\nD is the option: the creation of the new subscription for the new pipeline is the best option. The data will be processed in the new and old pipeline in the same time - Yes, there is a risk of duplication of data - but 0% will be lost in the process.\n\n(because there is no limitation for duplicate data processing, D is best than A in my point of view)"},{"poster":"FrankT2L","content":"Selected Answer: D\nWe have to stop the pipeline in DRAIN mode and make the changes but there is no option in the responses.\n\nSo the only possibility is to create the new pipeline attached to a new Pub / Sub subscription and delete the old pipeline.","comment_id":"613269","upvote_count":"1","timestamp":"1654693140.0"},{"poster":"alecuba16","content":"Selected Answer: A\nIncompatible -> B is not a viable option, then A.","comment_id":"599581","timestamp":"1652185200.0","upvote_count":"1"},{"poster":"alecuba16","content":"Selected Answer: A\nAs google states into their best practises, the best way to go is B, but unfortunatelly it is only possible when the upgrade is compatible. As the question indicates that it is incompatible, we have to drain the pipeline and stop reading messages from pub/sub (stop the subscription) , save the current in flight processes and then update the pipeline, not CANCEL. so C and D are not correct because you will loose the data that is being processed right now.","comments":[{"poster":"vetaal","comment_id":"714281","timestamp":"1667967420.0","content":"But the source is pub/sub. You won't lose data once you create a subscription to the topic, and then cancel, as the new pipeline should pick it up.\n\nAlso, updating the pipeline won't be possible as it would fail the compatibility check.","upvote_count":"1"}],"timestamp":"1650456300.0","comment_id":"588636","upvote_count":"1"},{"upvote_count":"2","timestamp":"1650288120.0","content":"Updating Dataflow Pipelines\n- Scenario: Update streaming Dataflow pipeline with new code:\n- New code = new pipeline not compatible with current version\n- Need data to switch over to new job/pipeline without losing\nanything in the process\n- Solution: Update job:\n- Creates new job with same name/new jobID\n- Compatibility between old/new jobs:\n- Map old to new job transforms with transform mapping\n- \"Bridge\" between old and new code base\n- After compatibility check:\n- Buffered data transferred to new job, using transform\nmapping to translate changes","poster":"tavva_prudhvi","comment_id":"587696"},{"timestamp":"1649229960.0","content":"Guys, drain option doesn't update the pipeline it helps us finishing processing buffered jobs before shutting down. Please refer to this link, https://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline#drain\n\nComing to, C & D https://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline#important_information_on_canceling_a_job this look tells us there might be a data loss! But, as the data jobs are compatible as stated in the question the pipeline might not get updated too, so I was stuck here.","comment_id":"581671","poster":"tavva_prudhvi","comments":[{"comment_id":"759346","poster":"Wonka87","timestamp":"1672200960.0","upvote_count":"1","content":"yes but option says update the current pipeline along with drain flag."}],"upvote_count":"1"},{"upvote_count":"3","comment_id":"560144","timestamp":"1646319900.0","poster":"Arkon88","content":"Selected Answer: B\nB\nPlease read:\nhttps://cloud.google.com/dataflow/docs/guides/updating-a-pipeline https://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline\n\n1) not A as Drain it is not updating it is stopping option\n2) not C and D because canceling the old pipeline can cause data loss\n3) B is correct as we have next info in https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline :\n\nIf your replacement pipeline has changed any transform names from those in your prior pipeline, the Dataflow service requires a transform mapping. The transform mapping maps the named transforms in your prior pipeline code to names in your replacement pipeline code. You can pass the mapping by using the --transform_name_mapping command-line option, using the following general format:\n--transform_name_mapping= .\n{\"oldTransform1\":\"newTransform1\",\"oldTransform2\":\"newTransform2\",...} (it is a json object)"},{"upvote_count":"1","timestamp":"1646236740.0","comment_id":"559546","content":"Correct Option : B\nhttps://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#python_2","poster":"rafaelgildin"},{"comment_id":"549110","content":"Correct Option : B","poster":"RRK2021","upvote_count":"1","timestamp":"1645066860.0"},{"upvote_count":"1","timestamp":"1644393900.0","content":"Important keyword here is \"Incompatible\". According to docs \"The compatibility check ensures that things like intermediate state information and buffered data can be transferred from your prior job to your replacement job.\" Incompatible word clearly states that the current buffer data is not compatible with your new job. In this case, draining the current data is the only option left.\nI would surely go for \"A\"","comment_id":"543607","poster":"Novice1308"},{"upvote_count":"1","content":"Selected Answer: A\n@VishalB","comment_id":"523137","timestamp":"1642108800.0","poster":"sraakesh95"},{"content":"Selected Answer: A\nSince the question states the changes to the pipeline are \"incompatible with the current version\", the right approach would be to stop the existing pipeline using the drain flag to minimize data loss, then launch a replacement job with the same job name using the new code. If the new code was compatible with the existing pipeline, B would be correct (a transform mapping is provided when updating an ongoing pipeline). Since the new code is incompatible with the current version, A is the answer.","timestamp":"1640830440.0","upvote_count":"1","comment_id":"512941","poster":"sandbar_dorados_09"},{"timestamp":"1640676420.0","content":"Option B looks correct,it talks about updating the pipeline and also other part is it is indirectly posing how you can arrest incompatibility","comment_id":"510879","upvote_count":"1","poster":"prasanna77"},{"content":"Correct Option : B \n100% \nhttps://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#:~:text=If%20any%20transform%20names%20in%20your%20pipeline%20have%20changed%2C%20you%20must%20supply%20a%20transform%20mapping%20and%20pass%20it%20using%20the%20--transform_name_mapping%20option","comment_id":"502968","upvote_count":"2","timestamp":"1639663440.0","poster":"freeman1715"},{"upvote_count":"2","comment_id":"494420","poster":"BigQuery","comments":[{"timestamp":"1638768240.0","content":"SORRY I MEANT TO SAY ANS IS 'B'. In this case it is Code change to new version. so, Update with Json mapping.","upvote_count":"2","poster":"BigQuery","comment_id":"494917"}],"content":"Selected Answer: A\nTo all the New Guys Here. Please don't get confused with all the people's fight over here. Just google the question and you will get the correct ans in many website. Still I recommend to refer this website for question. for this Particular problem ans is A. Reason is here --> https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#python\nhave time to read the full page when to use Update using Json mapping and when to use Drain. (you will have question following for Drain option though).\nThumb rule is this,\n# If any major change to windowing transformation (like completely changing window fn from fixed to sliding) in Beam/Dataflow/you want to stop pipeline but want inflight data --> use Drain option.\n# For all other use cases and Minor changing to windowing fn (like just changing window time of sliding window) --> Use Update with Json mapping.\n\nIn this case it is Code change to new version. so, Update with Json mapping. Simple as that.","timestamp":"1638714540.0"},{"upvote_count":"2","comment_id":"482979","timestamp":"1637460180.0","content":"ANSWER IS B. BECAUSE WHILE UPDATING A JOB, DATAFLOW NEVER LOOSES INTERMEDIATE DATA. 100%","poster":"Abhi16820"},{"upvote_count":"1","timestamp":"1636900140.0","comment_id":"478163","comments":[{"timestamp":"1636900200.0","poster":"MaxNRG","content":"Using the Drain option to stop your job tells the Cloud Dataflow service to finish your job in its current state. Your job will immediately stop ingesting new data from input sources. However, the Cloud Dataflow service will preserve any existing resources, such as worker instances, to finish processing and writing any buffered data in your pipeline. When all pending processing and write operations are complete, the Cloud Dataflow service will clean up the GCP resources associated with your job.\nNote: Your pipeline will continue to incur the cost of maintaining any associated GCP resources until all processing and writing has completed.\nUse the Drain option to stop your job if you want to prevent data loss as you bring down your pipeline.","comments":[{"comment_id":"478165","timestamp":"1636900200.0","content":"Effects of draining a job: When you issue the Drain command, Cloud Dataflow immediately closes any in-process windows and fires all triggers. The system does not wait for any outstanding time-based windows to finish. For example, if your pipeline is ten minutes into a two-hour window when you issue the Drain command, Cloud Dataflow won't wait for the remainder of the window to finish. It will close the window immediately with partial results.","upvote_count":"3","poster":"MaxNRG"}],"comment_id":"478164","upvote_count":"2"}],"poster":"MaxNRG","content":"A - the key requirement is not to lose the data, the Dataflow pipeline can be stopped using the Drain option. This option would cause Dataflow to stop any new processing, but would also allow the existing processing to complete:\nhttps://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline"},{"comment_id":"461044","poster":"anji007","timestamp":"1634037420.0","upvote_count":"2","content":"I would go with option A\n\nCompatible means, job that will pass compatibility check eventually. If it is the case as per https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#Launching, --update flag & mapping etc are enough.\n\nIf it is not compatible, then new job may fail to pass Compatibility check and hence only way would be to drain and restart new job see: https://stackoverflow.com/questions/66475443/google-cloud-dataflow-update-pipeline\n\nC & D is not talking about inflight data within the existing pipeline...or about transformations within the pipeline (idempotent or not etc). If it is idempotent then may be we can allow more than once processing and cancel the old pipeline."},{"content":"A is correct:\nhttps://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline\nYou can update a pipeline that is being drained, without data loss.","timestamp":"1632015540.0","upvote_count":"4","poster":"hadoopdk","comment_id":"447340"},{"comments":[{"upvote_count":"1","content":"'A' looks like correct, but I don't understand the meaning 'drain flag'. what's this?","comment_id":"442790","timestamp":"1631329920.0","poster":"kubosuke"},{"timestamp":"1632839340.0","content":"The inflight messages are truly lost as their are acknowledge at the input of dataflow job and as such they won't be retried by pub/sub","comment_id":"453468","upvote_count":"2","poster":"retep007"},{"content":"True but you must be sure that older subscriptions data has been already process by the original pipeline.","timestamp":"1631459340.0","comment_id":"443532","upvote_count":"2","poster":"yoshik"}],"upvote_count":"4","comment_id":"442789","content":"vote for D.\nsome people say that \"it might lose in-flight data\", but don't worry, new subscription has same data. if your app is idempotent, it's okay.\n\nTopic\n└─ Old Subscription <-- cancel here it might lose in-flight data\n└─ New Subscription <-- but the new subscription has the same data","poster":"kubosuke","timestamp":"1631329800.0"},{"comment_id":"424835","poster":"ron123_aa","upvote_count":"4","content":"i think its D. And not B bcaz - If the compatibility check fails, your prior job will continue running on the Dataflow service and your replacement job will return an error.","timestamp":"1628954160.0"},{"comment_id":"422578","upvote_count":"2","timestamp":"1628585520.0","content":"Correct Option is A. Question mentions not to lose any data. All other options may lead to some data loss. If you want to prevent data loss as you bring down your streaming pipelines, the best option is to drain your job.","poster":"safiyu"},{"poster":"timolo","comment_id":"398214","timestamp":"1625394240.0","comments":[{"comments":[{"comment_id":"470265","upvote_count":"1","content":"So A can't be correct","timestamp":"1635602220.0","poster":"sergio6"}],"comment_id":"470264","upvote_count":"1","timestamp":"1635602160.0","content":"precisely, stopping the pipeline, not updating","poster":"sergio6"}],"content":"Correct is A : https://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline#drain","upvote_count":"1"},{"upvote_count":"2","comments":[{"poster":"sumanshu","upvote_count":"1","timestamp":"1625745060.0","content":"I guess, 'A' is correct....","comment_id":"401875"}],"content":"Vote for 'B'\n\nhttps://cloud.google.com/dataflow/docs/guides/updating-a-pipeline#python","timestamp":"1624742640.0","comment_id":"391574","poster":"sumanshu"},{"timestamp":"1624242120.0","content":"Answer: D\n\nwhen the question clearly state new pipeline is incompatible, updating existing pipeline will FAIL. and in D, a different subscription will not cause data loss when you cancel the existing pipeline/subscription. they are independently subscribing to the same topic. there is no reason Choice D won't work.","comment_id":"386698","comments":[{"upvote_count":"1","poster":"sumanshu","content":"No, by using cancel option, you will loose the data which already read by pub/sub and which was in processing state...So C & D both wrong","comment_id":"401877","timestamp":"1625745120.0"}],"upvote_count":"1","poster":"moonlightbeamer"},{"content":"Correct C: \nA and B are not correct: the pipeline cannot be updated since it is incompatible.\nThe old pipeline should be canceled with the drain flag so all messages already read from pubsub will be processed til the end. If you use the same subscription then all messages that were not acked by the old pipeline will be held until the new pipeline reads it.","upvote_count":"4","comment_id":"351092","timestamp":"1620311940.0","poster":"Ette"},{"upvote_count":"2","poster":"gcper","timestamp":"1616756580.0","comments":[{"content":"The new Pipeline is incompatible so \"compatibility check \" will fail","poster":"EricM22","upvote_count":"1","comment_id":"406938","timestamp":"1626339540.0"}],"comment_id":"321048","content":"B. Update the current pipeline and provide the transform mapping JSON object.\n\n\"When you update your job, the Dataflow service performs a compatibility check between your currently-running job and your potential replacement job. The compatibility check ensures that things like intermediate state information and buffered data can be transferred from your prior job to your replacement job.\"\n\n\"When you update a job on the Dataflow service, you replace the existing job with a new job that runs your updated pipeline code.\"\n\nsource: https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline"},{"timestamp":"1613031000.0","content":"With the small experience I have, looking at the alternatives I would go for D. But investigating the B option closer it seems that this link is supporting B as the answer: https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline","comment_id":"288121","upvote_count":"1","poster":"kdiab"},{"poster":"naga","timestamp":"1612712820.0","content":"Correct D","comment_id":"285604","upvote_count":"3"},{"poster":"someshsehgal","comment_id":"282636","comments":[{"timestamp":"1615625100.0","content":"You should prepare better this exam.","upvote_count":"2","comment_id":"309553","poster":"razerlg"}],"timestamp":"1612347000.0","upvote_count":"3","content":"Option A: Drain is the feature for avoiding any loss of data. Option C & D are incorrect as Cancel Option will lead to loose the data"},{"timestamp":"1607989200.0","comment_id":"244133","upvote_count":"3","poster":"NamitSehgal","content":"After reading comments, my answer is more inclined to D instead B."},{"timestamp":"1607029440.0","content":"Answer is D.\n* A and B are not possible, since the new job is not compatible.\n* C might lead to lost data.\n* D might lead to data being processed twice, but no data will be lost.\nBetter would usually be to drain and start a new pipeline.","comment_id":"234368","poster":"IKGx1iGetOWGSjAQDD2x3","upvote_count":"8","comments":[{"upvote_count":"1","comments":[{"poster":"[Removed]","upvote_count":"1","content":"This is a tricky question, because of incompatibility, you just cannot \"UPDATE\", plus, for update method, there is never a \"DRAIN\" flag. When you talk about a flag, it is like a parameter attached to the \"UPDATE\", it is not the same of stop the pipeline with Drain method. Option D is not the best because you will need to reprocess duplicated old data, HOWEVER, you will not LOSE any data.","timestamp":"1676993220.0","comment_id":"816737"}],"timestamp":"1676992980.0","comment_id":"816728","content":"Truth sometimes is in the hand of minority.","poster":"[Removed]"}]},{"poster":"sfsdeniso","content":"To me C is correct. Using same subscribtion means that new pipeline will get nect message from pubsub. When we Cancel old pipeline Dataflow will not sent ASK message to pub/sub and message will be resend to new pipeline when it's free. Option D can lead to data duplication.","comment_id":"229547","upvote_count":"2","timestamp":"1606558560.0"},{"comment_id":"222134","upvote_count":"4","poster":"ppsev","timestamp":"1605724320.0","content":"I think option D is the correct one, since it is using pub/sub and this could be usefull to perform a new subscription for our new pipeline. I think it has to be a *new* pipeline and not an update of the old one, because it's stated that the code update makes the new pipeline incompatible with the old one. The only thing I would change is that it should perform a drain operation instead of cancellation."},{"timestamp":"1605590880.0","upvote_count":"8","poster":"Radhika7983","comment_id":"220836","content":"At first glance, I thought the answer was A but after after reading more of google cloud documentation, I go with answer B. \nSee below documentation, \n\n\"When you launch your replacement job, the Dataflow service performs a compatibility check between your replacement job and your prior job. If the compatibility check passes, your prior job will be stopped. Your replacement job will then launch on the Dataflow service while retaining the same job name. If the compatibility check fails, your prior job will continue running on the Dataflow service and your replacement job will return an error.\"\n\nIn this case, our prior job is still running and we are not losing any data. we need to fix the replacement job for which we have compatibility issue. Though there can be may reasons for compatibility issue, google docs talks about transform mapping so that Dataflow can match state data accordingly.\nRemember, Drain and cancel option will cease all the data ingestion services and we dont want that to happen. If the replacement job is fixed, data flow will take care of the replacement as mentioned https://cloud.google.com/dataflow/docs/guides/updating-a-pipeline","comments":[{"content":"Appreciate the detailed explanation. your answer makes sense.","upvote_count":"1","timestamp":"1625328120.0","poster":"awssp12345","comment_id":"397726"}]},{"timestamp":"1602046920.0","content":"B is the best practice , Similar question is there in Linux Academy","comment_id":"194863","poster":"Tanmoyk","upvote_count":"3"},{"upvote_count":"5","poster":"yurstev","timestamp":"1600736760.0","comment_id":"184088","content":"Correcta A. with de drain option to stop your job but all pending processing and write operation are complete"},{"poster":"nehaxlpb","content":"When you update a job on the Dataflow service, you replace the existing job with a new job that runs your updated pipeline code. The Dataflow service retains the job name, but runs the replacement job with an updated Job ID.\n\nThe replacement job preserves any intermediate state data from the prior job, as well as any buffered data records or metadata currently \"in-flight\" from the prior job. For example, some records in your pipeline might be buffered while waiting for a window to resolve.\n\nso B , seems right","upvote_count":"2","comment_id":"175188","timestamp":"1599479040.0"},{"upvote_count":"2","poster":"KennneK","timestamp":"1599053100.0","comment_id":"172073","content":"Prefer B.\nBut I think the confusion is the term \"imcompatible\"... My understanding is it is indicating that some steps are added/removed, so the mapping is required."},{"poster":"atnafu2020","timestamp":"1597897440.0","upvote_count":"2","comment_id":"161945","content":"D\nPass the --update option.\nSet the --jobName option in PipelineOptions to the same name as the job you want to update.\nIf any transform names in your pipeline have changed, you must supply a transform mapping and pass it using the --transformNameMapping option."},{"timestamp":"1597875840.0","content":"Correct: B.\nCannot be C or D. \"Because Cancel immediately halts processing, you may lose any \"in-flight\" data. \"In-flight\" data refers to data that has been read but is still being processed by your pipeline\" https://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline#cancel","comment_id":"161817","poster":"lgdantas","upvote_count":"1"},{"upvote_count":"4","comment_id":"160284","poster":"saurabh1805","comments":[{"poster":"saurabh1805","content":"on further checks for me B is correct answer.","timestamp":"1597789560.0","comment_id":"161130","upvote_count":"1"}],"content":"important point is not to loose any data, so the only way to achieve this is either your pipeline is complete or you drian you existing pipeline. Refer below link. \n\nhttps://cloud.google.com/dataflow/docs/guides/stopping-a-pipeline#drain\nhence for me A is correct answer.","timestamp":"1597689120.0"},{"content":"B is correct. Its mentioned in Linux Academy tutorials","timestamp":"1596435000.0","upvote_count":"1","poster":"Prakzz","comment_id":"149560"},{"content":"Answer is A, as the key requirement is not to lose the data","comment_id":"126760","timestamp":"1593945120.0","poster":"dmalviya","upvote_count":"6"},{"timestamp":"1592783280.0","upvote_count":"2","poster":"nasirdec","comment_id":"115914","content":"Correct answer is D with the 'Drian' on old pipeline."},{"comment_id":"76106","upvote_count":"1","timestamp":"1587222540.0","poster":"itche_scratche","content":"D is correct. Need to create new job with same name; and with new subscription, but i would drain instead of cancel."},{"content":"I think it should be D. B would have worked if the new job would have been compatible. But since it is clearly mentioned that the new job is not compatible , we have to create a new job with a new subscription.","poster":"arnabbis4u","comment_id":"75085","timestamp":"1586990160.0","upvote_count":"2"},{"content":"Answer: B \nDescription: If any transform names in your pipeline have changed, you must supply a transform mapping and pass it using the --transformNameMapping option.","comment_id":"68561","timestamp":"1585303500.0","poster":"[Removed]","upvote_count":"2","comments":[{"content":"Not B b/c this is not talking about the transform name change. that is only true when transform mapping NAME is changed","comment_id":"161944","poster":"atnafu2020","upvote_count":"1","timestamp":"1597897260.0"}]},{"content":"Should be D: transform mapping is only used for transforms names changing. So A and B is not possible because the pipeline es incompatible (check validation will fail when updating the pipeline). So with D, we don't lose date.","upvote_count":"1","comments":[{"timestamp":"1585015200.0","content":"Correct: B .. so first we need to handle dataflow version issue that only can be handled by transform mapping and then we need to think of pubsub...as we are not deleting the subscription the data will be there for atleast 7 days so we dnt need to look from data loosing perspective.","upvote_count":"3","poster":"[Removed]","comment_id":"67417"}],"timestamp":"1584911940.0","comment_id":"67092","poster":"jvg637"}],"timestamp":"2020-03-20 14:13:00","answer":"A","answer_ET":"A","choices":{"D":"Create a new pipeline that has a new Cloud Pub/Sub subscription and cancel the old pipeline.","A":"Update the current pipeline and use the drain flag.","B":"Update the current pipeline and provide the transform mapping JSON object.","C":"Create a new pipeline that has the same Cloud Pub/Sub subscription and cancel the old pipeline."},"answers_community":["A (45%)","B (30%)","D (18%)","7%"],"question_id":235,"exam_id":11,"isMC":true,"question_images":[],"topic":"1","answer_images":[],"question_text":"You have Google Cloud Dataflow streaming pipeline running with a Google Cloud Pub/Sub subscription as the source. You need to make an update to the code that will make the new Cloud Dataflow pipeline incompatible with the current version. You do not want to lose any data when making this update. What should you do?","answer_description":"","unix_timestamp":1584709980}],"exam":{"id":11,"isBeta":false,"numberOfQuestions":319,"provider":"Google","lastUpdated":"11 Apr 2025","isMCOnly":true,"name":"Professional Data Engineer","isImplemented":true},"currentPage":47},"__N_SSP":true}