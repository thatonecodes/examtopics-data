{"pageProps":{"questions":[{"id":"XGT9jXTLrgdLKmd4OJmB","question_id":306,"answer_description":"","unix_timestamp":1584193440,"exam_id":11,"timestamp":"2020-03-14 14:44:00","answer_ET":"D","isMC":true,"answer_images":[],"question_images":[],"question_text":"You've migrated a Hadoop job from an on-prem cluster to dataproc and GCS. Your Spark job is a complicated analytical workload that consists of many shuffling operations and initial data are parquet files (on average 200-400 MB size each). You see some degradation in performance after the migration to Dataproc, so you'd like to optimize for it. You need to keep in mind that your organization is very cost-sensitive, so you'd like to continue using Dataproc on preemptibles (with 2 non-preemptible workers only) for this workload.\nWhat should you do?","url":"https://www.examtopics.com/discussions/google/view/16572-exam-professional-data-engineer-topic-1-question-87/","topic":"1","answer":"D","answers_community":["D (53%)","A (36%)","11%"],"choices":{"D":"Switch from HDDs to SSDs, override the preemptible VMs configuration to increase the boot disk size.","C":"Switch from HDDs to SSDs, copy initial data from GCS to HDFS, run the Spark job and copy results back to GCS.","B":"Switch to TFRecords formats (appr. 200MB per file) instead of parquet files.","A":"Increase the size of your parquet files to ensure them to be 1 GB minimum."},"discussion":[{"comments":[{"poster":"grshankar9","comment_id":"1342556","timestamp":"1737210660.0","upvote_count":"1","content":"Switching to SSDs definitely increases the cost, eliminating C & D."},{"upvote_count":"5","comment_id":"458353","poster":"diluvio","timestamp":"1633536960.0","content":"It is A . please read the links above"},{"content":"https://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance","poster":"odacir","upvote_count":"1","comment_id":"737845","timestamp":"1670415960.0"},{"comment_id":"416201","upvote_count":"8","comments":[{"comment_id":"624757","poster":"rr4444","upvote_count":"1","content":"You can have local SSDs for the dataproc normal or preemptible VMs https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-pd-ssd","timestamp":"1656517560.0"},{"upvote_count":"1","comment_id":"416203","poster":"raf2121","content":"Also for Shuffling Operations, one need to override the preemptible VMs configuration to increase boot disk size.\n(Second half of answer D is correct but first half is wrong)","timestamp":"1627477260.0"}],"content":"Point for discussion - Another reason why it can't be C or D.\nSSD's are not available on pre-emptible Worker nodes (answers didn't say whether they wanted to switch from HDD to SDD for Master nodes)\nhttps://cloud.google.com/architecture/hadoop/hadoop-gcp-migration-jobs","timestamp":"1627476900.0","poster":"raf2121"},{"comment_id":"738470","content":"https://cloud.google.com/dataproc/docs/support/spark-job-tuning#limit_the_number_of_files\n\nStore data in larger file sizes, for example, file sizes in the 256MB–512MB range.","timestamp":"1670456760.0","poster":"zellck","upvote_count":"3"},{"content":"you are right C&D will pay more $. the reason of this questions is shuffling I think. and to reduce shuffling between jobs then make file size larger","comment_id":"825629","upvote_count":"3","timestamp":"1677657900.0","poster":"jin0"}],"content":"Should be A:\n\nhttps://stackoverflow.com/questions/42918663/is-it-better-to-have-one-large-parquet-file-or-lots-of-smaller-parquet-files\nhttps://www.dremio.com/tuning-parquet/\n\nC & D will improve performance but need to pay more $$","comment_id":"65087","upvote_count":"70","timestamp":"1584432840.0","poster":"rickywck"},{"content":"Answer should be D","poster":"madhu1171","upvote_count":"12","timestamp":"1584193440.0","comments":[{"timestamp":"1584703080.0","comment_id":"66249","comments":[{"comment_id":"115455","upvote_count":"2","comments":[{"comment_id":"139639","poster":"VishalB","content":"C is recommended only -\nIf you have many small files, consider copying files for processing to the local HDFS and then copying the results back","comments":[{"poster":"FARR","upvote_count":"3","comment_id":"159104","timestamp":"1597567980.0","content":"File sizes are already within the expected range for GCS (128MB-1GB) so not C.\nD seems most feasible"}],"upvote_count":"1","timestamp":"1595256720.0"}],"timestamp":"1592734380.0","poster":"ch3n6","content":"C is correct. D is wrong. they are using 'dataproc and GCS', not related to boot disk at all ."}],"content":"D: # By default, preemptible node disk sizes are limited to 100GB or the size of the non-preemptible node disk sizes, whichever is smaller. However you can override the default preemptible disk size to any requested size. Since the majority of our cluster is using preemptible nodes, the size of the disk used for caching operations will see a noticeable performance improvement using a larger disk. Also, SSD's will perform better than HDD. This will increase costs slightly, but is the best option available while maintaining costs.","poster":"jvg637","upvote_count":"15"}],"comment_id":"63867"},{"timestamp":"1742434140.0","upvote_count":"1","poster":"oussama7","content":"Selected Answer: C\nImproves shuffle management by using HDFS instead of GCS.\nSSDs speed up access to temporary data.\nCompatible with Dataproc's preemptible cost model, without requiring more non-preemptible workers.","comment_id":"1400883"},{"comment_id":"1398911","upvote_count":"1","timestamp":"1742052180.0","content":"Selected Answer: C\nPreemptible Cost Considerations\n\nUsing preemptibles (with 2 non-preemptible workers) is cost-effective, but shuffle operations still need fast local storage.\nSSDs improve reliability without increasing instance costs significantly","poster":"Parandhaman_Margan"},{"comment_id":"1337485","content":"Selected Answer: A\nA. \nNot D because it doesn't make sens to move to SSD when cost-senstive","upvote_count":"1","timestamp":"1736236980.0","poster":"f74ca0c"},{"upvote_count":"1","content":"A is the answer","poster":"Javakidson","timestamp":"1730613600.0","comment_id":"1306439"},{"timestamp":"1729701540.0","upvote_count":"1","content":"Selected Answer: A\nI think either A or C. The problem is occured by I/O performance. Option A is feasible, which reduces the number of files leading better parallel processing. Option C tries to handle I/O performance issue. \nTaking other factors like budget and no mention of HDD/SSD, option A is possible the correct answer.","poster":"SamuelTsch","comment_id":"1302126"},{"timestamp":"1727101380.0","upvote_count":"1","poster":"baimus","comment_id":"1288158","content":"Selected Answer: A\nThere's no mention of a drive type used, only GCS. That means A is the only sensible option."},{"content":"Selected Answer: A\nQuestion doesn't actually say they are using HDD in the scenario, for that reason I choose A","upvote_count":"2","comment_id":"1255092","poster":"987af6b","timestamp":"1721926140.0"},{"comment_id":"1145420","upvote_count":"2","content":"A\nWe don't know if HDD was used, so we can know what to do about that, but we know that the parquet files are small and much, and we can act on that by increasing the sizes to have lesser number of it.","timestamp":"1707479340.0","poster":"philli1011"},{"comment_id":"1086069","timestamp":"1701513780.0","poster":"rocky48","content":"Selected Answer: A\nShould be A:\nhttps://stackoverflow.com/questions/42918663/is-it-better-to-have-one-large-parquet-file-or-lots-of-smaller-parquet-files","upvote_count":"1","comments":[{"timestamp":"1701693120.0","content":"Given the scenario and the cost-sensitive nature of your organization, the best option would be:\n\nC. Switch from HDDs to SSDs, copy initial data from GCS to HDFS, run the Spark job, and copy results back to GCS.\n\nOption C allows you to leverage the benefits of SSDs and HDFS while minimizing costs by continuing to use Dataproc on preemptible VMs. This approach optimizes both performance and cost-effectiveness for your analytical workload on Google Cloud.","poster":"rocky48","comment_id":"1087630","upvote_count":"1"}]},{"content":"Selected Answer: A\nhttps://stackoverflow.com/questions/42918663/is-it-better-to-have-one-large-parquet-file-or-lots-of-smaller-parquet-files\n\nCost effective is the key in the question.","timestamp":"1690105860.0","upvote_count":"1","poster":"Mathew106","comment_id":"960306"},{"content":"Selected Answer: D\nPreemptible VMs can't be used for HDFS storage.\nAs a default, preemptible VMs are created with a smaller boot disk size, and you might want to override this configuration if you are running shuffle-heavy workloads.","timestamp":"1679488500.0","upvote_count":"1","poster":"Nandhu95","comment_id":"847057"},{"comment_id":"826584","timestamp":"1677741300.0","upvote_count":"1","poster":"midgoo","comments":[{"content":"Optimal size is 1GB","upvote_count":"1","comment_id":"961827","timestamp":"1690216980.0","poster":"Mathew106"}],"content":"Selected Answer: D\nShould NOT be A as:\n1. The file size is already at the optimal size\n2. If the current file size works well in the current Hadoop, it is expected to have similar performance in Dataproc\n\nThe only difference between the current and Dataproc is that Dataproc is using preemptible nodes. So yes, it may incur a bit more cost by using SSD but assuming using the preemptible already save most of it, so we want to save less to improve the performance"},{"upvote_count":"1","poster":"[Removed]","timestamp":"1677201720.0","comment_id":"819977","content":"Selected Answer: A\nCost sensitive is the keyword."},{"content":"this question asked by Google, So option C is not correct otherwise, good approach to use initial data in hdfs and swtich from HDD to SDDs for 2 non-preemptible node. \nOption D is right but they are not mentioning that they will stop using 2 non-preemptible node. but i assume it :P","comment_id":"809426","upvote_count":"2","poster":"musumusu","timestamp":"1676460720.0"},{"content":"Selected Answer: C\nC.\nref : https://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance\n- size recommended is 128MB-1GB ==> so it is not size issue ==> not A\n- there is no issue mentioned with file format ==> not B\n- D. could be a good solution, but requires overriding preemptible VMs. however, the questions asks to continue using preemtibles ==> not D\n- C. is a good solution.","comments":[{"poster":"ayush_1995","content":"agreed C over D as\nswitching from HDDs to SSDs and overriding the preemptible VMs configuration to increase the boot disk size, may not be the best solution for improving performance in this scenario because it doesn't address the main issue which is the large number of shuffling operations that are causing performance degradation. While SSDs may have faster read and write speeds than HDDs, they may not provide significant performance improvements for a workload that is primarily CPU-bound and heavily reliant on shuffling operations. Additionally, increasing the boot disk size of the preemptible VMs may not be necessary or cost-effective for this particular workload.","timestamp":"1674972060.0","comment_id":"791431","upvote_count":"1"}],"upvote_count":"3","comment_id":"789527","poster":"PolyMoe","timestamp":"1674817680.0"},{"content":"Selected Answer: D\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance\n\nManage Cloud Storage file sizes\nTo get optimal performance, split your data in Cloud Storage into files with sizes from 128 MB to 1 GB. Using lots of small files can create a bottleneck. If you have many small files, consider copying files for processing to the local HDFS and then copying the results back.\n\nSwitch to SSD disks\nIf you perform many shuffling operations or partitioned writes, switch to SSDs to boost performance.","upvote_count":"2","poster":"slade_wilson","timestamp":"1671542100.0","comment_id":"750917"},{"upvote_count":"1","timestamp":"1670329920.0","poster":"zellck","content":"Selected Answer: D\nD is the answer.\n\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#switch_to_ssd_disks\nIf you perform many shuffling operations or partitioned writes, switch to SSDs to boost performance.\n\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#use_preemptible_vms\nAs a default, preemptible VMs are created with a smaller boot disk size, and you might want to override this configuration if you are running shuffle-heavy workloads. For details, see the page on preemptible VMs in the Dataproc documentation.","comment_id":"736803"},{"timestamp":"1669297980.0","upvote_count":"2","comment_id":"725885","content":"Answer id D\nnot C because cannot use HDFS with preemptible VMs\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#use_preemptible_vms","poster":"sfsdeniso"},{"upvote_count":"4","timestamp":"1669178700.0","poster":"dish11dish","content":"Selected Answer: D\nOption D is correct\n\nElimination Strategy:-\nA. Increase the size of your parquet files to ensure them to be 1 GB minimum (doesn’t make sense as the file size are fit for migration to proceed with given scenario, recommended size is between 128 MB to 1 GB.)\nB. Switch to TFRecords formats (appr. 200MB per file) instead of parquet files(doesn’t make sense to make changes to file format )\nC. Switch from HDDs to SSDs, copy initial data from GCS to HDFS, run the Spark job and copy results back to GCS(doesn’t make sense to copy the file from GCS to HDFS as the workload that consists of many shuffling operations)\nD. Switch from HDDs to SSDs, override the preemptible VMs configuration to increase the boot disk size(perfect fit as the workload that consists of many shuffling operations which requires attention to increase the performance reference doc:- https://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance )","comment_id":"724887"},{"comment_id":"723541","upvote_count":"1","comments":[{"content":"Recommended file size is not 1GB.\n\nhttps://cloud.google.com/dataproc/docs/support/spark-job-tuning#limit_the_number_of_files\nStore data in larger file sizes, for example, file sizes in the 256MB–512MB range.","upvote_count":"1","comment_id":"738471","poster":"zellck","timestamp":"1670456820.0"}],"content":"Selected Answer: A\nit's A.\nLarger parquet files will be more efficient and it's a non-cost solution to implement in contrary to the SSD drives.","poster":"piotrpiskorski","timestamp":"1669037280.0"},{"poster":"gudiking","timestamp":"1668694860.0","upvote_count":"1","content":"Selected Answer: A\nhttps://www.dremio.com/blog/tuning-parquet/","comment_id":"720519"},{"content":"Selected Answer: A\nIt's A.\nD doesn't make sense because Spark does shuffling in memory, and in any case, it has nothing to do with the BOOT disk size.","comments":[{"content":"Not True\n\n\"As a default, preemptible VMs are created with a smaller boot disk size, and you might want to override this configuration if you are running shuffle-heavy workloads.\"\n🔗 https://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#use_preemptible_vms\n\nMoreover:\n\"If you perform many shuffling operations or partitioned writes, switch to SSDs to boost performance.\"\n🔗 https://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#switch_to_ssd_disks","poster":"NicolasN","timestamp":"1668094380.0","upvote_count":"3","comment_id":"715353"}],"timestamp":"1667761080.0","poster":"cloudmon","comment_id":"712585","upvote_count":"1"},{"comment_id":"698085","timestamp":"1666085820.0","poster":"josrojgra","upvote_count":"2","content":"Selected Answer: D\nI choose D because the files already fit at the recommended size (https://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#manage_cloud_storage_file_sizes).\n\nAnd to improve the performance with a shuffle-heavy workload is recommended to increase the boot disk of the preemptible VMs (https://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#use_preemptible_vms)"},{"poster":"clouditis","comment_id":"676608","content":"A it is, SSD makes it expensive & defeats the question's purpose of no increased cost requirement","timestamp":"1663888620.0","upvote_count":"1"},{"content":"Selected Answer: D\nD. Switch from HDDs to SSDs, override the preemptible VMs configuration to increase the boot disk size\n\nRead the section, it is pretty straightforward.\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance","comment_id":"673004","timestamp":"1663570320.0","poster":"John_Pongthorn","upvote_count":"1"},{"content":"Selected Answer: D\nagree with gcd56","upvote_count":"1","timestamp":"1661257260.0","poster":"ducc","comment_id":"650805"},{"upvote_count":"1","comment_id":"648334","poster":"rickantonais","timestamp":"1660806300.0","content":"Selected Answer: A\nVote for A"},{"upvote_count":"1","content":"Selected Answer: A\nSpark based on ram and GCS as alternative for hdfs storage,so the options left are increasing the parquet file size","poster":"francisjoseph","timestamp":"1659630120.0","comment_id":"642547"},{"upvote_count":"1","comment_id":"611657","content":"Selected Answer: A\nHas to be A. D will increase the cost and unnecessary as well. optimal size of parquet file is 1GB\nhttps://stackoverflow.com/questions/42918663/is-it-better-to-have-one-large-parquet-file-or-lots-of-smaller-parquet-files","poster":"Devx198912233","timestamp":"1654396260.0"},{"timestamp":"1649190840.0","content":"Selected Answer: A\nShould be A. There is a Spark job who runs over data on RAM who needs to be readed just one time.","upvote_count":"1","comment_id":"581455","poster":"devric"},{"content":"First please note that the file sizes are between 200-400 MB each. Google’s recommended best practice for file size is between 128 MB to 1GB. \nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance\nSo going by Google’s recommended best practices , these file sizes are proper. \nThis makes A incorrect. The files are within the recommended range. Further A says the file size needs to be 1 GB minimum. The word minimum implies the file sizes can go bigger than 1 GB. This is not Google’s recommended best practice. \nC is incorrect as well. C is recommended only when there are too many small file sizes. The files here are within the recommended range. \nB is not relevant. \nD is correct . But it would increase the cost. This is difficult to accept as the organisation is very cost sensitive. But this is the only option that would increase the performance.","upvote_count":"3","comments":[{"poster":"tavva_prudhvi","upvote_count":"1","timestamp":"1649315580.0","comment_id":"582263","content":"As you already said, its cost-sensitive! How can you still choose C/D?"},{"upvote_count":"1","timestamp":"1649191020.0","poster":"devric","comment_id":"581457","content":"What it's the relation between the boot speed and the spark processing speed?"}],"comment_id":"542625","timestamp":"1644261300.0","poster":"Deepakd"},{"upvote_count":"1","content":"C - If you have many small files, consider copying files for processing to the local HDFS and then copying the results back.","comment_id":"535685","poster":"kped21","timestamp":"1643485200.0"},{"poster":"gdc56","content":"Selected Answer: D\nIt is definitely D\n\na) \"To get optimal performance, split your data in Cloud Storage into files with sizes from 128 MB to 1 GB.\"\n\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance\n\nFiles are already within this size range, so increasing to 1GB or over would worsen performance.\n\nb) Same as a) - changing file type would not affect performance.\n\nc) \"Your Dataproc cluster needs non-HDFS local disk space for shuffling.\"\n\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#adjust_storage_size\n\nHDFS is not used for shuffling workloads, so copying data to it wouldn't do much.\n\nd) \"If you perform many shuffling operations or partitioned writes, switch to SSDs to boost performance.\"\n\n\"As a default, preemptible VMs are created with a smaller boot disk size, and you might want to override this configuration if you are running shuffle-heavy workloads.\"\n\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance","timestamp":"1643201040.0","upvote_count":"6","comment_id":"532884"},{"poster":"medeis_jar","upvote_count":"1","content":"Selected Answer: A\nhttps://stackoverflow.com/questions/42918663/is-it-better-to-have-one-large-parquet-file-or-lots-of-smaller-parquet-files","timestamp":"1641494460.0","comment_id":"518472"},{"poster":"MaxNRG","content":"Selected Answer: D\nD:\n1)Switch to SSD disks\nIf you perform many shuffling operations or partitioned writes, switch to SSDs to boost performance.\n\n2) Use preemptible VMs\nAs a default, preemptible VMs are created with a smaller boot disk size, and you might want to override this configuration if you are running shuffle-heavy workloads\n\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance","comments":[{"timestamp":"1649315760.0","comment_id":"582267","upvote_count":"2","poster":"tavva_prudhvi","content":"In the question, there's a word \"very-cost sensitive\"... Did you see the phrase? Company is very cost sensitive.. then how would you convert hdd to ssd?"}],"comment_id":"508069","timestamp":"1640281260.0","upvote_count":"2"},{"comment_id":"477498","content":"Preemptible VMs can't be used for HDFS storage -- SO NOT OPTION C\nOPTION D INCREASES COST -- SO IT A NO.\nI DON'T KNOW ABOUT B,\nSO THE ANSWER IS OPTION A, AND ITS ALO MENTIONED IN BELOW LINK\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance","timestamp":"1636812780.0","upvote_count":"1","poster":"Abhi16820"},{"upvote_count":"2","poster":"gcp_k","content":"From GCP Documentation -> https://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance\n\nMany options were provided. Since the question says, the company is cost sensitive, I would go with option #1 listed in the GCP documentation which is increase the size to 1 GB as my first trial.\n\nI am choosing A","comment_id":"466275","timestamp":"1634926680.0"},{"poster":"[Removed]","comment_id":"462683","timestamp":"1634312820.0","upvote_count":"3","content":"Company is very cost sensitive.. then how would you convert hdd to ssd?"},{"poster":"Ysance_AGS","upvote_count":"1","content":"C seem to be correct : Spark jobs use RDD ( stored in memory) so to make jobs faster we should copy the source files to Local Workers HDFS and switch HDD to SSD.\nSources: https://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#manage_cloud_storage_file_sizes","comment_id":"453407","timestamp":"1632833760.0"},{"timestamp":"1629186720.0","content":"ATTENTION: It's D, not A! From GCP Documentation: \n\n1) \"As a default, preemptible VMs are created with a smaller boot disk size, and you might want to override this configuration if you are running shuffle-heavy workloads\" \n2) If you perform many shuffling operations or partitioned writes, switch to SSDs to boost performance.\n\nReference: https://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance","comment_id":"426180","comments":[{"comment_id":"427394","timestamp":"1629368700.0","content":"Are first 140Q enough from this website for certification exam?","comments":[{"content":"Why do you think so? Did you appear for the exam already?","timestamp":"1630945620.0","comment_id":"440467","poster":"Ral17","upvote_count":"1"}],"poster":"RajatVyas","upvote_count":"5"}],"poster":"fire558787","upvote_count":"6"},{"upvote_count":"2","timestamp":"1625505900.0","comment_id":"399332","content":"s per GCP’s optimization recommendations, A cannot be answer since it says split your data in Cloud Storage into files with sizes from 128 MB to 1 GB and the data is already within given limits. Hence the answer is D - Switch to SSD disks.","poster":"awssp12345"},{"upvote_count":"5","comment_id":"395296","poster":"sumanshu","content":"Option A and D , both looks okay\n\nBut vote for 'D' - because in question its mention - many shuffling operations (so SSD and override this configuration are recommended)","timestamp":"1625095680.0","comments":[{"comment_id":"399324","poster":"awssp12345","timestamp":"1625505540.0","upvote_count":"1","content":"Makes sense."}]},{"poster":"timolo","comment_id":"333242","content":"Correct C:\n\nhttps://cloud.google.com/solutions/migration/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#comparing_cloud_storage_and_hdfs","timestamp":"1618140300.0","upvote_count":"1","comments":[{"poster":"sumanshu","comment_id":"395291","timestamp":"1625095320.0","content":"Preemptible VMs can't be used for HDFS storage.\n\nhttps://cloud.google.com/architecture/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance","upvote_count":"1"}]},{"timestamp":"1615494540.0","comment_id":"308316","upvote_count":"2","content":"D:\nhttps://cloud.google.com/solutions/migration/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance\nhttps://cloud.google.com/dataproc/docs/concepts/compute/secondary-vms","poster":"daghayeghi"},{"comments":[{"comment_id":"395292","upvote_count":"1","poster":"sumanshu","content":"Preemptible VMs can't be used for HDFS storage.","timestamp":"1625095380.0"}],"upvote_count":"2","poster":"someshsehgal","comment_id":"284502","content":"Correct C:\nTo get optimal performance, split your data in Cloud Storage into files with sizes from 128 MB to 1 GB. Using lots of small files can create a bottleneck. If you have many small files, consider copying files for processing to the local HDFS and then copying the results back.\nSwitch to SSD disks\nIf you perform many shuffling operations or partitioned writes, switch to SSDs to boost performance.","timestamp":"1612578480.0"},{"timestamp":"1611850500.0","upvote_count":"1","poster":"[Removed]","content":"People who say c and d, note that point given as 'very cost sensitive'","comment_id":"278682"},{"content":"A is correct answer. C and D are wrong because SSD is costly. They talk about shuffling if you increase size of file there will be less shuffling. hence A","comment_id":"264225","upvote_count":"3","timestamp":"1610306700.0","poster":"tikna"},{"content":"https://cloud.google.com/bigtable/docs/choosing-ssd-hdd in BT doc says SSD is cost effective. so even it's a bit expensive but it reduce a lot the computing time which is money also","timestamp":"1600965060.0","comment_id":"186327","upvote_count":"2","poster":"zxing233"},{"timestamp":"1600229760.0","comment_id":"180167","upvote_count":"2","poster":"VIncent9261111","content":"C is correct\nPer GCP Documentation, local HDFS Storage is a good option if:\neach file size is relatively small and heave I/O work load","comments":[]},{"comments":[{"upvote_count":"2","poster":"snamburi3","comment_id":"222192","content":"D. \nPreemptible disk size- \" This disk space is used for local caching of data and is not available through HDFS.\"\nhttps://cloud.google.com/dataproc/docs/concepts/compute/secondary-vms#using_preemptibles_in_a_cluster","timestamp":"1605726360.0"}],"timestamp":"1599712920.0","upvote_count":"1","content":"https://cloud.google.com/solutions/migration/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance\n------------------------------------------------------------------------------------------\nOptimize performance\nThis section discusses ways to get better performance and reduce cost while running Spark jobs.\n・Manage Cloud Storage file sizes\n・Switch to SSD disks\n・Place VMs in the same zone\n・Use preemptible VMs\n------------------------------------------------------------------------------------------\nThere are four main types of performance optimization.\nAmong them, the cost reference is Use preemptible VMs So, the likelihood is that D is high.\n------------------------------------------------------------------------------------------\nDataproc cluster can use preemptible VM instances as workers. This results in lower per-hour compute costs for your non-critical workloads than by using normal instances. However, there are some factors to consider when you use preemptible VMs:\n------------------------------------------------------------------------------------------","poster":"kino2020","comment_id":"176891"},{"comment_id":"175674","content":"Why not A ? To get optimal performance, split your data in Cloud Storage into files with sizes from 128 MB to 1 GB. Using lots of small files can create a bottleneck. So if the bottleneck can be avoided using a larger file size , this can solve the issue without increasing the cost .","upvote_count":"2","poster":"Tanmoyk","timestamp":"1599545940.0"},{"upvote_count":"2","comment_id":"164787","content":"It’s C, Data shuffling taking lots of times if you don’t copy files from GCS to HDFS.","timestamp":"1598231280.0","poster":"dragon123"},{"content":"D is correct answer, Refer below link\n\nhttps://cloud.google.com/solutions/migration/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#use_preemptible_vms","timestamp":"1597746480.0","poster":"saurabh1805","comment_id":"160800","upvote_count":"6"},{"poster":"clouditis","comment_id":"151616","content":"its A guys, C & D are out as SSD is more expensive!","timestamp":"1596679920.0","upvote_count":"1"},{"poster":"Rajokkiyam","upvote_count":"3","comment_id":"130235","content":"Option C is correct:\nRequirement clearly says dataproc & GCS. One of the google recommended solution for Shuffle Intensive jobs is to make use of GCS only as Source and Target and to use HDFS for all intermediate shuffling and other operations. Since Shuffling will use the HDFS for storing the data and Pre-emptible VM's doesn't have HDFS storage allocated there is no point in increasing the boot disk of preemptible VM's.Pre-emptible vm is completely out of scope.\n\nFrom Google:-\nPreemptible Worker Ratio:Since preemptible workers write their shuffle data to HDFS, it is important to make sure that your cluster contains enough primary workers to accommodate your job's shuffle data. \n\nPre-emptible VM's Persistent disk size—As a default, secondary workers are created with the smaller of 100GB or the primary worker boot disk size. This disk space is used for local caching of data and is not available through HDFS. You can override the default disk size with the gcloud dataproc clusters create --secondary-worker-boot-disk-size command at cluster creation. You can specify this flag even if the cluster does will not have secondary workers when it is created","comments":[{"poster":"sumanshu","comment_id":"395295","upvote_count":"1","timestamp":"1625095500.0","content":"How 'C' , if Preemptible VMs can't be used for HDFS storage."}],"timestamp":"1594253700.0"},{"content":"what about option B? using tensorflow.\nhttps://engineering.linkedin.com/blog/2020/spark-tfrecord#:~:text=The%20goal%20of%20Spark%2DTFRecord,%2C%20JSON%2C%20Parquet%2C%20etc.","timestamp":"1594045800.0","upvote_count":"2","comment_id":"127888","poster":"Devx198912233"},{"content":"Organisation is cost sensitive ..Hence SSD will be more expensive.\nWill go for A.","timestamp":"1593956160.0","upvote_count":"5","comment_id":"126885","poster":"Rajuuu"},{"upvote_count":"4","content":"D\nhttps://cloud.google.com/solutions/migration/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance\nSwitch to SSD disks\nIf you perform many shuffling operations or partitioned writes, switch to SSDs to boost performance.\nAs a default, preemptible VMs are created with a smaller boot disk size, and you might want to override this configuration if you are running shuffle-heavy workloads. For details, see the page on preemptible VMs in the Dataproc documentation.","poster":"norwayping","comment_id":"121741","timestamp":"1593333240.0"},{"content":"Sorry D..","timestamp":"1593271500.0","poster":"PRC","upvote_count":"2","comment_id":"121319"},{"timestamp":"1593271440.0","upvote_count":"1","content":"C&D are correct","comment_id":"121317","poster":"PRC"},{"timestamp":"1585369200.0","poster":"[Removed]","upvote_count":"5","content":"Answer: D\nDescription: Google says that inorder to increase performance switch to SSD which will be costly, so to tackle this increase the boot disk size, bootsize is worker node cache size 100 Gb.","comment_id":"68747"},{"comment_id":"67020","content":"Should be C.","timestamp":"1584895620.0","upvote_count":"4","comments":[{"comment_id":"67125","timestamp":"1584919140.0","content":"https://cloud.google.com/solutions/migration/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance","upvote_count":"2","poster":"[Removed]"},{"timestamp":"1584943140.0","comments":[{"upvote_count":"4","content":"Option [D] - Looks most appropriate - https://cloud.google.com/solutions/migration/hadoop/migrating-apache-spark-jobs-to-cloud-dataproc#optimize_performance","poster":"dambilwa","comment_id":"120210","timestamp":"1593150060.0"}],"upvote_count":"7","comment_id":"67184","content":"Selected D","poster":"[Removed]"}],"poster":"[Removed]"}]},{"id":"o23Wm3MbIRyUIqNynlWo","topic":"1","answer_ET":"D","answer_description":"","question_text":"Your team is responsible for developing and maintaining ETLs in your company. One of your Dataflow jobs is failing because of some errors in the input data, and you need to improve reliability of the pipeline (incl. being able to reprocess all failing data).\nWhat should you do?","choices":{"C":"Add a tryג€¦ catch block to your DoFn that transforms the data, write erroneous rows to Pub/Sub PubSub directly from the DoFn.","B":"Add a tryג€¦ catch block to your DoFn that transforms the data, extract erroneous rows from logs.","D":"Add a tryג€¦ catch block to your DoFn that transforms the data, use a sideOutput to create a PCollection that can be stored to Pub/Sub later.","A":"Add a filtering step to skip these types of errors in the future, extract erroneous rows from logs."},"unix_timestamp":1662206280,"timestamp":"2022-09-03 13:58:00","question_images":[],"discussion":[{"content":"Selected Answer: D\nC is a big NO. Writing to PubSub in DoFn will cause bottleneck in the pipeline. For IO, we should always use those IO lib (e.g PubsubIO)\nUsing sideOutput is the correct answer here. There is a Qwiklab about this. It is recommended to do that lab to understand more.","upvote_count":"13","timestamp":"1693632480.0","poster":"midgoo","comment_id":"826605"},{"upvote_count":"8","content":"Selected Answer: D\nBased on the given scenario, option D would be the best approach to improve the reliability of the pipeline.\n\nAdding a try-catch block to the DoFn that transforms the data would allow you to catch and handle errors within the pipeline. However, storing erroneous rows in Pub/Sub directly from the DoFn (Option C) could potentially create a bottleneck in the pipeline, as it adds additional I/O operations to the data processing.\n\nOption A of filtering the erroneous data would not allow the pipeline to reprocess the failing data, which could result in data loss.\n\nOption D of using a sideOutput to create a PCollection of erroneous data would allow for reprocessing of the failed data and would not create a bottleneck in the pipeline. Storing the erroneous data in a separate PCollection would also make it easier to debug and analyze the failed data.\n\nTherefore, adding a try-catch block to the DoFn that transforms the data and using a sideOutput to create a PCollection of erroneous data that can be stored to Pub/Sub later would be the best approach to improve the reliability of the pipeline.","timestamp":"1692121200.0","poster":"jonathanthezombieboy","comment_id":"809892"},{"comment_id":"1191496","upvote_count":"2","timestamp":"1728381900.0","content":"Selected Answer: D\nI think it's D because here you can write data from Dataflow PCollection to pub/sub. https://cloud.google.com/dataflow/docs/guides/write-to-pubsub","poster":"Farah_007"},{"comment_id":"961839","poster":"Mathew106","timestamp":"1706122560.0","content":"Selected Answer: C\nAnswer is C. Here is the github repo and an example from the Qwiklab where they tag the output as 'parsed_rows' and 'unparsed_rows' before they send the data to GCS. I don't see how GCS or PubSub would make a difference at this point. It seems like a more maintanable solution to just parse the data in the DoFn.\n\n1) If the function does more than that then it serves multiple purposes and it's not good software engineering. Unless there is a good reason, writing to PubSub should be separated from the DoFn.\n\nii) It's faster to write in mini-batches or one batch than stream the errors. What's the need for streaming out errors 1 by 1? Literally no real advantage.\n\nhttps://github.com/GoogleCloudPlatform/training-data-analyst/blob/master/quests/dataflow_python/7_Advanced_Streaming_Analytics/solution/streaming_minute_traffic_pipeline.py","upvote_count":"1"},{"upvote_count":"2","content":"Selected Answer: D\nOutput errors to new PCollection – Send to collector for later analysis (Pub/Sub is a good target)","poster":"tibuenoc","comment_id":"847959","timestamp":"1695449460.0"},{"upvote_count":"3","comments":[{"poster":"musumusu","comment_id":"820520","upvote_count":"1","content":"After using you try: Catch: you can also send the erroneous records to dead letter sink into BQ\n``` outputTuple.get(deadLetterTag).apply(BigQuery.write(...)) ```","timestamp":"1692877620.0"}],"content":"Option D is right approach to use to get errors as sideOutput. Apache beam has a special scripting docs not dynamic as python itself. So lets follow standard sideOutput(withoutputs in the code)\nsyntax be like in pipeline:\n'ProcessData' >> beam.ParDo(DoFn).with_outputs","comment_id":"809431","timestamp":"1692092640.0","poster":"musumusu"},{"timestamp":"1691477220.0","poster":"abwey","comment_id":"801803","content":"Selected Answer: D\nblahblahblahblahblahblahblahblah","upvote_count":"3"},{"comment_id":"791590","timestamp":"1690623480.0","poster":"waiebdi","content":"Selected Answer: D\nIt`s D.\nUse a try catch block to direct erroneous rows into a side output. The PCollection of the side output can be sent efficiently to the PubSub topic via Apache Beam PubSubIO.\n\nIt's not C because C means to sent every single invalid row in a separate request to PubSub which is very inefficient when working with Dataflow as now batching is involved.","upvote_count":"2"},{"upvote_count":"1","timestamp":"1686047100.0","comment_id":"736793","content":"Selected Answer: C\nC is the answer.","poster":"zellck"},{"comment_id":"732669","poster":"hauhau","timestamp":"1685620200.0","content":"C\nD: dataflow to pub/sub is weird","upvote_count":"1"},{"poster":"Atnafu","comment_id":"726639","upvote_count":"3","content":"D\nSide output is a great manner to branch the processing. Let's take the example of an input data source that contains both valid and invalid values. Valid values must be written in place #1 and the invalid ones in place#2. A naive solution suggests to use a filter and write 2 distinct processing pipelines. However this approach has one main drawback - the input dataset is read twice. If for the mentioned problem we use side outputs, we can still have 1 ParDo transform that internally dispatches valid and invalid values to appropriate places (#1 or #2, depending on value's validity).\n\n\nhttps://www.waitingforcode.com/apache-beam/side-output-apache-beam/read#:~:text=simple%20test%20cases.-,Side%20output%20defined,-%C2%B6","timestamp":"1685002500.0"},{"content":"Answer is D","poster":"sfsdeniso","upvote_count":"1","comment_id":"725886","timestamp":"1684929300.0"},{"poster":"cloudmon","content":"Selected Answer: C\nIt's C.\nIn D, \"storing to PubSub later\" doesn't really make sense.","comment_id":"712588","upvote_count":"2","timestamp":"1683392460.0"},{"content":"Selected Answer: C\nAnswer is C. You need to reprocess all the failling data, and yes, you can use PubSub as a sink, according to the documentation: https://beam.apache.org/documentation/io/connectors/","poster":"devaid","timestamp":"1681518180.0","upvote_count":"2","comment_id":"695068"},{"poster":"nickyshil","comment_id":"681639","upvote_count":"4","timestamp":"1680002940.0","content":"Answer C"},{"poster":"nickyshil","content":"The error records are directly written to PubSub from the DoFn (it’s equivalent in python).\nYou cannot directly write a PCollection to PubSub. You have to extract each record and write one at a time. Why do the additional work and why not write it using PubSubIO in the DoFn itself?\nYou can write the whole PCollection to Bigquery though, as explained in\n\nReference:\nhttps://medium.com/google-cloud/dead-letter-queues-simple-implementation-strategy-for-cloud-pub-sub-80adf4a4a800","timestamp":"1680002820.0","upvote_count":"6","comment_id":"681637"},{"upvote_count":"3","timestamp":"1677851880.0","poster":"AWSandeep","comment_id":"658404","content":"Selected Answer: D\nD. Add a try-catch block to your DoFn that transforms the data, use a sideOutput to create a PCollection that can be stored to Pub/Sub later."}],"question_id":307,"exam_id":11,"answers_community":["D (85%)","C (15%)"],"answer_images":[],"isMC":true,"answer":"D","url":"https://www.examtopics.com/discussions/google/view/79771-exam-professional-data-engineer-topic-1-question-88/"},{"id":"A1bKiF7F1r0BB0ftcZ0h","timestamp":"2022-09-02 10:26:00","topic":"1","answers_community":["C (65%)","D (15%)","B (15%)","4%"],"isMC":true,"answer_ET":"C","exam_id":11,"url":"https://www.examtopics.com/discussions/google/view/79337-exam-professional-data-engineer-topic-1-question-89/","question_images":[],"question_text":"You're training a model to predict housing prices based on an available dataset with real estate properties. Your plan is to train a fully connected neural net, and you've discovered that the dataset contains latitude and longitude of the property. Real estate professionals have told you that the location of the property is highly influential on price, so you'd like to engineer a feature that incorporates this physical dependency.\nWhat should you do?","choices":{"A":"Provide latitude and longitude as input vectors to your neural net.","C":"Create a feature cross of latitude and longitude, bucketize it at the minute level and use L1 regularization during optimization.","B":"Create a numeric column from a feature cross of latitude and longitude.","D":"Create a feature cross of latitude and longitude, bucketize it at the minute level and use L2 regularization during optimization."},"answer_description":"","question_id":308,"unix_timestamp":1662107160,"answer":"C","answer_images":[],"discussion":[{"comment_id":"680119","poster":"AHUI","upvote_count":"9","timestamp":"1664222760.0","content":"Ans C, use L1 regularization becuase we know the feature is a strong feature. L2 will evenly distribute weights"},{"comment_id":"724240","timestamp":"1669112280.0","poster":"dish11dish","content":"Selected Answer: C\nOption C is correct\n\nUse L1 regularization when you need to assign greater importance to more influential features. It\nshrinks less important feature to 0.\nL2 regularization performs better when all input features influence the output & all with the\nweights are of equal size.","upvote_count":"8"},{"poster":"desertlotus1211","upvote_count":"1","comment_id":"1398855","content":"Selected Answer: D\nL1 regularization (Option C) would encourage sparsity but may eliminate too many features, which can be detrimental when you need to capture subtle geographic differences","timestamp":"1742047020.0"},{"poster":"SamuelTsch","content":"Selected Answer: D\nI would like choose D. L1 will ignore the irrelevant features. However, we know that lat and long are cruial for this model. We can't take away their influences. L2 helps in preventing overfitting.","comment_id":"1302127","upvote_count":"2","timestamp":"1729702440.0"},{"upvote_count":"1","comment_id":"1297803","poster":"MohaSa1","content":"Selected Answer: A\nThis does not seems to be useful, minute level bucketizing will create 3,600 possible buckets per degree squared, not logical, and sparse feature space, Option A seems to be a better choice.","timestamp":"1728935220.0"},{"comment_id":"1251957","timestamp":"1721503020.0","content":"Selected Answer: B\nBucketing into minutes is inaccurate, up to 1.8 km are grouped. Way too much for real estste.\nTherefore B","upvote_count":"1","poster":"Snnnnneee"},{"upvote_count":"2","poster":"uday_examtopic","comment_id":"1015518","timestamp":"1695535740.0","content":"Create a feature cross of latitude and longitude, bucketize it at the minute level and use L2 regularization during optimization.\n\n Like option C, we bucketize at the minute level, but this time we apply L2 regularization. L2 regularization, or Ridge Regression, discourages large values of weights in the model without forcing them to become sparse. It can help prevent overfitting, especially when we have a large number of features (as a result of bucketizing and crossing).\n\nGiven the options, D. Create a feature cross of latitude and longitude, bucketize it at the minute level and use L2 regularization during optimization seems to be the most appropriate. Bucketizing at the minute level captures localized patterns, and L2 regularization can help control the complexity of the model without enforcing sparsity."},{"comments":[{"content":"Coordinates are written with Degrees, minutes and seconds (one minute being equal to about 1.8 km). So you group your coordinates in buckets with a miute precision","timestamp":"1699457220.0","poster":"Surely1987","upvote_count":"4","comment_id":"1065719"}],"upvote_count":"3","poster":"ckanaar","comment_id":"1013010","timestamp":"1695294540.0","content":"What does bucketizing at the minute level mean in the context of this question?"},{"comment_id":"991358","content":"Selected Answer: B\nI strongly believe it's B.","poster":"FP77","timestamp":"1693129380.0","upvote_count":"2"},{"upvote_count":"1","poster":"Mathew106","comment_id":"960310","comments":[{"comment_id":"1288163","content":"Bucketising means that we're saying \"anyone in this square 1.8km (minute) region is considered a single area\" - it's actually recommended as a default way to deal with lat/lon, as they don't really work as seperate columns (or at least we'd be hoping the FCNN buckets them intelligently itself, which it won't mostly)","upvote_count":"1","poster":"baimus","timestamp":"1727102160.0"}],"content":"Selected Answer: B\nThe right answer is B. What the hell does bucketize the feature cross of latitude and longtitude even mean? They are not a time feature. C and D don't even make sense. The L1 regularization is something that doesn't answer anything in the question. The only valid feature engineered here is option B. A is not an engineered feature.\n\n Create a feature cross of latitude and longitude, bucketize it at the minute level and use L1 regularization during optimization.","timestamp":"1690106160.0"},{"poster":"Jojo9400","timestamp":"1689091260.0","content":"D\n\nYou have to use L2, since you have create a new variable with two already existing the risk of multicollinearity is high, L1 is good for selecting feature to avoid curse of dimensionality not for multicollinearity","comment_id":"949122","upvote_count":"1"},{"poster":"ga8our","timestamp":"1682948640.0","content":"Why not L2? L2 (Ridge) uses a squared value coefficient as a penalty term to the loss function, while L1 (Lasso) uses an absolute value coefficient. Isn't a squared penalty stronger than an absolute one? \nhttps://towardsdatascience.com/l1-and-l2-regularization-methods-ce25e7fc831c","upvote_count":"1","comment_id":"886321","comments":[{"poster":"ckanaar","timestamp":"1695294480.0","comment_id":"1013008","upvote_count":"2","content":"L1 regression forces unimportant coefficients to zero. Since the location is extremely important, L1 will force less important coefficients to zero, thereby further increasing the importance of the location coefficient."}]},{"timestamp":"1682421120.0","comment_id":"880267","upvote_count":"2","content":"gpt: Option C and D suggest bucketizing the feature cross of latitude and longitude at the minute level and using L1 or L2 regularization during optimization. While regularization can help prevent overfitting, bucketizing at such a granular level may not be necessary and could lead to overfitting. It's also not clear how bucketizing at the minute level would capture the spatial relationship between the latitude and longitude features.","poster":"Oleksandr0501"},{"comments":[{"upvote_count":"1","comment_id":"906509","content":"chat-gpt also says D\nexplanation: \nThis approach effectively creates a grid of the geographical area in your data, allowing the model to learn weights for each grid cell (bucket). This helps capture the spatial relationship between latitude and longitude, which can be crucial for real estate prices. Additionally, using L2 regularization helps prevent overfitting by discouraging complex models, which can be particularly important when working with high-dimensional crossed features.","timestamp":"1685002260.0","poster":"cetanx"}],"content":"Selected Answer: D\nD. Create a feature cross of latitude and longitude, bucketize it at the minute level and use L2 regularization during optimization. This will create a new feature that captures the physical dependency of the location of the property on the price, and bucketing it at the minute level will reduce the number of unique values and prevent overfitting. L2 regularization will also help to prevent overfitting by penalizing large weights in the model.","poster":"PolyMoe","comment_id":"789538","upvote_count":"1","timestamp":"1674819540.0"},{"content":"Selected Answer: C\nC is the answer.\n\nhttps://developers.google.com/machine-learning/crash-course/feature-crosses/video-lecture\nA feature cross is a synthetic feature formed by multiplying (crossing) two or more features. Crossing combinations of features can provide predictive abilities beyond what those features can provide individually.\n\nhttps://developers.google.com/machine-learning/crash-course/regularization-for-sparsity/l1-regularization","poster":"zellck","upvote_count":"3","timestamp":"1670329440.0","comment_id":"736792"},{"comment_id":"666212","timestamp":"1662907740.0","upvote_count":"2","content":"https://medium.com/riga-data-science-club/geographic-coordinate-encoding-with-tensorflow-feature-columns-e750ae338b7c#:~:text=to%20the%20rescue!-,Feature%20Crosses,-Combining%20features%20into","comments":[{"content":"Feature cross seems to be the right feature option","upvote_count":"1","comment_id":"666214","comments":[{"poster":"crismo04","comment_id":"666217","upvote_count":"4","timestamp":"1662907860.0","content":"So it's B option"}],"poster":"crismo04","timestamp":"1662907800.0"}],"poster":"crismo04"},{"upvote_count":"1","comment_id":"660685","timestamp":"1662428640.0","poster":"[Removed]","content":"Selected Answer: C\nRegularization + location into one"},{"timestamp":"1662176580.0","content":"Selected Answer: C\nC. Create a feature cross of latitude and longitude, bucketize it at the minute level and use L1 regularization during optimization.","poster":"AWSandeep","comment_id":"658035","upvote_count":"5"},{"content":"C or D?\nhttps://medium.com/riga-data-science-club/geographic-coordinate-encoding-with-tensorflow-feature-columns-e750ae338b7c","upvote_count":"1","comment_id":"657177","poster":"nwk","timestamp":"1662107160.0"}]},{"id":"qwpMD2a1ylO6D53aF4d1","answer":"D","url":"https://www.examtopics.com/discussions/google/view/79679-exam-professional-data-engineer-topic-1-question-9/","answer_images":[],"timestamp":"2022-09-03 06:48:00","question_text":"Your company is using WILDCARD tables to query data across multiple tables with similar names. The SQL statement is currently failing with the following error:\n//IMG//\n\nWhich table name will make the SQL statement work correctly?","topic":"1","choices":{"C":"'bigquery-public-data.noaa_gsod.gsod'*","A":"'bigquery-public-data.noaa_gsod.gsod'","D":"'bigquery-public-data.noaa_gsod.gsod*`","B":"bigquery-public-data.noaa_gsod.gsod*"},"unix_timestamp":1662180480,"answer_description":"","question_images":["https://www.examtopics.com/assets/media/exam-media/04341/0000600001.png"],"question_id":309,"discussion":[{"poster":"Ender_H","comments":[{"comment_id":"776766","upvote_count":"11","poster":"Davijde13","timestamp":"1673798280.0","content":"I suspect there has been some typo with copy-paste of the option D"},{"timestamp":"1703663760.0","upvote_count":"4","poster":"jitvimol","comment_id":"1106649","content":"yes, I see from another source that actually ans D has to be backtick. Probably a problem when this web do data ingestion."}],"timestamp":"1663943280.0","upvote_count":"34","comment_id":"677244","content":"None, the actual `bigquery-public-data.noaa_gsod.gsod*`\nwith back ticks at the beginning and at the end."},{"timestamp":"1744282560.0","content":"Selected Answer: D\njust read this guys : https://cloud.google.com/bigquery/docs/querying-wildcard-tables","comment_id":"1559542","upvote_count":"1","poster":"fassil"},{"timestamp":"1734887880.0","comment_id":"1330489","content":"Selected Answer: B\nB This is the correct syntax. The wildcard * is outside any quotes or string delimiters. This tells BigQuery to query all tables that match the pattern gsod* within the noaa_gsod dataset.","poster":"Mariaantonirajc","upvote_count":"1"},{"poster":"sravi1200","upvote_count":"1","timestamp":"1734683700.0","content":"Selected Answer: B\nBig Query does not use quotations while fetching data from the table :\nexample: select * from project-id.dataset_name.table_name; is the syntax","comment_id":"1329360"},{"poster":"vaga1","content":"Selected Answer: D\nlet's forget the fact that in BQ is used ` instead than ' which retrieves an error in any case. ` is called backquote, backtick, or left quote while ' is simply an apostrophe. Let's consider ' to be ` in every answer, since moderators could have not been aware of such when they had received the question.","timestamp":"1727154660.0","comments":[{"timestamp":"1684505520.0","content":"Who used BQ knows that the backquote is necessary only for the project name, while it can be used for the whole string, and necessary only when the project name contains special (special in this specific context) characters.\n\n- is a special character. so\n`bigquery-public-data`.noaa_gsod.gsod1940 \nwould have worked too.\n\nThe question now turns out to be\n`bigquery-public-data`.noaa_gsod.gsod* \nstill works or due to the * presence we need to write \n`bigquery-public-data.noaa_gsod.gsod*`\n?\n\nI personally do not remember, and I do not have a BQ at my disposal at the moment. \nBut I know for sure that \n`bigquery-public-data.noaa_gsod.gsod*`\nworks while \n`bigquery-public-data`.noaa_gsod.gsod*\nis not in the options.","upvote_count":"2","poster":"vaga1","comment_id":"902000"}],"comment_id":"901998","upvote_count":"1"},{"comment_id":"1050476","content":"Selected Answer: D\nOption D (assuming to have backticks)\n\nRefer: https://cloud.google.com/bigquery/docs/querying-wildcard-tables\nThe following query is NOT valid because it isn't properly quoted with backticks:\n```\n#standardSQL\n/* Syntax error: Expected end of statement but got \"-\" at [4:11] */\nSELECT\n max\nFROM\n # missing backticks\n bigquery-public-data.noaa_gsod.gsod*\nWHERE\n max != 9999.9 # code for missing data\n AND _TABLE_SUFFIX = '1929'\nORDER BY\n max DESC\n```","upvote_count":"2","poster":"rtcpost","timestamp":"1727154660.0"},{"upvote_count":"1","comment_id":"1065075","timestamp":"1727154660.0","poster":"RT_G","content":"Selected Answer: D\nReference: https://cloud.google.com/bigquery/docs/querying-wildcard-tables\nThe wildcard table name contains the special character (*), which means that you must enclose the wildcard table name in backtick (`) characters. For example, the following query is valid because it uses backticks:\n\n\n#standardSQL\n/* Valid SQL query */\nSELECT\n max\nFROM\n `bigquery-public-data.noaa_gsod.gsod*`\nWHERE\n max != 9999.9 # code for missing data\n AND _TABLE_SUFFIX = '1929'\nORDER BY\n max DESC"},{"timestamp":"1727154660.0","comment_id":"1207163","poster":"ABKR1300","content":"Few might go with the Option B which will be a blunder because of the below reason.\n\nWhile querying the tables or views with the name, it is optional to surround with the backticks. But while querying the list of tables with Wild card character, it is must to surround with the backticks. \n\nWe can get the Syntax error: Expected end of input but got \"*\" with the below query \n\nSELECT * FROM bigquery-public-data.noaa_gsod.gsod*\nWHERE _TABLE_SUFFIX = \"2024\"\n\nSo, option D might be the correct one, provided if there is a typo.","upvote_count":"4"},{"poster":"Chintu_573","timestamp":"1719332580.0","content":"Selected Answer: B\nIN option D, there is differert ' ` on first and last. That's why right option is second.","upvote_count":"1","comment_id":"1236984"},{"upvote_count":"3","content":"Selected Answer: B\nbigquery-public-data.noaa_gsod.gsod* also works","timestamp":"1716291180.0","comment_id":"1214894","poster":"dsyouness"},{"content":"Selected Answer: D\nAgree with others - Option D","poster":"RT_G","comment_id":"1065072","timestamp":"1699381320.0","upvote_count":"1"},{"timestamp":"1698592080.0","poster":"axantroff","comment_id":"1056902","content":"Selected Answer: D\nD. 'bigquery-public-data.noaa_gsod.gsod*` is the right answer with 1 typo","upvote_count":"1"},{"comment_id":"895917","upvote_count":"3","timestamp":"1683895380.0","poster":"Pavaan","content":"Answer is 'D'\nReference : https://cloud.google.com/bigquery/docs/wildcard-table-reference\n\nEnclose table names with wildcards in backticks\nThe wildcard table name contains the special character (*), which means that you must enclose the wildcard table name in backtick (`) characters."},{"poster":"Melampos","timestamp":"1682539440.0","comment_id":"881991","content":"Selected Answer: B\nbigquery-public-data.noaa_gsod.gsod* works","upvote_count":"2"},{"content":"Selected Answer: B\nshould be B, the backtick at D answer is wrong ' instead of `","comment_id":"844617","upvote_count":"1","timestamp":"1679297700.0","poster":"hkhnhan"},{"comment_id":"844608","upvote_count":"1","timestamp":"1679296560.0","content":"should be B, the backtick at D answer is wrong ' instead of `","poster":"hkhnhan"},{"comment_id":"819312","timestamp":"1677163740.0","upvote_count":"1","content":"D is correct","poster":"Zosby"},{"timestamp":"1662493500.0","poster":"priluft","content":"Selected Answer: D\nD. 'bigquery-public-data.noaa_gsod.gsod*`","comment_id":"661617","upvote_count":"2"},{"upvote_count":"2","comment_id":"658075","timestamp":"1662180480.0","content":"Selected Answer: D\nD. 'bigquery-public-data.noaa_gsod.gsod*`","poster":"AWSandeep"}],"exam_id":11,"answer_ET":"D","isMC":true,"answers_community":["D (55%)","B (45%)"]},{"id":"xMet3GSk7cmWaMnGnpWy","isMC":true,"question_text":"You are deploying MariaDB SQL databases on GCE VM Instances and need to configure monitoring and alerting. You want to collect metrics including network connections, disk IO and replication status from MariaDB with minimal development effort and use StackDriver for dashboards and alerts.\nWhat should you do?","topic":"1","timestamp":"2020-03-22 17:59:00","answer_ET":"D","question_images":[],"answers_community":["D (87%)","13%"],"answer_images":[],"answer":"D","answer_description":"","choices":{"B":"Place the MariaDB instances in an Instance Group with a Health Check.","A":"Install the OpenCensus Agent and create a custom metric collection application with a StackDriver exporter.","D":"Install the StackDriver Agent and configure the MySQL plugin.","C":"Install the StackDriver Logging Agent and configure fluentd in_tail plugin to read MariaDB logs."},"exam_id":11,"url":"https://www.examtopics.com/discussions/google/view/17260-exam-professional-data-engineer-topic-1-question-90/","unix_timestamp":1584896340,"question_id":310,"discussion":[{"comment_id":"76116","comments":[{"comment_id":"444675","upvote_count":"13","timestamp":"1663170540.0","content":"It is definitely A.\nB: can't be because Health Checks just checks that machine is online\nC: StackDriver Logging is for Logging. Here we talk of Monitoring / Alerting\nD: StackDriver Agent monitors default metrics of VMs and some Database stuff with the MySQL Plugin. Here you want to monitor some more custom stuff like Replication of MariaDB (I didn't find anything of this sort in the plugin page), and you may want to use Custom Metrics rather than default metrics. \"Cloud Monitoring automatically collects more than 1,500 built-in metrics from more than 100 monitored resources. But those metrics cannot capture application-specific data or client-side system data. Those metrics can give you information on backend latency or disk usage, but they can't tell you how many background routines your application spawned.\" https://cloud.google.com/monitoring/custom-metrics/open-census#monitoring_opencensus_metrics_quickstart-python","poster":"fire558787"}],"upvote_count":"26","content":"Answer : A\nMariaDB needs costume metrics , and stackdriver built-in monitoring tools will not provide these metrics . Opencensus Agent will do this for you \nFor more info , refer to :\nhttps://cloud.google.com/monitoring/custom-metrics/open-census","poster":"Barniyah","timestamp":"1618761480.0"},{"comments":[{"content":"I think its D, because its Selfmanaged DB and for this we use Stackdriver Agents. and in this question its asking about metrics not logs.","timestamp":"1661005980.0","upvote_count":"2","poster":"Atulthakur","comment_id":"428197"}],"content":"Answer: C\nDescription: The GitHub repository named google-fluentd-catch-all-config which includes the configuration files for the Logging agent for ingesting the logs from various third-party software packages.","upvote_count":"13","timestamp":"1616899440.0","poster":"[Removed]","comment_id":"68751"},{"comment_id":"1087643","timestamp":"1733316720.0","upvote_count":"2","poster":"rocky48","content":"Selected Answer: D\nHere's the rationale:\nStackDriver Agent: The StackDriver Agent is designed to collect system and application metrics from virtual machine instances and send them to StackDriver Monitoring. It simplifies the process of collecting and forwarding metrics.\nMySQL Plugin: The StackDriver Agent has a MySQL plugin that allows you to collect MySQL-specific metrics without the need for additional custom development. This includes metrics related to network connections, disk IO, and replication status – which are the specific metrics you mentioned.\n\nOption D is the most straightforward and least development-intensive approach to achieve the monitoring and alerting requirements for MariaDB on GCE VM Instances using StackDriver."},{"content":"Selected Answer: A\nreplication status seems to be not included in sql agent metrics. but I do not like A in terms of efforts","upvote_count":"1","timestamp":"1731101580.0","comment_id":"1065975","poster":"BlehMaks"},{"upvote_count":"1","comment_id":"831614","timestamp":"1709794260.0","poster":"ninjatech","content":"it can't be A as it saying minimal development but for opencensus the development is needed."},{"timestamp":"1703079660.0","poster":"slade_wilson","comment_id":"750942","content":"Selected Answer: A\nTo use metrics collected by OpenCensus in your Google Cloud project, you must make the OpenCensus metrics libraries and the Stackdriver exporter available to your application. The Stackdriver exporter exports the metrics that OpenCensus collects to your Google Cloud project. You can then use Cloud Monitoring to chart or monitor those metrics.","upvote_count":"1"},{"comments":[{"timestamp":"1703514300.0","upvote_count":"4","poster":"wan2three","comment_id":"755709","content":"For supplement, ‘Stackdriver agent' now called as Ops agent, 'Operations Suite'"}],"comment_id":"736790","timestamp":"1701865140.0","poster":"zellck","upvote_count":"9","content":"Selected Answer: D\nD is the answer.\n\nhttps://cloud.google.com/stackdriver/docs/solutions/agents/ops-agent/third-party/mariadb"},{"content":"Selected Answer: D\nOption D is Correct\nMariaDB is a community-developed, commercially supported fork of the MySQL relational database management system (RDBMS). To collect logs and metrics for MariaDB, use the mysql receivers.\n\nThe mysql receiver connects by default to a local MariaDB server using a Unix socket and Unix authentication as the root user.\n\nreference:-https://cloud.google.com/stackdriver/docs/solutions/agents/ops-agent/third-party/mariadb","timestamp":"1700646300.0","upvote_count":"5","poster":"dish11dish","comment_id":"724225"},{"poster":"girgu","timestamp":"1698589320.0","comment_id":"707186","content":"Selected Answer: D\nhttps://cloud.google.com/monitoring/agent/ops-agent/third-party/mariadb","upvote_count":"3"},{"poster":"clouditis","comment_id":"676605","timestamp":"1695424200.0","content":"C is the answer, fluentd plug in is needed as the DB is on GCE","upvote_count":"2"},{"comment_id":"653670","timestamp":"1693348080.0","upvote_count":"2","poster":"ducc","content":"Selected Answer: D\ngo for D"},{"timestamp":"1692614040.0","upvote_count":"2","comment_id":"649712","poster":"eRaymox","content":"A\nStackDriver Agent monitors default metrics of VMs and some Database stuff with the MySQL Plugin. Here you want to monitor some more custom stuff like Replication of MariaDB (I didn’t find anything of this sort in the plugin page), and you may want to use Custom Metrics rather than default metrics. “Cloud Monitoring automatically collects more than 1,500 built-in metrics from more than 100 monitored resources. But those metrics cannot capture application-specific data or client-side system data. Those metrics can give you information on backend latency or disk usage, but they can’t tell you how many background routines your application spawned.” https://cloud.google.com/monitoring/custom-metrics/open-census#monitoring_opencensus_metrics_quickstart-python"},{"comment_id":"620517","timestamp":"1687452720.0","upvote_count":"2","poster":"Kriegs","content":"I'm not 100% sure as I have no experience with that issue, but I would say it's D - both A and D should work, but the keyword is \"with minimal development effort\" (and using pre-built plugin > creating custom metric in terms of simplicity, that's obvious) and all of the relevant data (as per question) should be there: https://cloud.google.com/monitoring/api/metrics_agent#agent-mysql\n\nI'm not sure if C would work, but it also seems more advanced in implementation than D. B is 100% wrong and insufficient for that use case.\n\nFeel free to prove me wrong :)"},{"upvote_count":"1","comment_id":"590529","poster":"NR22","content":"A and D both seem like viable options here, unsure which is Google's preferred method as that would be deemed the correct answer in the exam. Any opinions?","timestamp":"1682244240.0"},{"timestamp":"1681565220.0","comments":[{"timestamp":"1684997700.0","poster":"ST42","comment_id":"607091","content":"\"MariaDB is a community-developed, commercially supported fork of the MySQL relational database management system (RDBMS). To collect logs and metrics for MariaDB, use the mysql receivers.\"\n\nhttps://cloud.google.com/monitoring/agent/ops-agent/third-party/mariadb","upvote_count":"2"}],"content":"Selected Answer: D\nD\nmariaDB is an extension of mysql and mysql plugin must work fine to extract the metrics of mariaDB.","upvote_count":"5","comment_id":"586364","poster":"Didine_22"},{"upvote_count":"2","poster":"rbeeraka","comment_id":"530814","timestamp":"1674507540.0","content":"Selected Answer: A\nOpencensus Agent is right one"},{"comment_id":"445579","comments":[{"poster":"[Removed]","comment_id":"521425","timestamp":"1673429700.0","upvote_count":"2","content":"agree; https://cloud.google.com/monitoring/agent/ops-agent/third-party/mariadb#configure-instance"}],"upvote_count":"4","poster":"nguyenmoon","timestamp":"1663295040.0","content":"D is correct. Answer : D\nmariaDB is an extension of mysql and mysql plugin must work fine to extract the metrics of mariaDB."},{"upvote_count":"6","comment_id":"422975","content":"Answer : D\nmariaDB is an extension of mysql and mysql plugin must work fine to extract the metrics of mariaDB.\nhttps://cloud.google.com/monitoring/agent/plugins/mysql","poster":"safiyu","timestamp":"1660161840.0"},{"content":"Vote for C","comment_id":"395320","timestamp":"1656633960.0","upvote_count":"2","poster":"sumanshu"},{"upvote_count":"6","poster":"bobby8521","content":"should be D \nhttps://cloud.google.com/monitoring/api/metrics_agent#agent-mysql - This plugins collects the replication status and other metrics can be collected from Stackdriver agent. And also MariaDB was not listed in that as this can be used as MySQL plugin.","timestamp":"1644522300.0","comment_id":"287821"},{"poster":"SteelWarrior","upvote_count":"8","comments":[{"comment_id":"222069","poster":"snamburi3","upvote_count":"4","content":"yes, I think so. Ref: https://cloud.google.com/monitoring/agent/plugins/mysql#configuring","timestamp":"1637254980.0"}],"content":"Should be D. MySQL plugin should be compatible for MariaDB.","timestamp":"1632326820.0","comment_id":"184565"},{"upvote_count":"7","timestamp":"1632052920.0","poster":"bnikunj","comment_id":"182259","content":"I believe it should be D as MariaDb is just an extension of MySQL and the mysql plugin should work with sytacjdriver monitoring"},{"timestamp":"1631950620.0","poster":"shashankraj","comment_id":"181468","upvote_count":"4","content":"A:\nFluentd doesn't having Plugin for MariaDB \nhttps://www.fluentd.org/plugins/all"},{"comment_id":"175685","upvote_count":"1","poster":"Tanmoyk","timestamp":"1631083440.0","content":"A should be the answer use OpenCensus to capture application related custom information and integrate with stackdriver"},{"upvote_count":"1","timestamp":"1629499920.0","poster":"haroldbenites","content":"C is correct","comment_id":"162534"},{"poster":"hemanth7","timestamp":"1628390100.0","content":"should be D as question talks more about monitoring and alerting than logging.","upvote_count":"6","comment_id":"152816"},{"timestamp":"1624708320.0","comment_id":"120487","content":"I wonder why Option [D] is wrong - We can Install the MySQL Plugin & start monitoring & alerts. Isn't it?","poster":"dambilwa","upvote_count":"3"},{"content":"Should be C","poster":"[Removed]","timestamp":"1616432340.0","comment_id":"67023","comments":[{"poster":"[Removed]","comment_id":"70012","timestamp":"1617254340.0","upvote_count":"2","content":"You can install Stackdriver Logging agent on compute engine and AWS EC2 instances to stream logs from third party applications into Stackdriver Logging.\nThe logging agent is an application based on Fluentd. When you write your logs to existing log files such as sys log on your VM instance, the login agent sends the logs to Stackdriver."}],"upvote_count":"1"}]}],"exam":{"provider":"Google","id":11,"isBeta":false,"numberOfQuestions":319,"isImplemented":true,"name":"Professional Data Engineer","lastUpdated":"11 Apr 2025","isMCOnly":true},"currentPage":62},"__N_SSP":true}