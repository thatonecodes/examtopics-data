{"pageProps":{"questions":[{"id":"6O6j6JkdjyAHLflhYxa6","choices":{"D":"Separate Cloud SQL clusters for each region","A":"Cloud Spanner","C":"Cloud Memorystore as a cache","B":"Cloud Datastore"},"topic":"1","timestamp":"2021-05-21 12:27:00","unix_timestamp":1621592820,"answer_images":[],"question_text":"Case study -\nThis is a case study. Case studies are not timed separately. You can use as much exam time as you would like to complete each case. However, there may be additional case studies and sections on this exam. You must manage your time to ensure that you are able to complete all questions included on this exam in the time provided.\nTo answer the questions included in a case study, you will need to reference information that is provided in the case study. Case studies might contain exhibits and other resources that provide more information about the scenario that is described in the case study. Each question is independent of the other questions in this case study.\nAt the end of this case study, a review screen will appear. This screen allows you to review your answers and to make changes before you move to the next section of the exam. After you begin a new section, you cannot return to this section.\n\nTo start the case study -\nTo display the first question in this case study, click the Next button. Use the buttons in the left pane to explore the content of the case study before you answer the questions. Clicking these buttons displays information such as business requirements, existing environment, and problem statements. If the case study has an\nAll Information tab, note that the information displayed is identical to the information displayed on the subsequent tabs. When you are ready to answer a question, click the Question button to return to the question.\n\nCompany Overview -\nHipLocal is a community application designed to facilitate communication between people in close proximity. It is used for event planning and organizing sporting events, and for businesses to connect with their local communities. HipLocal launched recently in a few neighborhoods in Dallas and is rapidly growing into a global phenomenon. Its unique style of hyper-local community communication and business outreach is in demand around the world.\n\nExecutive Statement -\nWe are the number one local community app; it's time to take our local community services global. Our venture capital investors want to see rapid growth and the same great experience for new local and virtual communities that come online, whether their members are 10 or 10000 miles away from each other.\n\nSolution Concept -\nHipLocal wants to expand their existing service, with updated functionality, in new regions to better serve their global customers. They want to hire and train a new team to support these regions in their time zones. They will need to ensure that the application scales smoothly and provides clear uptime data.\n\nExisting Technical Environment -\nHipLocal's environment is a mix of on-premises hardware and infrastructure running in Google Cloud Platform. The HipLocal team understands their application well, but has limited experience in global scale applications. Their existing technical environment is as follows:\n* Existing APIs run on Compute Engine virtual machine instances hosted in GCP.\n* State is stored in a single instance MySQL database in GCP.\n* Data is exported to an on-premises Teradata/Vertica data warehouse.\n* Data analytics is performed in an on-premises Hadoop environment.\n* The application has no logging.\n* There are basic indicators of uptime; alerts are frequently fired when the APIs are unresponsive.\n\nBusiness Requirements -\nHipLocal's investors want to expand their footprint and support the increase in demand they are seeing. Their requirements are:\n* Expand availability of the application to new regions.\n* Increase the number of concurrent users that can be supported.\n* Ensure a consistent experience for users when they travel to different regions.\n* Obtain user activity metrics to better understand how to monetize their product.\n* Ensure compliance with regulations in the new regions (for example, GDPR).\n* Reduce infrastructure management time and cost.\n* Adopt the Google-recommended practices for cloud computing.\n\nTechnical Requirements -\n* The application and backend must provide usage metrics and monitoring.\n* APIs require strong authentication and authorization.\n* Logging must be increased, and data should be stored in a cloud analytics platform.\n* Move to serverless architecture to facilitate elastic scaling.\n* Provide authorized access to internal apps in a secure manner.\nIn order for HipLocal to store application state and meet their stated business requirements, which database service should they migrate to?","question_images":[],"url":"https://www.examtopics.com/discussions/google/view/53266-exam-professional-cloud-developer-topic-1-question-83/","answer":"A","question_id":321,"answer_ET":"A","exam_id":7,"isMC":true,"answers_community":["A (83%)","D (17%)"],"answer_description":"","discussion":[{"comment_id":"408713","timestamp":"1626583680.0","upvote_count":"10","content":"https://cloud.google.com/blog/products/databases/spanner-relational-database-for-all-size-applications-faqs\nhttps://cloud.google.com/architecture/best-practices-cloud-spanner-gaming-database#select_a_data_locality_to_meet_compliance_requirements\nhttps://cloud.google.com/blog/products/gcp/introducing-cloud-spanner-a-global-database-service-for-mission-critical-applications\n\nA. Cloud Spanner\n- global service \n- supports durably store application data \n- supports GDPR, to meet data locality","comments":[{"poster":"GoatSack","timestamp":"1635776460.0","comment_id":"471265","upvote_count":"1","content":"Agree with Celia."}],"poster":"celia20200410"},{"upvote_count":"1","poster":"thewalker","timestamp":"1721277540.0","comments":[{"content":"Reduced Management Overhead: Cloud Spanner is a fully managed service, meaning HipLocal doesn't need to worry about managing infrastructure, backups, or security patches. This reduces their management overhead and allows them to focus on developing their application.","timestamp":"1721277540.0","poster":"thewalker","comments":[{"poster":"thewalker","upvote_count":"1","content":"Why other options are less suitable:\n\nB. Cloud Datastore: While Cloud Datastore is a good choice for NoSQL data, it's eventually consistent, meaning data might not be immediately updated across all replicas. This could lead to inconsistencies in application state, which is not ideal for HipLocal's requirements.\nC. Cloud Memorystore as a cache: Cloud Memorystore is a great caching solution, but it's not a primary database. It's used to improve performance by storing frequently accessed data in memory. It's not suitable for storing application state or handling transactions.\nD. Separate Cloud SQL clusters for each region: This approach would require managing multiple databases, which can be complex and expensive. It also wouldn't provide the same level of global consistency and scalability as Cloud Spanner.","comment_id":"1250119","timestamp":"1721277540.0"}],"upvote_count":"1","comment_id":"1250118"}],"content":"Selected Answer: A\nThe best answer here is A. Cloud Spanner . Here's why:\n\nGlobal Scalability and Consistency: HipLocal needs to expand globally and ensure a consistent experience for users across regions. Cloud Spanner is a globally distributed, strongly consistent database that can handle high volumes of data and transactions across multiple regions. This ensures that users have a seamless experience regardless of their location.\nStrong Consistency: HipLocal's application state needs to be consistent, especially for critical operations like user authentication, event scheduling, and payment processing. Cloud Spanner's strong consistency guarantees that all data is updated across all replicas simultaneously, preventing data inconsistencies and ensuring data integrity.\nScalability: HipLocal needs to increase the number of concurrent users they can support. Cloud Spanner is designed for scalability, allowing HipLocal to easily add capacity as their user base grows.","comment_id":"1250117"},{"poster":"santoshchauhan","content":"Selected Answer: A\nHere's how Cloud Spanner aligns with HipLocal's business requirements:\n\nIt allows for a global distribution of databases, ensuring users have a consistent experience no matter their location.\nCloud Spanner's horizontal scalability supports an increasing number of concurrent users, which is necessary for HipLocal's rapid growth.\nIt offers high availability and regional data replication, which can help HipLocal ensure compliance with various regional data regulations like GDPR.\nManaged service reduces the infrastructure management time and cost, meeting another of HipLocal's key requirements.","comment_id":"1168546","upvote_count":"1","timestamp":"1709872140.0"},{"poster":"__rajan__","upvote_count":"1","timestamp":"1695186420.0","content":"Selected Answer: A\nA is best suited.","comment_id":"1011926"},{"upvote_count":"1","timestamp":"1690687800.0","poster":"TQM__9MD","comment_id":"966817","content":"Selected Answer: A\nI think A"},{"upvote_count":"1","content":"Selected Answer: D\nCloud Spanner is a highly scalable, globally-distributed database service offered by Google Cloud, but it may not be the best fit for HipLocal's needs. While Cloud Spanner provides automatic and instant scaling, strong consistency guarantees, and high availability, it also comes with a higher operational overhead and cost compared to other Google Cloud databases. Additionally, Cloud Spanner is designed for large, mission-critical applications that require strict consistency guarantees across multiple regions, which may not be necessary for HipLocal's current requirements.\n\nIn this case, it would be more appropriate for HipLocal to separate Cloud SQL clusters for each region to store their application state, as this solution would provide the necessary data storage capabilities and be more cost-effective for their current requirements.","comments":[{"upvote_count":"2","content":"Changing to A because of this requirement: Ensure a consistent experience for users when they travel to different regions.","poster":"mrvergara","comment_id":"803279","timestamp":"1675951020.0"}],"comment_id":"800021","timestamp":"1675705860.0","poster":"mrvergara"},{"timestamp":"1660975020.0","content":"Selected Answer: A\nA is correct","upvote_count":"1","comment_id":"649251","poster":"tomato123"},{"timestamp":"1626480600.0","comments":[{"comment_id":"421038","poster":"syu31svc","content":"Changing to D as qn 50 answer is Cloud SQL; consistency sake","upvote_count":"1","timestamp":"1628301720.0","comments":[{"timestamp":"1635776640.0","poster":"GoatSack","comment_id":"471271","upvote_count":"2","content":"From case study instructions: \"Each question is independent of the other questions in this case study.\"\nI am leaning towards Spanner here. What do you think?"}]}],"content":"This is similar to qn 48; I would say A is the answer","upvote_count":"1","comment_id":"408152","poster":"syu31svc"},{"poster":"mastodilu","comment_id":"362901","timestamp":"1621592820.0","upvote_count":"3","content":"I guess that the answer is D because of the GDPR","comments":[{"comment_id":"388776","upvote_count":"1","content":"Tend to agree with you","timestamp":"1624449060.0","poster":"ralf_cc"},{"upvote_count":"1","comment_id":"555942","content":"Seriously you want to spin up cloud sql in every region? …","timestamp":"1645790940.0","poster":"GCPCloudArchitectUser","comments":[{"timestamp":"1660809360.0","poster":"alex8081","comment_id":"648351","comments":[{"content":"what about management time for cloud sql clusters?\nyou can tune your cloud spanner instances, nobody forces you to use 1000 nodes.\n1. Cloud Spanner charges for the amount of storage used per month. The pricing starts at $0.30/GB/month for regional storage and $0.60/GB/month for multi-regional storage.\n2. Cloud Spanner charges for the number of nodes used per month. The pricing starts at $0.90/hour/node for regional instances and $1.44/hour/node for multi-regional instances.\n3. Cloud Spanner charges for the amount of data processed per month. The pricing starts at $0.06/GB for regional instances and $0.12/GB for multi-regional instances","timestamp":"1683550500.0","poster":"closer89","upvote_count":"1","comment_id":"892176","comments":[{"upvote_count":"1","timestamp":"1683550680.0","comment_id":"892178","poster":"closer89","content":"isnt it affordable for hiplocal company that wants to \"left footprint\"??"}]}],"content":"\" Reduce infrastructure management time and cost\".. Cloud Spanner is a database for business critical applications that completely replaces one or more Data Warehouses... is out of scope. I Vote Cloud SQL","upvote_count":"1"}]},{"upvote_count":"1","timestamp":"1668505320.0","content":"So spanner doesnt support GDPR??? kkkkkkkkkkkkkk","comment_id":"718648","poster":"TNT87"}]}]},{"id":"xTwk5FUxF5IZSrgLrPqw","answer_description":"","answers_community":["A (88%)","13%"],"choices":{"C":"Rolling deployment","D":"Recreate deployment","B":"Canary deployment","A":"Blue/green deployment"},"topic":"1","question_images":[],"answer_images":[],"answer_ET":"A","isMC":true,"unix_timestamp":1608662940,"answer":"A","exam_id":7,"discussion":[{"poster":"donchick","timestamp":"1608662940.0","upvote_count":"21","comment_id":"250360","content":"Blue/green seems to be more appropriate(https://www.redhat.com/en/topics/devops/what-is-blue-green-deployment)"},{"comment_id":"1250124","poster":"thewalker","timestamp":"1721277780.0","content":"Selected Answer: A\nThe best answer here is A. Blue/green deployment . Here's why:\n\nBlue/Green Deployment: This strategy involves running two identical environments: a \"blue\" environment (the current production version) and a \"green\" environment (the new version). Traffic is initially routed to the blue environment. Once the green environment is fully deployed and tested, traffic is switched over to the green environment. This allows for a quick rollback to the blue environment if there are issues with the new version.","comments":[{"content":"Let's look at why the other options are less suitable:\n\nB. Canary Deployment: This strategy gradually rolls out the new version to a small subset of users while the majority of traffic continues to use the old version. This is useful for testing and monitoring the new version before full rollout, but it doesn't immediately route all traffic to the new version.\nC. Rolling Deployment: This strategy gradually replaces instances of the old version with instances of the new version. While it allows for a gradual rollout, it doesn't guarantee that all traffic is immediately routed to the new version.\nD. Recreate Deployment: This strategy involves completely replacing the old deployment with the new one. This is a simple approach, but it doesn't provide a way to easily revert to the previous version if there are issues.","timestamp":"1721277780.0","upvote_count":"1","comment_id":"1250126","poster":"thewalker"}],"upvote_count":"1"},{"content":"Selected Answer: A\nThis can be achieved by using Blue/Green approach.","comment_id":"1011927","upvote_count":"1","timestamp":"1695186480.0","poster":"__rajan__"},{"timestamp":"1675507380.0","poster":"[Removed]","comment_id":"797834","content":"Selected Answer: A\nDefinitely Blue/Green Deployment","upvote_count":"1"},{"content":"Selected Answer: A\nSorry I mean A is correct","comment_id":"649254","timestamp":"1660975080.0","upvote_count":"3","poster":"tomato123"},{"comment_id":"649252","timestamp":"1660975020.0","content":"Selected Answer: B\nB is correct","upvote_count":"1","poster":"tomato123"},{"upvote_count":"2","comment_id":"604465","content":"A - Blue green seems appropriate.","timestamp":"1653055020.0","poster":"brewpike"},{"content":"Selected Answer: A\nCommunity choice is A: Blue/Green","upvote_count":"1","comment_id":"579969","poster":"morenocasado","timestamp":"1648920360.0"},{"comments":[{"content":"no... qn 9 is canary. because it wants to minimize the impact, you runs two versions together for testing. This one wants all traffic use the new version. so, it can be A or C. A is recommended and clear cut; BUT costly. C is cheaper; but, it does not routed all to new version IMMEDATELY. so. I pick A, since, question did not mention cost.","upvote_count":"5","poster":"cyma","comments":[{"upvote_count":"3","content":"Yes you're right I didn't read the qn thoroughly so answer is A","timestamp":"1627693200.0","poster":"syu31svc","comment_id":"417655"}],"timestamp":"1627091580.0","comment_id":"412872"}],"poster":"syu31svc","timestamp":"1626480660.0","content":"This is the same as qn 9; answer is B","upvote_count":"1","comment_id":"408154"}],"timestamp":"2020-12-22 19:49:00","question_id":322,"question_text":"You have an application deployed in production. When a new version is deployed, you want to ensure that all production traffic is routed to the new version of your application. You also want to keep the previous version deployed so that you can revert to it if there is an issue with the new version.\nWhich deployment strategy should you use?","url":"https://www.examtopics.com/discussions/google/view/40580-exam-professional-cloud-developer-topic-1-question-84/"},{"id":"N8bM9FI7potTAUe3WriD","answer_images":[],"unix_timestamp":1641665160,"exam_id":7,"question_images":[],"answer":"A","answer_description":"","url":"https://www.examtopics.com/discussions/google/view/69686-exam-professional-cloud-developer-topic-1-question-85/","answers_community":["A (100%)"],"discussion":[{"comments":[{"timestamp":"1704543240.0","poster":"omermahgoub","content":"B. Package the application in a single container. Use a process management tool to manage each component.\n\nThis option is not recommended because it does not follow best practices for containerization. By packaging the entire application in a single container, you would not be able to manage the individual components of the application independently, which could make it more difficult to ensure their availability.","upvote_count":"1","comment_id":"767617"}],"upvote_count":"6","poster":"omermahgoub","comment_id":"767615","content":"A. Package each component in a separate container. Implement readiness and liveness probes.\n\nThis is the recommended approach for containerizing an application for use on Kubernetes. By packaging each component in a separate container, you can ensure that each component is isolated and can be managed independently. You can then use readiness and liveness probes to monitor the health and availability of each component, which will help ensure the overall availability of the application.","timestamp":"1704543240.0"},{"upvote_count":"1","timestamp":"1726809000.0","comment_id":"1011929","content":"Selected Answer: A\nA is best suited here.","poster":"__rajan__"},{"comment_id":"753392","timestamp":"1703256120.0","content":"Selected Answer: A\nA is the answer.\n\nhttps://cloud.google.com/architecture/best-practices-for-building-containers#package_a_single_app_per_container\nWhen you start working with containers, it's a common mistake to treat them as virtual machines that can run many different things simultaneously. A container can work this way, but doing so reduces most of the advantages of the container model. For example, take a classic Apache/MySQL/PHP stack: you might be tempted to run all the components in a single container. However, the best practice is to use two or three different containers: one for Apache, one for MySQL, and potentially one for PHP if you are running PHP-FPM.","upvote_count":"1","poster":"zellck"},{"comments":[{"comments":[{"content":"Nope , not yet. im doing so soon","timestamp":"1700548380.0","poster":"TNT87","comment_id":"723209","upvote_count":"2"}],"upvote_count":"1","timestamp":"1700189580.0","comment_id":"720153","content":"did you take the exam?","poster":"[Removed]"}],"content":"the best practice is to use two or three different containers: one for Apache, one for MySQL, and potentially one for PHP if you are running PHP-FPM.\n\nBecause a container is designed to have the same lifecycle as the app it hosts, each of your containers should contain only one app. When a container starts, so should the app, and when the app stops, so should the container. The following diagram shows this best practice.\n\nhttps://cloud.google.com/architecture/best-practices-for-building-containers#package_a_single_app_per_container\nAnswer A","timestamp":"1700039760.0","poster":"TNT87","comment_id":"718632","upvote_count":"1"},{"timestamp":"1692511080.0","content":"Selected Answer: A\nA is correct","comment_id":"649255","upvote_count":"2","poster":"tomato123"},{"timestamp":"1673201160.0","comment_id":"519703","content":"Selected Answer: A\nAccording to me \"A\" is the correct answer, because the best practice says \"classic Apache/MySQL/PHP stack: you might be tempted to run all the components in a single container. However, the best practice is to use two or three different containers: one for Apache, one for MySQL, and potentially one for PHP if you are running PHP-FPM.\"","poster":"ParagSanyashiv","comments":[{"timestamp":"1674044580.0","upvote_count":"1","comments":[{"timestamp":"1674044640.0","content":"https://cloud.google.com/architecture/best-practices-for-building-containers","comment_id":"526582","poster":"Blueocean","upvote_count":"1"}],"comment_id":"526579","content":"Agree with Option A.\n https://cloud.google.com/blog/products/containers-kubernetes/7-best-practices-for-building-containers","poster":"Blueocean"}],"upvote_count":"3"}],"timestamp":"2022-01-08 19:06:00","topic":"1","question_text":"You are porting an existing Apache/MySQL/PHP application stack from a single machine to Google\nKubernetes Engine. You need to determine how to containerize the application. Your approach should follow Google-recommended best practices for availability.\nWhat should you do?","answer_ET":"A","choices":{"D":"Package the application in a single container. Use a bash script as an entrypoint to the container, and then spawn each component as a background job.","B":"Package the application in a single container. Use a process management tool to manage each component.","C":"Package each component in a separate container. Use a script to orchestrate the launch of the components.","A":"Package each component in a separate container. Implement readiness and liveness probes."},"isMC":true,"question_id":323},{"id":"nulHmS12SJBVqSMG33fg","question_text":"You are developing an application that will be launched on Compute Engine instances into multiple distinct projects, each corresponding to the environments in your software development process (development, QA, staging, and production). The instances in each project have the same application code but a different configuration. During deployment, each instance should receive the application's configuration based on the environment it serves. You want to minimize the number of steps to configure this flow. What should you do?","answers_community":["B (88%)","13%"],"question_images":[],"question_id":324,"discussion":[{"upvote_count":"1","comments":[{"comment_id":"1250155","timestamp":"1721282220.0","upvote_count":"1","poster":"thewalker","content":"Let's analyze why the other options are less ideal:\n\nA. Startup script using gcloud command: While startup scripts can be used, they require additional code and complexity. They also rely on the project name, which might not be the most reliable way to determine the environment.\nB. Metadata key ‘environment’ in each project: This approach requires configuring the metadata key in each project, which can be tedious and error-prone. It also doesn't provide a centralized way to manage environment information.\nC. Deployment tool on an instance in each project: This approach introduces additional complexity and overhead. It requires deploying and managing a separate deployment tool in each project, which can be challenging to maintain."}],"timestamp":"1721282220.0","comment_id":"1250154","content":"Selected Answer: D\nThe best answer is D. During each instance launch, configure an instance custom-metadata key named ‘environment’ whose value is the environment the instance serves. Use your deployment tool to query the instance metadata, and configure the application based on the ‘environment’ value.\n\nHere's why:\n\nSimplicity and Efficiency: This approach is the most straightforward and efficient. It leverages existing Compute Engine features (custom metadata) and avoids the need for additional scripts or deployment tools.\nCentralized Configuration: Custom metadata is associated with the instance itself, making it a centralized and reliable source of environment information.\nFlexibility: Your deployment tool can easily query the instance metadata during deployment, allowing you to dynamically configure the application based on the environment.","poster":"thewalker"},{"content":"Selected Answer: B\nhttps://cloud.google.com/compute/docs/metadata/setting-custom-metadata#set-custom-project-wide-metadata","comment_id":"1076101","upvote_count":"1","timestamp":"1700553960.0","poster":"wanrltw"},{"poster":"__rajan__","content":"Selected Answer: B\nOption B is correct we usually put this details in Environment variable.","timestamp":"1695189120.0","comment_id":"1011954","upvote_count":"1"},{"upvote_count":"2","content":"Option A, configuring a startup script using the gcloud command to determine the project name, is not a feasible solution because it requires additional steps to be taken during instance launch. Option C, deploying a deployment tool on an instance in each project and using a deployment job to retrieve the appropriate configuration file, is not a feasible solution because it requires additional steps to be taken during instance launch and involves the use of a separate deployment tool. Option D, configuring an instance custom-metadata key named \"environment\" during each instance launch, is not a feasible solution because it requires additional steps to be taken during instance launch.","comments":[{"upvote_count":"2","poster":"omermahgoub","comment_id":"767611","content":"Answer is B\nYou can configure a metadata key named \"environment\" in each project, with a value corresponding to the environment it serves (development, QA, staging, or production). Then, you can use your deployment tool to query the instance metadata and configure the application based on the \"environment\" value. This allows you to minimize the number of steps to configure the flow, as you only need to set the \"environment\" value in each project and use your deployment tool to query the metadata.","timestamp":"1673007120.0"}],"poster":"omermahgoub","comment_id":"767610","timestamp":"1673007120.0"},{"upvote_count":"1","poster":"zellck","timestamp":"1671720000.0","comment_id":"753389","content":"Selected Answer: B\nB is the answer.\n\nhttps://cloud.google.com/compute/docs/metadata/setting-custom-metadata#set-custom"},{"comments":[{"content":"https://cloud.google.com/compute/docs/metadata/setting-custom-metadata#set-custom","timestamp":"1668503520.0","comment_id":"718629","upvote_count":"1","poster":"TNT87","comments":[{"upvote_count":"1","poster":"[Removed]","timestamp":"1668653580.0","content":"Did you take the exam?","comment_id":"720152"}]}],"timestamp":"1668503160.0","poster":"TNT87","upvote_count":"1","content":"https://cloud.google.com/compute/docs/metadata/querying-metadata","comment_id":"718624"},{"timestamp":"1660975080.0","poster":"tomato123","content":"Selected Answer: B\nB is correct","comment_id":"649256","upvote_count":"2"},{"content":"Selected Answer: B\nVote B","poster":"nqthien041292","comment_id":"593494","timestamp":"1651116240.0","upvote_count":"2"},{"timestamp":"1649496840.0","comment_id":"583228","content":"Answer should be B","poster":"jitu028","upvote_count":"2"},{"upvote_count":"3","timestamp":"1646045700.0","comment_id":"557988","poster":"KillerGoogle","content":"D, \n'environment' is not in one of the default key\nhttps://cloud.google.com/compute/docs/metadata/default-metadata-values"},{"timestamp":"1645792080.0","poster":"GCPCloudArchitectUser","comment_id":"555950","upvote_count":"3","content":"For Answer D : \nQuestion says minimize steps and adding metadata to each instance seems longer route ?"},{"timestamp":"1641723840.0","content":"I vote B","comment_id":"520106","poster":"scaenruy","upvote_count":"4"}],"url":"https://www.examtopics.com/discussions/google/view/69737-exam-professional-cloud-developer-topic-1-question-86/","isMC":true,"topic":"1","choices":{"B":"In each project, configure a metadata key ג€environmentג€ whose value is the environment it serves. Use your deployment tool to query the instance metadata and configure the application based on the ג€environmentג€ value.","A":"When creating your instances, configure a startup script using the gcloud command to determine the project name that indicates the correct environment.","D":"During each instance launch, configure an instance custom-metadata key named ג€environmentג€ whose value is the environment the instance serves. Use your deployment tool to query the instance metadata, and configure the application based on the ג€environmentג€ value.","C":"Deploy your chosen deployment tool on an instance in each project. Use a deployment job to retrieve the appropriate configuration file from your version control system, and apply the configuration when deploying the application on each instance."},"answer_images":[],"answer_ET":"B","unix_timestamp":1641723840,"exam_id":7,"answer_description":"","answer":"B","timestamp":"2022-01-09 11:24:00"},{"id":"oorkbjS2OTIfQR9bcMcv","timestamp":"2022-01-09 11:23:00","exam_id":7,"question_text":"You are developing an ecommerce application that stores customer, order, and inventory data as relational tables inside Cloud Spanner. During a recent load test, you discover that Spanner performance is not scaling linearly as expected. Which of the following is the cause?","answer_images":[],"answer":"C","discussion":[{"comment_id":"531522","upvote_count":"8","poster":"gfr892","timestamp":"1643050920.0","content":"C is correct https://cloud.google.com/spanner/docs/schema-and-data-model#choosing_a_primary_key"},{"poster":"thewalker","upvote_count":"1","content":"Selected Answer: C\nThe most likely cause of the performance issue is C. The use of Version 1 UUIDs as primary keys that increase monotonically. Here's why:\n\nVersion 1 UUIDs and Monotonicity: Version 1 UUIDs are generated based on timestamps and MAC addresses. When used as primary keys, they can lead to performance issues in Cloud Spanner due to their non-monotonic nature. As new UUIDs are generated, they are not guaranteed to be in a sequential order, which can cause fragmentation in the underlying storage and lead to slower queries.","comments":[{"comment_id":"1250158","poster":"thewalker","content":"Let's analyze why the other options are less likely:\n\nA. The use of 64-bit numeric types for 32-bit numbers: While using larger data types than necessary can impact storage space, it's unlikely to significantly affect performance in a way that would cause non-linear scaling.\nB. The use of the STRING data type for arbitrary-precision values: Using the STRING data type for numeric values can impact performance, but it's not the primary cause of non-linear scaling. Cloud Spanner is optimized for numeric data types.\nD. The use of LIKE instead of STARTS_WITH keyword for parameterized SQL queries: While using LIKE can be less efficient than STARTS_WITH for certain queries, it's unlikely to cause a significant performance bottleneck that would prevent linear scaling.","timestamp":"1721282640.0","upvote_count":"1"}],"comment_id":"1250157","timestamp":"1721282640.0"},{"comment_id":"1168553","timestamp":"1709873580.0","content":"Selected Answer: C\nC. The use of Version 1 UUIDs as primary keys that increase monotonically.\n\nWhen designing schemas for Cloud Spanner, it is important to consider how the choice of primary keys can impact performance, especially under heavy load. Cloud Spanner splits data among servers based on the primary key values, so if the keys are monotonically increasing, as is the case with Version 1 UUIDs, new inserts are constantly added to the end of the table. This can create hotspots, where a single node receives a disproportionate amount of read and write requests, leading to performance bottlenecks and preventing linear scaling.","poster":"santoshchauhan","upvote_count":"1"},{"comment_id":"1011957","poster":"__rajan__","upvote_count":"1","content":"Selected Answer: C\nC is the best option.","timestamp":"1695189360.0"},{"comment_id":"767605","timestamp":"1673006880.0","upvote_count":"2","poster":"omermahgoub","content":"In Cloud Spanner, the use of Version 1 UUIDs as primary keys that increase monotonically can cause performance issues because they are not evenly distributed. This can lead to hot regions, where a disproportionate number of requests are sent to a specific node or range of nodes, causing those nodes to become overloaded and leading to decreased performance. To improve performance, you should consider using primary keys that are more evenly distributed, such as hash-based keys or random integers.","comments":[{"poster":"omermahgoub","upvote_count":"1","comment_id":"767606","content":"A, the use of 64-bit numeric types for 32-bit numbers, is not likely to cause performance issues in Cloud Spanner.\n\nB, the use of the STRING data type for arbitrary-precision values, is not likely to cause performance issues in Cloud Spanner.\n\nD, the use of LIKE instead of STARTS_WITH keyword for parameterized SQL queries, is not likely to cause performance issues in Cloud Spanner.","timestamp":"1673006940.0"}]},{"timestamp":"1671719820.0","poster":"zellck","comment_id":"753388","upvote_count":"1","content":"Selected Answer: C\nC is the answer.\n\nhttps://cloud.google.com/spanner/docs/schema-design#primary-key-prevent-hotspots\nSchema design best practice #1: Do not choose a column whose value monotonically increases or decreases as the first key part for a high write rate table."},{"comment_id":"718619","content":"https://cloud.google.com/spanner/docs/schema-design#uuid_primary_key\nAns C","upvote_count":"1","poster":"TNT87","timestamp":"1668502800.0"},{"poster":"tomato123","upvote_count":"2","comment_id":"649257","timestamp":"1660975080.0","content":"Selected Answer: C\nC is correct"},{"poster":"brewpike","content":"C - Version 1 is not recommended.","timestamp":"1653055920.0","comment_id":"604477","upvote_count":"2"},{"comment_id":"579973","timestamp":"1648920840.0","poster":"morenocasado","content":"Selected Answer: C\nCommunity choice is C","upvote_count":"2"},{"poster":"scaenruy","upvote_count":"3","content":"I vote C","timestamp":"1641723780.0","comment_id":"520105"}],"answers_community":["C (100%)"],"question_id":325,"isMC":true,"topic":"1","unix_timestamp":1641723780,"answer_description":"","choices":{"A":"The use of 64-bit numeric types for 32-bit numbers.","C":"The use of Version 1 UUIDs as primary keys that increase monotonically.","D":"The use of LIKE instead of STARTS_WITH keyword for parameterized SQL queries.","B":"The use of the STRING data type for arbitrary-precision values."},"answer_ET":"C","url":"https://www.examtopics.com/discussions/google/view/69736-exam-professional-cloud-developer-topic-1-question-87/","question_images":[]}],"exam":{"isMCOnly":false,"isImplemented":true,"lastUpdated":"11 Apr 2025","provider":"Google","name":"Professional Cloud Developer","isBeta":false,"numberOfQuestions":338,"id":7},"currentPage":65},"__N_SSP":true}